import "System.spap"
import System.Algorithm.*
import System.Console.*
DEBUG_ANSI_COLOR_IN_OUTPUT=0

/////////////////////////////
//various specialized hashes
class CUniqueIDProvider(TTraits)
	traits=TTraits()
	int[] a
	iptr n
	auto clear()
		this.a=int[].NULL
		this.n=0L
	auto _grow_to(iptr sz)
		auto a2=new int[sz?sz*2:8]
		auto a=this.a
		auto mask=a2.n-1
		for i=0:sz-1
			id=a[i]
			if !id:continue
			slot=-1L
			b=traits.getHash(id)
			b&=mask
			delta=1L
			for(;;)
				//Write('.')
				if !a2[b]:
					slot=b
					break
				b+=delta++
				b&=mask
			a2[slot]=id
		this.a=a2
	auto _find(const CREATE_NEW,traits.TKey key)
		auto a=this.a
		auto grown=0
		auto sz=(a?a.n:0)
		if !CREATE_NEW:
			if !sz:return -1
		else
			if !sz:
				_grow_to(sz)
				a=this.a
				sz=(a?a.n:0)
				grown=1
		for(;;)
			slot=-1L
			h=iptr(traits.computeHash(key))
			mask=sz-1
			b=(iptr(h)&mask)
			delta=1L
			for(;;)
				//Write('#')
				pi=a[b]
				if !pi:
					slot=b
					break
				if traits.isKeyEqual(pi,key):
					//found
					return pi
				b+=delta++
				b&=mask
			if !CREATE_NEW:
				return -1
			if !grown&&(this.n*4+1>=sz*3||sz-this.n<sz>>2):
				_grow_to(sz)
				a=this.a
				sz=(a?a.n:0)
				grown=1
				continue
			break
		__rc_barrier()
		this.a[slot]=traits.createNew(key,h)
		this.n++
		return this.a[slot]

//note: this is NOT memory efficient!
//linked list of sorted pair arrays... slow lookup
//simple abandoned hashes + freelist
//and the freelist could be put in the same array...
//it's too much, better do an int-heap "mode" or something
CSharedMemberHash=new int[int2]

/////////////////////////////
g_bit_size=32
inline bitSize(){return g_bit_size}

//////////////////////////////////////
//global object id
//g_oid_counter=0
//inline int OID()
//	return ++g_oid_counter

//////////////////////////////////////
//symbol table
struct TSymbol
	iptr p_name,n
	iptr hash
	//int oid
	int user_slot

class TTraitSymbol
	TKey=string
	inline getHash(int id)
		return g_symbols[id].hash
	inline computeHash(string key)
		return iptr(key.__hash__())
	inline isKeyEqual(int id,string key)
		//could do: __optimize__ rule for this
		//return getIdString(id)==key
		sym=g_symbols[id]
		return sym.n==key.n&&__basic_api.memcmp(__pointer(g_strings.d+sym.p_name),__pointer(key.d),sym.n)==0
	inline createNew(string key,iptr hash)
		p=g_strings.n
		n=key.n
		//Writeln(g_strings.n,' ',g_strings.destructor_nbound_or_slice_reference)
		g_strings.push(key)
		ret=int(g_symbols.n)
		g_symbols.push(TSymbol(){'hash':hash,'p_name':p,"n":n})
		return ret

g_strings=new string
g_symbols=[TSymbol()]
g_id_provider=new CUniqueIDProvider(TTraitSymbol)

inline getid(string s)
	return int(g_id_provider._find(1,s))

auto catid(int id0,int id1)
	return getid(getIdString(id0)+getIdString(id1))

auto gettempid(int id_name)
	ret=int(g_symbols.n)
	n0=g_strings.n
	g_strings.push('$')
	if id_name:
		g_strings.push(new(getIdString(id_name)))
	g_symbols.push(TSymbol(){'p_name':n0,"n":int(g_strings.n)-n0})
	return ret

if Platform.BUILD=="debug"
	g_id_errored=0
auto getIdString(int id)
	if Platform.BUILD=="debug"
		if u32(id)>u32(g_symbols.n):
			g_id_errored=1
			//assert(0)
			return "<invalid>"
	sym=g_symbols[id]
	return g_strings[sym.p_name:sym.p_name+sym.n-1]

inline isTempId(int id)
	return id&&g_strings[g_symbols[id].p_name]=='$'

//////////////////////////////////////
//const table
CTYPE_INT=0
CTYPE_UINT=0x10
CTYPE_FLOAT=0x20
CTYPE_SPECIAL=0x30
CTYPE_POINTER=CTYPE_SPECIAL+0
CTYPE_TYPED_NULL=CTYPE_SPECIAL+1
CTYPE_MASK=0x30
CTYPE_COUNT=CTYPE_TYPED_NULL+1
CTYPE_INVALID=-1
struct TConstValue
	i64 val_bin
	int type
	//int oid
	inline operator==(TConstValue b)
		return this.val_bin==b.val_bin&&this.type==b.type
	inline operator!=(TConstValue b)
		return this.val_bin!=b.val_bin||this.type!=b.type
inline const_type(int t,int bsize)
	return t|((bsize>>3)-1)

class TTraitConstValue
	TKey=TConstValue
	inline getHash(int id)
		key=g_const_values[id]
		return (iptr(key.val_bin))^iptr(key.val_bin>>32)^iptr(key.type)
	inline computeHash(TConstValue key)
		return (iptr(key.val_bin))^iptr(key.val_bin>>32)^iptr(key.type)
	inline isKeyEqual(int id,TConstValue key)
		//could do: __optimize__ rule for this
		key0=g_const_values[id]
		return key0.val_bin==key.val_bin&&key0.type==key.type
	inline createNew(TConstValue key,iptr hash)
		key2=key
		//key2.oid=OID()
		ret=int(g_const_values.n)
		g_const_values.push(key2)
		return ret

g_const_values=[TConstValue()]
g_const_provider=new CUniqueIDProvider(TTraitConstValue)

inline getid_const(int t,i64 val)
	return int(g_const_provider._find(1,TConstValue(){'val_bin':val,'type':t}))

inline ctNumber(int cid)
	return g_const_values[cid]

inline getBitMask(int n_bits)
	if n_bits==64:return -1LL
	return (i64(1)<<n_bits)-1

auto isConstZero(TConstValue val)
	if val.type==CTYPE_TYPED_NULL:return 1
	n_bits=((val.type&~CTYPE_MASK)+1)*8
	if val.type==CTYPE_POINTER:
		n_bits=Util.bitSize()
	else if (val.type&CTYPE_MASK)==CTYPE_FLOAT:
		n_bits--
	return !(val.val_bin&getBitMask(n_bits))

auto isConstNegOne(TConstValue val)
	if val.type==CTYPE_TYPED_NULL||val.type==CTYPE_POINTER:return 0
	n_bits=((val.type&~CTYPE_MASK)+1)*8
	if (val.type&CTYPE_MASK)==CTYPE_FLOAT:
		if val.type==const_type(CTYPE_FLOAT,32):return int(val.val_bin)==0xbf800000
		assert(val.type==const_type(CTYPE_FLOAT,64))
		return val.val_bin==__double_as_longlong(-1.0)
	return !(~val.val_bin&getBitMask(n_bits))

auto isConstOne(TConstValue val)
	if val.type==CTYPE_TYPED_NULL||val.type==CTYPE_POINTER:return 0
	n_bits=((val.type&~CTYPE_MASK)+1)*8
	if (val.type&CTYPE_MASK)==CTYPE_FLOAT:
		if val.type==const_type(CTYPE_FLOAT,32):return int(val.val_bin)==0x3f800000
		assert(val.type==const_type(CTYPE_FLOAT,64))
		return val.val_bin==__double_as_longlong(1.0)
	return (val.val_bin&getBitMask(n_bits))==i64(1)

//////////////////////////////////////
//error management
ETYPE_ERROR=0
ETYPE_WARNING=1
ETYPE_NOTE=2
ETYPE_LOW_LEVEL_ERROR=3
struct TErrorRecord
	int type
	int epos0,epos1
	int id_estr
g_errors=new TErrorRecord[]

struct TSourceFile
	int id_fn
	iptr n0,sz
	int[] lines
g_files=new TSourceFile[]
g_feed=new u8[]
auto loadSourceFile(int id_fn)
	if !g_feed.n:g_feed.push(u8(0))
	n0=g_feed.n
	fn=getIdString(id_fn)
	src=System.IO.ReadAllText(fn)
	if !src:return -1L
	g_feed.push(src[0:].ConvertToAsBinary(u8))
	g_feed.push(u8(0))
	g_feed.push(u8(0))//for safety
	g_files.push(TSourceFile(){'id_fn':id_fn,'n0':n0,'sz':src.n})
	return n0
auto getLineInfo(int epos)
	fid=int(g_files.Bisect(function(TSourceFile a){return a.n0<=epos})-1)
	if fid<0:
		//assert(0)
		(fret,lret,cret)=(0,0,0)
	else
		ccnt=int(epos-g_files[fid].n0)
		lines=g_files[fid].lines
		if !lines:
			lines=[0]
			for i=1:g_files[fid].sz-1
				if g_feed[g_files[fid].n0+i-1]==u8('\n'):
					lines.push(int(i))
			g_files[fid].lines=lines
		ln=int(lines.Bisect(function(int a){return a<=ccnt})-1)
		assert(ln>=0)
		(fret,lret,cret)=(g_files[fid].id_fn,ln,ccnt-lines[ln])
	return (fret,lret,cret)

inline error(int type,iptr epos0,iptr epos1,string serr)
	g_errors.push(TErrorRecord(){'type':type,'epos0':int(epos0),'epos1':int(epos1),'id_estr':getid(serr)})
	if Platform.BUILD=="debug":
		(id_fn0,ln0,col0)=getLineInfo(int(epos0))
		(id_fn1,ln1,col1)=getLineInfo(int(epos1))
		assert(id_fn0==id_fn1)
		if ln0==ln1:
			Writeln(getIdString(id_fn0),':',ln0+1,',',col0+1,'-',col1+1,': ',serr)
		else
			Writeln(getIdString(id_fn0),':',ln0+1,',',col0+1,'-',ln1+1,',',col1+1,': ',serr)

inline cite_raw(iptr epos0,iptr epos1)
	assert(epos1>0)
	return g_feed[epos0:epos1-1].ConvertToAsBinary(char)

////////////////////////////
g_enable_timing=0
g_enable_dump=0
timers=new i64[]
timer_names=new string[]
auto tnew(string s)
	timers.push(0LL)
	timer_names.push(s)
	return int(timer_names.n)-1
inline tbegin(int id)
	if g_enable_timing:timers[id]-=System.Time.tick64()
inline tend(int id)
	if g_enable_timing:timers[id]+=System.Time.tick64()
auto tprint()
	if g_enable_timing:
		foreach sname,I in timer_names
			System.IO.stderr().Write(FormatAsText(sname,'=',string(System.Time.TicksToSeconds(timers[I])*1000.,2),'ms\n'))

g_is_console=-1
g_c_id_allowed=[
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//0
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//1
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//2
u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//3
u8(0),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),//4
u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(1),//5
u8(0),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),//6
u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(0),//7
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//8
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//9
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//10
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//11
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//12
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//13
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//14
u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0)
];

auto FormatCCode(string feed)
	sret=new string
	indent=0
	nbra=0
	in_str=0
	in_slash=0
	auto nextline()
		sret.push('\n')
		for j=0:indent-1
			sret.push('  ')
	foreach ch,I in feed
		if in_str:
			sret.push(char(ch))
			if !in_slash:
				if ch=='\\':
					in_slash=1
				if int(u8(ch))==in_str:
					in_str=0
			else
				in_slash=0
		else
			if ch=='"'||ch=='\'':
				in_str=int(ch)
			if ch=='('||ch=='[':
				nbra++
			if ch==']'||ch==')':
				nbra--
			if ch=='}':
				if sret.n&&sret.back()==' ':sret.pop()
				if sret.n&&sret.back()==' ':sret.pop()
			sret.push(char(ch))
			if ch=='{':
				indent++
				nextline()
			else if ch=='}':
				indent--
				if I<feed.n-2&&feed[I+1]==';':
					//nothing
				else
					nextline()
			else if ch==';'&&!nbra:
				nextline()
	return sret

auto toBase32(int a)
	return formatNumber(a,{base:32})
