//coulddo: whether s7rc is necessary
import "system.jc"
import "ctobj.jc"
import "util.jc"
import System.Algorithm.*
import System.Console.*
import System.Math.*
import Util.*
import Ctobj.*

ENABLE_FEM_DSL=1
ENABLE_GVN=1
ENABLE_DEADELIM=1
ENABLE_STACK_ALLOCS=1
DEBUG_MONITOR_REACH=0
DEBUG_REACH_LOG=0
DEBUG_EVAL_LOG=0
DEBUG_DUMP_FIX_CONSTANT_TYPES=0
DEBUG_DUMP_LAMBDA=0
DEBUG_DUMP_RC=0
DEBUG_DUMP_FLATTEN=0
DEBUG_DUMP_USER_FLAGS=0
DEBUG_DUMP_DERIV=0
DEBUG_TRAP_MEMBER_NOT_FOUND=0
DEBUG_DUMP_SSA=0
DEBUG_DUMP_DEADELIM=0
DEBUG_DUMP_PASSES=(Platform.BUILD=="debug")
DEBUG_DUMP_GVN_DETAILS=0
DEBUG_DUMP_SCCP=0
DEBUG_DUMP_STACKALLOC=0
DEBUG_DUMP_CALL_GRAPH=0
///////////////
DERIV_HAS_REUSABLE_COMPONENTS=0x80000000

fcompiler_callback=function(PExpression,int):TSCCPValue

g_inited_astcore=0
//g_builtin_scope=PCTObject(0)
g_cbobj_reach_fn_only=PCTObject(0)
g_cbobj_expand_inline_oneval=PCTObject(0)
g_cbobj_function_used_oneval=PCTObject(0)
g_cbobj_template_instantiation_oneval=PCTObject(0)
g_cbobj_generated_function_oncgen=PCTObject(0)
g_cbobj_cimport_cgen=PCTObject(0)

fdummy_callback=function(PExpression pecall,int expr_oplevel){return TSCCPValue(){'tid':g_vtid_UNINIT}}

auto citeexpr(PExpression pe)
	epos0=readPool(pe+1)
	epos1=readPool(pe+2)
	if !epos0||!epos1:
		return dumpExpr(pe,__zero(fcolorer_callback))
	if epos1<0:
		paepos=epos0
		for(;;)
			assert(readPool(paepos)==g_tid_TAdvancedEpos)
			epos0=readPool(paepos+1)
			epos1=readPool(paepos+2)
			if epos0&0x80000000:
				paepos=epos1
			else
				break
	return cite_raw(epos0,epos1)

auto errorAtAEPos(int type0,PCTObject paepos0,string serr0)
	type=type0
	paepos=paepos0
	serr=serr0
	if Platform.BUILD=="debug":
		arv=new int[int]
	while paepos:
		if Platform.BUILD=="debug":
			if arv[paepos]:
				Writeln('epos loop! ',paepos)
				assert(0)
			arv[paepos]=1
		assert(readPool(paepos)==g_tid_TAdvancedEpos)
		epos0=readPool(paepos+1)
		epos1=readPool(paepos+2)
		if epos0&0x80000000:
			//it's an inline nested thing
			paepos=(epos0&0x7fffffff)
			if readPool(epos1)==g_tid_TAdvancedEpos:
				//it's the parent-epos combo, show the error
				assert(readPool(epos1+1)>=0)
				error(type,readPool(epos1+1),readPool(epos1+2),serr)
			else
				//it's the parent-inline combo, reset the error but don't show it
				assert(readPool(epos1)==g_tid_TFunction)
				type=ETYPE_NOTE
				serr="within expanded inline function '@1'".Replace(["@1",dumpFunction(epos1)])
		else
			//it's a normal epos
			paepos=0
			error(type,epos0,epos1,serr)

auto errorAtExpr(int type,PExpression pe,string serr)
	if !g_expr_errored[pe]:
		if g_names_resolved:
			//only keep one error at each leaf location
			paepos0=readPool(pe+1)
			assert(readPool(paepos0)==g_tid_TAdvancedEpos)
			if readPool(paepos0+1)<0:
				paepos0=readPool(paepos0+2)
			if g_expr_errored[0x80000000|paepos0]:return
			g_expr_errored[0x80000000|paepos0]=1
			paepos0=readPool(pe+1)
			errorAtAEPos(type,paepos0,serr)
		else
			error(type,readPool(pe+1),readPool(pe+2),serr)
		//generate the template notes
		for(pei=pe;pei;)
			pe_parent=readPool(pei+EXPR_OFS_CALLER)
			if isBuiltin(pei,g_id_function):
				val=getExprValue(pei)
				assert(val.tid==g_vtid_CTVAL)
				pobjfn=val.val
				pobjfn_template=readPool(pobjfn+FUNCTION_OFS_TEMPLATE)
				if pobjfn_template:
					errorAtAEPos(ETYPE_NOTE,readPool(pobjfn+FUNCTION_OFS_TEMPLATE_EPOS0),"during instantiation of '@1'".Replace(["@1",dumpFunction(pobjfn)]))
			pei=pe_parent
		g_expr_errored[pe]=1

auto getDotMember(PExpression pecall,int do_err)
	peobj=readPool(pecall+EXPR_OFS_ARGS+0)
	val_obj=getExprValue(peobj)
	if val_obj.tid==g_vtid_STR||val_obj.tid==g_vtid_CTVAL:
		//constant string or constant function dotted, force into rtvar
		pobj_str_var=PCTObject(0)
		if isExpr(peobj,EFLAG_VARIABLE):
			pobj_str_var=getVariable(peobj)
		else if isExpr(peobj,EFLAG_FCALL):
			pobjfn=getExprFunction(peobj)
			if pobjfn:
				pobj_str_var=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
		if pobj_str_var:
			//dotted const strings / functions become vars
			//if val_obj.tid==g_vtid_STR:
			//	t=getStdObject(pecall,STDTYPE_STRING)
			//else
			t=getValueTypeEx(pecall,val_obj)
			if !t:return 0
			if val_obj.tid==g_vtid_CTVAL&&isFunction(val_obj.val):
				//151022: getValueTypeEx - it doesn't call setFunctionUsed for void functions
				//151022: need setParameterSlotTypes since we need to setvar its params
				setFunctionUsed(val_obj.val)
				setParameterSlotTypes(val_obj.val)
			fstore_eval_core_ex(pecall,pobj_str_var,TSCCPValue(){tid:g_vtid_RTVAR,'val':t},1)
	pe_member_name=readPool(pecall+EXPR_OFS_ARGS+1)
	id_member=getExprValueAs(pe_member_name,g_vtid_STR)
	if !id_member:
		pobj_member=getExprValueAs(pe_member_name,g_vtid_CTVAL)
		if isVariable(pobj_member):
			return pobj_member
		else
			return 0
	t=getExprType(peobj)
	if !t||!tisclass(t):
		val=getExprValue(peobj)
		if val.tid!=g_vtid_UNINIT&&do_err:
			if DEBUG_TRAP_MEMBER_NOT_FOUND:
				Writeln('-------------------');Writeln(dumpExpr(pecall,__zero(fcolorer_callback)))
				Writeln('-------------------');Writeln(dumpExpr(g_pe_top,__zero(fcolorer_callback)))
				assert(0)
			if t:
				errorAtExpr(ETYPE_ERROR,pecall,"only class-typed expressions can have members ('@3'), but '@1' is of type '@2'".Replace(["@1",citeexpr(peobj),"@2",dumpType(t),"@3",getIdString(id_member)]))
			else
				errorAtExpr(ETYPE_ERROR,pecall,"only class-typed expressions can have members ('@2'), but '@1' is of an invalid type".Replace(["@1",citeexpr(peobj),"@2",getIdString(id_member)]))
			//Writeln(">>> "+dumpExpr(pecall,fcolor_abbrv_blocks))
			//Writeln('top='+dumpExpr(g_pe_top,fcolor_reach_eval))
			//assert(0)
			setnop(pecall)
		return 0
	setFunctionUsed(t)//dotted-but-never-newed class
	if !id_member:
		pobj_member=getExprValueAs(pe_member_name,g_vtid_CTVAL)
		//direct dot
		if pobj_member&&isVariable(pobj_member):
			return pobj_member
	pf_class=t
	pobj_member=lookupFunctionVariable(pf_class,id_member)
	if !pobj_member&&do_err:
		errorAtExpr(ETYPE_ERROR,pecall,"class '@1' doesn't have member '@2'".Replace(["@1",dumpType(t),"@2",getIdString(id_member)]))
		//assert(0)
		//assert(id_member!=g_id_operator_bracket)
		if DEBUG_TRAP_MEMBER_NOT_FOUND:
			Writeln('-------------------');Writeln(dumpExpr(pecall,__zero(fcolorer_callback)))
			Writeln('-------------------');Writeln(dumpExpr(g_pe_top,__zero(fcolorer_callback)))
			assert(0)
		return 0
	//cache the result
	//writePool(pe_member_name,EFLAG_CTVAL+pobj_member)
	return pobj_member

inline fstore_eval_core(PExpression pecall,PCTObject pobj_var,PExpression pe_value,int test_return)
	val_new=getExprValue(pe_value)
	return fstore_eval_core_ex(pecall,pobj_var,val_new,test_return)
	
auto fstore_eval_core_ex(PExpression pecall,PCTObject pobj_var,TSCCPValue val_new,int test_return)
	vv=readPoolTyped(pobj_var,TVariable)
	val_old=TSCCPValue()
	val_old.tid=vv.tid
	val_old.val=vv.val
	val_final=mergeValues(pecall,val_old,val_new, pobj_var|0x80000000,pecall)
	if pobj_var&&vv.tid!=g_vtid_UNINIT&&val_final.tid==g_vtid_RTVAR&&tisclass(readPool(pobj_var+VAR_OFS_OWNER)):{
		val_oldx=TSCCPValue()
		val_oldx.tid=vv.tid
		val_oldx.val=vv.val
		auto check_t0=getValueType(val_oldx)
		auto check_t1=getValueType(val_final)
		if check_t0!=check_t1:
			errorAtExpr(ETYPE_WARNING,pecall,"member '@1' has changed type: @2 -> @3".Replace([
				"@1",getIdString(readPool(pobj_var+VAR_OFS_ID)),
				"@2",dumpType(check_t0),
				"@3",dumpType(check_t1)]))
	}
	//Writeln(getIdString(ervar.v.key),' <- ',getIdString(val_old.tid),' || ',getIdString(val_new.tid))
	force_changed=0
	if val_final.tid==g_vtid_CTVAL:
		//but if it's a function
		pobj=val_final.val
		pobjfn=getAsFunction(pobj)
		if pobjfn:
			value_time_new=readPool(pobjfn+FUNCTION_OFS_VALUE_TIME)
			if vv.value_time<value_time_new||val_old.tid!=val_final.tid||val_old.val!=val_final.val:
				vv.value_time=value_time_new
				force_changed=1
			//if val_old.tid==val_final.tid&&val_old.val==val_final.val:
			//	Writeln(getIdString(ervar.v.key),' ',vv.value_time,' ',value_time_new)
			//	if force_changed:
			//		Writeln('force_changed! ',getIdString(ervar.v.key))
	if val_old.tid==val_final.tid&&val_old.val==val_final.val&&!force_changed:
		//it didn't change
		return TSCCPValue(){tid:g_vtid_UNINIT}
	//g_readable_c_code
	if pobj_var:
		//if it's a function, try to set the function's name
		vid=readPool(pobj_var+VAR_OFS_ID)
		if val_final.tid==g_vtid_CTVAL:
			pobj=val_final.val
			pobjfn=getAsFunction(pobj)
			if pobjfn:
				id_name=readPool(pobjfn+FUNCTION_OFS_NAME)
				if !id_name:
					writePool(pobjfn+FUNCTION_OFS_NAME,vid)
	//write back and invalidate all users
	vv.tid=val_final.tid
	vv.val=val_final.val
	writePoolTyped(pobj_var,vv)
	if DEBUG_EVAL_LOG:
		Write('changed - queueeval ',dumpObject(pobj_var),' ',getIdString(val_old.tid),' -> ',getIdString(val_final.tid))
		//if vv.id==getid('length')&&val_final.tid==g_vtid_RTVAR:
		//	assert(0)
		//if pobj_var==1102774:
		//	Writeln('top='+dumpExpr(g_pe_top,fcolor_reach_eval))
		//	assert(0)
		if val_final.tid==g_vtid_CNS:
			Write(' ',dumpConst(Util.g_const_values[val_final.val]))
		else if val_final.tid==g_vtid_STR:
			Write(' ',getIdString(val_final.val))
		else if val_final.tid==g_vtid_CTVAL:
			Write(' ',dumpObject(val_final.val))
		else if val_final.tid==g_vtid_RTVAR:
			Write(' ',dumpType(val_final.val))
		Writeln()
	queueEvalUsers(pobj_var)
	idvar=readPool(pobj_var+VAR_OFS_ID)
	if test_return:
		if idvar==g_id_return:
			pobjfn=getOwningFunction(pecall)
			if pobjfn:
				pvar_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
				if pobj_var==pvar_return:
					queueEvalFunction(pobjfn)
		if idvar==g_id_finalizer&&val_new.tid==g_vtid_CTVAL&&readPool(val_new.val)==g_tid_TFunction:
			pobjfn=getOwningFunction(pecall)
			if tisrealclass(pobjfn):
				setFunctionUsed(val_new.val)
			else
				id_ccnv=getCcnv(pobjfn)
				if id_ccnv==g_id_struct:
					//coulddo: support it
					errorAtExpr(ETYPE_WARNING,pecall,"__done__ is not supported in a struct")
				else
					errorAtExpr(ETYPE_WARNING,pecall,"__done__ is pointless in an ordinary function")
	return TSCCPValue(){'tid':g_vtid_UNINIT}

auto lockValueCheck(PExpression pe,int id_error_message)
	writePool(pe+EXPR_OFS_CALLER,0)
	return call(g_id_assert_ctval,pe,exprstr(id_error_message))

inline getExprNArgs(PExpression pe)
	//we return args number for the expression
	ret=readPool(pe)
	assert((ret&EFLAG_MASK)==EFLAG_FCALL&&!EFLAG_FCALL)
	return ret

auto computeConstIfBranch(PExpression pecall,TSCCPValue val_cond)
	//we return branch arg number for call expression, given cond value
	n_args=getExprNArgs(pecall)
	cns_branch=1
	for i=2:2:n_args-2
		val_i=getExprValue(readPool(pecall+EXPR_OFS_ARGS+i))
		if isValueZero(val_i):
			if isValueZero(val_cond):
				cns_branch=i+1
				break
		else
			if val_cond.tid==val_i.tid&&val_cond.val==val_i.val:
				cns_branch=i+1
				break
	//handle shared case values
	while cns_branch<n_args&&readPool(readPool(pecall+EXPR_OFS_ARGS+cns_branch))==EFLAG_STRING+g_id_case:
		cns_branch+=2
	if cns_branch>=n_args:
		cns_branch=1
	return cns_branch

ftransformer_callback=function(PExpression):PExpression
inline transformCode(PExpression pesrc, ftransformer_callback ftransformer, PExpression[] as_before,PExpression pe_replacement,PExpression[] as_after)
	return transformCodeEx(pesrc, ftransformer, as_before,pe_replacement,as_after, 1)

//inline 
auto replaceExpr(PExpression pesrc, PExpression pe_replacement)
	//return transformCode(pesrc,__zero(ftransformer_callback), PExpression[].NULL,pe_replacement,PExpression[].NULL)
	pecaller=readPool(pesrc+EXPR_OFS_CALLER)
	return sccpQueueReach(insertCallAt(pecaller,pesrc,function(PExpression pe){return pe_replacement}))

auto transformCodeEx(PExpression pesrc, ftransformer_callback ftransformer, PExpression[] as_before,PExpression pe_replacement,PExpression[] as_after, int queue_reach)
	if !ftransformer&&(!as_before||!as_before.n)&&!pe_replacement&&(!as_after||!as_after.n):
		return pesrc
	pecaller=readPool(pesrc+EXPR_OFS_CALLER)
	nargs_caller=readPool(pecaller)&~EFLAG_MASK
	if pesrc<=0:
		arg_id=~pesrc
	else
		arg_id=-2
		for i=-1:nargs_caller-1
			if readPool(pecaller+EXPR_OFS_ARGS+i)==pesrc:
				arg_id=i
				break
		if arg_id<-1:
			assert(0)
			return 0
	assert(u32(arg_id)<u32(nargs_caller)||arg_id==-1)
	/////////////
	pe_block_level=promoteToBlockLevel(pesrc)
	peold=readPool(pecaller+EXPR_OFS_ARGS+arg_id)
	epos0=readPool(peold+1)
	epos1=readPool(peold+2)
	writePool(peold+EXPR_OFS_CALLER,0)
	pe_real_replacement=peold
	pe_transformed=PExpression(0)
	if pe_replacement:
		if ftransformer:
			pe_transformed=ftransformer(pe_real_replacement)
		pe_real_replacement=pe_replacement
	/////////////
	//create the new thing
	need_temp=(pesrc!=pe_block_level&&as_after&&as_after.n&&!isExpr(pe_real_replacement,EFLAG_VARIABLE))
	pv_temp=PCTObject(0)
	pe_block_mid0=PExpression(0)
	if need_temp:
		pf_owner=getOwningFunction(pecaller)
		pv_temp=makevar(pf_owner)
		val=getExprValue(pe_real_replacement)
		writePool(pv_temp+0,val.tid)
		writePool(pv_temp+1,val.val)
		//writePool(pe_real_replacement+1,epos0)
		//writePool(pe_real_replacement+2,epos1)
		fillepos(pe_real_replacement,epos0,epos1)
		pe_block_mid0=call(g_id_store,exprvar(pv_temp),pe_real_replacement)
		writePool(pv_temp+VAR_OFS_DEFINING_STORE,pe_block_mid0)
		pe_real_replacement=exprvar(pv_temp)
		//writePool(pe_real_replacement+1,epos0)
		//writePool(pe_real_replacement+2,epos1)
	else
		pe_block_mid0=0
	/////
	writePool(pe_real_replacement+EXPR_OFS_CALLER,pecaller)
	//writePool(pe_real_replacement+1,epos0)
	//writePool(pe_real_replacement+2,epos1)
	fillepos(pe_real_replacement,epos0,epos1)
	writePool(pecaller+EXPR_OFS_ARGS+arg_id,pe_real_replacement)
	if queue_reach:
		sccpQueueReach(pe_real_replacement)
	/////
	pe_fnblock=exprvar(g_symbols[g_id_block].user_slot)
	pe_new_block=poolCode(TExpression(){'flags_n_args':EFLAG_FCALL})
	g_ctobject_pool.push(pe_fnblock)
	if as_before:g_ctobject_pool.push(as_before)
	if pe_transformed:
		sccpQueueReach(pe_transformed)//avoid assertion failure
		g_ctobject_pool.push(pe_transformed)
	if pe_block_mid0:g_ctobject_pool.push(pe_block_mid0)
	if pe_block_level==pesrc:
		g_ctobject_pool.push(pe_real_replacement)
	if as_after:g_ctobject_pool.push(as_after)
	if pe_block_level!=pesrc:
		g_ctobject_pool.push(pe_block_level)
	else
		pe_block_level=pe_real_replacement
	pe_block_level_caller=readPool(pe_block_level+EXPR_OFS_CALLER)
	n_args=(g_ctobject_pool.n-(pe_new_block+EXPR_OFS_ARGS))
	if n_args==1:
		pe_new_block=readPool(pe_new_block+EXPR_OFS_ARGS+0)
	else
		writePool(pe_new_block,int(EFLAG_FCALL+n_args))
	//replace pe_block_level with pe_new_block
	pe_new_block=insertCallAt(pe_block_level_caller,pe_block_level,function(PExpression pe){return pe_new_block})
	if queue_reach:
		sccpQueueReach(pe_new_block)
	for i=0:n_args-1
		writePool(readPool(pe_new_block+EXPR_OFS_ARGS+i)+EXPR_OFS_CALLER,pe_new_block)
	//Writeln("TT>> "+dumpExpr(pe_new_block,function(PExpression pe_test){
	//	if pe_test==pe_block_level||pe_test==pesrc:return 9;
	//	if pe_test==pecaller:return 11;
	//	return fcolor_reach_eval(pe_test)
	//}))
	return pe_new_block

auto queueCodeGen(PCTObject pobjfn)
	if !(getFFlag(pobjfn)&FFLAG_CGEN_QUEUED):
		assert(getCcnv(pobjfn)!=g_id_inline&&getCcnv(pobjfn)!=g_id_inline_loopbody)
		setFFlag(pobjfn,FFLAG_CGEN_QUEUED)
		g_gencode_queue.push(readPool(pobjfn+FUNCTION_OFS_PEDECL))
		if Platform.BUILD=="debug":
			if !(!isExpr(readPool(pobjfn+FUNCTION_OFS_CODE),EFLAG_FCALL)||testUserFlag(readPool(pobjfn+FUNCTION_OFS_CODE),QUEUE_FLAG_REACH)):
				if !(getFFlag(pobjfn)&FFLAG_IMPORTED):
					Writeln('queueing unreached function: ',dumpFunction(pobjfn))
					assert(0)
		//assert(!isExpr(readPool(pobjfn+FUNCTION_OFS_PEDECL),EFLAG_STRING))
		//Writeln('queueCodeGen: ',dumpObject(pobjfn))

auto setParameterSlotTypes(PCTObject pobjfn)
	pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
	n_funcargs=((readPool(pe_decl)&~EFLAG_MASK)-2)>>1
	p_param_values=readPool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
	for i=0:n_funcargs-1
		t=getExprValueAs(readPool(pe_decl+EXPR_OFS_ARGS+1+i*2),g_vtid_CTVAL)
		if t:
			writePool(p_param_values+i*3+0,g_vtid_RTVAR)
			writePool(p_param_values+i*3+1,t)
			pe_ldparam=readPool(p_param_values+i*3+2)
			if pe_ldparam:
				sccpQueueEval(pe_ldparam)

auto fcolor_user_flags(PExpression pe)
	val=getExprValue(pe)
	if val.tid==g_vtid_UNINIT:
		if !testUserFlag(pe,QUEUE_FLAG_REACH):
			if isBuiltin(pe,g_id_block):
				return -2
			else
				return -1
	if isBuiltin(pe,g_id_function):
		return -2
	c=7
	if isExpr(pe,EFLAG_VARIABLE):
		pobj_var=getVariable(pe)
		if pobj_var:
			if testUserFlag(pobj_var,1):
				c-=1
			if testUserFlag(pobj_var,2):
				c-=2
			return c
	if testUserFlag(pe,1):
		c-=1
	if testUserFlag(pe,2):
		c-=2
	return c

auto getLIObjectStringPair(PCTObject pobj)
	id_str0=0
	id_str1=0
	key=int2(0x80000000+pobj,0x80000001)
	if readPool(pobj)==g_tid_TFunction:
		id_str_stored=readEPosHash(key)
		if !id_str_stored:
			id_str_stored=getid(dumpFunction(pobj)+"\n")
			writeEPosHash(key,id_str_stored)
		id_str0=id_str_stored
	else
		assert(readPool(pobj)==g_tid_TAdvancedEpos)
		epos0=readPool(pobj+1)
		assert(epos0>0)
		(id_fn0,ln0,col0)=getLineInfo(epos0)
		id_str0=id_fn0
		id_str_stored=readEPosHash(key)
		if !id_str_stored:
			epos1=readPool(pobj+2)
			(id_fn1,ln1,col1)=getLineInfo(epos1)
			//Writeln(getIdString(id_fn0),' ',getIdString(id_fn1),' ',epos0,' ',epos1)
			assert(id_fn0==id_fn1)
			if ln0==ln1:
				id_str_stored=getid(FormatAsText(':',ln0+1,',',col0+1,'-',col1+1,': '))
			else
				id_str_stored=getid(FormatAsText(':',ln0+1,',',col0+1,'-',ln1+1,',',col1+1,': '))
			writeEPosHash(key,id_str_stored)
		id_str1=id_str_stored
	return int2(id_str0,id_str1)

auto genLIString(string buf,int id)
	if !readEPosHash(int2(0x80000000+id,0x80000002)):
		g_debug_file_info_buffer.push('static const char s7_Df')
		g_debug_file_info_buffer.push(toBase32(id))
		g_debug_file_info_buffer.push('[]="')
		g_debug_file_info_buffer.push(genString(getIdString(id)))
		g_debug_file_info_buffer.push('";\n')
		writeEPosHash(int2(0x80000000+id,0x80000002),1)
	buf.push("s7_Df")
	buf.push(toBase32(id))

if Platform.BUILD=="debug":
	g_li_arv=new int[int]
auto getLineInfoId(PCTObject paepos)
	if Platform.BUILD=="debug":
		if g_li_arv[paepos]:
			Writeln('epos loop! ',paepos)
			assert(0)
		g_li_arv[paepos]=1
	key=int2(0x80000000+paepos,0x80000000)
	lid=readEPosHash(key)
	if !lid:
		assert(readPool(paepos)==g_tid_TAdvancedEpos)
		epos0=readPool(paepos+1)
		lid_next=0
		if epos0&0x80000000:
			lid_next=getLineInfoId(epos0&0x7fffffff)
			id_strs=getLIObjectStringPair(readPool(paepos+2))
		else
			id_strs=getLIObjectStringPair(paepos)
		if id_strs.y:
			g_debug_line_info_buffer.push('{')
			genLIString(g_debug_line_info_buffer,id_strs.y)
			if lid_next:
				g_debug_line_info_buffer.push(',s7_DL+')
				g_debug_line_info_buffer.push(string(lid_next-1))
			g_debug_line_info_buffer.push('},\n')
			lid_next=++g_current_line_info_id
		g_debug_line_info_buffer.push('{')
		genLIString(g_debug_line_info_buffer,id_strs.x)
		if lid_next:
			g_debug_line_info_buffer.push(',s7_DL+')
			g_debug_line_info_buffer.push(string(lid_next-1))
		g_debug_line_info_buffer.push('},\n')
		lid=++g_current_line_info_id
		writeEPosHash(key,lid)
	return lid
	
auto genLineInfoExpr(PExpression pecall)
	//we set a leaf to the spapAddCallStack structure
	//nested epos should form a pre-built tree, print epos and print func ops, addcallstack chains a print fun
	//just "print string", could share pointers
	paepos0=readPool(pecall+1)
	if !paepos0:
		g_code_buffer.push('0')
		return
	if Platform.BUILD=="debug":
		g_li_arv=new int[int]
	lid=getLineInfoId(paepos0)
	g_code_buffer.push("s7_Dd.li=s7_DL+")
	SWrite(g_code_buffer,lid-1)

inline parameterTypeCheck(PCTObject t_expected,PCTObject t)
	if t_expected==t:return 1
	if tisbuiltin(t_expected)&&tisbuiltin(t):
		ct_expected=readPool(t_expected+1)
		ct=readPool(t+1)
		if ct_expected==const_type(CTYPE_INT,Util.bitSize())&&ct==const_type(CTYPE_INT,32):
			//iptr always matches i32
			return 1
	return 0

auto getReturnLabel(PCTObject pf)
	id_ret=readPool(pf+FUNCTION_OFS_RETURN_LABEL_CACHE)
	if !id_ret:
		id_ret=catid(g_id_return_,getid(toBase32(pf)))
		writePool(pf+FUNCTION_OFS_RETURN_LABEL_CACHE,id_ret)
	return id_ret

inline isReturnJump(PExpression pe)
	if isBuiltin(pe,g_id_blockex):
		flags_id=readPool(readPool(pe+EXPR_OFS_ARGS+0))
		if (flags_id&EFLAG_MASK)==EFLAG_STRING:
			return isTempId(flags_id-EFLAG_STRING)
		else
			return 0
	else
		return 0

auto makeAdvEpos(int epos0,int epos1)
	assert(epos1>0)
	epos_new=readEPosHash(int2(epos0,epos1))
	if !epos_new:
		epos_new=poolObject(TAdvancedEpos(){'epos0':epos0,'epos1':epos1})
		writeEPosHash(int2(epos0,epos1),epos_new)
	return epos_new

auto expr_C_const(string sdata)
	vid=int(g_ctobject_pool.n)
	s_c_code=new string
	s_c_code.push("@raw:long long s7_CD")
	s_c_code.push(toBase32(vid))
	s_c_code.push("[]={")
	nalg=(sdata.n&-8)
	buf64=sdata[:nalg-1].ConvertToAsBinary(i64)
	for i=0:buf64.n-1
		if s_c_code.back()!='{':
			s_c_code.push(',')
		s_c_code.push(string(buf64[i]))
		s_c_code.push('LL')
	tail=0LL
	for i=nalg:sdata.n-1
		tail|=i64(u8(sdata[i]))<<(int(i-nalg)*8)
	if s_c_code.back()!='{':
		s_c_code.push(',')
	s_c_code.push(string(tail))
	s_c_code.push('LL')
	s_c_code.push('};')
	return call(g_id_C_wrap,exprctval(getBuiltinType(CTYPE_POINTER)),exprstr(getid(s_c_code)),expriptr(vid))

g_varifyDblMembers_called=new int[PCTObject]
auto varifyDblMembers(PExpression pecall,PCTObject t)
	if !t||!tisclass(t):return
	if g_varifyDblMembers_called[t]:return
	g_varifyDblMembers_called[t]=1
	if DEBUG_DUMP_DERIV:
		Writeln('varifyDblMembers: ',dumpType(t))
	p_members=readPool(t+FUNCTION_OFS_PMEMBER_LIST)
	n_members=readPool(t+FUNCTION_OFS_NMEMBER_LIST)
	for i=0:n_members-1
		id_member=readPool(p_members+i)
		if id_member==g_id_this||id_member==g_id_return:continue
		pobj_member=lookupFunctionVariable(t,id_member)
		t_i=getVariableType(pobj_member)
		//Writeln(getIdString(readPool(pobj_member)),' ',dumpType(t_i),' ',getIdString(id_member))
		if readPool(pobj_member)==g_vtid_CNS:
			if tisctype(t_i,CTYPE_FLOAT):
				if DEBUG_DUMP_DERIV:
					Writeln('varify: ',dumpType(t_i),' ',getIdString(id_member))
				fstore_eval_core_ex(pecall,pobj_member,TSCCPValue(){'tid':g_vtid_RTVAR,'val':t_i},0)
		else
			varifyDblMembers(pecall,t_i)

g_json_pool=new int[][int]
		
g_id_error_class_cannot_change=getid("expression '@1' is used as a class and has to hold a constant value")
g_id_error_template_cannot_change=getid("expression '@1' is used as a template function and has to hold a constant value")
g_id_error_inline_cannot_change=getid("expression '@1' is used as an inline function and has to hold a constant value")
g_id_error_const_cannot_change=getid("expression '@1' is used as a template parameter and has to hold a constant value")
g_id_error_int_cannot_change=getid("expression '@1' is used as a constant integer and has to hold a constant value")

g_id_symderiv=getid("symbolicDerivative")
g_id_option_exclusive=getid("<exclusive>")
g_id_ANM_decompose=getid("__ANM_decompose")
g_id_make_polynomial=getid("__make_polynomial")
g_id_deriv=getid("_deriv")
//g_id_deriv_prefix=getid("_deriv_")
g_id_deriv_callback=getid("_deriv_callback")
g_id_deriv_pulling_masks=getid("_deriv_pulling_masks")
g_id_deriv_reusable_components=getid("_deriv_reusable_components")
g_id__=getid("_")
g_id_powd=getid("powd")
g_id_gvn_ctunique=getid("<gvn_ctunique>")
g_id_assert_type=getid("__assert_type")
g_fakectval_gvn_cns=0
g_fakectval_gvn_str=0

g_cid_null=getid_const(CTYPE_POINTER,0LL)

auto coreInit()
	if g_inited_astcore:return
	g_inited_astcore=1
	g_fakectval_gvn_cns=int(g_ctobject_pool.n);g_ctobject_pool.push(0)
	g_fakectval_gvn_str=int(g_ctobject_pool.n);g_ctobject_pool.push(0)
	//g_builtin_scope=ONew()
	/////////////////////
	freach_fn_only=function(PExpression pecall,int expr_oplevel){
		sccpQueueReach(readPool(pecall+EXPR_OFS_FUNCTION))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fexpand_inline_oneval=function(PExpression pecall,int expr_oplevel){
		//type check
		//Writeln('fexpand_inline_oneval')
		pobjfn=getExprFunction(pecall)
		//Writeln('expanding: ',dumpFunction(pobjfn))
		n_args=getExprNArgs(pecall)
		n_funcargs=getNumberOfArguments(pobjfn)
		if n_args<n_funcargs:
			sfname=new(getIdString(readPool(pobjfn+FUNCTION_OFS_NAME)))
			//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
			//Writeln("bad inline - "+dumpExpr(pecall,fcolor_abbrv_blocks))
			//assert(0)
			errorAtExpr(ETYPE_ERROR,pecall,"inline function '@1' takes @2 arguments, but only @3 are provided".Replace([
				"@1",sfname,
				"@2",string(n_funcargs),
				"@3",string(n_args)
			]))
			setnop(pecall)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
		pe_param_checks=PExpression[].NULL
		for i=0:n_funcargs-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			pe_typei=readPool(pe_decl+EXPR_OFS_ARGS+i*2+1)
			val_t_expected=getExprValue(pe_typei)
			t_expected=0
			if val_t_expected.tid==g_vtid_CTVAL:
				t_expected=val_t_expected.val
			else if val_t_expected.tid==g_vtid_STR:
				//auto
				continue
			else if val_t_expected.tid==g_vtid_UNINIT:
				t_expected=0
			else
				assert(0)
				continue
			t=getExprType(pe_argi)
			if !t:
				//typed inline parameters *MUST* be typed before expanding
				if (readPool(pe_argi)&EFLAG_MASK)==EFLAG_STRING:
					//wait for the string type
					sccpQueueEval(pecall)
				else
					sccpQueueReach(pe_argi)
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			if !t_expected:
				//wait for the type later
				if !pe_param_checks:
					pe_param_checks=new PExpression[]
				pe_param_checks.push(fillepos(call(g_id_assert_ctval,exprstr(g_id_assert_type),getid("type mismatch at parameter #@3 of @4: '@1' is expected but '@2' provided".Replace(["@1",dumpType(t_expected),"@2",dumpType(t),"@3",string(i),"@4",dumpFunction(pobjfn)])),
					cloneExpr(pe_typei),exprctval(t)),readPool(pe_argi+EXPR_OFS_EPOS),0))
			//Writeln(dumpFunction(pobjfn),' ',i,' ',dumpType(t_expected),' ',dumpType(t))
			if !parameterTypeCheck(t_expected,t):
				errorAtExpr(ETYPE_ERROR,pe_argi,"type mismatch at parameter #@3 of @4: '@1' expected but '@2' provided".Replace(["@1",dumpType(t_expected),"@2",dumpType(t),"@3",string(i),"@4",dumpFunction(pobjfn)]))
				setnop(pecall)
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		//actual expanding
		//fn=readPoolTyped(pobjfn,TFunction)
		pf_owner=getOwningFunction(pecall)
		assert(!!pf_owner)
		var_map=new PCTObject[PCTObject]
		var_map[pobjfn]=pf_owner
		pe_func=readPool(pecall+EXPR_OFS_FUNCTION)
		pe_this=0
		pe_store_this=0
		pe_expanded=cloneExprEx(readPool(pobjfn+FUNCTION_OFS_CODE),var_map,CLONE_WIPE_TO_UNREACHED|CLONE_VARS|CLONE_KEEP_VAR_IDS)
		/////////
		//old epos plus function
		epos_parent=0x80000000+makeAdvEpos(0x80000000+readPool(pecall+1),pobjfn)
		fnest_eposes=function(PExpression pe){
			epos_old=readPool(pe+1)
			assert(epos_old>=0)
			if epos_old:
				//strip previous inline callstacks
				while readPool(epos_old)==g_tid_TAdvancedEpos&&readPool(epos_old+1)<0
					epos_old=readPool(epos_old+2)
				writePool(pe+1,makeAdvEpos(epos_parent,epos_old))
			return 1
		}
		dfsExpr(pe_expanded,fnest_eposes)
		/////////
		if isBuiltin(pe_func,g_id_dot):
			//assert(0)
			//Writeln(">>> "+dumpExpr(pecall,fcolor_abbrv_blocks))
			pe_this=readPool(pe_func+EXPR_OFS_ARGS+0)
			pv_this=rcGetVariableIfExprIsOne(pe_this)
			if !pv_this:
				pv_this=makevar(pf_owner)
				writePool(pv_this+0,g_vtid_RTVAR)
				writePool(pv_this+1,getExprType(pe_this))
				pe_store_this=call(g_id_store,exprvar(pv_this),pe_this)
				writePool(pv_this+VAR_OFS_DEFINING_STORE,pe_store_this)
			pf_class=getOwningFunction(readPool(readPool(pobjfn+FUNCTION_OFS_PEDECL)+EXPR_OFS_CALLER))
			//var_map[pf_class]=~pv_this
			freplace_class_members=function(PExpression pe){
				if isExpr(pe,EFLAG_VARIABLE):
					auto pobj_var=getVariable(pe)
					if readPool(pobj_var+VAR_OFS_OWNER)==pf_class:
						auto idvar=readPool(pobj_var+VAR_OFS_ID)
						assert(!!idvar)
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						//if idvar==getid("f0"):
						//	Writeln(dumpType(pf_class),' ',dumpObject(pf_owner))
						//	Writeln(">>>f0!\n"+dumpExpr(pe_expanded,__zero(fcolorer_callback)))
						//	assert(0)
						if idvar==g_id_this:
							//this
							writePool(pe,EFLAG_VARIABLE+pv_this)
						else if isBuiltin(pecaller,g_id_store)&&pe==readPool(pecaller+EXPR_OFS_ARGS+0):
							//stdot
							pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
							fcreate_stdot=function(PExpression pe_store){
								//return call(g_id_stdot,exprvar(pv_this),exprstr(idvar),readPool(pe_store+EXPR_OFS_ARGS+1))
								return call(g_id_stdot,exprvar(pv_this),exprctval(pobj_var),readPool(pe_store+EXPR_OFS_ARGS+1))
							}
							insertCallAt(pecaller_caller,pecaller,fcreate_stdot)
						else
							//dot
							fcreate_dot=function(PExpression pe_var){
								return call(g_id_dot,exprvar(pv_this),exprctval(pobj_var))
							}
							insertCallAt(pecaller,pe,fcreate_dot)
						return 0
				//else if isBuiltin(pe,g_id_function):
				//	return 0
				return 1
			}
			if pf_class&&tisclass(pf_class):
				dfsExpr(pe_expanded,freplace_class_members)
		pvar_return=var_map[readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)]
		n_args_call=(readPool(pecall)&~EFLAG_MASK)
		prototype_mismatch=0
		//the scoping is fine for inline calls: the inline function itself has to be defined at some ancestor of the current scope
		//we could use wiped code, what we really need is a "scope jumper" to skip the things in-between
		//so it's scope-jumper + pre-resolved parameter exprs
		//bind parameters - ldparam replacement
		//n_funcargs=(nargs_pecode-2)>>1
		pvar_arg_ret=new PCTObject[n_args_call] //shouldn't use gencode: lackof decl
		pv_arguments=PCTObject(0)
		id_return_label=getReturnLabel(pobjfn)
		need_return_scope=0
		fdetect_returns=function(PExpression pe){
			if isBuiltin(pe,g_id_blockex)&&readPool(readPool(pe+EXPR_OFS_ARGS+0))==EFLAG_STRING+id_return_label:
				need_return_scope=1
			return 1
		}
		disable_inline_return=0
		freplace_args=function(PExpression pe_store_i){
			if isBuiltin(pe_store_i,g_id_function):
				if !need_return_scope:
					dfsExpr(pe_store_i,fdetect_returns)
				return 0
			if isBuiltin(pe_store_i,g_id_disable_inline_return):
				disable_inline_return=1
				setnop(pe_store_i)
				return 0
			//if isReturnJump(pe_store_i):
			if isBuiltin(pe_store_i,g_id_blockex)&&readPool(readPool(pe_store_i+EXPR_OFS_ARGS+0))==EFLAG_STRING+id_return_label:
				need_return_scope=1
			if isBuiltin(pe_store_i,g_id_store):
				pe_var_i=readPool(pe_store_i+EXPR_OFS_ARGS+0)
				pe_code_i=readPool(pe_store_i+EXPR_OFS_ARGS+1)
				if isBuiltin(pe_code_i,g_id_ldparam):
					paramid=getExprValueAs(readPool(pe_code_i+EXPR_OFS_ARGS+0),g_vtid_CNS)
					if !(u32(paramid)<u32(n_args_call)):
						prototype_mismatch=1+paramid
						return 0
					pe_param=readPool(pecall+EXPR_OFS_ARGS+paramid)
					//writePool(pe_param+EXPR_OFS_CALLER,0)
					pvar=getVariable(pe_var_i)
					writePool(pvar+VAR_OFS_USER_FLAGS,readPool(pvar+VAR_OFS_USER_FLAGS)&~VAR_FLAG_PARAM)
					assert(!!pvar)
					if pvar_arg_ret[paramid]:
						pe_param=exprvar(pvar_arg_ret[paramid])
					else
						pvar_arg_ret[paramid]=pvar
					//bind the param
					//no premature param reach
					insertCallAt(pe_store_i,pe_code_i,function(PExpression pe){return pe_param})
					//sccpQueueReach()
					return 0
			if isBuiltin(pe_store_i,g_id_cite_param):
				param_id=0
				param_id_provided=0
				if readPool(pe_store_i)==EFLAG_FCALL+1:
					pe_param=readPool(pe_store_i+EXPR_OFS_ARGS+0)
					if isExpr(pe_param,EFLAG_CONST):
						param_id=getExprValueAs(pe_param,g_vtid_CNS)
						param_id_provided=1
					else if isExpr(pe_param,EFLAG_VARIABLE):
						pobj_var_cite_param=getVariable(pe_param)
						for i=0:pvar_arg_ret.n-1
							if pvar_arg_ret[i]==pobj_var_cite_param:
								param_id=int(i)
								param_id_provided=1
								break
				if !param_id_provided:
					id_cite=getid("<invalid citation: you can only cite a parameter variable or a parameter ID>")
				else if u32(param_id)>=u32(n_args_call):
					id_cite=getid("<invalid parameter ID @1>".Replace(["@1",string(param_id)]))
				else
					id_cite=getid(citeexpr(readPool(pecall+EXPR_OFS_ARGS+param_id)))
				replaceExpr(pe_store_i,exprstr(id_cite))
				return 0
			if isExpr(pe_store_i,EFLAG_VARIABLE):
				//translating the arguments
				pv=getVariable(pe_store_i)
				if pv&&readPool(pv+VAR_OFS_ID)==g_id_arguments:
					as=PExpression[].NULL
					if !pv_arguments:
						pv_arguments=makevar(pf_owner)
						writePool(pv_arguments+VAR_OFS_ID,gettempid(g_id_arguments))
						pe_arguments_tuple=makeTuple(n_args_call)
						as=new PExpression[]
						as.push(call(g_id_store,exprvar(pv_arguments),pe_arguments_tuple))
						writePool(pv_arguments+VAR_OFS_DEFINING_STORE,as[0])
						for i=0:n_args_call-1
							if i<pvar_arg_ret.n:
								if !pvar_arg_ret[i]:
									pvar_arg_ret[i]=makevar(pf_owner)
									as.push(call(g_id_store,exprvar(pvar_arg_ret[i]),readPool(pecall+EXPR_OFS_ARGS+i)))
								pe_call_argi=exprvar(pvar_arg_ret[i])
							else
								pe_call_argi=readPool(pecall+EXPR_OFS_ARGS+i)
							as.push(call(g_id_stdot,exprvar(pv_arguments),exprstr(getTupleId(i)),pe_call_argi))
					transformCodeEx(pe_store_i,__zero(ftransformer_callback),as,exprvar(pv_arguments),PExpression[].NULL,0)
				return 0
			return 1
		}
		dfsExpr(pe_expanded,freplace_args)
		if prototype_mismatch:
			//it's doomed
			errorAtExpr(ETYPE_ERROR,pecall,"the caller failed to provide parameter #@1 for @2".Replace(["@1",string(prototype_mismatch-1),"@2",dumpFunction(pobjfn)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//get return variable
		//pecheck=call(g_id_assert_ctval,exprvar())
		//writePool(pecheck+EXPR_OFS_EPOS+0,readPool(pecall+EXPR_OFS_EPOS+0))
		//writePool(pecheck+EXPR_OFS_EPOS+1,readPool(pecall+EXPR_OFS_EPOS+1))
		pecallee=readPool(pecall+EXPR_OFS_FUNCTION+0)
		//writePool(pecallee+EXPR_OFS_CALLER,0)
		pe_check=lockValueCheck(cloneExpr(pecallee),g_id_error_inline_cannot_change)
		if pvar_return:
			pe_return_value=exprvar(pvar_return)
			pvar_arg_ret.push(pvar_return)
			//return should be the only sensitive name that needs demolishing - an inline can't have a this
			writePool(pvar_return+VAR_OFS_ID,gettempid(g_id_return))
		else
			pe_return_value=expriptr(0)
		pvar_arg_ret.Sort()
		pvar_arg_ret.Unique()
		need_optimization=0
		setnop_jobs=new PExpression[]
		if !need_return_scope:
			cnt_ass=new int[PCTObject]
			cnt_use=new int[PCTObject]
			auto fcount_ass_use(PExpression pe,int delta)
				delta_recurse=delta
				if isBuiltin(pe,g_id_function):
					delta_recurse=2
				if isBuiltin(pe,g_id_store):
					auto pvar=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
					auto pe_ass0=cnt_ass[pvar]
					if !pe_ass0:
						cnt_ass[pvar]=pe
					else if pe_ass0!=-1:
						cnt_ass[pvar]=-1
				else if isExpr(pe,EFLAG_VARIABLE):
					cnt_use[getVariable(pe)]+=delta_recurse
				if isExpr(pe,EFLAG_FCALL):
					n_args=getExprNArgs(pe)
					for i=-1:n_args-1
						fcount_ass_use(readPool(pe+EXPR_OFS_ARGS+i),delta_recurse)
			fcount_ass_use(pe_expanded,1)
			fcount_ass_use(pe_return_value,1)
			//do single-ass single-use optimization, return can get optimized too -- single-ass return must be the last
			do_optimization=new PExpression[PCTObject]
			foreach pvar in pvar_arg_ret
				pe_ass=cnt_ass[pvar]
				pe_value=readPool(pe_ass+EXPR_OFS_ARGS+1)
				if pe_ass&&pe_ass!=-1&&(cnt_use[pvar]==2||isExpr(pe_value,EFLAG_CONST)||isExpr(pe_value,EFLAG_VARIABLE)):
					//optimize!
					setnop_jobs.push(pe_ass)
					if cnt_use[pvar]>2:
						pe_ass|=0x80000000
					do_optimization[pvar]=pe_ass
					need_optimization=1
		if need_return_scope:
			pe_expanded=call(g_id_blockex,exprstr(g_id_blockex),exprstr(id_return_label),pe_expanded)
		//if g_enable_debug_instrumentation:
		//	epos0=readPool(pecall+1)
		//	epos1=readPool(pecall+2)
		//	pe_expanded=fillepos(call(g_id_block,call(g_id_callstack,exprctval(pobjfn),expriptr(0)),pe_expanded,call(g_id_callstack,expriptr(0))),epos0,epos1)
		as_before=[pe_check]
		if pe_param_checks:
			as_before.push(pe_param_checks)
		if pe_store_this:
			as_before.push(pe_store_this)
		as_before.push(pe_expanded)
		pecaller_original=readPool(pecall+EXPR_OFS_CALLER)
		//replace pvar_return (or ITS source) with the parent store target
		pobj_return_store_replace=0
		pobj_return_store_replace_with=0
		is_inline_return_optimized=0
		if isBuiltin(pecaller_original,g_id_store)&&pvar_return&&!disable_inline_return:
			id_pobjfn=readPool(pobjfn+FUNCTION_OFS_NAME)
			if (id_pobjfn!=g_id_operator_aa&&
			id_pobjfn!=g_id_operator_oo&&
			id_pobjfn!=g_id_operator_select&&
			id_pobjfn!=g_id_stdfn_function_or&&
			id_pobjfn!=g_id_stdfn_make_string):
				pobj_return_store_replace=pvar_return
				if !need_return_scope:
					pe_return_store=do_optimization[pvar_return]
					pe_return_store&=0x7fffffff
					if pe_return_store:
						assert(isBuiltin(pe_return_store,g_id_store))
						if isBuiltin(pe_return_store,g_id_store):
							//pe_return_store_var is the returned "value", not the parent store target
							pe_return_store_var=readPool(pe_return_store+EXPR_OFS_ARGS+1)
							if isExpr(pe_return_store_var,EFLAG_VARIABLE):
								pobj_return_store_replace=getVariable(pe_return_store_var)
								if do_optimization[pobj_return_store_replace]:
									/*
									direct param returner, cancel the whole thing - it should have been already optimized
										we replace original return var occurance with return expression
										the return expression is a param var
										which is replaced with param expr
									*/
									pobj_return_store_replace=0
								else
									//detect global / outsider returners
									isok=0
									foreach pvar_cloned in var_map
										if pobj_return_store_replace==pvar_cloned:
											isok=1
											break
									if !isok:
										//cancel if it's external return: replacing return var with the global var is enough
										pobj_return_store_replace=0
							else
								pobj_return_store_replace=0
				if pobj_return_store_replace:
					//pobj_return_store_replace is the (temp variable) return target of the inline function
					//pobj_return_store_replace_with is the return variable of the original store
					//detect inline code / param expr's internal use of the return variable
					pobj_return_store_replace_with=getVariable(readPool(pecaller_original+EXPR_OFS_ARGS+0))
					fdetect_return_var_use=function(PExpression pe){
						if readPool(pe)==EFLAG_VARIABLE+pobj_return_store_replace_with:
							pobj_return_store_replace=0
							return 0
						return !!pobj_return_store_replace
					}
					dfsExpr(pe_expanded,fdetect_return_var_use)
				if pobj_return_store_replace:
					pobj_return_store_replace_with=getVariable(readPool(pecaller_original+EXPR_OFS_ARGS+0))
					need_optimization=1
					setnop_jobs.push(pecaller_original)
					is_inline_return_optimized=1
					if DEBUG_EVAL_LOG:
						Writeln('inline return optimized ',
							dumpObject(pobj_return_store_replace),' ',dumpObject(pobj_return_store_replace_with),' ',
							dumpFunction(pobjfn),' ',
							pe_return_store?dumpExpr(pe_return_store,__zero(fcolorer_callback)):'(*)')
				else if do_optimization&&do_optimization[pvar_return]:
					//we decided that we cannot fully optimize this inline return by pulling in the parent store target
					//for whatever reason, we should also check whether the parent store variable has appeared as a param
					//if that happens, we should disable single-ass optimization on pvar_return here
					pobj_return_store_replace_with=getVariable(readPool(pecaller_original+EXPR_OFS_ARGS+0))
					fdetect_return_var_use2=function(PExpression pe){
						if readPool(pe)==EFLAG_VARIABLE+pobj_return_store_replace_with:
							auto pe_no_more_setnop=do_optimization[pvar_return]
							foreach pe_ass,I in setnop_jobs
								if pe_ass==pe_no_more_setnop:
									setnop_jobs[I]=0
									break
							do_optimization[pvar_return]=0
							return 0
						return !!do_optimization[pvar_return]
					}
					dfsExpr(pe_expanded,fdetect_return_var_use2)
		pe_final=transformCode(pecall,__zero(ftransformer_callback), as_before,pe_return_value,PExpression[].NULL)
		//somehow we're needing this - test_js0.spap
		if testUserFlag(pecaller_original,QUEUE_FLAG_REACH):
			sccpQueueEval(pecaller_original)
		if need_optimization:
			foptimize_single_ass=function(PExpression pe){
				//if isBuiltin(pe,g_id_function):
				//	return 0
				if isExpr(pe,EFLAG_VARIABLE):
					auto pvar=getVariable(pe)
					if pvar==pobj_return_store_replace:
						//return store case: replace the original return variable with the store target
						writePool(pe,EFLAG_VARIABLE+pobj_return_store_replace_with)
					else if do_optimization:
						auto pe_ass=do_optimization[pvar]
						auto pecaller=readPool(pe+EXPR_OFS_CALLER)
						auto need_dup=(pe_ass&0x80000000)
						pe_ass&=0x7fffffff
						if pe_ass&&pe_ass!=pecaller:
							auto pe_replace_with=readPool(pe_ass+EXPR_OFS_ARGS+1)
							//assert(!!pe_replace_with)
							//writePool(pe_ass+EXPR_OFS_ARGS+1,0)
							//Writeln('pe_ass>>> ',dumpExpr(pe_ass,__zero(fcolorer_callback)))
							//Writeln('pe>>> ',dumpExpr(pe,__zero(fcolorer_callback)))
							if need_dup:
								pe_replace_with=cloneExpr(pe_replace_with)
								writePool(pe_replace_with+EXPR_OFS_EPOS+0,readPool(pe+EXPR_OFS_EPOS+0))
								writePool(pe_replace_with+EXPR_OFS_EPOS+1,readPool(pe+EXPR_OFS_EPOS+1))
							else
								do_optimization[pvar]=0
								//setnop(pe_ass)
							//no premature param reach, but we need to reach the return value
							//wipeepos(pe_replace_with)
							insertCallAt(pecaller,pe,function(PExpression pe){return pe_replace_with})
							if pvar==pvar_return:
								//Writeln('return reach: '+dumpExpr(pe_replace_with,fcolor_reach_eval))
								sccpQueueReach(pe_replace_with)
								if testUserFlag(pecaller,QUEUE_FLAG_REACH):
									flag_pe_replacement=(readPool(pe_replace_with)&EFLAG_MASK)
									if flag_pe_replacement==EFLAG_CONST||flag_pe_replacement==EFLAG_STRING||flag_pe_replacement==EFLAG_CTVAL:
										//when const returning inline gets optimized, we need to queue the const user
										sccpQueueEval(pecaller)
					return 0
				return 1
			}
			dfsExpr(pe_final,foptimize_single_ass)
			foreach pe in setnop_jobs
				if pe:
					setnop(pe)
		setnop(pecall)
		if DEBUG_EVAL_LOG:
			if is_inline_return_optimized:
				Writeln('  ',dumpExpr(pe_final,__zero(fcolorer_callback)))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fget_function_return_value=function(PCTObject pobjfn,PExpression pecall){
		if setFunctionUsed(pobjfn):
			//we KNOW we'll need to eval again
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		else
			pobj_var=getReturnVariable(pobjfn)
			if !pobj_var:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			val_return=readPoolTyped(pobj_var,TSCCPValue)
			if val_return.tid==g_vtid_UNINIT:
				//need to re-eval after the return type gets determined
				addFunctionUser(pobjfn,pecall|0x80000000)
			//use type deduction once the return type is deducted
			//treturn=getValueType(val_return)
			//return TSCCPValue(){'tid':g_vtid_RTVAR,'val':treturn}
			return val_return
	}
	fnormal_function_oneval=function(PExpression pecall,int expr_oplevel){
		//__init__ test
		pobjfn=getExprFunction(pecall)
		assert(!!pobjfn)
		setFunctionUsed(pobjfn)
		n_args=getExprNArgs(pecall)
		n_funcargs=getNumberOfArguments(pobjfn)
		if (getCcnv(pobjfn)==g_id_class||getCcnv(pobjfn)==g_id_struct):
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			if isBuiltin(pecaller,g_id_new):
				//ditch whatever parent new when we're sure it's a new or an init call
				pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
				insertCallAt(pecaller_caller,pecaller,function(PExpression pe){return pecall})
				setnop(pecaller)
				pecaller=pecaller_caller
				sccpQueueEval(pecaller)
			if n_args>n_funcargs:
				//it is really an init call, do the necessary translations
				//lock the callee
				pe_check=lockValueCheck(cloneExpr(readPool(pecall+EXPR_OFS_FUNCTION)),g_id_error_class_cannot_change)
				is_stored=0
				if isBuiltin(pecaller,g_id_store):
					//parent-is-a-store case - no temp
					pv_temp=getVariable(readPool(pecaller+EXPR_OFS_ARGS+0))
					is_stored=1
				else
					//copy it to temp first
					pf_owner=getOwningFunction(pecall)
					pv_temp=makevar(pf_owner)
					writePool(pv_temp,g_vtid_UNINIT)
				writePool(pecall,EFLAG_FCALL+n_funcargs)
				as_init=new PExpression[1+n_args-n_funcargs]
				as_init[0]=call(g_id_dot,exprvar(pv_temp),exprstr(g_id_init))
				for i=n_funcargs:n_args-1
					as_init[1+i-n_funcargs]=readPool(pecall+EXPR_OFS_ARGS+i)
					writePool(as_init[1+i-n_funcargs]+EXPR_OFS_CALLER,0)
				pe_init_call=fillepos(indcall(as_init),readPool(pecall+EXPR_OFS_EPOS+0),readPool(pecall+EXPR_OFS_EPOS+1))
				if is_stored:
					transformCode(pecaller,__zero(ftransformer_callback), [pe_check],0,[pe_init_call])
				else
					transformCode(pecall,function(PExpression pe){return fillepos(call(g_id_store,exprvar(pv_temp),pe),readPool(pe+EXPR_OFS_EPOS+0),readPool(pe+EXPR_OFS_EPOS+1))}, [pe_check],exprvar(pv_temp),[pe_init_call])
				return fget_function_return_value(pobjfn,pecall)
		//param checks/sccp
		if n_args<n_funcargs||n_args>n_funcargs&&getCcnv(pobjfn)==g_id_function:
			sfname=getIdString(readPool(pobjfn+FUNCTION_OFS_NAME))
			errorAtExpr(ETYPE_ERROR,pecall,"function '@1' takes @2 arguments, not @3".Replace([
				"@1",sfname,
				"@2",string(n_funcargs),
				"@3",string(n_args)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
		p_param_values=readPool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
		for i=0:n_funcargs-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			t_expected=getExprValueAs(readPool(pe_decl+EXPR_OFS_ARGS+i*2+1),g_vtid_CTVAL)
			if t_expected:
				//t_expected is not a dependency, it must not interrupt the eval
				t=getExprType(pe_argi)
				if t&&!parameterTypeCheck(t_expected,t):
					errorAtExpr(ETYPE_ERROR,pe_argi,"parameter #@3 type mismatch: '@1' expected but '@2' provided".Replace(["@1",dumpType(t_expected),"@2",dumpType(t),"@3",string(i)]))
					continue
				if t&&t!=t_expected:
					//cast
					sccpQueueReach(insertCallAt(pecall,~i,function(PExpression pe){return call(g_id_cast,exprctval(t_expected),pe_argi)}))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
			else
				t=0
			//sccp
			val_old=readPoolTyped(p_param_values+i*3,TSCCPValue)
			val_new=getExprValue(pe_argi)
			if val_new.tid==g_vtid_CTVAL:
				if readPool(val_new.val)==g_tid_TFunction:
					//Writeln('setFunctionUsed ',dumpObject(val_new.val))
					//pass to param: it's used and its params become vars
					setFunctionUsed(val_new.val)
					setParameterSlotTypes(val_new.val)
				if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
				//it will be passed as a var, so consider it as a var
				val_new.tid=g_vtid_RTVAR
				val_new.val=t
			//Writeln('param slot ',i,' : ',getIdString(val_old.tid),' ',getIdString(val_new.tid))
			val_final=mergeValues(pecall,val_old,val_new, pecall,pecall)
			//set param functions as used
			if Platform.BUILD=="debug":
				if !(val_final.tid>=g_vtid_UNINIT&&val_final.tid<=g_vtid_CTVAL):
					Writeln(FormatAsText('bad value at param merge ',pe_argi,' ',dumpExpr(pe_argi,fcolor_abbrv_blocks),' ',getIdString(val_final.tid)))
					assert(0)
			if val_old.tid==val_final.tid&&val_old.val==val_final.val:
				//nothing changed
			else
				//param value changed, queue the ldparam
				writePoolTyped(p_param_values+i*3,val_final)
				pe_ldparam=readPool(p_param_values+i*3+2)
				if pe_ldparam:
					sccpQueueEval(pe_ldparam)
		return fget_function_return_value(pobjfn,pecall)
	}
	ftemplate_instantiation_oneval=function(PExpression pecall,int expr_oplevel){
		pobjfn=getExprFunction(pecall)
		n_args=getExprNArgs(pecall)
		n_funcargs=getNumberOfArguments(pobjfn)
		if n_args<n_funcargs:
			sfname=getIdString(readPool(pobjfn+FUNCTION_OFS_NAME))
			errorAtExpr(ETYPE_ERROR,pecall,"template function '@1' takes @2 arguments, but only @3 are provided".Replace([
				"@1",sfname,
				"@2",string(n_funcargs),
				"@3",string(n_args)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pedecl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
		//get a desc
		//template_desc=new PCTObject[]
		template_desc=[g_id_function,pobjfn]
		to_lock=new PExpression[]
		arg_mapping=new int[n_funcargs]
		template_desc2=new int[n_funcargs]
		n2=0
		for i=0:n_funcargs-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			peatype=readPool(pedecl+EXPR_OFS_ARGS+1+i*2)
			eflag_sid=readPool(peatype)
			if eflag_sid==EFLAG_STRING+g_id_auto:
				t=getExprType(pe_argi)
				if !t:
					ctval_test=getExprValueAs(pe_argi,g_vtid_CTVAL)
					if ctval_test:
						name='compile-time value'
						if tisbuiltin(ctval_test):
							name='built-in type'
						else if tisclass(ctval_test):
							name='class'
						else if readPool(ctval_test)==g_tid_TFunction&&getCcnv(ctval_test)!=g_id_function:
							name='@1 function'.Replace(["@1",getIdString(getCcnv(ctval_test))])
						errorAtExpr(ETYPE_ERROR,pe_argi,"@3 '@1' cannot be passed to auto-typed template parameter '@2', try to use a 'const' template parameter instead".Replace([
							"@1",citeexpr(pe_argi),
							"@2",citeexpr(readPool(pedecl+EXPR_OFS_ARGS+2+i*2)),
							"@3",name]))
					if DEBUG_EVAL_LOG:
						Writeln('  bad arg type at ',i)
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				template_desc.push(t)
				template_desc2[i]=t
				arg_mapping[i]=n2++
			else if eflag_sid==EFLAG_STRING+g_id_const:
				val=getExprValue(pe_argi)
				if val.tid==g_vtid_CNS||val.tid==g_vtid_STR||val.tid==g_vtid_CTVAL:
					if val.tid==g_vtid_CNS:
						eflag_val=EFLAG_CONST
					else if val.tid==g_vtid_STR:
						eflag_val=EFLAG_STRING
					else if val.tid==g_vtid_CTVAL:
						eflag_val=EFLAG_CTVAL
					template_desc.push(eflag_val+val.val)
					template_desc2[i]=eflag_val+val.val
					to_lock.push(pe_argi)
				else
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				arg_mapping[i]=-1
			else
				arg_mapping[i]=n2++
				template_desc2[i]=-1
		arg_mapping_delta_extras=n_funcargs-n2
		//lock the now unchangable variables
		as_checks=new PExpression[]
		foreach pei in to_lock
			as_checks.push(lockValueCheck(pei,g_id_error_const_cannot_change))
		//check existing instantiations
		pobjfn_insted=ctUnique(template_desc)
		if !pobjfn_insted:
			//clone, hack out ldparam
			pobjfn_insted=cloneFunction(pobjfn)
			ctUnique(template_desc)=pobjfn_insted
			if readPool(pobjfn+FUNCTION_OFS_NAME)==g_id_array_template:
				setFFlag(pobjfn_insted,FFLAG_IS_ARRAY_CLASS)
				//Writeln('ARRAY! ',pobjfn_insted)
			//else if readPool(pobjfn+FUNCTION_OFS_NAME)==g_id_ConvertToAsBinary:
			//	setFFlag(pobjfn_insted,FFLAG_IS_CONVERT_TO_AS_BINARY)
			//	//Writeln('FFLAG_IS_CONVERT_TO_AS_BINARY! ',pobjfn_insted)
			//if g_readable_c_code:
			sname=new(getIdString(readPool(pobjfn+FUNCTION_OFS_NAME)))
			sname.push('<')
			//else
			//	writePool(pobjfn_insted+FUNCTION_OFS_NAME,readPool(pobjfn+FUNCTION_OFS_NAME))
			writePool(pobjfn_insted+FUNCTION_OFS_ONEVAL,g_cbobj_function_used_oneval)
			writePool(pobjfn_insted+FUNCTION_OFS_ONCGEN,g_cbobj_generated_function_oncgen)
			pedecl_insted=readPool(pobjfn_insted+FUNCTION_OFS_PEDECL)
			//Writeln('>>>>>>>>>>>>>> ',dumpFunction(pobjfn_insted))
			//Writeln(dumpExpr(readPool(pobjfn_insted+FUNCTION_OFS_PEDECL),fcolor_abbrv_blocks))
			n2=0
			for i=0:n_funcargs-1
				peatype=readPool(pedecl_insted+EXPR_OFS_ARGS+1+i*2)
				eflag_sid=readPool(peatype)
				if eflag_sid==EFLAG_STRING+g_id_auto:
					//resolve the type
					assert(arg_mapping[i]==n2)
					//sccpQueueReach(insertCallAt(pedecl_insted,~(1+n2*2),function(PExpression pe){return exprctval(template_desc2[i])}))
					pe_atype_new=exprctval(template_desc2[i])
					writePool(pedecl_insted+EXPR_OFS_ARGS+1+n2*2,pe_atype_new);writePool(pe_atype_new+EXPR_OFS_CALLER,pedecl_insted)
					writePool(pedecl_insted+EXPR_OFS_ARGS+2+n2*2,readPool(pedecl_insted+EXPR_OFS_ARGS+2+i*2))
					n2++
					//if g_readable_c_code:
					if sname.back()!='<':
						sname.push(',')
					sname.push(dumpType(template_desc2[i]))
				else if eflag_sid==EFLAG_STRING+g_id_const:
					//nothing
					//if g_readable_c_code:
					if sname.back()!='<':
						sname.push(',')
					if (template_desc2[i]&EFLAG_MASK)==EFLAG_CTVAL&&objistype(template_desc2[i]&~EFLAG_MASK):
						sname.push(dumpType(template_desc2[i]&~EFLAG_MASK))
					else
						sname.push(dumpExpr(poolCode(TCnsExpression(){'flags_cid':template_desc2[i]}),__zero(fcolorer_callback)))
				else
					//don't touch the arg
					assert(arg_mapping[i]==n2)
					writePool(pedecl_insted+EXPR_OFS_ARGS+1+n2*2,peatype)
					writePool(pedecl_insted+EXPR_OFS_ARGS+2+n2*2,readPool(pedecl_insted+EXPR_OFS_ARGS+2+i*2))
					n2++
				//Writeln(i,' ',dumpExpr(readPool(pobjfn_insted+FUNCTION_OFS_PEDECL),fcolor_abbrv_blocks))
			//Writeln(dumpExpr(readPool(pobjfn_insted+FUNCTION_OFS_PEDECL),fcolor_abbrv_blocks))
			//if g_readable_c_code:
			sname.push('>')
			writePool(pobjfn_insted+FUNCTION_OFS_NAME,getid(sname))
			//copy the code and reset # args
			writePool(pedecl_insted+EXPR_OFS_ARGS+1+n2*2,readPool(pedecl_insted+EXPR_OFS_ARGS+1+n_funcargs*2))
			writePool(pedecl_insted,EFLAG_FCALL+n2*2+2)
			//Writeln(dumpExpr(readPool(pobjfn_insted+FUNCTION_OFS_PEDECL),fcolor_abbrv_blocks))
			p_param_values=readPool(pobjfn_insted+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
			freplace_ldparam=function(PExpression pe){
				if isBuiltin(pe,g_id_ldparam):
					pe_paramid=readPool(pe+EXPR_OFS_ARGS+0)
					pe_atype=readPool(pe+EXPR_OFS_ARGS+1)
					paramid=getExprValueAs(pe_paramid,g_vtid_CNS)
					map_to=arg_mapping[paramid]
					if map_to>=0:
						//just change the param id
						writePool(pe_paramid,EFLAG_CONST+getid_const(const_type(CTYPE_INT,Util.bitSize()),i64(map_to)))
						if readPool(pe_atype)==EFLAG_STRING+g_id_auto:
							sccpQueueReach(insertCallAt(pe,~1,function(PExpression pe){return exprctval(template_desc2[paramid])}))
						//update the ldparam pointers
						writePool(p_param_values+map_to*3+2,pe)
					else
						eflag_val_valid=template_desc2[paramid]
						auto pecaller=readPool(pe+EXPR_OFS_CALLER)
						fmake_const_template_arg=function(PExpression pe){
							return poolCode(TCnsExpression(){'flags_cid':eflag_val_valid})
						}
						sccpQueueReach(insertCallAt(pecaller,pe,fmake_const_template_arg))
				if isBuiltin(pe,g_id_function):
					return 0
				return 1
			}
			dfsExpr(readPool(pobjfn_insted+FUNCTION_OFS_CODE),freplace_ldparam)
			writePool(pobjfn_insted+FUNCTION_OFS_TEMPLATE,pobjfn)
			writePool(pobjfn_insted+FUNCTION_OFS_TEMPLATE_EPOS0,readPool(pecall+1))
			writePool(pobjfn_insted+FUNCTION_OFS_TEMPLATE_EPOS1,readPool(pecall+2))
		//hack the call - arg_mapping
		//arg_mapping_delta_extras
		as_new=new PExpression[n_args-arg_mapping_delta_extras+1]
		for i=0:n_args-1
			if i<arg_mapping.n:
				map_to=arg_mapping[i]
				if map_to<0:continue
			else
				map_to=i-arg_mapping_delta_extras
			//writePool(pecall+EXPR_OFS_ARGS+arg_base+map_to,readPool(pecall+EXPR_OFS_ARGS+arg_base+i))
			as_new[1+map_to]=readPool(pecall+EXPR_OFS_ARGS+i)
		foreach pe_argi in as_new
			writePool(pe_argi+EXPR_OFS_CALLER,0)
		//we must relink the user queue to the insted function, so we need to create a new call
		writePool(pecall,EFLAG_FCALL)
		as_new[0]=exprctval(pobjfn_insted)
		pecallee=readPool(pecall+EXPR_OFS_FUNCTION)
		writePool(pecallee+EXPR_OFS_CALLER,0)
		if isBuiltin(pecallee,g_id_dot):
			//call dot case - keep this
			pecallee_clone=cloneExpr(pecallee)
			sccpQueueReach(insertCallAt(pecallee_clone,~1,function(PExpression pe){return as_new[0]}))
			as_new[0]=pecallee_clone
		as_checks.push(lockValueCheck(pecallee,g_id_error_template_cannot_change));
		//Write('>>> ',isBuiltin(pecallee,g_id_dot),' ');Writeln(dumpExpr(pecallee,fcolor_abbrv_blocks))
		if tisclass(pobjfn_insted):
			//classes return a type
			pecall_new=as_new[0]
		else
			pecall_new=indcall(as_new)
		//Write('>>> ');Writeln(dumpExpr(pecall_new,fcolor_abbrv_blocks))
		//as_checks.push(pecall_new)
		addFunctionUser(pobjfn_insted,as_new[0])
		//Writeln('>>> before template transformCode');
		//sccpQueueReach(pecall_new)
		pecaller=readPool(pecall+EXPR_OFS_CALLER)
		if pecaller:
			//we may reach here with pecaller=0 for function types
			sccpQueueEval(pecaller)
			transformCode(pecall,__zero(ftransformer_callback), as_checks,pecall_new,PExpression[].NULL)
		else
			return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobjfn_insted}
		//Writeln('>>> after template transformCode');
		//Writeln('>>>>>>>>>>>>>> ',dumpFunction(pobjfn_insted))
		//Writeln(dumpExpr(readPool(pobjfn_insted+FUNCTION_OFS_PEDECL),NULL))
		//Writeln('==============')
		//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
		//Writeln('<<<<<<<<<<<<<<')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fgenerate_C_fcall=function(PExpression pecall,PCTObject pobjfn,PExpression pe_lambdactx,int is_dtor){
		//error check -- # parameters and their types
		//pobjfn=getExprFunction(pecall)
		n_args=getExprNArgs(pecall)
		assert(readPool(pobjfn)==g_tid_TFunction)
		queueCodeGen(pobjfn)
		fn=readPoolTyped(pobjfn,TFunction)
		if g_enable_debug_instrumentation&&!is_dtor:
			g_code_buffer.push('(')
			genLineInfoExpr(pecall)
			g_code_buffer.push(',')
		genFunctionName(pobjfn)
		id_ccnv=getCcnv(pobjfn)
		if id_ccnv==g_id_class:
			//pre-allocated pointer
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			if(isBuiltin(pecaller,g_id_store)&&
			pecall==readPool(pecaller+EXPR_OFS_ARGS+1)&&
			testUserFlag(getVariable(readPool(pecaller+EXPR_OFS_ARGS+0)),VAR_FLAG_CLASS_IS_STACK_ALLOCED)):
				//get the stack slot
				pobj_var=getVariable(readPool(pecaller+EXPR_OFS_ARGS+0))
				g_code_buffer.push('(&s7_SA_')
				g_code_buffer.push(toBase32(pobj_var))
			else
				g_code_buffer.push('(NULL,')
		else
			g_code_buffer.push('(')
		if fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG:
			if pe_lambdactx:
				genCode(pe_lambdactx,0)
				g_code_buffer.push(',')
			else
				pf_owner=getOwningFunction(pecall)
				assert(!!pf_owner)
				dlevel=readPool(pf_owner+FUNCTION_OFS_NEST_DEPTH)-fn.nest_depth+1
				if Platform.BUILD=="debug":
					if !(dlevel>=0):
						Writeln(string(dlevel)+" "+dumpExpr(pecall,fcolor_abbrv_blocks))
				assert(dlevel>=0)
				if dlevel==0:
					g_code_buffer.push('s7_BL,')
				else
					g_code_buffer.push('s7_BP')
					for i=0:dlevel-2
						g_code_buffer.push('->p')
					g_code_buffer.push(',')
		else if fn.flags&FFLAG_HAS_FPTR_TAKEN:
			//NULL for the dummy param
			g_code_buffer.push('NULL,')
		if !is_dtor:
			for i=0:n_args-1
				if i:g_code_buffer.push(',')
				genCode(readPool(pecall+EXPR_OFS_ARGS+i),LEVEL_ASSIGNMENT)
		if g_code_buffer.back()==',':
			g_code_buffer.pop()
		g_code_buffer.push(')')
		if g_enable_debug_instrumentation&&!is_dtor:
			g_code_buffer.push(')')
	}
	fgenerated_function_oncgen=function(PExpression pecall,int expr_oplevel){
		//it should have been tested
		pecallee=readPool(pecall+EXPR_OFS_FUNCTION)
		pe_lambdactx=PExpression(0)
		if isBuiltin(pecallee,g_id_ldlambda)||isBuiltin(pecallee,g_id_dot):
			//method call case, need to bind a lambda context
			//in that case, however, the function itself is not generated, so we can use the expr directly
			pe_lambdactx=readPool(pecallee+EXPR_OFS_ARGS+0)
		fgenerate_C_fcall(pecall,getExprFunction(pecall),pe_lambdactx,0)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	g_cbobj_reach_fn_only=registerCompilerCallback(freach_fn_only)
	g_cbobj_expand_inline_oneval=registerCompilerCallback(fexpand_inline_oneval)
	g_cbobj_function_used_oneval=registerCompilerCallback(fnormal_function_oneval)
	g_cbobj_template_instantiation_oneval=registerCompilerCallback(ftemplate_instantiation_oneval)
	g_cbobj_generated_function_oncgen=registerCompilerCallback(fgenerated_function_oncgen)
	ffunction_onreach=function(PExpression pecall,int expr_oplevel){
		//we reach all the types automatically, but nothing else
		n_args=getExprNArgs(pecall)
		for i=1:2:n_args-3
			petype=readPool(pecall+(EXPR_OFS_ARGS)+i)
			sccpQueueReach(petype)
		auto peftype=readPool(pecall+(EXPR_OFS_ARGS))
		sccpQueueReach(peftype)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	ffunction_oneval=function(PExpression pecall,int expr_oplevel){
		//we do not wait for the types, but we do wait for the ccnv
		val_existing=getExprValue(pecall)
		//duplicate evaluation not prevented... but we do need the eval
		//if !(val_existing.tid==g_vtid_CTVAL):
		//	Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
		//	Writeln(dumpCode(pecall,fcolor_reach_eval))
		assert(val_existing.tid==g_vtid_CTVAL)
		pf=val_existing.val
		if !readPool(pf+FUNCTION_OFS_ONEVAL):
			fn=readPoolTyped(pf,TFunction)
			ccnv=getCcnv(pf)
			//if ccnv==CCNV_META:
			//	//a must-evaluate function
			//	assert(0)
			if ccnv==g_id_inline||ccnv==g_id_inline_loopbody:
				fn.obj_onreach=g_cbobj_reach_fn_only
				fn.obj_oneval=g_cbobj_expand_inline_oneval
				fn.obj_oncgen=0
			else
				//test for template: auto/const represented as strings
				n_args=getExprNArgs(pecall)
				is_template=0
				for i=1:2:n_args-3
					peatype=readPool(pecall+EXPR_OFS_ARGS+i)
					//t_argi=getExprValueAs(peatype,g_vtid_CTVAL)
					//if t_argi==CTYPE_AUTO
					if isExpr(peatype,EFLAG_STRING):
						//template indeed
						id_t_argi=readPool(peatype)&~EFLAG_MASK
						if id_t_argi==g_id_auto||id_t_argi==g_id_const:
							is_template=1
							break
				if is_template:
					//template function
					fn.obj_oneval=g_cbobj_template_instantiation_oneval
				else
					//normal function
					fn.obj_oneval=g_cbobj_function_used_oneval
					fn.obj_oncgen=g_cbobj_generated_function_oncgen
			writePoolTyped(pf,fn)
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			//if pecall==readPool(pecaller+EXPR_OFS_FUNCTION):
			sccpQueueEval(pecaller)
		if getFFlag(pf)&FFLAG_IS_PARALLEL:
			setParameterSlotTypes(pf)
		return val_existing
	}
	ffunction_oncgen=function(PExpression pecall,int expr_oplevel){
		//avoid generating in-line function expressions
		if expr_oplevel!=LEVEL_FUNCTION_HACK:
			//coulddo: immediate-call case
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//function decl, inner code
		nargs=readPool(pecall)&~EFLAG_MASK
		val_existing=getExprValue(pecall)
		if val_existing.tid!=g_vtid_CTVAL:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=val_existing.val
		id_ccnv=getCcnv(pobjfn)
		fn=readPoolTyped(pobjfn,TFunction)
		//scan function for the necessary information
		treturn=getReturnType(pobjfn)
		pecode=readPool(fn.pe_decl+(EXPR_OFS_ARGS)+nargs-1)
		is_type_only=isExpr(pecode,EFLAG_STRING)
		assert(is_type_only||isBuiltin(pecode,g_id_block))
		is_type_only|=(pobjfn==getStdObject(0,STDTYPE_VARIANT))
		is_type_only|=(tisstruct(pobjfn)&&isCtorEmpty(pobjfn,1))
		//Writeln(pobjfn,' ',getStdObject(0,STDTYPE_VARIANT))
		//could use a dfs
		n_funcargs=(nargs-2)>>1
		var_argnames=new int[n_funcargs]
		ffind_argnames=function(PExpression pe){
			if isBuiltin(pe,g_id_function):return 0
			if isBuiltin(pe,g_id_ldparam):
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				arg_id=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_CNS)
				if isBuiltin(pecaller,g_id_store):
					pe_var_i=readPool(pecaller+EXPR_OFS_ARGS+0)
					var_argnames[arg_id]=getVariable(pe_var_i)
					assert(!!var_argnames[arg_id])
				else
					val0=getExprValue(pe)
					pobj_var=makevar(pobjfn)
					var_argnames[arg_id]=pobj_var
					writePool(pobj_var+0,val0.tid)
					writePool(pobj_var+1,val0.val)
					replaceExpr(pe,exprvar(pobj_var))
			return 1
		}
		dfsExpr(pecode,ffind_argnames)
		//declaration
		if !is_type_only:
			auto sbk=g_code_buffer
			g_code_buffer=g_forward_buffer
			if !(fn.flags&FFLAG_EXPORTED):
				g_code_buffer.push('static ')
			if !treturn||tisstruct(treturn):
				g_code_buffer.push(FormatAsText("void"))
			else
				genType(treturn)
			g_code_buffer.push(' ')
			genFunctionName(pobjfn)
			g_code_buffer.push('(')
			//class ctor hack param... dtor may need it too: 
			if id_ccnv==g_id_class:
				//pre-allocated pointer
				g_code_buffer.push('void*,')
			//else if id_ccnv==g_id_dtor_hack_ccnv:
			//	//need-free-ness
			//	g_code_buffer.push('int,')
			pf_parent=0
			if fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG:
				pf_parent=getOwningFunction(readPool(fn.pe_decl+EXPR_OFS_CALLER))
				genClassName(pf_parent)
				g_code_buffer.push("*,")
			else if fn.flags&FFLAG_HAS_FPTR_TAKEN:
				g_code_buffer.push('void*,')
			for i=1:2:nargs-3
				if i>1:
					g_code_buffer.push(',')
				petype=readPool(fn.pe_decl+(EXPR_OFS_ARGS)+i)
				targi=getExprValueAs(petype,g_vtid_CTVAL)
				if !targi:
					errorAtExpr(ETYPE_ERROR,petype,"invalid argument type '"+citeexpr(petype)+"'")
					g_code_buffer.push('err!')
				else
					genType(targi)
			if g_code_buffer.back()==',':
				g_code_buffer.pop()
			g_code_buffer.push(');\n')
			g_code_buffer=sbk
		//definition
		if !is_type_only:
			if !treturn||tisstruct(treturn):
				g_code_buffer.push(FormatAsText("void"))
			else
				genType(treturn)
			g_code_buffer.push(' ')
			genFunctionName(pobjfn)
			g_code_buffer.push('(')
			if id_ccnv==g_id_class:
				//pre-allocated pointer
				g_code_buffer.push('void* s7_BA,')
			//else if id_ccnv==g_id_dtor_hack_ccnv:
			//	//need-free-ness
			//	g_code_buffer.push('int s7_BF,')
			if fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG:
				genClassName(pf_parent)
				g_code_buffer.push("* s7_BP,")
			else if fn.flags&FFLAG_HAS_FPTR_TAKEN:
				g_code_buffer.push('void* s7_unused,')
			//Writeln(dumpCode(pecall,fcolor_reach_eval))
			for i=1:2:nargs-3
				if i>1:
					g_code_buffer.push(',')
				petype=readPool(fn.pe_decl+(EXPR_OFS_ARGS)+i)
				targi=getExprValueAs(petype,g_vtid_CTVAL)
				if !targi:
					errorAtExpr(ETYPE_ERROR,petype,"invalid argument type '"+citeexpr(petype)+"'")
					g_code_buffer.push('err!')
				else
					genType(targi)
				if !var_argnames[i>>1]
					//this is valid - it may have gotten const-folded
					//if Platform.BUILD=="debug":
					//	Writeln(dumpObject(pobjfn),", failed to find parameter #",i>>1,', fn.pe_decl=',fn.pe_decl)
					//	dumpExpr(fn.pe_decl,fcolor_reach_eval)
					g_code_buffer.push(' s7_d')
					g_code_buffer.push(string(i>>1))
				else
					assert(!!var_argnames[i>>1])
					g_code_buffer.push(' ')
					genVar(var_argnames[i>>1])
					//g_code_buffer.push(toBase32(var_argnames[i>>1]))
			if g_code_buffer.back()==',':
				g_code_buffer.pop()
			g_code_buffer.push('){')
		//for is_type_only, the context is never actually used, but we need to generate the type anyway
		assert(!(fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER)||(fn.flags&FFLAG_LAMBDA_NEEDS_CONTEXT))
		stack_alloc_checked=0
		if is_type_only||(fn.flags&FFLAG_LAMBDA_NEEDS_CONTEXT):
			//generate the lambda struct decl, and new it
			sbk=g_code_buffer
			g_code_buffer=new string
			genClassName(pobjfn)
			g_code_buffer.push('{')
			got_anything=0
			if !tisstruct(pobjfn):
				got_anything=1
				if Util.bitSize()>32:
					g_code_buffer.push('long long ')
				else
					g_code_buffer.push('int ')
				g_code_buffer.push('s7rc;')
			if fn.flags&FFLAG_LAMBDA_NEEDS_RTTI:
				got_anything=1
				g_code_buffer.push('void* s7rtti;')
			if fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER:
				got_anything=1
				//parent pointer
				genClassName(pf_parent)
				g_code_buffer.push("* p;")
			for i=0:fn.nlambda_vars-1
				got_anything=1
				pobj_var=readPool(fn.plambda_vars+i)
				t=getValueType(readPoolTyped(pobj_var,TSCCPValue))
				if !t:
					//Writeln(dumpExpr(pecall,fcolor_epos),' ',pobj_var,' ',getIdString(dump_getObjectName(pobj_var)),' ',dumpExpr(exprvar(pobj_var),NULL))
					errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pecall,"uninitialized variable '@1' cannot be accessed in other functions".Replace(["@1",getIdString(dump_getObjectName(pobj_var))]))
					continue
				//Writeln(dumpType(t),' ',dumpObject(pobj_var))
				genType(t)
				if tisstruct(t):g_code_buffer.pop()
				if g_readable_c_code:
					id_name=readPool(pobj_var+VAR_OFS_ID)
					if id_name:
						g_code_buffer.push(' /*')
						g_code_buffer.push(getIdString(id_name))
						g_code_buffer.push('*/')
				g_code_buffer.push(' m_')
				g_code_buffer.push(toBase32(pobj_var))
				g_code_buffer.push(';')
				if !g_enable_c_line_info:
					g_code_buffer.push('\n')
			if !got_anything:
				g_code_buffer.push('char dummy;')
			g_code_buffer.push('};')
			//generate the string table once we get the type
			if pobjfn==getStdObject(0,STDTYPE_STRING):
				g_global_strings_code.push('static ')
				sbk2=g_code_buffer
				g_code_buffer=g_global_strings_code
				genClassName(pobjfn)
				g_global_strings_code.push(' s7_CS1[]={')
				pobj_var_d=lookupFunctionVariable(pobjfn,getid("d"))
				pobj_var_n=lookupFunctionVariable(pobjfn,getid("n"))
				pobj_var_sz=lookupFunctionVariable(pobjfn,getid("sz"))
				pobj_var_destructor_nbound_or_slice_reference=lookupFunctionVariable(pobjfn,g_id_destructor_nbound_or_slice_reference)
				pobjfn_dtor=readPool(pobjfn+FUNCTION_OFS_FINALIZER)
				foreach citem,I in g_c_str_consts
					//s7rc
					g_global_strings_code.push('{2')
					if fn.flags&FFLAG_LAMBDA_NEEDS_RTTI:
						g_global_strings_code.push(',')
						genFunctionName(pobjfn_dtor)
					for i=0:fn.nlambda_vars-1
						pobj_var=readPool(fn.plambda_vars+i)
						if pobj_var==pobj_var_d:
							if Util.bitSize()>32:
								g_global_strings_code.push(',(long long)(s7_CS0+')
							else
								g_global_strings_code.push(',(int)(s7_CS0+')
							g_global_strings_code.push(string(citem.p))
							g_global_strings_code.push(')')
						else if pobj_var==pobj_var_n||pobj_var==pobj_var_sz:
							g_global_strings_code.push(FormatAsText(',',citem.n))
						else if pobj_var==pobj_var_destructor_nbound_or_slice_reference:
							g_global_strings_code.push(',2')
						else
							assert(0)
					g_global_strings_code.push('},')
					if g_readable_c_code:
						SWrite(g_global_strings_code,'//s7_CS1+',I,' "',genString(getIdString(citem.id)),'"')
					g_global_strings_code.push('\n')
				g_global_strings_code.push('};\n')
				g_code_buffer=sbk2
			//need a dep sort later
			g_struct_code_per_type[pobjfn]=g_code_buffer
			g_all_struct_types.push(pobjfn)
			g_code_buffer=sbk
			if !is_type_only&&!tisstruct(pobjfn):
				if ENABLE_STACK_ALLOCS&&pobjfn!=g_t_root_namespace&&id_ccnv!=g_id_class&&!(fn.flags&FFLAG_LAMBDA_LEAKED):
					genClassName(pobjfn)
					g_code_buffer.push(' s7_BSA;')
					if !g_enable_c_line_info:
						g_code_buffer.push('\n')
				genClassName(pobjfn)
				if pobjfn==g_t_root_namespace:
					g_code_buffer.push('* s7_BL=&s7_BR;')
				else
					g_code_buffer.push('* s7_BL=(')
					genClassName(pobjfn)
					g_code_buffer.push('*)')
					if id_ccnv==g_id_class:
						g_code_buffer.push('(s7_BA?(memset(s7_BA,0,sizeof(')
						genClassName(pobjfn)
						g_code_buffer.push(')),s7_BA):calloc(1,sizeof(')
						genClassName(pobjfn)
						g_code_buffer.push(')));')
						stack_alloc_checked=1
					else if ENABLE_STACK_ALLOCS&&!(fn.flags&FFLAG_LAMBDA_LEAKED):
						g_code_buffer.push('(memset(&s7_BSA,0,sizeof(')
						genClassName(pobjfn)
						g_code_buffer.push(')),&s7_BSA);')
					else
						g_code_buffer.push('calloc(1,sizeof(')
						genClassName(pobjfn)
						g_code_buffer.push('));')
		if is_type_only:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		sbak=g_code_buffer
		g_code_buffer=new string
		cgPushScope()
		if g_enable_debug_instrumentation&&(fn.flags&FFLAG_EXPORTED):
			g_code_buffer.push('spapDebugV2Start();')
		if stack_alloc_checked:
			g_code_buffer.push('s7_BL->s7rc=-!s7_BA;')
		if (fn.flags&FFLAG_LAMBDA_NEEDS_CONTEXT)&&(fn.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER):
			//lambda arg -> lambda parent pointer
			g_code_buffer.push('s7_BL->p=s7_BP;')
		if (fn.flags&FFLAG_LAMBDA_NEEDS_RTTI)&&(fn.flags&FFLAG_LAMBDA_NEEDS_CONTEXT):
			//for function-pointers that use NULL as a context substitute, we don't have to set the RTTI
			g_code_buffer.push('s7_BL->s7rtti=(void*)')
			pobjfn_dtor=readPool(pobjfn+FUNCTION_OFS_FINALIZER)
			genFunctionName(pobjfn_dtor)
			queueCodeGen(pobjfn_dtor)
			g_code_buffer.push(';')
		if pobjfn==g_t_root_namespace&&(fn.flags&FFLAG_LAMBDA_NEEDS_CONTEXT):
			sbk=g_code_buffer
			g_code_buffer=g_forward_buffer
			genClassName(pobjfn)
			g_code_buffer.push(' s7_BR={2};')
			g_code_buffer=sbk
			//g_code_buffer.push('s7_BR=s7_BL;')
		id_return_label=getReturnLabel(pobjfn)
		bk_label=g_current_labels[id_return_label]
		g_current_labels[id_return_label]=pecall
		sbk_return=g_local_return_buffer
		g_local_return_buffer=new string
		genCode(pecode,0)
		g_code_buffer.push(g_local_return_buffer)
		g_local_return_buffer=sbk_return
		g_current_labels[id_return_label]=bk_label
		cgPopScope()
		sbak.push(g_code_buffer)
		g_code_buffer=sbak
		g_code_buffer.push('}')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_function,ffunction_onreach,ffunction_oneval,ffunction_oncgen,FFLAG_STATEMENT_HOST|FFLAG_SPECIAL)
	fc_return_oncgen=function(PExpression pecall,int expr_oplevel){
		id_return_label=getReturnLabel(getOwningFunction(pecall))
		my_label=g_current_labels[id_return_label]
		if my_label&0x80000000:
			//generate the return label
			g_code_buffer.push('s7_lb')
			g_code_buffer.push(toBase32(my_label&0x7fffffff))
			g_code_buffer.push(':')
		if g_enable_debug_instrumentation:
			g_local_return_buffer.push("spapPopCallStack();")
		if readPool(pecall)==EFLAG_FCALL+0:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		val=getExprValue(pe_opr)
		if val.tid==g_vtid_UNINIT:
			//it didn't return anything
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t=getValueTypeEx(pecall,val)
		if tisstruct(t):
			//should have been hacked
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		g_local_return_buffer.push('return ')
		sbk=g_code_buffer
		g_code_buffer=g_local_return_buffer
		genCode(pe_opr,0)
		g_local_return_buffer.push(';')
		g_code_buffer=sbk
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	//returning counts as side effect
	registerPrimitive(g_id_C_return,__zero(fcompiler_callback),fdummy_callback,fc_return_oncgen,FFLAG_SPECIAL|FFLAG_RC_HAS_SIDE_EFFECT|FFLAG_IS_PRELIVE)
	ffunction_type_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		pe_rettype=readPool(pecall+EXPR_OFS_ARGS+n_args-1)
		val=getExprValue(pe_rettype)
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t_return=getExprValueAs(pe_rettype,g_vtid_CTVAL)
		//t_return==0 is valid
		t_function=makeFunctionTypeRaw(pecall,pecall,t_return,0)
		if !t_function:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_CTVAL,'val':t_function}
	}
	registerPrimitive(g_id_function_type,__zero(fcompiler_callback),ffunction_type_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	////////////
	fexport_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==2)
		id_export_name=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_STR)
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if pobjfn:
			setFunctionUsed(pobjfn)
			setParameterSlotTypes(pobjfn)
		if !id_export_name||!pobjfn:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		fn=readPoolTyped(pobjfn,TFunction)
		if !(fn.flags&FFLAG_EXPORTED):
			if !(fn.flags&FFLAG_CGEN_QUEUED):
				fn.flags|=FFLAG_CGEN_QUEUED
				g_gencode_queue.push(fn.pe_decl)
			fn.flags|=FFLAG_EXPORTED
			fn.id_name=id_export_name
			writePoolTyped(pobjfn,fn)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fexport_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==2)
		id_export_name=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_STR)
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if !id_export_name||!pobjfn:
			errorAtExpr(ETYPE_ERROR,pecall,"in __export(name,function), both parameters have to be constants")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//fn=readPoolTyped(pobjfn,TFunction)
		//if !(fn.flags&FFLAG_EXPORTED):
		//	if !(fn.flags&FFLAG_CGEN_QUEUED):
		//		fn.flags|=FFLAG_CGEN_QUEUED
		//		g_gencode_queue.push(fn.pe_decl)
		//	fn.flags|=FFLAG_EXPORTED
		//	fn'id_name':id_export_name
		//	writePoolTyped(pobjfn,fn)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	//g_id_export
	registerPrimitive(g_id_export,__zero(fcompiler_callback),fexport_oneval,fexport_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	////////////
	fcimport_eval=function(PExpression pecall,int expr_oplevel){
		pobjfn=getExprFunction(pecall)
		if !pobjfn:
			assert(0)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		fn=readPoolTyped(pobjfn,TFunction)
		pe_decl=fn.pe_decl
		assert((readPool(pe_decl)&~EFLAG_MASK)>=3)
		petype=readPool(pe_decl+(EXPR_OFS_ARGS+0))
		t=evaluateAsType(petype)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//Writeln('^_^')
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	cbobj_cimport_eval=registerCompilerCallback(fcimport_eval)
	fcimport_cgen=function(PExpression pecall,int expr_oplevel){
		pobjfn=getExprFunction(pecall)
		if !pobjfn:
			assert(0)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		fn=readPoolTyped(pobjfn,TFunction)
		pe_decl=fn.pe_decl
		n_args_decl=getExprNArgs(pe_decl)
		assert(n_args_decl>=3)
		pe_fname=readPool(pe_decl+EXPR_OFS_ARGS+1)
		id_func=getExprValueAs(pe_fname,g_vtid_STR)
		id_header=getExprValueAs(readPool(pe_decl+EXPR_OFS_ARGS+2),g_vtid_STR)
		if !id_func:
			errorAtExpr(ETYPE_ERROR,pe_fname,"C function name has to be a constant, not '@1'".Replace(["@1",citeexpr(pe_fname)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if n_args_decl>3:
			for i=3:2:n_args_decl-2
				pe_c_name=readPool(pe_decl+EXPR_OFS_ARGS+i);id_c_name=getExprValueAs(pe_c_name,g_vtid_STR)
				pe_c_file=readPool(pe_decl+EXPR_OFS_ARGS+i+1);id_c_file=getExprValueAs(pe_c_file,g_vtid_STR)
				if !id_c_name:
					errorAtExpr(ETYPE_ERROR,pe_c_name,"JSON key name has to be a constant, not '@1'".Replace(["@1",citeexpr(pe_c_name)]))
				if !id_c_file:
					errorAtExpr(ETYPE_ERROR,pe_c_file,"JSON file name has to be a constant, not '@1'".Replace(["@1",citeexpr(pe_c_file)]))
				if id_c_name&&id_c_file:
					arr=g_json_pool[id_c_name]
					if !arr:
						arr=new int[]
						g_json_pool[id_c_name]=arr
					arr.push(id_c_file)
		if id_header&&!(fn.flags&FFLAG_C_HEADER_INCLUDED):
			setFFlag(pobjfn,FFLAG_C_HEADER_INCLUDED)
			g_c_headers.push(id_header)
		if g_enable_debug_instrumentation:
			g_code_buffer.push('(')
			genLineInfoExpr(pecall)
			g_code_buffer.push(',')
		g_code_buffer.push(getIdString(id_func))
		g_code_buffer.push('(')
		n_args=getExprNArgs(pecall)
		for i=0:n_args-1
			if i:g_code_buffer.push(',')
			genCode(readPool(pecall+EXPR_OFS_ARGS+i),LEVEL_ASSIGNMENT)
		g_code_buffer.push(')')
		if g_enable_debug_instrumentation:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	g_cbobj_cimport_cgen=registerCompilerCallback(fcimport_cgen)
	fcimport_oneval=function(PExpression pecall,int expr_oplevel){
		val_existing=getExprValue(pecall)
		if val_existing.tid==g_vtid_CTVAL||val_existing.tid==g_vtid_RTVAR:
			//prevent duplicate evaluation
			return val_existing
		n_args=getExprNArgs(pecall)
		if n_args<3:
			errorAtExpr(ETYPE_ERROR,pecall,"__c_function(type,'function','header.h' [,'json-key','json-file', ...]) has to take at least 3 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_CTVAL,'val':poolObject(TFunction(){
				'flags':FFLAG_IMPORTED,
				'pe_decl':pecall,
				'obj_oneval':cbobj_cimport_eval,
				'obj_oncgen':g_cbobj_cimport_cgen
			})}
	}
	registerPrimitive(g_id_c_function,__zero(fcompiler_callback),fcimport_oneval,fdummy_callback,FFLAG_SPECIAL)
	////////////
	fstore_onreach=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2&&n_args!=3:
			errorAtExpr(ETYPE_ERROR,pecall,"__store(variable,expr) can only take 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pevarname=readPool(pecall+(EXPR_OFS_ARGS))
		if !isExpr(pevarname,EFLAG_VARIABLE):
			errorAtExpr(ETYPE_ERROR,pecall,"the variable in __store(variable,expr) has to be a variable")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_var=getVariable(pevarname)
		if isVariable(pobj_var):
			//insert the expression into a store chain
			//Writeln('chain ',pobj_var,' ',pecall)
			assert(readPool(pobj_var+VAR_OFS_STORE_QUEUE)!=pecall)
			writePool(pecall+EXPR_OFS_NEXT_V_USER,readPool(pobj_var+VAR_OFS_STORE_QUEUE))
			writePool(pobj_var+VAR_OFS_STORE_QUEUE,pecall)
		sccpQueueReach(readPool(pecall+((EXPR_OFS_ARGS)+1)))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fstore_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==2||n_args==3)
		pevarname=readPool(pecall+(EXPR_OFS_ARGS))
		if (readPool(pevarname)&EFLAG_MASK)!=EFLAG_VARIABLE:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_var=getVariable(pevarname)
		pe_value=readPool(pecall+((EXPR_OFS_ARGS)+1))
		return fstore_eval_core(pecall,pobj_var,pe_value,1)
	}
	fstore_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==2||n_args==3)
		pe_var=readPool(pecall+EXPR_OFS_ARGS+0)
		peexpr=readPool(pecall+EXPR_OFS_ARGS+1)
		if isBuiltin(peexpr,g_id_ldparam):
			//do not generate ldparam
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//somehow, this is still needed
		val=getExprValue(pe_var)
		if val.tid==g_vtid_CNS||val.tid==g_vtid_CTVAL||val.tid==g_vtid_STR:
			//const-folded
			if isExpr(peexpr,EFLAG_FCALL)&&!isBuiltin(peexpr,g_id_function):
				//we do need to generate it -- impure function returning constant
			else
				//Writeln('!!!BAD ASS!!! ',dumpExpr(pecall,fcolor_abbrv_blocks))
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		//can't really update a parameter
		pobj_var=getVariable(pe_var)
		if pobj_var&&testUserFlag(pobj_var,VAR_FLAG_PARAM):
			errorAtExpr(ETYPE_ERROR,pecall,"parameter '@1' can't be modified".Replace(["@1",citeexpr(pe_var)]))
			//Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
			//Writeln(">>> "+dumpCode(pecall,fcolor_reach_eval))
			//assert(0)
		genCode(pe_var,LEVEL_STORE_HACK)
		g_code_buffer.push('=')
		genCode(peexpr,LEVEL_ASSIGNMENT)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_store,fstore_onreach,fstore_oneval,fstore_oncgen,FFLAG_SPECIAL)
	////////////
	fcast_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=readPool(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"__cast has to take 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		petype=readPool(pecall+EXPR_OFS_ARGS+0)
		pesrc=readPool(pecall+EXPR_OFS_ARGS+1)
		t_result=getExprValueAs(petype,g_vtid_CTVAL)
		if !t_result:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		val_src=getExprValue(pesrc)
		if val_src.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val_src.tid==g_vtid_CNS:
			if tisbuiltin(t_result):
				ca=Util.ctNumber(val_src.val)
				//if !(u32(readPool(t_result+1))<u32(CTYPE_COUNT)):
				//	Writeln(dumpExpr(pecall,NULL))
				//	Writeln(dumpType(t_result))
				//	assert(0)
				//if dumpType(t_result)=="f64":
				//	Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
				//Writeln(dumpExpr(pecall,NULL)+" "+dumpType(t_result))
				ca=castConst(ca,t_result)
				if ca.type==CTYPE_INVALID:
					errorAtExpr(ETYPE_ERROR,pecall,"invalid cast '@1'".Replace(["@1",citeexpr(pecall)]))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ca.type,ca.val_bin)}
			if tisclass(t_result)&&val_src.val==g_cid_null:
				//typed NULL
				ca=Util.ctNumber(val_src.val)
				ca=castConst(ca,t_result)
				assert(ca.type!=CTYPE_INVALID)
				return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ca.type,ca.val_bin)}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t_result}
	}
	fcast_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=readPool(pecall)
		if n_args!=2:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		petype=readPool(pecall+EXPR_OFS_ARGS+0)
		pesrc=readPool(pecall+EXPR_OFS_ARGS+1)
		t_src=getExprType(pesrc)
		if !t_src:
			//Writeln(dumpExpr(pecall,fcolor_abbrv_blocks))
			errorAtExpr(ETYPE_ERROR,pecall,"invalid source operand for __cast")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t_result=getExprValueAs(petype,g_vtid_CTVAL)
		if !t_result:
			errorAtExpr(ETYPE_ERROR,pecall,"invalid target type for __cast")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//__cast is just for forced object casts, C-like basic type casts, and stuff
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('(')
		genType(t_result)
		g_code_buffer.push(')')
		genCode(pesrc,LEVEL_PREFIX)
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_cast,__zero(fcompiler_callback),fcast_oneval,fcast_oncgen,FFLAG_SPECIAL)
	////////////
	fblock_oneval=function(PExpression pecall,int expr_oplevel){
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fblock_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if expr_oplevel>0:
			assert(0)
		else
			for i=0:n_args-1
				auto pe=readPool(pecall+EXPR_OFS_ARGS+i)
				if g_enable_c_line_info:
					//generate #line
					paepos0=readPool(pe+1)
					if paepos0:
						assert(readPool(paepos0)==g_tid_TAdvancedEpos)
						if readPool(paepos0+1)<0:
							paepos0=readPool(paepos0+2)
					if paepos0&&g_current_c_line_epos!=paepos0:
						(id_fn0,ln0,col0)=getLineInfo(readPool(paepos0+1))
						if id_fn0!=g_current_c_line_idfn||ln0!=g_current_c_line_line:
							g_code_buffer.push('\n#line ')
							g_code_buffer.push(new string(ln0+1))
							if id_fn0!=g_current_c_line_idfn:
								g_code_buffer.push(' ')
								g_code_buffer.push('"')
								g_code_buffer.push(genString(getIdString(id_fn0)))
								g_code_buffer.push('"')
							g_code_buffer.push('\n')
						g_current_c_line_epos=paepos0
						g_current_c_line_idfn=id_fn0
						g_current_c_line_line=ln0
				genCode(pe,0)
				if g_code_buffer.n>=1&&g_code_buffer.back()==';':continue
				if g_code_buffer.n>=2&&(g_code_buffer.back()=='\n'&&g_code_buffer[g_code_buffer.n-2]==';'):continue
				g_code_buffer.push(';')
				if !g_enable_c_line_info:
					g_code_buffer.push('\n')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_block,__zero(fcompiler_callback),fblock_oneval,fblock_oncgen,FFLAG_SPECIAL)
	////////////
	fblockex_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args>0)
		p_args=0
		id_word=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+p_args),g_vtid_STR)
		is_loop=0
		if id_word==g_id_for:
			is_loop=1
			g_code_buffer.push('for(;;){')
			p_args++
			id_word=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+p_args),g_vtid_STR)
		if id_word==g_id_blockex:
			//it's a host
			p_args++
			id_word=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+p_args),g_vtid_STR)
			bk_label=g_current_labels[id_word]
			my_label=(is_loop&&(id_word==g_id_break||id_word==g_id_continue)?-1:pecall)
			g_current_labels[id_word]=my_label
			p_args++
			bk_label2=0;has_word2=0;id_word2=0
			if p_args<n_args-1:
				//we're hosting another type, break+continue
				has_word2=1
				id_word2=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+p_args),g_vtid_STR)
				bk_label2=g_current_labels[id_word2]
				my_label2=(is_loop&&(id_word2==g_id_break||id_word2==g_id_continue)?-1:pecall)
				g_current_labels[id_word2]=my_label2
				p_args++
			genCode(readPool(pecall+EXPR_OFS_ARGS+p_args),0)
			if has_word2:
				my_label=g_current_labels[id_word2]
				if my_label!=-1&&(my_label&0x80000000):
					g_code_buffer.push('s7_lb')
					g_code_buffer.push(toBase32(my_label&0x7fffffff))
					g_code_buffer.push(':;')
				g_current_labels[id_word2]=bk_label2
			my_label=g_current_labels[id_word]
			if my_label!=-1&&(my_label&0x80000000):
				g_code_buffer.push('s7_lb')
				g_code_buffer.push(toBase32(my_label&0x7fffffff))
				g_code_buffer.push(':;')
			g_current_labels[id_word]=bk_label
		else
			my_label=g_current_labels[id_word]
			if my_label==-1:
				g_code_buffer.push(getIdString(id_word))
				g_code_buffer.push(';')
			else
				if !my_label:
					errorAtExpr(ETYPE_ERROR,pecall,"can't find a corresponding scope for this '@1'".Replace(["@1",getIdString(id_word)]))
				g_code_buffer.push('goto s7_lb')
				g_code_buffer.push(toBase32(my_label&0x7fffffff))
				g_code_buffer.push(';')
				if !(my_label&0x80000000):
					g_current_labels[id_word]=(my_label|0x80000000)
		if is_loop:
			g_code_buffer.push('}')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	//coulddo: separate break/continue/loop: break/continue has side effect, loop doesn't... but it's a bad idea to defer anything beyond a loop, even if it's pure
	registerPrimitive(g_id_blockex,__zero(fcompiler_callback),fdummy_callback,fblockex_oncgen,FFLAG_SPECIAL|FFLAG_STATEMENT_HOST|FFLAG_RC_HAS_SIDE_EFFECT|FFLAG_IS_PRELIVE)
	////////////
	auto FunctionToLogic(PExpression pe)
		//function as logic: .ptr_fn
		val=getExprValue(pe)
		if val.tid!=g_vtid_RTVAR:return 0
		if !tisfunction(val.val):return 0
		pecaller=readPool(pe+EXPR_OFS_CALLER)
		sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return call(g_id_dot,pe,exprstr(g_id_ptr_fn))}))
		return 1
	fif_onreach=function(PExpression pecall,int expr_oplevel){
		//reach the cond and the clause values, nothing else
		n_args=getExprNArgs(pecall)
		for i=0:2:n_args-2
			sccpQueueReach(readPool(pecall+EXPR_OFS_ARGS+i))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fif_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		pe_cond=readPool(pecall+EXPR_OFS_ARGS+0)
		val_cond=getExprValue(pe_cond)
		if val_cond.tid==g_vtid_UNINIT:
			//if is invalid before the condition can be evaluated
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if FunctionToLogic(pe_cond):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val_cond.tid==g_vtid_CNS||val_cond.tid==g_vtid_STR:
			//compare with the clause values and pick one
			cns_branch=computeConstIfBranch(pecall,val_cond)
			sccpQueueReach(readPool(pecall+EXPR_OFS_ARGS+cns_branch))
		else
			//reach all clauses
			for i=1:2:n_args-1
				sccpQueueReach(readPool(pecall+EXPR_OFS_ARGS+i))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fif_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(!expr_oplevel)
		n_args=getExprNArgs(pecall)
		if n_args==4:
			pe_case_value=readPool(pecall+EXPR_OFS_ARGS+2)
			val_case_value=getExprValue(pe_case_value)
			if isValueZero(val_case_value):
				//it's a normal if
				g_code_buffer.push('if(')
				genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_ASSIGNMENT)
				g_code_buffer.push('){')
				genCode(readPool(pecall+EXPR_OFS_ARGS+1),0)
				g_code_buffer.push('}')
				pe_else=readPool(pecall+EXPR_OFS_ARGS+3)
				if (readPool(pe_else)&EFLAG_MASK)==EFLAG_CONST:
					//no else
				else
					g_code_buffer.push('else{')
					genCode(pe_else,0)
					g_code_buffer.push('}')
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		errored=0
		appeared=new int[int]
		for i=2:2:n_args-2
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			val_i=getExprValue(pe_argi)
			if val_i.tid!=g_vtid_CNS:
				errorAtExpr(ETYPE_ERROR,pe_argi,"case label must be a constant integer, but '@1' isn't a const".Replace(["@1",citeexpr(pe_argi)]))
				errored=1
				continue
			t_i=getExprType(pe_argi)
			if !tisctype(t_i,CTYPE_INT):
				errorAtExpr(ETYPE_ERROR,pe_argi,"case label must be a constant integer, but type '@2' expression '@1' isn't an integer".Replace(["@1",citeexpr(pe_argi),"@2",dumpType(t_i)]))
				errored=1
				continue
			if appeared[val_i.val]:
				errorAtExpr(ETYPE_ERROR,pe_argi,"case label '@1' has already appeared before".Replace(["@1",citeexpr(pe_argi)]))
				errorAtExpr(ETYPE_NOTE,appeared[val_i.val],"in here as '@1'".Replace(["@1",citeexpr(appeared[val_i.val])]))
				continue
			appeared[val_i.val]=pe_argi
		if !errored:
			g_code_buffer.push('switch(')
			genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_ASSIGNMENT)
			g_code_buffer.push('){')
			for i=2:2:n_args-2
				pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
				val_i=getExprValue(pe_argi)
				assert(val_i.tid==g_vtid_CNS)
				g_code_buffer.push('case ')
				genConst(val_i.val)
				g_code_buffer.push(':')
				///////////////
				pe_body=readPool(pecall+EXPR_OFS_ARGS+i+1)
				if readPool(pe_body)==EFLAG_STRING+g_id_case:
					//fall through
					g_code_buffer.push(';')
					if !g_enable_c_line_info:
						g_code_buffer.push('\n')
				else
					genCode(pe_body,0)
					g_code_buffer.push('break;')
			g_code_buffer.push('default:')
			genCode(readPool(pecall+EXPR_OFS_ARGS+1),0)
			g_code_buffer.push(';}')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_if,fif_onreach,fif_oneval,fif_oncgen,FFLAG_SPECIAL|FFLAG_STATEMENT_HOST)
	////////////
	fassert_ctval_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<2:return TSCCPValue(){'tid':g_vtid_UNINIT}
		pearg0=readPool(pecall+EXPR_OFS_ARGS+0)
		if getExprValueAs(pearg0,g_vtid_STR)==g_id_assert_type:
			//type assertion
			assert(n_args==4)
			val_t_expected=getExprValue(readPool(pecall+EXPR_OFS_ARGS+2))
			if val_t_expected.tid==g_vtid_UNINIT:return TSCCPValue(){'tid':g_vtid_UNINIT}
			t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+3),g_vtid_CTVAL)
			if !(val_t_expected.tid==g_vtid_CTVAL&&val_t_expected.val==t):
				id_error=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_STR)
				errorAtExpr(ETYPE_ERROR,pearg0,new(getIdString(id_error)).Replace(["@1",citeexpr(pearg0)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		val=getExprValue(pearg0)
		if val.tid==g_vtid_RTVAR:
			id_error=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_STR)
			errorAtExpr(ETYPE_ERROR,pearg0,new(getIdString(id_error)).Replace(["@1",citeexpr(pearg0)]))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_assert_ctval,__zero(fcompiler_callback),fassert_ctval_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	////////////
	fldparam_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==3)
		//serial id, type, name
		pobjfn=getOwningFunction(pecall)
		p_param_values=readPool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
		param_id=getExprValueAs(readPool(pecall+(EXPR_OFS_ARGS+0)),g_vtid_CNS)
		return readPoolTyped(p_param_values+param_id*3,TSCCPValue)
		//petype=readPool(pecall+(EXPR_OFS_ARGS+1))
		//t=evaluateAsType(petype)
		//if !t:
		//	//errorAtExpr(ETYPE_ERROR,petype,FormatAsText("invalid type '",citeexpr(petype),"'"))
		//	return TSCCPValue(){'tid':g_vtid_UNINIT}
		//return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	registerPrimitive(g_id_ldparam,__zero(fcompiler_callback),fldparam_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	////////////
	faliased_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		auto t=getValueType(getExprValue(readPool(pecall+EXPR_OFS_ARGS+0)))
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		else
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	registerPrimitive(g_id_aliased,__zero(fcompiler_callback),faliased_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_RC_HAS_SIDE_EFFECT)
	registerPrimitive(g_id_nop,__zero(fcompiler_callback),__zero(fcompiler_callback),__zero(fcompiler_callback),FFLAG_BUILTIN_HACK)
	registerPrimitive(g_id_keep_alive,__zero(fcompiler_callback),fdummy_callback,fdummy_callback,FFLAG_BUILTIN_HACK|FFLAG_IS_PRELIVE)
	//////////////////////////////////////
	//dotting
	fldlambda_oneval=function(PExpression pecall,int expr_oplevel){
		pobj_var=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if !pobj_var:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return readPoolTyped(pobj_var,TSCCPValue)
	}
	fldlambda_oncgen=function(PExpression pecall,int expr_oplevel){
		//if expr_oplevel&&expr_oplevel<LEVEL_POSTFIX:
		//	got_bracket=1
		//	g_code_buffer.push('(')
		debug_instrumented=0
		if g_enable_debug_instrumentation:
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			if !isBuiltin(pecaller,g_id_operator_and)||readPool(pecaller)!=EFLAG_FCALL+1:
				//avoid instrumenting when we're the operand of an unary &
				debug_instrumented=1
				g_code_buffer.push('(')
				genLineInfoExpr(pecall)
				g_code_buffer.push(',')
		pobj_var=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if readPool(pobj_var)==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if Platform.BUILD=="debug":
			if readPool(pobj_var)!=g_vtid_RTVAR:
				Writeln(dumpExpr(pecall,fcolor_abbrv_blocks))
		assert(readPool(pobj_var)==g_vtid_RTVAR)
		t_member=readPool(pobj_var+1)
		need_bracket=0
		if tisstruct(t_member):
			//ldlambda cgen for struct
			if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
				need_bracket=1
				g_code_buffer.push('(')
			g_code_buffer.push('&')
		genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_POSTFIX)
		g_code_buffer.push('->m_')
		g_code_buffer.push(toBase32(pobj_var))
		if need_bracket:
			g_code_buffer.push(')')
		if debug_instrumented:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_ldlambda,__zero(fcompiler_callback),fldlambda_oneval,fldlambda_oncgen,FFLAG_SPECIAL)
	fstlambda_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(!expr_oplevel)
		if g_enable_debug_instrumentation:
			genLineInfoExpr(pecall)
			g_code_buffer.push(';')
		genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_POSTFIX)
		g_code_buffer.push('->m_')
		pobj_var=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		g_code_buffer.push(toBase32(pobj_var))
		g_code_buffer.push('=')
		genCode(readPool(pecall+EXPR_OFS_ARGS+2),LEVEL_ASSIGNMENT)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_stlambda,__zero(fcompiler_callback),__zero(fcompiler_callback),fstlambda_oncgen,FFLAG_SPECIAL)
	registerPrimitive(g_id_struct_copy,__zero(fcompiler_callback),fstore_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	fgetparentctx_oneval=function(PExpression pecall,int expr_oplevel){
		pe_levels=readPool(pecall+EXPR_OFS_ARGS+0)
		val=getExprValue(pe_levels)
		if val.tid==g_vtid_CTVAL:
			//the smart version, translate later
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':val.val}
		n_levels=getExprValueAs(pe_levels,g_vtid_CNS)
		//assert(!n_levels)
		if n_levels:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t=getOwningFunction(pecall)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		else
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fgetparentctx_oncgen=function(PExpression pecall,int expr_oplevel){
		n_levels=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CNS)
		if n_levels==0x80000000:
			//root
			g_code_buffer.push('(&s7_BR)')
		else
			assert(n_levels>=0)
			if !n_levels:
				pf_owner=getOwningFunction(pecall)
				if !(getFFlag(pf_owner)&FFLAG_LAMBDA_NEEDS_CONTEXT):
					//unnecessary context, use NULL
					g_code_buffer.push('NULL')
				else
					g_code_buffer.push('s7_BL')
			else
				g_code_buffer.push('s7_BP')
			for j=1:n_levels-1
				g_code_buffer.push('->p')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_get_lambda_context,__zero(fcompiler_callback),fgetparentctx_oneval,fgetparentctx_oncgen,FFLAG_SPECIAL)
	//return __get_lambda_context(0)
	fdot_oneval=function(PExpression pecall,int expr_oplevel){
		//__dot(obj,"member")
		//hack for template
		pe_id_name=readPool(pecall+EXPR_OFS_ARGS+1)
		if isExpr(pe_id_name,EFLAG_CTVAL):
			val=getExprValueAs(pe_id_name,g_vtid_CTVAL)
			if !isVariable(val):
				return TSCCPValue(){'tid':g_vtid_CTVAL,'val':val}
		//hack for special members: array new, tuple[], function.call
		id_member=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_STR)
		if id_member==g_id_operator_bracket||id_member==g_id_set_operator_bracket:
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			if readPool(pecaller+EXPR_OFS_FUNCTION)==pecall:
				assert(readPool(pecaller)==EFLAG_FCALL+1+(id_member==g_id_set_operator_bracket))
				peobj=readPool(pecall+EXPR_OFS_ARGS+0)
				pe_subscript=readPool(pecaller+EXPR_OFS_ARGS+0)
				//type[n] or type[type]
				t_element=getExprValueAs(peobj,g_vtid_CTVAL)
				if id_member==g_id_operator_bracket&&t_element&&(tisbuiltin(t_element)||tisclass(t_element)):
					pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
					sccpQueueReach(insertCallAt(pecaller_caller,pecaller,function(PExpression pe){return call(g_id_array_or_map,peobj,pe_subscript)}))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				//tuple[CNS], this is writable
				t_object=getExprType(peobj)
				if t_object&&tistuple(t_object):
					//g_id_tuple_bracket
					if id_member==g_id_operator_bracket:	
						pe_tuple_bracket=call(g_id_tuple_bracket,peobj,pe_subscript)
					else
						pe_tuple_bracket=call(g_id_tuple_bracket,peobj,pe_subscript,readPool(pecaller+EXPR_OFS_ARGS+1))
					replaceExpr(pecaller,pe_tuple_bracket)
					return TSCCPValue(){'tid':g_vtid_UNINIT}
		if id_member==g_id_call:
			pecaller=readPool(pecall+EXPR_OFS_CALLER)
			if readPool(pecaller+EXPR_OFS_FUNCTION)==pecall:
				peobj=readPool(pecall+EXPR_OFS_ARGS+0)
				pobjfn_called=getExprValueAs(peobj,g_vtid_CTVAL)
				//function.call
				if pobjfn_called&&readPool(pobjfn_called)==g_tid_TFunction||tisfunction(getExprType(peobj)):
					if readPool(pecaller)!=EFLAG_FCALL+1:
						errorAtExpr(ETYPE_ERROR,pecaller,"indirect call '@1' can only take one tuple as argument".Replace(["@1",citeexpr(pecaller)]))
						return TSCCPValue(){'tid':g_vtid_UNINIT}
					pe_arg=readPool(pecaller+EXPR_OFS_ARGS+0)
					replaceExpr(pecaller,call(g_id_tuple_call,peobj,pe_arg))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
		//actual member handling
		pe_member_name=readPool(pecall+EXPR_OFS_ARGS+1)
		if getExprValue(pe_member_name).tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_member=getDotMember(pecall,1)
		if !pobj_member:
			if DEBUG_EVAL_LOG:
				Writeln('  no such member')
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//queue as a user
		if !testUserFlag(pecall,QUEUE_FLAG_USERS):
			setUserFlag(pecall,QUEUE_FLAG_USERS)
			writePool(pecall+EXPR_OFS_NEXT_V_USER,readPool(pobj_member+VAR_OFS_USER_QUEUE))
			writePool(pobj_member+VAR_OFS_USER_QUEUE,pecall)
		return readPoolTyped(pobj_member,TSCCPValue)
	}
	registerPrimitive(g_id_dot,__zero(fcompiler_callback),fdot_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fstdot_oneval=function(PExpression pecall,int expr_oplevel){
		//__stdot(obj,"member",value)
		pe_member_name=readPool(pecall+EXPR_OFS_ARGS+1)
		if getExprValue(pe_member_name).tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_member=getDotMember(pecall,1)
		if !pobj_member:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !testUserFlag(pecall,QUEUE_FLAG_DOT):
			//we only reach here once
			assert(readPool(pobj_member+VAR_OFS_STORE_QUEUE)!=pecall)
			writePool(pecall+EXPR_OFS_NEXT_V_USER,readPool(pobj_member+VAR_OFS_STORE_QUEUE))
			writePool(pobj_member+VAR_OFS_STORE_QUEUE,pecall)
			setUserFlag(pecall,QUEUE_FLAG_DOT)
		pe_value=readPool(pecall+EXPR_OFS_ARGS+2)
		return fstore_eval_core(pecall,pobj_member,pe_value,0)
	}
	registerPrimitive(g_id_stdot,__zero(fcompiler_callback),fstdot_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fdeclare_struct_slots_cgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		id_mode=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS),g_vtid_STR)
		if id_mode==g_id_struct:
			pf_owner=getOwningFunction(pecall)
			sbak=g_code_buffer
			g_code_buffer=g_structs_slots_buffer
			g_code_buffer.push('struct s7_TS')
			g_code_buffer.push(toBase32(pf_owner))
			g_code_buffer.push('{')
			for i=1:n_args-1
				genCode(readPool(pecall+EXPR_OFS_ARGS+i),0)
				g_code_buffer.push('m_')
				g_code_buffer.push(string(i-1))
				g_code_buffer.push(';')
				g_code_buffer.push('\n')
				g_current_c_line_epos=0
			g_code_buffer.push('};')
			g_code_buffer=sbak
			//the function-level declaration buffer
			g_local_decl_buffer.push('struct s7_TS')
			g_local_decl_buffer.push(toBase32(pf_owner))
			g_local_decl_buffer.push(' s7_Bs;')
		else
			g_code_buffer.push('union{')
			for i=1:n_args-1
				t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+i),g_vtid_CTVAL)
				genType(t)
				assert(g_code_buffer.back()=='*')
				g_code_buffer.pop()
				g_code_buffer.push(' m_')
				g_code_buffer.push(toBase32(t))
				g_code_buffer.push(';')
				g_code_buffer.push('\n')
				g_current_c_line_epos=0
			g_code_buffer.push('}')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_C_declare_struct_slots,__zero(fcompiler_callback),__zero(fcompiler_callback),fdeclare_struct_slots_cgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	fget_struct_slot_cgen=function(PExpression pecall,int expr_oplevel){
		str_slotid=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CNS)
		t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('(')
		genType(t)
		g_code_buffer.push(')memset(')
		g_code_buffer.push('&s7_Bs.m_')
		g_code_buffer.push(string(str_slotid))
		g_code_buffer.push('.m_')
		g_code_buffer.push(toBase32(t))
		g_code_buffer.push(',0,sizeof(')
		genType(t)
		g_code_buffer.pop()
		g_code_buffer.push('))')
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_C_get_struct_slot,__zero(fcompiler_callback),__zero(fcompiler_callback),fget_struct_slot_cgen,FFLAG_SPECIAL)
	frezero_struct_slot_cgen=function(PExpression pecall,int expr_oplevel){
		pe_target=readPool(pecall+EXPR_OFS_ARGS+0)
		t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		assert(!expr_oplevel)
		g_code_buffer.push('memset(')
		genCode(pe_target,LEVEL_ASSIGNMENT)
		g_code_buffer.push(',0,sizeof(')
		genType(t)
		g_code_buffer.pop()
		g_code_buffer.push('))')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_C_rezero_struct_slot,__zero(fcompiler_callback),__zero(fcompiler_callback),frezero_struct_slot_cgen,FFLAG_SPECIAL)
	//create a tuple type and new it
	registerPrimitive(g_id_uninit,__zero(fcompiler_callback),fdummy_callback,__zero(fcompiler_callback),FFLAG_SPECIAL)
	ftuple_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args==1&&getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CNS):
			//numbered tuple
			n_elements=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CNS)
			ids=new int[n_elements]
			for i=0:n_elements-1
				ids[i]=getTupleId(i)
			n_args=n_elements
		else
			ids=new int[n_args]
			for i=0:n_args-1
				id_argi=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+i),g_vtid_STR)
				if !id_argi:
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				ids[i]=id_argi
		is_numeric_tuple=1
		for i=0:n_args-1
			if ids[i]!=getTupleId(i):
				is_numeric_tuple=0
				break
		//create the struct ctor and construct it
		g_names_resolved=0
		as=new PExpression[n_args+is_numeric_tuple+2]
		as[0]=call(g_id_store,exprvar(g_id_this),call(g_id_get_lambda_context,expriptr(0)),expriptr(0))
		for i=0:n_args-1
			//forgo the check, __tuple is always parser-generated
			as[i+1]=call(g_id_store,exprvar(ids[i]),call(g_id_uninit))
		if is_numeric_tuple:
			as[n_args+1]=call(g_id_store,exprvar(g_id_length),expriptr(n_args))
		as[n_args+is_numeric_tuple+1]=call(g_id_store,exprvar(g_id_return),exprvar(g_id_this))
		pe_tuple_maker=indcall([call(g_id_function,exprstr(g_id_struct),vcall(g_id_block,as))])
		resolveNames(pe_tuple_maker,0)
		g_names_resolved=1
		pobjfn_tuple=getExprValueAs(readPool(pe_tuple_maker+EXPR_OFS_FUNCTION),g_vtid_CTVAL)
		assert(!!pobjfn_tuple&&readPool(pobjfn_tuple)==g_tid_TFunction)
		if is_numeric_tuple:
			setFFlag(pobjfn_tuple,FFLAG_IS_TUPLE)
			if g_readable_c_code:
				id_typename=getid("tuple<")
				if is_numeric_tuple:
					id_typename=catid(id_typename,getid(string(n_args)))
				else
					for i=0:n_args-1
						if i:id_typename=catid(id_typename,getid(","))
						id_typename=catid(id_typename,ids[i])
				id_typename=catid(id_typename,getid(">"))
				writePool(pobjfn_tuple+FUNCTION_OFS_NAME,id_typename)
		replaceExpr(pecall,pe_tuple_maker)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_tuple,__zero(fcompiler_callback),ftuple_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	//////////////////////////////////////
	//rc
	auto genRefcntCCode(PExpression pecall,int expr_oplevel,int check_finalize)
		delta=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CNS)
		pe_var=readPool(pecall+EXPR_OFS_ARGS+0)
		if isExpr(pe_var,EFLAG_CONST):
			pobj_var=0
			t=getOwningFunction(pecall)
		else
			//if !isExpr(readPool(pecall+EXPR_OFS_ARGS+0),EFLAG_VARIABLE):
			//	Writeln(dumpExpr(pecall,fcolor_abbrv_blocks))
			assert(isExpr(readPool(pecall+EXPR_OFS_ARGS+0),EFLAG_VARIABLE))
			pobj_var=getVariable(pe_var)
			t=getVariableType(pobj_var)
		auto genObject()
			if !pobj_var:
				g_code_buffer.push('s7_BL')
			else if tisclass(t):
				//if t==g_variant_type:
				//	//variant case - make use of RTTI
				//	assert(0)
				genVar(pobj_var)
			else
				g_code_buffer.push('err!')
		if delta==0x3ffffffe&&!check_finalize:
			//pre-destruction setref
			genVar(pobj_var)
			if Util.bitSize()==64:
				g_code_buffer.push('->s7rc+=0x3ffffffffffffffeLL')
			else
				g_code_buffer.push('->s7rc+=0x3ffffffe')
			return
		//need_bracket=0
		//if expr_oplevel&&expr_oplevel<=70:
		//	need_bracket=1
		//	g_code_buffer.push('(')
		assert(!expr_oplevel)
		if (
		pobj_var&&tisrealclass(t)&&testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED|VAR_FLAG_CLASS_STACK_STYLE_RC)||
		!pobj_var&&!(getFFlag(t)&FFLAG_LAMBDA_LEAKED)):
			//stack allocation case
			if DEBUG_DUMP_STACKALLOC:
				Writeln('stackalloc-rc ',dumpExpr(pecall,fcolor_abbrv_blocks),
					testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED)?' VAR_FLAG_CLASS_IS_STACK_ALLOCED':'',
					testUserFlag(pobj_var,VAR_FLAG_CLASS_STACK_STYLE_RC)?' VAR_FLAG_CLASS_STACK_STYLE_RC':'')
			if delta>0:
				//don't need NULL test
				//if testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED):
				//else
				//	g_code_buffer.push('if(')
				//	genObject()
				//	g_code_buffer.push(')')
				genObject()
				g_code_buffer.push('->s7rc+=')
				g_code_buffer.push(string(delta*2))
			else
				//only need to finalize if there's a dtor
				pf_dtor=readPool(t+FUNCTION_OFS_FINALIZER)
				if pobj_var&&testUserFlag(pobj_var,VAR_FLAG_ARRAY_STACK_ALLOCED):
					//remove dtor call for VAR_FLAG_ARRAY_STACK_ALLOCED
					sainfo=g_array_stackalloc_info[pobj_var]
					t_element=sainfo.x
					if Platform.BUILD=="debug":
						if !t_element:
							Writeln('bad stack array ',dumpObject(pobj_var))
					assert(!!t_element)
					//if we need RC... we still need the dtor
					if !tisclass(t_element):
						pf_dtor=0
				//Writeln(dumpExpr(pecall,fcolor_abbrv_blocks),' ',dumpType(t),' ',pf_dtor)
				if check_finalize&&pf_dtor:
					g_code_buffer.push('if(')
					genObject()
					g_code_buffer.push(')')
					g_code_buffer.push('if((')
					genObject()
					g_code_buffer.push('->s7rc')
					if delta:
						g_code_buffer.push(FormatAsText('+=',delta*2))
					g_code_buffer.push(')<=0)')
					if g_enable_debug_instrumentation:
						g_code_buffer.push('(')
						genLineInfoExpr(pecall)
						g_code_buffer.push(',')
					fgenerate_C_fcall(pecall,pf_dtor,0, 1)
					g_code_buffer.pop()//')'
					//g_code_buffer.push('0,')
					genObject()
					g_code_buffer.push(')')
					if g_enable_debug_instrumentation:
						g_code_buffer.push(')')
			return
		g_code_buffer.push('if(')
		genObject()
		g_code_buffer.push(')')
		if check_finalize:
			g_code_buffer.push('if((')
		genObject()
		g_code_buffer.push('->s7rc')
		if delta:
			g_code_buffer.push(FormatAsText('+=',delta*2))
		if check_finalize:
			g_code_buffer.push(')<=0)')
			pf_dtor=readPool(t+FUNCTION_OFS_FINALIZER)
			if g_enable_debug_instrumentation:
				g_code_buffer.push('(')
				genLineInfoExpr(pecall)
				g_code_buffer.push(',')
			if pf_dtor:
				fgenerate_C_fcall(pecall,pf_dtor,0, 1)
				g_code_buffer.pop()//')'
				//g_code_buffer.push('1,')
			else
				g_code_buffer.push('free(')
			genObject()
			g_code_buffer.push(')')
			if g_enable_debug_instrumentation:
				g_code_buffer.push(')')
			//genObject()
			//g_code_buffer.push('=NULL')
	faddref_oncgen=function(PExpression pecall,int expr_oplevel){
		genRefcntCCode(pecall,expr_oplevel,0)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_addref,__zero(fcompiler_callback),__zero(fcompiler_callback),faddref_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	frelease_oncgen=function(PExpression pecall,int expr_oplevel){
		genRefcntCCode(pecall,expr_oplevel,1)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_release,__zero(fcompiler_callback),__zero(fcompiler_callback),frelease_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	//registerPrimitive(g_id_rc_local_holder,__zero(fcompiler_callback),fdummy_callback,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fexplicitrc_oneval=function(PExpression pecall,int expr_oplevel){
		peobj=readPool(pecall+EXPR_OFS_ARGS+0)
		val_obj=getExprValue(peobj)
		if val_obj.tid==g_vtid_STR:
			//constant string dotted, force into rtvar
			pobj_str_var=PCTObject(0)
			if isExpr(peobj,EFLAG_VARIABLE):
				pobj_str_var=getVariable(peobj)
			else if isExpr(peobj,EFLAG_FCALL):
				pobjfn=getExprFunction(peobj)
				if pobjfn:
					pobj_str_var=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
			if pobj_str_var:
				//dotted const strings become vars
				fstore_eval_core_ex(pecall,pobj_str_var,TSCCPValue(){'tid':g_vtid_RTVAR,'val':getStdObject(pecall,STDTYPE_STRING)},1)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_explicit_rc,__zero(fcompiler_callback),fexplicitrc_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	registerPrimitive(g_id_rc_barrier,__zero(fcompiler_callback),fdummy_callback,fdummy_callback,FFLAG_SPECIAL|FFLAG_RC_HAS_SIDE_EFFECT|FFLAG_IS_PRELIVE)
	fcfree_oncgen=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)==2+EFLAG_FCALL:
			//variant free - rtti call
			g_s7_TF_rtti_dtor_used=1
			g_code_buffer.push('((s7_TF_rtti_dtor)')
			genCode(readPool(pecall+EXPR_OFS_ARGS),LEVEL_POSTFIX)
			g_code_buffer.push('->s7rtti)((void*)')
			genCode(readPool(pecall+EXPR_OFS_ARGS),LEVEL_PREFIX)
			g_code_buffer.push(')')
		else
			assert(readPool(pecall+0)==1+EFLAG_FCALL)
			g_code_buffer.push('if(')
			genCode(readPool(pecall+EXPR_OFS_ARGS),LEVEL_ASSIGNMENT)
			g_code_buffer.push('->s7rc&1){free(')
			genCode(readPool(pecall+EXPR_OFS_ARGS),LEVEL_ASSIGNMENT)
			g_code_buffer.push(');}')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_C_free,__zero(fcompiler_callback),__zero(fcompiler_callback),fcfree_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	//////////////////////////////////////
	//exposed raw functionality
	fcsizeof_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=1+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"sizeof(expression) takes exactly 1 parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_opr=readPool(pecall+EXPR_OFS_ARGS)
		t=getExprValueAs(pe_opr,g_vtid_CTVAL)
		if !t||!tisclass(t)&&!tisbuiltin(t):
			t=getExprType(pe_opr)
			if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
		if tisbuiltin(t):
			ct=readPool(t+1)
			if ct==CTYPE_TYPED_NULL||ct==CTYPE_POINTER:
				n_bytes=(Util.bitSize()>>3)
			else
				n_bytes=((ct&~CTYPE_MASK)+1)
			assert(const_type(CTYPE_INT,Util.bitSize())<CTYPE_COUNT)
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,Util.bitSize()),i64(n_bytes))}
		if tisrealclass(t):
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,Util.bitSize()),i64(Util.bitSize()>>3))}
		if tisfunction(t):
			//the two-pointer struct is hard-coded
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,Util.bitSize()),i64(Util.bitSize()>>2))}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getBuiltinType(const_type(CTYPE_INT,Util.bitSize()))}
	}
	fcsizeof_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall+0)==1+EFLAG_FCALL)
		g_code_buffer.push('sizeof(')
		pe_opr=readPool(pecall+EXPR_OFS_ARGS)
		t=getExprValueAs(pe_opr,g_vtid_CTVAL)
		if t:
			genType(t)
			if tisstruct(t):
				assert(g_code_buffer.back()=='*')
				g_code_buffer.pop()
		else
			genCode(pe_opr,LEVEL_ASSIGNMENT)
		g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_sizeof,__zero(fcompiler_callback),fcsizeof_oneval,fcsizeof_oncgen,FFLAG_SPECIAL)
	fmemory_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall+0)==2+EFLAG_FCALL)
		t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fmemory_oncgen=function(PExpression pecall,int expr_oplevel){
		if g_enable_debug_instrumentation:
			g_code_buffer.push('(')
			genLineInfoExpr(pecall)
			g_code_buffer.push(',')
		assert(readPool(pecall+0)==2+EFLAG_FCALL)
		pe_type=readPool(pecall+EXPR_OFS_ARGS)
		t=getExprValueAs(pe_type,g_vtid_CTVAL)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('*(')
		genType(t)
		g_code_buffer.push('*)')
		genCode(readPool(pecall+EXPR_OFS_ARGS+1),LEVEL_PREFIX)
		if need_bracket:
			g_code_buffer.push(')')
		if g_enable_debug_instrumentation:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_memory,__zero(fcompiler_callback),fmemory_oneval,fmemory_oncgen,FFLAG_SPECIAL)
	fset_memory_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall+0)==3+EFLAG_FCALL)
		assert(expr_oplevel==0)
		if g_enable_debug_instrumentation:
			genLineInfoExpr(pecall)
			g_code_buffer.push(';')
		pe_type=readPool(pecall+EXPR_OFS_ARGS)
		t=getExprValueAs(pe_type,g_vtid_CTVAL)
		g_code_buffer.push('*(')
		genType(t)
		g_code_buffer.push('*)')
		genCode(readPool(pecall+EXPR_OFS_ARGS+1),LEVEL_PREFIX)
		g_code_buffer.push('=')
		genCode(readPool(pecall+EXPR_OFS_ARGS+2),LEVEL_SELECT)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_set_memory,__zero(fcompiler_callback),fdummy_callback,fset_memory_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	//////////////////////////////////////
	//template utility
	fis_type_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=2+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"__is_type('meta-type',expression) takes exactly 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		id_meta_type=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS),g_vtid_STR)
		if !id_meta_type:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if id_meta_type==g_id_function:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(tisfunction(t)))}
		if id_meta_type==g_id_struct:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(tisstruct(t)))}
		if id_meta_type==g_id_class:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(tisrealclass(t)))}
		if id_meta_type==g_id_builtin:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(tisbuiltin(t)))}
		if id_meta_type==g_id_int:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64((tisctype(t,CTYPE_INT)||tisctype(t,CTYPE_UINT))))}
		if id_meta_type==g_id_float:return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(tisctype(t,CTYPE_FLOAT)))}
		errorAtExpr(ETYPE_ERROR,readPool(pecall+EXPR_OFS_ARGS),"invalid meta-type category '@1' for __is_type".Replace(["@1",getIdString(id_meta_type)]))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_is_type,__zero(fcompiler_callback),fis_type_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fparameter_count_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=1+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"__parameter_count(function) takes exactly 1 parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		if !pobjfn||readPool(pobjfn)!=g_tid_TFunction:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
		return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(((readPool(pe_decl)&~EFLAG_MASK)-2)>>1))}
	}
	registerPrimitive(g_id_parameter_count,__zero(fcompiler_callback),fparameter_count_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	finline_clone_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=1+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"__inline_clone(function) takes exactly 1 parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		if !pobjfn||readPool(pobjfn)!=g_tid_TFunction:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		assert(getCcnv(pobjfn)!=g_id_inline_loopbody)
		if getCcnv(pobjfn)==g_id_inline:
			//if it's already inline, don't clone
			return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobjfn}
		if getFFlag(pobjfn)&FFLAG_IS_SYMDERIV:
			//wait for _deriv translation
			t_symderiv_return=getReturnType(pobjfn)
			if !t_symderiv_return:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			if tisstruct(t_symderiv_return):
				enableNameLookup(t_symderiv_return)
				p_members=readPool(t_symderiv_return+FUNCTION_OFS_PMEMBER_LIST)
				n_members=readPool(t_symderiv_return+FUNCTION_OFS_NMEMBER_LIST)
				for i=0:n_members-1
					id_member=readPool(p_members+i)
					if id_member==g_id_this||id_member==g_id_return:continue
					pobj_member=lookupFunctionVariable(t_symderiv_return,id_member)
					t_member=getVariableType(pobj_member)
					if !t_member:
						//depend on the member
						pe_dep_dummy=exprvar(pobj_member)
						writePool(pe_dep_dummy+EXPR_OFS_CALLER,pecall)
						sccpQueueReach(pe_dep_dummy)
						return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn_cloned=readCtUniqueInEvalFlow(0,[g_id_inline_clone,pobjfn])
		if !pobjfn_cloned:
			pobjfn_cloned=cloneFunction(pobjfn)
			writeCtUniqueInEvalFlow([g_id_inline_clone,pobjfn],pobjfn_cloned)
			pe_decl=readPool(pobjfn_cloned+FUNCTION_OFS_PEDECL)
			pe_ccnv=readPool(pe_decl+EXPR_OFS_ARGS+0)
			writePool(pe_ccnv,g_id_inline+EFLAG_STRING)
			writePool(pobjfn_cloned+FUNCTION_OFS_ONEVAL,g_cbobj_expand_inline_oneval)
			writePool(pobjfn_cloned+FUNCTION_OFS_ONCGEN,0)
		return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobjfn_cloned}
	}
	registerPrimitive(g_id_inline_clone,__zero(fcompiler_callback),finline_clone_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	ftypeof_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=1+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"typeof(expression) takes exactly 1 parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		val=getExprValue(pe_opr)
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val.tid==g_vtid_CTVAL:
			//Writeln(getIdString(readPool(val.val)))
			if readPool(val.val)==g_tid_TFunction&&getCcnv(val.val)!=g_id_function||readPool(val.val)==g_tid_TBuiltinType:
				//typeless thingy, return zero
				return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(0))}
		t=getValueTypeEx(pe_opr,val)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		else
			return TSCCPValue(){'tid':g_vtid_CTVAL,'val':t}
	}
	registerPrimitive(g_id_typeof,__zero(fcompiler_callback),ftypeof_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	ftypename_oneval=function(PExpression pecall,int expr_oplevel){
		if readPool(pecall+0)!=1+EFLAG_FCALL:
			errorAtExpr(ETYPE_ERROR,pecall,"__type_name(type) takes exactly 1 parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		val=getExprValue(pe_opr)
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val.tid==g_vtid_CTVAL:
			//Writeln(getIdString(readPool(val.val)))
			t=val.val
			return TSCCPValue(){'tid':g_vtid_STR,'val':getid(dumpType(t))}
		errorAtExpr(ETYPE_ERROR,pecall,"__type_name(type) can only take a type as parameter")
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_type_name,__zero(fcompiler_callback),ftypename_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	farraytype_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall+0)==1+EFLAG_FCALL)
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		t_array=getStdObject(pecall,STDTYPE_ARRAY)
		if !t_array:return TSCCPValue(){'tid':g_vtid_UNINIT}
		replaceExpr(pecall,indcall([exprctval(t_array),pe_opr]))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_array_type,__zero(fcompiler_callback),farraytype_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	ftuple_call_oneval=function(PExpression pecall,int expr_oplevel){
		peobj=readPool(pecall+EXPR_OFS_ARGS+0)
		pe_arg=readPool(pecall+EXPR_OFS_ARGS+1)
		//translate it to a better form
		t_tuple=getExprType(pe_arg)
		if !t_tuple:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !tistuple(t_tuple)
			errorAtExpr(ETYPE_ERROR,peobj,"the indirect call argument '@1' must be a tuple, not @2".Replace(["@1",citeexpr(pe_arg),"@2",dumpType(t_tuple)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//generate the indirect call
		pv_this=rcGetVariableIfExprIsOne(pe_arg)
		as=PExpression[].NULL
		if !pv_this:
			pf_owner=getOwningFunction(pecall)
			pv_this=makevar(pf_owner)
			as=new PExpression[1]
			as.push(call(g_id_store,exprvar(pv_this),pe_arg))
		enableNameLookup(t_tuple)
		p_members=readPool(t_tuple+FUNCTION_OFS_PMEMBER_LIST)
		n_members=readPool(t_tuple+FUNCTION_OFS_NMEMBER_LIST)
		as_indcall=new PExpression[]
		as_indcall.push(peobj)
		for i=0:n_members-1
			id_member=readPool(p_members+i)
			if id_member==g_id_length||id_member==g_id_this||id_member==g_id_return:continue
			as_indcall.push(call(g_id_dot,exprvar(pv_this),exprstr(id_member)))
		transformCode(pecall,__zero(ftransformer_callback),as,indcall(as_indcall),PExpression[].NULL)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_tuple_call,__zero(fcompiler_callback),ftuple_call_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	ftuple_bracket_oneval=function(PExpression pecall,int expr_oplevel){
		peobj=readPool(pecall+EXPR_OFS_ARGS+0)
		pe_subscript=readPool(pecall+EXPR_OFS_ARGS+1)
		val_subscript=getExprValue(pe_subscript)
		if val_subscript.tid==g_vtid_CNS:
			cns_subscript=getExprValueAs(pe_subscript,g_vtid_CNS)
			if u32(cns_subscript)<u32(int(g_tuple_ids.n)):
				if readPool(pecall)==EFLAG_FCALL+2:
					//replace with a tuple dot and remove the call
					//writePool(readPool(pecall+EXPR_OFS_ARGS+1),EFLAG_STRING+getTupleId(cns_subscript))
					//pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
					transformCode(pecall,__zero(ftransformer_callback),[lockValueCheck(pe_subscript,g_id_error_int_cannot_change)],call(g_id_dot,peobj,exprstr(getTupleId(cns_subscript))),PExpression[].NULL)
				else
					//replace with a stdot call and add an object slot
					pe_stdot_value=readPool(pecall+EXPR_OFS_ARGS+2)
					transformCode(pecall,__zero(ftransformer_callback),[lockValueCheck(pe_subscript,g_id_error_int_cannot_change)],call(g_id_stdot,peobj,exprstr(getTupleId(cns_subscript)),pe_stdot_value),PExpression[].NULL)
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			else
				errorAtExpr(ETYPE_ERROR,pe_subscript,"invalid tuple subscript '@1'==@2".Replace(["@1",citeexpr(pe_subscript),"@2",string(cns_subscript)]))
		else if val_subscript.tid==g_vtid_UNINIT:
			//Writeln(string(pe_subscript)+" damn "+dumpExpr(pe_subscript,fcolor_reach_eval))
			//System.IO.stdin.ReadLine()
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		errorAtExpr(ETYPE_ERROR,pe_subscript,"tuple subscript '@1' in '@2' must be a constant".Replace(["@1",citeexpr(pe_subscript),"@2",citeexpr(pecall)]))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_tuple_bracket,__zero(fcompiler_callback),ftuple_bracket_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	flist_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		t_all=PCTObject(0)
		pe_argi_previous=PExpression(0)
		for i=0:n_args-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			t=getExprType(pe_argi)
			if !t:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			if i:
				t_merged=typeMerge(pecall,t_all,t, pe_argi_previous,pe_argi,0)
				if !t_merged:
					errorAtExpr(ETYPE_ERROR,pe_argi,"type '@1' expression '@2' is incompatible with previous list element types '@3'".Replace([
						"@1",dumpType(t),
						"@2",citeexpr(pe_argi),
						"@3",dumpType(t_all)]))
					setnop(pecall)
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				t_all=t_merged
			else
				t_all=t
			pe_argi_previous=pe_argi
		//todo: all-const case
		assert(!!t_all)
		pf_owner=getOwningFunction(pecall)
		pobj_var=makevar(pf_owner)
		as=new PExpression[1+n_args]
		as[0]=call(g_id_store,exprvar(pobj_var),indcall([call(g_id_array_type,exprctval(t_all)),expriptr(n_args),exprcns(getid_const(const_type(CTYPE_INT,16),0LL))]))
		for i=0:n_args-1
			as[i+1]=indcall([call(g_id_dot,exprvar(pobj_var),exprstr(g_id_set_operator_bracket)),expriptr(i),readPool(pecall+EXPR_OFS_ARGS+i)])
		transformCode(pecall,__zero(ftransformer_callback), as,exprvar(pobj_var),PExpression[].NULL)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_list,__zero(fcompiler_callback),flist_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fhas_member_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"__has_member(object,'name') takes exactly 2 arguments")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_name=readPool(pecall+EXPR_OFS_ARGS+1)
		if getExprValue(pe_name).tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		id_name=getExprValueAs(pe_name,g_vtid_STR)
		if !id_name:
			errorAtExpr(ETYPE_ERROR,pe_name,"__has_member(object,'name') can only take a string as the member name")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		peobj=readPool(pecall+EXPR_OFS_ARGS+0)
		t_object=getExprType(peobj)
		if !t_object:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !tisclass(t_object):
			//not class, no member
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),0LL)}
		//Writeln('>>> ',lookupFunctionVariable(t_object,id_name),' ',getIdString(id_name))
		return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(lookupFunctionVariable(t_object,id_name)))}
	}
	registerPrimitive(g_id_has_member,__zero(fcompiler_callback),fhas_member_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fmember_list_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=1:
			errorAtExpr(ETYPE_ERROR,pecall,"__member_list(object) takes exactly 1 object/type argument")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_arg=readPool(pecall+EXPR_OFS_ARGS+0)
		t_class=getExprValueAs(pe_arg,g_vtid_CTVAL)
		if !t_class:
			t_class=getExprType(pe_arg)
			if !t_class:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		id_all_members=new int[]
		if tisclass(t_class):
			enableNameLookup(t_class)
			p_members=readPool(t_class+FUNCTION_OFS_PMEMBER_LIST)
			n_members=readPool(t_class+FUNCTION_OFS_NMEMBER_LIST)
			for i=0:n_members-1
				id_member=readPool(p_members+i)
				if id_member==g_id_this||id_member==g_id_return||!id_member:continue
				id_all_members.push(id_member)
		else
			//or namespaces
			errorAtExpr(ETYPE_ERROR,pecall,"__member_list(object) only works on class/struct types, not '@1'".Replace(["@1",dumpType(t_class)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		////
		pf_owner=getOwningFunction(pecall)
		pe_tuple=makeTuple(int(id_all_members.n))
		pv_return_new=makevar(pf_owner)
		as=new PExpression[]
		as.push(call(g_id_store,exprvar(pv_return_new),pe_tuple))
		foreach id,I in id_all_members
			as.push(call(g_id_stdot,exprvar(pv_return_new),exprstr(getTupleId(int(I))),exprstr(id)))
		transformCode(pecall,__zero(ftransformer_callback), as,exprvar(pv_return_new),PExpression[].NULL)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_member_list,__zero(fcompiler_callback),fmember_list_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fis_variable_onreach=function(PExpression pecall,int expr_oplevel){
		sccpQueueReach(readPool(pecall+EXPR_OFS_ARGS+0))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fis_variable_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"__is_variable(variable,{}) takes exactly 2 arguments")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		val=getExprValue(readPool(pecall+EXPR_OFS_ARGS+0))
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val.tid==g_vtid_RTVAR:
			//pecaller=readPool(pecall+EXPR_OFS_CALLER)
			//sccpQueueReach(insertCallAt(pecaller,pecall,function(PExpression pe){return readPool(pecall+EXPR_OFS_ARGS+1)}))
			replaceExpr(pecall,readPool(pecall+EXPR_OFS_ARGS+1))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_is_variable,fis_variable_onreach,fis_variable_oneval,fdummy_callback,FFLAG_SPECIAL|FFLAG_STATEMENT_HOST)
	fget_rtti_oneval=function(PExpression pecall,int expr_oplevel){
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getBuiltinType(const_type(CTYPE_INT,Util.bitSize()))}
	}
	fget_rtti_oncgen=function(PExpression pecall,int expr_oplevel){
		pe_object=readPool(pecall+EXPR_OFS_ARGS+0)
		t_object=getExprValueAs(pe_object,g_vtid_CTVAL)
		if t_object:
			//type RTTI - dtor name, fill during lambda tran
			pf_dtor=readPool(t_object+FUNCTION_OFS_FINALIZER)
			assert(!!pf_dtor)
			g_code_buffer.push('((void*)')
			genFunctionName(pf_dtor)
			g_code_buffer.push(')')
		else
			//object RTTI, take the member
			genCode(pe_object,LEVEL_POSTFIX)
			g_code_buffer.push('->s7rtti')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_get_rtti,__zero(fcompiler_callback),fget_rtti_oneval,fget_rtti_oncgen,FFLAG_SPECIAL)
	fforce_reach_oneval=function(PExpression pecall,int expr_oplevel){
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		if pobjfn:setFunctionUsed(pobjfn)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_reach,__zero(fcompiler_callback),fforce_reach_oneval,fdummy_callback,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	//fforce_alive_oneval=function(PExpression pecall,int expr_oplevel){
	//	return TSCCPValue(){'tid':g_vtid_UNINIT}
	//}
	registerPrimitive(g_id_force_alive,__zero(fcompiler_callback),fdummy_callback,fdummy_callback,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	fforce_var_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall)==EFLAG_FCALL+1)
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		t=getExprType(pe_opr)
		if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fforce_var_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall)==EFLAG_FCALL+1)
		pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
		genCode(pe_opr,expr_oplevel)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_force_var,__zero(fcompiler_callback),fforce_var_oneval,fforce_var_oncgen,FFLAG_SPECIAL)
	registerPrimitive(g_id_force_leak,__zero(fcompiler_callback),fdummy_callback,fdummy_callback,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	registerPrimitive(g_id_disable_inline_return,__zero(fcompiler_callback),fdummy_callback,fdummy_callback,FFLAG_SPECIAL)
	freport_error=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<1:
			errorAtExpr(ETYPE_ERROR,pecall,"__error('format',...) has to take at least one parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_format=readPool(pecall+EXPR_OFS_ARGS+0)
		id_serror=getExprValueAs(pe_format,g_vtid_STR)
		if !id_serror&&getExprValue(pe_format).tid!=g_vtid_UNINIT:
			errorAtExpr(ETYPE_ERROR,pecall,"__error('format',...) has to take a format string as the first parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		serror=new(getIdString(id_serror))
		s_to_replace=new string[]
		for i=1:n_args-1
			s_to_replace.push("@"+string(i))
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			val=getExprValue(pe_argi)
			if val.tid==g_vtid_UNINIT:return TSCCPValue(){'tid':g_vtid_UNINIT}
			if val.tid==g_vtid_CNS:
				sret=dumpConst(Util.g_const_values[val.val])
			else if val.tid==g_vtid_STR:
				sret=new(getIdString(val.val))
			else if val.tid==g_vtid_CTVAL:
				if isFunction(val.val):
					if tisclass(val.val)
						sret=dumpType(val.val)
					else
						sret=dumpFunction(val.val)
				else if readPool(val.val)==g_tid_TBuiltinType:
					sret=dumpType(val.val)
				else
					sret=dumpObject(val.val)
			else
				sret=citeexpr(pe_argi)
			s_to_replace.push(sret)
		serror=s_to_replace.n?serror.Replace(s_to_replace):serror
		errorAtExpr(ETYPE_ERROR,pecall,serror)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_report_error,__zero(fcompiler_callback),freport_error,fdummy_callback,FFLAG_SPECIAL)
	registerPrimitive(g_id_cite_param,__zero(fcompiler_callback),__zero(fcompiler_callback),__zero(fcompiler_callback),FFLAG_SPECIAL)
	farray_or_map_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall)==EFLAG_FCALL+2)
		peobj=readPool(pecall+EXPR_OFS_ARGS+0)
		pe_subscript=readPool(pecall+EXPR_OFS_ARGS+1)
		val_subscript=getExprValue(pe_subscript)
		if val_subscript.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val_subscript.tid==g_vtid_CTVAL:
			//it's a map
			t_map=getStdObject(pecall,STDTYPE_MAP)
			if !t_map:return TSCCPValue(){'tid':g_vtid_UNINIT}
			replaceExpr(pecall,indcall([exprctval(t_map),pe_subscript,peobj]))
		else
			//translate T.[] into Array(T), this is read-only
			t_array=getStdObject(pecall,STDTYPE_ARRAY)
			if !t_array:return TSCCPValue(){'tid':g_vtid_UNINIT}
			replaceExpr(pecall,indcall([indcall([exprctval(t_array),peobj]),pe_subscript,exprcns(getid_const(const_type(CTYPE_INT,16),0LL))]))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_array_or_map,__zero(fcompiler_callback),farray_or_map_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fnew_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall)==EFLAG_FCALL+1)
		pe_type=readPool(pecall+EXPR_OFS_ARGS+0)
		val=getExprValue(pe_type)
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val.tid==g_vtid_CTVAL&&tisclass(val.val):
			//transform to a call
			replaceExpr(pecall,indcall([pe_type]))
		else
			//transform into "clone"
			pobjfn_clone=getStdObject(pecall,STDFN_CLONE)
			if !pobjfn_clone:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			insertCallAt(pecall,0,function(PExpression pe){return exprctval(pobjfn_clone)})
			sccpQueueEval(pecall)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_new,__zero(fcompiler_callback),fnew_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fset_fflag=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"set___fflag(function,value) has to take exactly two parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_func=readPool(pecall+EXPR_OFS_ARGS+0)
		pe_flags=readPool(pecall+EXPR_OFS_ARGS+1)
		if getExprValue(pe_func).tid==g_vtid_UNINIT||getExprValue(pe_flags).tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=getExprValueAs(pe_func,g_vtid_CTVAL)
		if !pobjfn:
			errorAtExpr(ETYPE_ERROR,pe_func,"set___fflag(function,value) has to take a function for 'name'")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		flag_val=getExprValueAs(pe_flags,g_vtid_CNS)
		setFFlag(pobjfn,flag_val)
		if flag_val&FFLAG_IS_PARALLEL:
			setFunctionUsed(pobjfn)
			setParameterSlotTypes(pobjfn)
		setnop(pecall)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_set_fflag,__zero(fcompiler_callback),fset_fflag,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fstrcns_oneval=function(PExpression pecall,int expr_oplevel){
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getStdObject(pecall,STDTYPE_STRING)}
	}
	fstrcns_cgen=function(PExpression pecall,int expr_oplevel){
		auto id=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_STR)
		auto need_bracket=0
		assert(!!id)
		if expr_oplevel&&expr_oplevel<50:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push("s7_CS1+")
		SWrite(g_code_buffer,g_c_str_idmap[id])
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_global_string_cns,__zero(fcompiler_callback),fstrcns_oneval,fstrcns_cgen,FFLAG_SPECIAL)
	//////////////////////////////////////
	//meta state
	fmeta_state_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=1:
			errorAtExpr(ETYPE_ERROR,pecall,"__meta_state('name') has to take exactly one string parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_name=readPool(pecall+EXPR_OFS_ARGS+0)
		id_name=getExprValueAs(pe_name,g_vtid_STR)
		if !id_name:
			errorAtExpr(ETYPE_ERROR,pe_name,"__meta_state('name') has to take exactly one string parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_ret=readCtUniqueInEvalFlow(pecall,[g_id_meta_state,id_name])
		if pobj_ret:
			return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobj_ret}
		else
			return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_meta_state,__zero(fcompiler_callback),fmeta_state_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	fset_meta_state_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"set___meta_state('name',value) has to take exactly two parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_name=readPool(pecall+EXPR_OFS_ARGS+0)
		id_name=getExprValueAs(pe_name,g_vtid_STR)
		if !id_name:
			errorAtExpr(ETYPE_ERROR,pe_name,"set___meta_state('name',value) has to take a string for 'name'")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		val_existing=getExprValue(pecall)
		pobj_ret=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if val_existing.tid==g_vtid_UNINIT&&pobj_ret:
			writeCtUniqueInEvalFlow([g_id_meta_state,id_name],pobj_ret)
			return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobj_ret}
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_set_meta_state,__zero(fcompiler_callback),fset_meta_state_oneval,fdummy_callback,FFLAG_SPECIAL)
	fgenerate_json_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"__generate_json('category','file') has to take exactly two parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_name=readPool(pecall+EXPR_OFS_ARGS+0)
		id_name=getExprValueAs(pe_name,g_vtid_STR)
		if !id_name:
			errorAtExpr(ETYPE_ERROR,pe_name,"__generate_json('category','file') has to take a string for 'category'")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_value=readPool(pecall+EXPR_OFS_ARGS+1)
		id_value=getExprValueAs(pe_value,g_vtid_STR)
		if !id_value:
			errorAtExpr(ETYPE_ERROR,pe_value,"__generate_json('category','file') has to take a string for 'file'")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		arr=g_json_pool[id_name]
		if !arr:
			arr=new int[]
			g_json_pool[id_name]=arr
		arr.push(id_value)
		setnop(pecall)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_generate_json,__zero(fcompiler_callback),fgenerate_json_oneval,fdummy_callback,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	fprototype_matches_oneval=function(PExpression pecall,int expr_oplevel){
		assert(readPool(pecall)==EFLAG_FCALL+3)
		pe_arg_tuple=readPool(pecall+EXPR_OFS_ARGS+0)
		pobjfn_proto=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		pe_deps=readPool(pecall+EXPR_OFS_ARGS+2)
		if isExpr(pe_deps,EFLAG_VARIABLE):
			//smash the dependency every time
			writePool(pe_deps,EFLAG_STRING+g_empty_id)
		if !pobjfn_proto:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		t_tuple=getExprType(pe_arg_tuple)
		if !t_tuple||!tistuple(t_tuple)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		enableNameLookup(t_tuple)
		p_members=readPool(t_tuple+FUNCTION_OFS_PMEMBER_LIST)
		n_members=readPool(t_tuple+FUNCTION_OFS_NMEMBER_LIST)
		n_args_call=0
		for i=0:n_members-1
			id_member=readPool(p_members+i)
			if id_member==g_id_length||id_member==g_id_this||id_member==g_id_return:continue
			n_args_call++
		n_args_proto=getNumberOfArguments(pobjfn_proto)
		if n_args_call!=n_args_proto:
			replaceExpr(pecall,expriptr(0))
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),0LL)}
		pedecl_proto=readPool(pobjfn_proto+FUNCTION_OFS_PEDECL)
		p_args=0
		for i=0:n_members-1
			id_member=readPool(p_members+i)
			if id_member==g_id_length||id_member==g_id_this||id_member==g_id_return:continue
			pobj_member=lookupFunctionVariable(t_tuple,id_member)
			pe_proto_i=readPool(pedecl_proto+EXPR_OFS_ARGS+1+p_args*2)
			if isExpr(pe_proto_i,EFLAG_STRING):
				//template param, always matches that
			else
				t_call_i=getVariableType(pobj_member)
				if !t_call_i:
					//we need to know all the arg types - dependency
					sccpQueueReach(insertCallAt(pecall,~2,function(PExpression pe){return exprvar(pobj_member)}))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				t_proto_i=getExprValueAs(pe_proto_i,g_vtid_CTVAL)
				//Writeln('=? ',dumpType(t_proto_i),' ',dumpType(t_call_i))
				if t_proto_i&&t_proto_i!=t_call_i:
					//a type mismatch
					//Writeln('mismatch')
					replaceExpr(pecall,expriptr(0))
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),0LL)}
			p_args++
		//Writeln('match')
		replaceExpr(pecall,expriptr(1))
		return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),1LL)}
	}
	registerPrimitive(g_id_prototype_matches,__zero(fcompiler_callback),fprototype_matches_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	if ENABLE_FEM_DSL:{
	//////////////////////////////////////
	//symbolic derivatives
	fderiv_onreach=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<2:
			errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) needs at least 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pefunc=readPool(pecall+EXPR_OFS_ARGS)
		sccpQueueReach(pefunc)
		//val=getExprValue(pefunc)
		//if val.tid==g_vtid_UNINIT||val.tid==g_vtid_UNREACHED:
		//	return TSCCPValue(){'tid':g_vtid_UNINIT}
		//if val.tid!=g_vtid_CTVAL:
		//	errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) requires a function as its first parameter")
		//	return TSCCPValue(){'tid':g_vtid_UNINIT}
		//pobjfn=getAsFunction(val.val)
		//if !pobjfn:
		//	errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) requires a function as its first parameter")
		//	return TSCCPValue(){'tid':g_vtid_UNINIT}
		//pobjfn_dup=ctUnique([g_id_symderiv,pobjfn])
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	derivAddVarDerivs=function(PCTObject pobj_var,PCTObject pobjfn_dup,PCTObject pobj_vderiv){
		vdata=readPoolTyped(pobj_var,TVariable)
		for(pestore=vdata.first_v_store;pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
			//if !testUserFlag(pestore,USER_FLAG_ACTIVATED):continue
			if !isBuiltin(pestore,g_id_store):continue
			//apply _deriv to the result, then rely on _deriv to transform stuff
			//don't apply to store itself, but do apply to other stuff
			//id_original_varname=readPool(readPool(pestore+(EXPR_OFS_ARGS+0))+(EXPR_OFS_NAME+1))
			//compute them and then 
			pe_var=readPool(pestore+(EXPR_OFS_ARGS+0))
			assert(isExpr(pe_var,EFLAG_VARIABLE))
			pobj_original_var=getVariable(pe_var)
			id_original_var__=g_id__
			//if g_readable_c_code:
			if pobj_original_var:
				id_original_var__=catid(readPool(pobj_original_var+VAR_OFS_ID),g_id__)
			pe_original_expr=readPool(pestore+(EXPR_OFS_ARGS+1))
			pobjfn_toplevel=(isExpr(pe_original_expr,EFLAG_FCALL)?getExprFunction(pe_original_expr):0)
			if pobjfn_toplevel:
				pobjfn_compute_reusable_components=ctUnique([g_id_deriv_reusable_components,pobjfn_toplevel])
				if pobjfn_compute_reusable_components:
					pv_reused_tuple=ctUnique([g_id_deriv_reusable_components,pestore])
					if !pv_reused_tuple:
						//we have reusable components - compute them and add the arg to the clones
						as=new PExpression[]
						as.push(exprctval(pobjfn_compute_reusable_components))
						n_args_original_expr=getExprNArgs(pe_original_expr)
						for i=0:n_args_original_expr-1
							as.push(cloneExpr(readPool(pe_original_expr+EXPR_OFS_ARGS+i)))
						as.push(expriptr(0))
						as.push(exprstr(g_empty_id))
						pv_reused_tuple=makevar(pobjfn_dup)
						transformCode(pestore,__zero(ftransformer_callback), [call(g_id_store,exprvar(pv_reused_tuple),indcall(as))],0,PExpression[].NULL)
						ctUnique([g_id_deriv_reusable_components,pestore])=pv_reused_tuple
						if DEBUG_DUMP_DERIV:
							Writeln("precomputing for pobjfn_compute_reusable_components: "+dumpExpr(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),__zero(fcolorer_callback)))
					//add the resulting tuple to pe_original_expr
					as=new PExpression[]
					n_args_original_expr=getExprNArgs(pe_original_expr)
					for i=-1:n_args_original_expr-1
						as.push(cloneExpr(readPool(pe_original_expr+EXPR_OFS_ARGS+i)))
					as.push(exprvar(pv_reused_tuple))
					pe_original_expr=indcall(as)
					if DEBUG_DUMP_DERIV:
						Writeln("triggered pobjfn_compute_reusable_components: "+dumpExpr(pe_original_expr,__zero(fcolorer_callback)))
			pe_store_caller=readPool(pestore+EXPR_OFS_CALLER)
			//Writeln(dumpExpr(pestore,__zero(fcolorer_callback)),' ',pe_store_caller
			fadd_more_stores=function(PExpression pe){
				auto as=new int[]
				as.push(pe)
				pe_deriv_i=cloneExpr(pe_original_expr)
				//sccpQueueReach(pe_deriv_i)
				pe_deriv_i=call(g_id_deriv,pe_deriv_i,expriptr(pobjfn_dup),exprctval(pobj_vderiv))
				pvar_deriv_i=ctUnique([g_id_deriv,pobjfn_dup,pobj_var,pobj_vderiv])
				if !pvar_deriv_i:
					pvar_deriv_i=makevar(pobjfn_dup)
					//if g_readable_c_code:
					vid=readPool(pobj_vderiv+VAR_OFS_ID)
					writePool(pvar_deriv_i+VAR_OFS_ID,gettempid(vid?catid(id_original_var__,vid):0))
					ctUnique([g_id_deriv,pobjfn_dup,pobj_var,pobj_vderiv])=pvar_deriv_i
				pe_store_deriv=call(g_id_store,exprvar(pvar_deriv_i),pe_deriv_i)
				as.push(pe_store_deriv)
				if DEBUG_DUMP_DERIV:
					Writeln('  ',dumpExpr(pe_store_deriv,__zero(fcolorer_callback)))
				return vcall(g_id_block,as)
			}
			sccpQueueReach(insertCallAt(pe_store_caller,pestore,fadd_more_stores))
	}
	FLAG_RELATED=1
	FLAG_REQUIRED=2
	auto memberCnsToRtvar(PExpression pecall,PCTObject t)
		p_members=readPool(t+FUNCTION_OFS_PMEMBER_LIST)
		n_members=readPool(t+FUNCTION_OFS_NMEMBER_LIST)
		for i=0:n_members-1
			id_member=readPool(p_members+i)
			if id_member==g_id_this||id_member==g_id_return:continue
			pobj_member=lookupFunctionVariable(t,id_member)
			if readPool(pobj_member)==g_vtid_CNS:
				t_member=getVariableType(pobj_member)
				assert(!!t_member)
				fstore_eval_core_ex(pecall,pobj_member,TSCCPValue(){'tid':g_vtid_RTVAR,'val':t_member},0)
	auto cdfOptimize(PCTObject pobjfn_dup,PCTObject[] var_list_ret)
		//protect var_list_ret - don't setnop when "renaming" the returners
		tmp_ids=new int[var_list_ret.n]
		for i=0:var_list_ret.n-1
			tmp_ids[i]=readPool(var_list_ret[i]+VAR_OFS_ID)
			writePool(var_list_ret[i]+VAR_OFS_ID,g_id_return)
		partialSSAGVN(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),1,0)
		sccp(0)
		pedecl_new=dfsFlattenBlocks(PExpression[].NULL,readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),0,1).x
		writePool(pobjfn_dup+FUNCTION_OFS_PEDECL,pedecl_new)
		sccp(0)
		for i=0:var_list_ret.n-1
			writePool(var_list_ret[i]+VAR_OFS_ID,tmp_ids[i])
	fsymderiv_oneval=function(PExpression pecall,int is_cdf_pass){
		//per-var scan: we can precisely find out reusable / irrelevant expr components for each var
		//then we leaf them and copy to temp
		n_args=getExprNArgs(pecall)
		if n_args<2:
			errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) needs at least 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pefunc=readPool(pecall+EXPR_OFS_ARGS)
		//Writeln('^_^ ',__LINE__)
		val=getExprValue(pefunc)
		if val.tid==g_vtid_UNINIT://||val.tid==g_vtid_UNREACHED:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//Writeln('^_^ ',__LINE__,' ',getIdString(val.tid))
		if val.tid!=g_vtid_CTVAL:
			errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) requires a function as its first parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=getAsFunction(val.val)
		if !pobjfn:
			errorAtExpr(ETYPE_ERROR,pecall,"symbolicDerivative(function,'var',...) requires a function as its first parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !is_cdf_pass:
			//varify arg/ret elements, if any is available
			//we have to do it before the first strflatten
			//problem: tuple length
			//pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
			//n_args_decl=getExprNArgs(pe_decl)
			//for i=1:2:n_args_decl-2
			//	petype=readPool(pe_decl+EXPR_OFS_ARGS+i)
			//	t=getExprValueAs(petype,g_vtid_CTVAL)
			//	if t&&tisclass(t):
			//		memberCnsToRtvar(pecall,t)
			//t=getReturnType(pobjfn)
			//if t&&tisclass(t):
			//	memberCnsToRtvar(pecall,t)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn_dup=ctUnique([g_id_symderiv,pobjfn])
		if !pobjfn_dup:
			pobjfn_dup=cloneFunction(pobjfn)
			setFFlag(pobjfn_dup,FFLAG_IS_SYMDERIV_TEMP)
			ctUnique([g_id_symderiv,pobjfn])=pobjfn_dup
			sccpQueueReach(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL))
			//sccpQueueReach(fn.code)
			//Writeln(parser.Canonical.dumpExpr(fn.code,fcolor_reach_eval))
			setFunctionUsed(pobjfn_dup)
			//initialize parameter types
			setParameterSlotTypes(pobjfn_dup)
			//sccpQueueEval(pecall)
			//return TSCCPValue(){'tid':g_vtid_UNINIT}
			if DEBUG_DUMP_DERIV:
				Writeln('sccpProcessReaches()')
			sccpProcessReaches()
			if DEBUG_DUMP_DERIV:
				Writeln('>>> after dup')
				Writeln(FormatAsText(dumpExpr(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),fcolor_reach_eval)))
			//if g_readable_c_code:
			id_name0=readPool(pobjfn+FUNCTION_OFS_NAME)
			if id_name0:
				id_name_deriv=catid(getid("deriv_"),id_name0)
			else
				id_name_deriv=getid("deriv_by_")
				for i=1:n_args-1
					peargname=readPool(pecall+EXPR_OFS_ARGS+i)
					flags=readPool(peargname)
					if (flags&EFLAG_MASK)!=EFLAG_STRING:
						continue
					vid=(flags&~EFLAG_MASK)
					id_name_deriv=catid(catid(id_name_deriv,vid),getid("_"))
			writePool(pobjfn_dup+FUNCTION_OFS_NAME,id_name_deriv)
			////we need another iteration to make sure the innards gets evaled
			//return TSCCPValue(){'tid':g_vtid_UNINIT}
			//gotta eval the dupped body before flattening
			sccp(0)
			did_div2rcp=0
			fdiv2rcp=function(PExpression pe){
				if isBuiltin(pe,g_id_operator_div):
					auto pe_arg0=readPool(pe+EXPR_OFS_ARGS+0)
					auto pe_arg1=readPool(pe+EXPR_OFS_ARGS+1)
					auto t=getExprType(pe_arg1)
					assert(tisbuiltin(t))
					if tisbuiltin(t):
						val0=getExprValue(pe_arg0)
						if !isValueOne(val0):
							did_div2rcp=1
							auto pecaller=readPool(pe+EXPR_OFS_CALLER)
							ca=castConst(TConstValue(){'type':const_type(CTYPE_INT,64),'val_bin':1LL},t)
							auto pe_one=exprcns(getid_const(ca.type,ca.val_bin))
							sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return call(g_id_operator_mul,pe_arg0,call(g_id_operator_div,pe_one,pe_arg1))}))
							return 1
				return 1
			}
			dfsExpr(readPool(pobjfn_dup+FUNCTION_OFS_CODE),fdiv2rcp)
			if did_div2rcp:sccp(0)
		//we should eventually reach here again...
		//if !pobjfn_dup:
		//	assert(0)
		//	return TSCCPValue(){'tid':g_vtid_UNINIT}
		//check the variable names
		var_list_ret=g_strflatten_monitored_variables[pecall+0]
		var_list_params=g_strflatten_monitored_variables[pecall+1]
		is_exclusive=ctUnique([g_id_option_exclusive,pobjfn_dup])
		if !var_list_ret:{
			//set up the variable lists
			var_list_params=new PCTObject[]
			for i=1:n_args-1
				peargname=readPool(pecall+EXPR_OFS_ARGS+i)
				vid=getExprValueAs(peargname,g_vtid_STR)
				if vid==g_id_option_exclusive:
					is_exclusive=1
					ctUnique([g_id_option_exclusive,pobjfn_dup])=is_exclusive
					continue
				if !vid:
					errorAtExpr(ETYPE_ERROR,peargname,"symbolicDerivative(function,'var',...) requires all variable names to be strings, but '@1' isn't one".Replace(["@1",citeexpr(peargname)]))
					continue
				pobj_vderiv=lookupFunctionVariable(pobjfn_dup,vid)
				if !pobj_vderiv:
					errorAtExpr(ETYPE_WARNING,peargname,"'@1' did not appear in function '@2' at all, the corresponding partial derivative is always zero and would be dropped".Replace(["@1",getIdString(vid),"@2",citeexpr(peargname)]))
					continue
				var_list_params.push(pobj_vderiv)
			pobj_var_return=getReturnVariable(pobjfn_dup)
			if !pobj_var_return:
				errorAtExpr(ETYPE_ERROR,readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),"to compute derivatives, the original function must return something")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			var_list_ret=[pobj_var_return]
			addFunctionUser(pobjfn_dup,pecall)
			g_strflatten_monitored_variables[pecall+0]=var_list_ret
			g_strflatten_monitored_variables[pecall+1]=var_list_params
		}
		//ensure we evaluate it inside-out
		waiting_on_inner_symderiv=0
		ftest_inner_symderiv=function(PExpression pe){
			if isBuiltin(pe,g_id_assert_ctval)||isBuiltin(pe,g_id_function):return 0
			if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return 0
			if isBuiltin(pe,g_id_symderiv)||isBuiltin(pe,g_id_inline_clone):
				if DEBUG_DUMP_DERIV:
					Writeln('symderiv / inline clone - ',dumpExpr(pe,__zero(fcolorer_callback)))
				waiting_on_inner_symderiv=1
			val=getExprValue(pe)
			if val.tid==g_vtid_UNINIT&&pe==readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION):
				//uninited function, could be symderiv
				if DEBUG_DUMP_DERIV:
					Writeln('uninited function - ',dumpExpr(pe,__zero(fcolorer_callback)))
				waiting_on_inner_symderiv=1
			return !waiting_on_inner_symderiv
		}
		dfsExpr(readPool(pobjfn_dup+FUNCTION_OFS_CODE),ftest_inner_symderiv)
		if waiting_on_inner_symderiv:
			if DEBUG_DUMP_DERIV:
				Writeln('waiting_on_inner_symderiv')
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		//wait for flattening and queue on the waiting variable - create a child
		if localflatten(pecall,pobjfn_dup):
			var_list_ret=g_strflatten_monitored_variables[pecall+0]
			var_list_params=g_strflatten_monitored_variables[pecall+1]
			//we have to re-optimize after every flattening pass!
			cdfOptimize(pobjfn_dup,var_list_ret)
		//but we can't queue on structs / classes
		//the strings are no longer useful, smash them
		//Writeln('wait for flattening >>>')
		foreach pobj_var in var_list_ret
			t=getVariableType(pobj_var)
			//Writeln(dumpType(t),' ',dumpObject(pobj_var))
			if !t||tisclass(t):
				//g_strflatten_eval_queue.push(pecall)
				sccpQueueReach(insertCallAt(pecall,~1,function(PExpression pe){return !t?exprvar(pobj_var):expriptr(0)}))
				if DEBUG_DUMP_DERIV:
					Writeln('waiting on ret variable ',dumpObject(pobj_var),' ',t?dumpType(t):"typeless")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		foreach pobj_var in var_list_params
			t=getVariableType(pobj_var)
			//Writeln(dumpType(t),' ',dumpObject(pobj_var))
			if !t||tisclass(t):
				//g_strflatten_eval_queue.push(pecall)
				sccpQueueReach(insertCallAt(pecall,~1,function(PExpression pe){return !t?exprvar(pobj_var):expriptr(0)}))
				if DEBUG_DUMP_DERIV:
					Writeln('waiting on param variable ',dumpObject(pobj_var),' ',t?dumpType(t):"typeless")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		//Writeln(parser.Canonical.dumpExpr(fn.pe_decl,fcolor_reach_eval))
		all_final_vars=new PCTObject[][]
		for passi=0:1
			foreach pobj_vderiv,J in var_list_params
				auto code=readPool(pobjfn_dup+FUNCTION_OFS_CODE)
				clearUserFlags(code,USER_FLAG_ACTIVATED)
				//mark the variable-related ops
				setUserFlag(pobj_vderiv,FLAG_RELATED)
				Q=[pobj_vderiv|0x80000000]
				for(I=0;I<Q.n;I++)
					if Q[I]&0x80000000:
						pobj_var=Q[I]&~0x80000000
						if !pobj_var||!isVariable(pobj_var):continue
						if DEBUG_DUMP_DERIV:
							Writeln('related: ',dumpObject(pobj_var))
						vdata=readPoolTyped(pobj_var,TVariable)
						//Writeln(string.ToHex(fn.scope))
						for(peuser=vdata.first_v_user;peuser;peuser=readPool(peuser+EXPR_OFS_NEXT_V_USER))
							//if DEBUG_DUMP_DERIV:
							//	Writeln('  deriv-user: ',dumpExpr(peuser,__zero(fcolorer_callback)))
							if !testUserFlag(peuser,USER_FLAG_ACTIVATED):continue
							if testUserFlag(peuser,FLAG_RELATED):continue
							//Writeln('^_^')
							setUserFlag(peuser,FLAG_RELATED)
							Q.push(peuser)
					else
						pe=Q[I]
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						if DEBUG_DUMP_DERIV:
							Writeln(FormatAsText('related: ',dumpExpr(pe,fcolor_reach_eval),' ',isSpecial(pecaller)?"special":""))
						if isSpecial(pecaller):
							//Writeln('special ',pecaller)
							if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+1)==pe:
								pobj_var=getStoreTarget(pecaller)
								//Writeln(pobj_var)
								if pobj_var&&testUserFlag(pobj_var,USER_FLAG_ACTIVATED)&&!testUserFlag(pobj_var,FLAG_RELATED):
									//double-queueing is fine
									//Writeln('queue ',pobj_var,' ',readPoolTyped(pobj_var,TVariable).first_v_user)
									setUserFlag(pobj_var,FLAG_RELATED)
									Q.push(pobj_var|0x80000000)
							if passi==0:
								if isBuiltin(pecaller,g_id_stdot)&&readPool(pecaller+EXPR_OFS_ARGS+2)==pe:
									//all related variables have to be flattened before we can do this
									clearUserFlags(code,0)
									if DEBUG_DUMP_DERIV:
										Writeln('waiting on ',dumpExpr(pecaller,__zero(fcolorer_callback)))
									return TSCCPValue(){'tid':g_vtid_UNINIT}
							//flow control and stuff are ignored
							continue
						if !testUserFlag(pecaller,USER_FLAG_ACTIVATED):continue
						if testUserFlag(pecaller,FLAG_RELATED):continue
						if DEBUG_DUMP_DERIV:
							Writeln('queue caller: ',dumpExpr(pecaller,__zero(fcolorer_callback)))
						setUserFlag(pecaller,FLAG_RELATED)
						Q.push(pecaller)
				if DEBUG_DUMP_USER_FLAGS:
					Writeln('final-relevant: ',Q)
				//mark the result-affecting ops - store chain
				final_vars=new PCTObject[]
				Q=new PCTObject[]
				foreach pobj_var in var_list_ret
					Q.push(pobj_var|0x80000000)
				for(I=0;I<Q.n;I++)
					if Q[I]&0x80000000:
						pobj_var=Q[I]&~0x80000000
						if !pobj_var||!isVariable(pobj_var):continue
						if testUserFlag(pobj_var,USER_FLAG_ACTIVATED|FLAG_RELATED|FLAG_REQUIRED)==(USER_FLAG_ACTIVATED|FLAG_RELATED|FLAG_REQUIRED):
							//we need to deriv this var
							if pobj_var!=pobj_vderiv:
								final_vars.push(pobj_var)
						vdata=readPoolTyped(pobj_var,TVariable)
						for(pestore=vdata.first_v_store;pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
							if !testUserFlag(pestore,USER_FLAG_ACTIVATED):continue
							if testUserFlag(pestore,FLAG_REQUIRED):continue
							setUserFlag(pestore,FLAG_REQUIRED)
							Q.push(pestore)
							//Write(pobj_var,' ',pestore,' ');Writeln(parser.Canonical.dumpCode(pestore,fcolor_user_flags))
					else
						pe=Q[I]
						if !testUserFlag(pe,USER_FLAG_ACTIVATED):continue
						//if isSpecial(pe)&&!isStore(pecaller):
						//	continue
						flags=readPool(pe)
						if (flags&EFLAG_MASK)==EFLAG_FCALL:
							n_args_pe=flags&~EFLAG_MASK
							//Writeln(parser.Canonical.dumpCode(pe,fcolor_user_flags))
							//Writeln(n_args_pe)
							for i=0:n_args_pe-1
								pearg=readPool(pe+EXPR_OFS_ARGS+i)
								if testUserFlag(pearg,FLAG_REQUIRED):continue
								setUserFlag(pearg,FLAG_REQUIRED)
								Q.push(pearg)
								//Writeln(parser.Canonical.dumpCode(pearg,fcolor_user_flags))
						else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
							pobj_var=getVariable(pe)
							if pobj_var&&testUserFlag(pobj_var,USER_FLAG_ACTIVATED)&&!testUserFlag(pobj_var,FLAG_REQUIRED):
								setUserFlag(pobj_var,FLAG_REQUIRED)
								Q.push(pobj_var|0x80000000)
				if DEBUG_DUMP_DERIV:
					//if passi==1:
					//Writeln(dumpCode(code,fcolor_reach_eval))
					//System.IO.stdin.ReadLine()
					Writeln("user flags-"+dumpCode(code,fcolor_user_flags))
					//Writeln(final_vars,' ',pobj_var_return,' ',lookupFunctionVariable(pobjfn_dup,getid("return")))
					//System.IO.stdin.ReadLine()
				final_vars.Sort()
				final_vars.Unique()
				if passi==0:
					//relevance could be wrong here
					//foreach pobj_var in final_vars
					//	if readPool(pobj_var)==g_vtid_UNINIT:
					//		//all relevant variables have to become at least initialized before we can do the derivs
					//		clearUserFlags(code,0)
					//		return TSCCPValue(){'tid':g_vtid_UNINIT}
					//pull out the reusable expressions
					pulled_exprs=new PExpression[]
					auto pullReusable(PExpression pe)
						if isExpr(pe,EFLAG_FCALL):
							auto nargs=readPool(pe)&~EFLAG_MASK
							auto pobj_f=getAsFunction(getExprValueAs(readPool(pe+EXPR_OFS_FUNCTION+0),g_vtid_CTVAL))
							//it's OK for pobj_f to be NULL
							auto pulling_mask=ctUnique([g_id_deriv_pulling_masks,pobj_f])
							//Writeln('pulling_mask=',pulling_mask,' ',dumpObject(pobj_f))
							for i=0:nargs-1
								pearg=readPool(pe+EXPR_OFS_ARGS+i)
								need_recurse=(testUserFlag(pearg,FLAG_REQUIRED)&&testUserFlag(pearg,FLAG_RELATED))
								pulling_mask_arg=0
								if need_recurse:
									//we need to recurse in * / pow pulling
									//and we need to do it first to avoid sccrewing up ordering
									pulling_mask_arg=pullReusable(pearg)
								//else
								//	Writeln('no more recursion into ',dumpExpr(pearg,NULL),' ',testUserFlag(pearg,FLAG_REQUIRED),' ',testUserFlag(pearg,FLAG_RELATED))
								if !testUserFlag(pearg,FLAG_REQUIRED)||!testUserFlag(pearg,FLAG_RELATED)||((pulling_mask>>i)&1)||(pulling_mask_arg&DERIV_HAS_REUSABLE_COMPONENTS):
									if isExpr(pearg,EFLAG_FCALL):
										//pull out
										fpullout=function(PExpression pe){
											auto vtemp=makevar(pobjfn_dup)
											if need_recurse:
												setUserFlag(vtemp,FLAG_RELATED)
												setUserFlag(vtemp,FLAG_REQUIRED)
											pulled_exprs.push(call(g_id_store,exprvar(vtemp),pearg))
											return exprvar(vtemp)
										}
										sccpQueueReach(insertCallAt(pe,~i,fpullout))
							return pulling_mask
						return 0
					foreach pobj_var in final_vars
						vdata=readPoolTyped(pobj_var,TVariable)
						for(pestore=vdata.first_v_store;pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
							//if !testUserFlag(pestore,FLAG_REQUIRED):continue
							//if !testUserFlag(pestore,FLAG_RELATED):continue
							pulled_exprs.clear()
							pullReusable(readPool(pestore+EXPR_OFS_ARGS+1))
							if pulled_exprs.n:
								faddpulled=function(PExpression pestore0){
									pulled_exprs.push(pestore0)
									auto ret=vcall(g_id_block,pulled_exprs)
									pulled_exprs.clear()
									return ret
								}
								sccpQueueReach(insertCallAt(readPool(pestore+EXPR_OFS_CALLER),pestore,faddpulled))
						sccpProcessReaches()
				else
					//we still need a persistent flag to detect inline params - the map
					all_final_vars.push(final_vars)
					//Writeln(final_vars)
					//System.IO.stdin.ReadLine()
				clearUserFlags(code,0)
			if passi==0:
				//Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
				//pre-label all variables as -1
				flabelvar=function(PExpression pe){
					if isExpr(pe,EFLAG_VARIABLE):
						auto pobj_var=getVariable(pe)
						ctUnique([g_id_deriv,pobjfn_dup,pobj_var])=-1
					//else if isBuiltin(pe,g_id_extra_return):
					//	errorAtExpr(ETYPE_ERROR,pe,"to compute derivatives, the function can only return one value")
					return 1
				}
				dfsExpr(readPool(pobjfn_dup+FUNCTION_OFS_CODE),flabelvar)
		if DEBUG_DUMP_DERIV:
			Writeln("before add-deriv: "+dumpExpr(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),__zero(fcolorer_callback)))
		foreach final_vars,I in all_final_vars.ReverseOrder()
			foreach pobj_var in final_vars.ReverseOrder()
				if DEBUG_DUMP_DERIV:
					Writeln('add-deriv ',dumpObject(pobj_var),' ',I)
				derivAddVarDerivs(pobj_var,pobjfn_dup,var_list_params[I])
		////////
		//do the extra returns
		pe_tuple=makeTuple(int(var_list_ret.n*(!is_exclusive+var_list_params.n)))
		pv_return_new=makevar(pobjfn_dup)
		writePool(pv_return_new+VAR_OFS_ID,g_id_return)
		as=new PExpression[]
		as.push(call(g_id_store,exprvar(pv_return_new),pe_tuple))
		tuple_slot_id=0
		if !is_exclusive:
			foreach pobj_var_return in var_list_ret
				as.push(call(g_id_stdot,exprvar(pv_return_new),exprstr(getTupleId(tuple_slot_id)),exprvar(pobj_var_return)))
				tuple_slot_id++
		foreach pobj_vderiv,J in var_list_params
			foreach pobj_var_return in var_list_ret
				//Writeln(dumpObject(pobj_vderiv),' ',dumpObject(pobj_var_return))
				pvar_deriv=ctUnique([g_id_deriv,pobjfn_dup,pobj_var_return,pobj_vderiv])
				//assert(!!pvar_deriv)
				//as.push(exprvar(pvar_deriv))
				as.push(call(g_id_stdot,
					exprvar(pv_return_new),
					exprstr(getTupleId(tuple_slot_id)),
					pvar_deriv?exprvar(pvar_deriv):call(
						g_id_cast,
						exprctval(getVariableType(pobj_var_return)),
						expriptr(0))))
				tuple_slot_id++
		appendCode(pobjfn_dup,as)
		writePool(pobjfn_dup+FUNCTION_OFS_PVAR_RETURN,pv_return_new)
		///////////////
		pecaller=readPool(pecall+EXPR_OFS_CALLER)
		if pecaller:
			//insertCallAt(pecaller,pecall,function(PExpression pe0){writePool(pe0+EXPR_OFS_CALLER,0);return fn.pe_decl})
			pe_ret=exprctval(pobjfn_dup)
			sccpQueueReach(insertCallAt(pecaller,pecall,function(PExpression pe0){return pe_ret}))
			addFunctionUser(pobjfn_dup,pe_ret)
			//avoid duplicated eval
			insertCallAt(pecall,0,function(PExpression pe){return exprvar(g_symbols[g_id_nop].user_slot)})
		writePool(pobjfn_dup+FUNCTION_OFS_FLAGS,(readPool(pobjfn_dup+FUNCTION_OFS_FLAGS)&~FFLAG_IS_SYMDERIV_TEMP)|FFLAG_IS_SYMDERIV)
		if DEBUG_DUMP_DERIV:
			sccpProcessReaches()//warning: this may break/fix something!
			Writeln("after symderiv transformation: "+dumpExpr(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),fcolor_just_reach))
		return TSCCPValue(){'tid':g_vtid_CTVAL,'val':pobjfn_dup}
	}
	registerPrimitive(g_id_symderiv,fderiv_onreach,fsymderiv_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_DEPENDS_ON_OTHER_CODE)
	finline_deriv_oneval=function(PExpression pecall,int expr_oplevel){
		//directly expand the thing
		peexpr=readPool(pecall+(EXPR_OFS_ARGS+0))
		pobjfn=getExprValueAs(readPool(pecall+(EXPR_OFS_ARGS+1)),g_vtid_CNS)
		if !pobjfn:return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_vderiv=getExprValueAs(readPool(pecall+(EXPR_OFS_ARGS+2)),g_vtid_CTVAL)
		if !pobj_vderiv:return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_replace=0
		flags=readPool(peexpr)
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//function deriv, add the prefix
			pobjfn_param=getAsFunction(getExprValueAs(readPool(peexpr+EXPR_OFS_FUNCTION+0),g_vtid_CTVAL))
			if pobjfn_param:
				pobjfn_deriv=readCtUniqueInEvalFlow(pecall,[g_id_deriv_callback,pobjfn_param])
				if !pobjfn_deriv:return TSCCPValue(){'tid':g_vtid_UNINIT}
				pobjfn_deriv=getAsFunction(pobjfn_deriv)
				if !pobjfn_deriv:return TSCCPValue(){'tid':g_vtid_UNINIT}
				n_args=(flags&~EFLAG_MASK)
				as=new int[]
				as.push(exprctval(pobjfn_deriv))
				for i=0:n_args-1
					as.push(g_ctobject_pool[peexpr+EXPR_OFS_ARGS+i])
				as.push(expriptr(pobjfn))
				as.push(exprctval(pobj_vderiv))
				pe_replace=indcall(as)
			else
				//not a function, uninit
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			//look it up
			pobj_var=getVariable(peexpr)
			pvar_deriv=ctUnique([g_id_deriv,pobjfn,pobj_var,pobj_vderiv])
			if !pvar_deriv&&!ctUnique([g_id_deriv,pobjfn,pobj_var]):
				//newly created variables (possibly through inline, deriv it)
				ctUnique([g_id_deriv,pobjfn,pobj_var])=1
				derivAddVarDerivs(pobj_var,pobjfn,pobj_vderiv)
				pvar_deriv=ctUnique([g_id_deriv,pobjfn,pobj_var,pobj_vderiv])
			if pobj_var==pobj_vderiv:
				//typed one
				t=getVariableType(pobj_var)
				if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
				if tisbuiltin(t):
					ca=castConst(Util.ctNumber(getid_const(const_type(CTYPE_INT,32),1LL)),t)
					pe_replace=exprcns(getid_const(ca.type,ca.val_bin))
				else
					pe_replace=call(g_id_cast,exprctval(t),expriptr(1))
			else if pvar_deriv:
				pe_replace=exprvar(pvar_deriv)
			else
				//go for the generic zero
				pe_replace=0
		if !pe_replace:
			//typed zero
			t=getExprType(peexpr)
			if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
			if tisbuiltin(t):
				ca=castConst(Util.ctNumber(getid_const(const_type(CTYPE_INT,32),0LL)),t)
				pe_replace=exprcns(getid_const(ca.type,ca.val_bin))
			else
				pe_replace=call(g_id_cast,exprctval(t),expriptr(0))
		pecaller=readPool(pecall+EXPR_OFS_CALLER)
		fsubstitute=function(PExpression pe_unused){
			//setnop(pe_unused)
			return pe_replace
		}
		pe_replace=sccpQueueReach(insertCallAt(pecaller,pecall,fsubstitute))
		sccpQueueEval(pecaller)
		setnop(pecall)
		if isExpr(peexpr,EFLAG_FCALL):setnop(peexpr)//avoid eval on bad callers
		//return getExprValue(pe_replace)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(getid("_deriv"),__zero(fcompiler_callback),finline_deriv_oneval,__zero(fcompiler_callback),FFLAG_BUILTIN_HACK)
	fdeclare_deriv_oneval=function(PExpression pecall,int expr_oplevel){
		USER_FLAG_DERIVCB_RELEVANT=1
		//////////////
		n_args=getExprNArgs(pecall)
		if n_args!=2:
			errorAtExpr(ETYPE_ERROR,pecall,"set__deriv(f,f') must take exactly 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobj_f=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		pobj_f_deriv=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		if !pobj_f||!pobj_f_deriv||!readPool(pobj_f_deriv+FUNCTION_OFS_ONEVAL):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if getCcnv(pobj_f_deriv)!=g_id_inline:
			errorAtExpr(ETYPE_ERROR,readPool(pecall+EXPR_OFS_ARGS+1),"derivative implementations must be inline")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		/////////////////////////
		//analyze pobj_f_deriv's code
		pe_code=readPool(pobj_f_deriv+FUNCTION_OFS_CODE)
		pvar_return=readPool(pobj_f_deriv+FUNCTION_OFS_PVAR_RETURN)
		clearUserFlags(pe_code,USER_FLAG_ACTIVATED)
		//only allow one-line expressions - pulling becomes a hassle otherwise
		occurances=new int[PCTObject]
		pv_params=new PCTObject[]
		auto analyzeDerivImpl(PExpression pe){
			auto ret=0
			if isExpr(pe,EFLAG_VARIABLE):
				occurances[getVariable(pe)]++
			else if isExpr(pe,EFLAG_FCALL):
				if isBuiltin(pe,g_id_function):return 0
				if isBuiltin(pe,g_id_store):
					pe_var=readPool(pe+EXPR_OFS_ARGS+0)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					assert(isExpr(pe_var,EFLAG_VARIABLE))
					if isBuiltin(pe_value,g_id_ldparam):
						paramid=getExprValueAs(readPool(pe_value+EXPR_OFS_ARGS+0),g_vtid_CNS)
						if pv_params.n<=paramid:
							pv_params.resize(paramid+1)
						pv_params[paramid]=getVariable(pe_var)
					else
						if readPool(pe_var)!=EFLAG_VARIABLE+pvar_return:
							//the function is unreached, we can't handle intermediate variables
							errorAtExpr(ETYPE_ERROR,pe,"derivative implementation cannot have intermediate variables like @1".Replace(["@1",citeexpr(pe_var)]))
							return 0
				else if isBuiltin(pe,g_id_deriv):
					//it is relevant
					ret=1
				n_args=getExprNArgs(pe)
				for i=-1:n_args-1
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					ret|=analyzeDerivImpl(pe_argi)
				if ret:
					setUserFlag(pe,USER_FLAG_DERIVCB_RELEVANT)
			return ret
		}
		analyzeDerivImpl(pe_code)
		//count # occurances of all params except the last two
		pull_param_mask=0
		for i=0:pv_params.n-3
			if occurances[pv_params[i]]>2:
				//more than 2 uses (and 1 ldparam ass), pull it
				pull_param_mask|=(1<<i)
		//factorize non-_deriv subexpressions, split into two parts, use a tuple to pass the stuff
		//DERIV_HAS_REUSABLE_COMPONENTS... pull_param_mask=-1 - need pull all args
		pv_to_pull=new PCTObject[]
		auto checkReusableComponents(PExpression pe)
			if isExpr(pe,EFLAG_FCALL):
				ignore_reuse_pulling=(isBuiltin(pe,g_id_block)||isBuiltin(pe,g_id_store))
				n_args=getExprNArgs(pe)
				for i=-1:n_args-1
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					if !ignore_reuse_pulling&&!testUserFlag(pe_argi,USER_FLAG_DERIVCB_RELEVANT)&&i>=0:
						if isExpr(pe_argi,EFLAG_FCALL)
							//pull it
							pull_param_mask=-1
							pv_temp=makevar(pobj_f_deriv)
							pv_to_pull.push(pv_temp)
							if DEBUG_DUMP_DERIV:
								Writeln("mark as reusable: "+dumpExpr(pe_argi,__zero(fcolorer_callback)))
							//tempify
							transformCodeEx(pe_argi,function(PExpression pe_argi){return call(g_id_store,exprvar(pv_temp),pe_argi)}, PExpression[].NULL,exprvar(pv_temp),PExpression[].NULL,0)
					else
						checkReusableComponents(pe_argi)
		checkReusableComponents(pe_code)
		if pull_param_mask&DERIV_HAS_REUSABLE_COMPONENTS:
			//just clone and ldparam the stores / setnop everything else
			var_map=new PCTObject[PCTObject]
			pobjfn_compute_reusable_components=cloneFunctionEx(pobj_f_deriv,var_map,CLONE_WIPE_TO_UNREACHED|CLONE_VARS|CLONE_KEEP_VAR_IDS)
			pv_to_pull_cloned=new PCTObject[pv_to_pull.n]
			is_var_reused=new int[PCTObject]
			is_var_valid=new int[PCTObject]
			foreach pobj_var,I in pv_to_pull
				pv_cloned=var_map[pobj_var]
				is_var_reused[pobj_var]=int(I+1)
				is_var_valid[pv_cloned]=int(I+1)
				pv_to_pull_cloned[I]=pv_cloned
			//setnop pobjfn_compute_reusable_components
			pe_code_compute_reusable=readPool(pobjfn_compute_reusable_components+FUNCTION_OFS_CODE)
			fsetnop_deriv_part=function(PExpression pe){
				if isBuiltin(pe,g_id_store):
					pe_var=readPool(pe+EXPR_OFS_ARGS+0)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					assert(isExpr(pe_var,EFLAG_VARIABLE))
					pobj_var=getVariable(pe_var)
					if !is_var_valid[pobj_var]&&!isBuiltin(pe_value,g_id_ldparam):
						setnop(pe)
						return 0
				return 1
			}
			dfsExpr(pe_code_compute_reusable,fsetnop_deriv_part)
			//build tuple and return it
			//there are two unused args, leave them there
			assert(isBuiltin(pe_code_compute_reusable,g_id_block))
			pvar_return_cloned=var_map[pvar_return]
			as_tuple_ret=new PExpression[]
			n_args_block=getExprNArgs(pe_code_compute_reusable)
			for i=0:n_args_block-1
				as_tuple_ret.push(readPool(pe_code_compute_reusable+EXPR_OFS_ARGS+i))
			as_tuple_ret.push(call(g_id_store,exprvar(pvar_return_cloned),makeTuple(int(pv_to_pull_cloned.n))))
			foreach pobj_var,I in pv_to_pull_cloned
				as_tuple_ret.push(call(g_id_stdot,exprvar(pvar_return_cloned),exprstr(getTupleId(int(I))),exprvar(pobj_var)))
			pe_code_compute_reusable=replaceBlockArgs(pe_code_compute_reusable,as_tuple_ret,1)
			writePool(pobjfn_compute_reusable_components+FUNCTION_OFS_CODE,pe_code_compute_reusable)
			//add the arg to pobj_f_deriv
			pe_decl_f_deriv=readPool(pobj_f_deriv+FUNCTION_OFS_PEDECL)
			as_new_decl_args=new PExpression[]
			n_args_block=getExprNArgs(pe_decl_f_deriv)
			argid_reusable=-1
			for i=-1:n_args_block-1
				if i==n_args_block-5:
					//insert the arg before the deriv args
					as_new_decl_args.push(exprstr(g_id_auto))
					as_new_decl_args.push(exprstr(g_id_deriv_reusable_components))
					argid_reusable=((i-1)>>1)
				as_new_decl_args.push(readPool(pe_decl_f_deriv+EXPR_OFS_ARGS+i))
			pe_decl_f_arg_added=indcall(as_new_decl_args)
			writePool(pe_decl_f_arg_added+EXPR_OFS_VALUE,readPool(pe_decl_f_deriv+EXPR_OFS_VALUE))
			writePool(pe_decl_f_arg_added+EXPR_OFS_VALUE+1,readPool(pe_decl_f_deriv+EXPR_OFS_VALUE+1))
			writePool(pobj_f_deriv+FUNCTION_OFS_PEDECL,pe_decl_f_arg_added)
			//it's inline, it doesn't need param value slots
			writePool(pobj_f_deriv+FUNCTION_OFS_PPARAM_VALUE_SLOTS,0)
			//add ldparam and dot-ify the pulled variables
			pv_tuple_param=PCTObject(0)
			fdottify_pulled=function(PExpression pe){
				if isBuiltin(pe,g_id_store):
					pe_var=readPool(pe+EXPR_OFS_ARGS+0)
					//pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					assert(isExpr(pe_var,EFLAG_VARIABLE))
					pobj_var=getVariable(pe_var)
					tuple_slot_id=is_var_reused[pobj_var]-1
					if tuple_slot_id>=0:
						if !pv_tuple_param:
							pv_tuple_param=makevar(pobj_f_deriv)
							pe_store_tuple=call(g_id_store,exprvar(pv_tuple_param),call(g_id_ldparam,expriptr(argid_reusable),expriptr(0),exprstr(g_id_deriv_reusable_components)))
							transformCodeEx(pe,__zero(ftransformer_callback), [pe_store_tuple],0,PExpression[].NULL,0)
						pe_replacement=call(g_id_dot,exprvar(pv_tuple_param),exprstr(getTupleId(tuple_slot_id)))
						insertCallAt(pe,~1,function(PExpression pe){return pe_replacement})
				else if isBuiltin(pe,g_id_ldparam):
					paramid=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_CNS)
					if paramid>=argid_reusable:
						insertCallAt(pe,~0,function(PExpression pe){return expriptr(paramid+1)})
				return 1
			}
			dfsExpr(pe_code,fdottify_pulled)
			if DEBUG_DUMP_DERIV:
				Writeln("compute_reusable: "+dumpExpr(pe_code_compute_reusable,__zero(fcolorer_callback)))
				Writeln("original: "+dumpExpr(pe_code,__zero(fcolorer_callback)))
			ctUnique([g_id_deriv_reusable_components,pobj_f])=pobjfn_compute_reusable_components
		/////
		clearUserFlags(pe_code,0)
		if pull_param_mask:
			//first deriv translation happens in the code-dependent pass, by when the sets are long evaluated
			ctUnique([g_id_deriv_pulling_masks,pobj_f])=pull_param_mask
		//Writeln(dumpObject(pobj_f),' ',dumpObject(pobj_f_deriv))
		writeCtUniqueInEvalFlow([g_id_deriv_callback,pobj_f],pobj_f_deriv)
		setnop(pecall)
		return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),1LL)}
	}
	registerPrimitive(getid("set__deriv"),__zero(fcompiler_callback),fdeclare_deriv_oneval,fdummy_callback,FFLAG_BUILTIN_HACK)
	//////////////////////////////////////
	//quadratic decomposition
	fANMdecompose_onreach=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<2:
			errorAtExpr(ETYPE_ERROR,pecall,"__ANM_decompose(function,'var',...) needs at least 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pefunc=readPool(pecall+EXPR_OFS_ARGS)
		sccpQueueReach(pefunc)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	fANMdecompose_oneval=function(PExpression pecall,int is_cdf_pass){
		n_args=getExprNArgs(pecall)
		if n_args<2:
			errorAtExpr(ETYPE_ERROR,pecall,"__ANM_decompose(function,'var',...) needs at least 2 parameters")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pefunc=readPool(pecall+EXPR_OFS_ARGS)
		val=getExprValue(pefunc)
		if val.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if val.tid!=g_vtid_CTVAL:
			errorAtExpr(ETYPE_ERROR,pecall,"__ANM_decompose(function,'var',...) requires a function as its first parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn=getAsFunction(val.val)
		if !pobjfn:
			errorAtExpr(ETYPE_ERROR,pecall,"__ANM_decompose(function,'var',...) requires a function as its first parameter")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !is_cdf_pass:
			//varify arg/ret elements, if any is available
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		pobjfn_dup=ctUnique([g_id_ANM_decompose,pobjfn])
		if !pobjfn_dup:
			pobjfn_dup=cloneFunction(pobjfn)
			setFFlag(pobjfn_dup,FFLAG_IS_SYMDERIV_TEMP)
			ctUnique([g_id_ANM_decompose,pobjfn])=pobjfn_dup
			setFunctionUsed(pobjfn_dup)
			setParameterSlotTypes(pobjfn_dup)
			sccpProcessReaches()
			sccp(0)
		//check the variable names
		var_list_ret=g_strflatten_monitored_variables[pecall+0]
		var_list_params=g_strflatten_monitored_variables[pecall+1]
		if !var_list_ret:{
			//set up the variable lists
			var_list_params=new PCTObject[]
			for i=1:n_args-1
				peargname=readPool(pecall+EXPR_OFS_ARGS+i)
				vid=getExprValueAs(peargname,g_vtid_STR)
				if !vid:
					errorAtExpr(ETYPE_ERROR,peargname,"__ANM_decompose(function,'var',...) requires all variable names to be strings, but '@1' isn't one".Replace(["@1",citeexpr(peargname)]))
					continue
				pobj_vderiv=lookupFunctionVariable(pobjfn_dup,vid)
				if !pobj_vderiv:
					errorAtExpr(ETYPE_ERROR,peargname,"'@1' did not appear in function '@2' at all, ANM decomposition cannot proceed".Replace(["@1",getIdString(vid),"@2",citeexpr(peargname)]))
					continue
				var_list_params.push(pobj_vderiv)
			pobj_var_return=getReturnVariable(pobjfn_dup)
			if !pobj_var_return:
				errorAtExpr(ETYPE_ERROR,readPool(pobjfn_dup+FUNCTION_OFS_PEDECL),"the original function must return something for the original equations")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			var_list_ret=[pobj_var_return]
			addFunctionUser(pobjfn_dup,pecall)
			g_strflatten_monitored_variables[pecall+0]=var_list_ret
			g_strflatten_monitored_variables[pecall+1]=var_list_params
		}
		//ensure we evaluate it inside-out
		waiting_on_inner_symderiv=0
		ftest_inner_symderiv=function(PExpression pe){
			if isBuiltin(pe,g_id_assert_ctval)||isBuiltin(pe,g_id_function):return 0
			if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return 0
			//__ANM_decompose cannot nest
			if isBuiltin(pe,g_id_symderiv)||isBuiltin(pe,g_id_inline_clone)||isBuiltin(pe,g_id_deriv):
				if DEBUG_DUMP_DERIV:
					Writeln('symderiv / inline clone - ',dumpExpr(pe,__zero(fcolorer_callback)))
				waiting_on_inner_symderiv=1
			val=getExprValue(pe)
			if val.tid==g_vtid_UNINIT&&pe==readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION):
				//uninited function, could be symderiv
				if DEBUG_DUMP_DERIV:
					Writeln('uninited function - ',dumpExpr(pe,__zero(fcolorer_callback)))
				waiting_on_inner_symderiv=1
			return !waiting_on_inner_symderiv
		}
		dfsExpr(readPool(pobjfn_dup+FUNCTION_OFS_CODE),ftest_inner_symderiv)
		if waiting_on_inner_symderiv:
			if DEBUG_DUMP_DERIV:
				Writeln('waiting_on_inner_symderiv')
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if localflatten(pecall,pobjfn_dup):
			var_list_ret=g_strflatten_monitored_variables[pecall+0]
			var_list_params=g_strflatten_monitored_variables[pecall+1]
			//we have to re-optimize after every flattening pass!
			cdfOptimize(pobjfn_dup,var_list_ret)
		//Writeln('var_list_ret>>> ',pecall+0,' ',var_list_ret)
		//Writeln('var_list_params>>> ',pecall+1,' ',var_list_params)
		//wait for flattening and queue on the waiting variable - create a child
		//but we can't queue on structs / classes
		//the strings are no longer useful, smash them
		//Writeln('wait for flattening >>>')
		foreach pobj_var in var_list_ret
			t=getVariableType(pobj_var)
			//Writeln(dumpType(t),' ',dumpObject(pobj_var))
			if !t||tisclass(t):
				//varifyDblMembers(pecall,t)
				//g_strflatten_eval_queue.push(pecall)
				sccpQueueReach(insertCallAt(pecall,~1,function(PExpression pe){return !t?exprvar(pobj_var):expriptr(0)}))
				if DEBUG_DUMP_DERIV:
					Writeln('waiting on ret variable ',dumpObject(pobj_var),' ',t?dumpType(t):"typeless")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		foreach pobj_var in var_list_params
			t=getVariableType(pobj_var)
			//Writeln(dumpType(t),' ',dumpObject(pobj_var))
			if !t||tisclass(t):
				//varifyDblMembers(pecall,t)
				//g_strflatten_eval_queue.push(pecall)
				sccpQueueReach(insertCallAt(pecall,~1,function(PExpression pe){return !t?exprvar(pobj_var):expriptr(0)}))
				if DEBUG_DUMP_DERIV:
					Writeln('waiting on param variable ',dumpObject(pobj_var),' ',t?dumpType(t):"typeless")
				return TSCCPValue(){'tid':g_vtid_UNINIT}
		auto code=readPool(pobjfn_dup+FUNCTION_OFS_CODE)
		pe_decl=readPool(pobjfn_dup+FUNCTION_OFS_PEDECL)
		n_args_decl=getExprNArgs(pe_decl)
		assert(readPool(pe_decl+EXPR_OFS_ARGS+n_args_decl-1)==code)
		clearUserFlags(code,USER_FLAG_ACTIVATED)
		//Writeln('code-shit:')
		//Writeln(dumpExpr(code,__zero(fcolorer_callback)))
		//mark the variable-related ops
		Q=new PCTObject[]
		foreach pobj_vderiv,J in var_list_params
			setUserFlag(pobj_vderiv,FLAG_RELATED)
			Q.push(pobj_vderiv|0x80000000)
		for(I=0;I<Q.n;I++)
			if Q[I]&0x80000000:
				pobj_var=Q[I]&~0x80000000
				if !pobj_var||!isVariable(pobj_var):continue
				if DEBUG_DUMP_DERIV:
					Writeln('related: ',dumpObject(pobj_var))
				vdata=readPoolTyped(pobj_var,TVariable)
				//Writeln(string.ToHex(fn.scope))
				for(peuser=vdata.first_v_user;peuser;peuser=readPool(peuser+EXPR_OFS_NEXT_V_USER))
					//if DEBUG_DUMP_DERIV:
					//	Writeln('  user: ',dumpExpr(peuser,__zero(fcolorer_callback)),' ',testUserFlag(peuser,USER_FLAG_ACTIVATED),' ',testUserFlag(peuser,FLAG_RELATED))
					if !testUserFlag(peuser,USER_FLAG_ACTIVATED):continue
					if testUserFlag(peuser,FLAG_RELATED):continue
					//Writeln('^_^')
					setUserFlag(peuser,FLAG_RELATED)
					Q.push(peuser)
			else
				pe=Q[I]
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if DEBUG_DUMP_DERIV:
					Writeln(FormatAsText('related: ',dumpExpr(pe,fcolor_reach_eval),' ',isSpecial(pecaller)?"special":""))
				if isSpecial(pecaller):
					//Writeln('special ',pecaller)
					if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+1)==pe:
						pobj_var=getStoreTarget(pecaller)
						//Writeln(pobj_var)
						if pobj_var&&testUserFlag(pobj_var,USER_FLAG_ACTIVATED)&&!testUserFlag(pobj_var,FLAG_RELATED):
							//double-queueing is fine
							//Writeln('queue ',pobj_var,' ',readPoolTyped(pobj_var,TVariable).first_v_user)
							setUserFlag(pobj_var,FLAG_RELATED)
							Q.push(pobj_var|0x80000000)
					if isBuiltin(pecaller,g_id_stdot)&&readPool(pecaller+EXPR_OFS_ARGS+2)==pe:
						//all related variables have to be flattened before we can do this
						clearUserFlags(code,0)
						if DEBUG_DUMP_DERIV:
							Writeln('waiting on ',dumpExpr(pecaller,__zero(fcolorer_callback)))
						return TSCCPValue(){'tid':g_vtid_UNINIT}
					//flow control and stuff are ignored
					continue
				if !testUserFlag(pecaller,USER_FLAG_ACTIVATED):continue
				if testUserFlag(pecaller,FLAG_RELATED):continue
				if DEBUG_DUMP_DERIV:
					Writeln('queue caller: ',dumpExpr(pecaller,__zero(fcolorer_callback)))
				setUserFlag(pecaller,FLAG_RELATED)
				Q.push(pecaller)
		//final_vars=new PCTObject[]
		Q=new PCTObject[]
		foreach pobj_var in var_list_ret
			Q.push(pobj_var|0x80000000)
		for(I=0;I<Q.n;I++)
			if Q[I]&0x80000000:
				pobj_var=Q[I]&~0x80000000
				if !pobj_var||!isVariable(pobj_var):continue
				//if testUserFlag(pobj_var,USER_FLAG_ACTIVATED|FLAG_RELATED|FLAG_REQUIRED)==(USER_FLAG_ACTIVATED|FLAG_RELATED|FLAG_REQUIRED):
				//	//we need to deriv this var
				//	if pobj_var!=pobj_vderiv:
				//		final_vars.push(pobj_var)
				vdata=readPoolTyped(pobj_var,TVariable)
				for(pestore=vdata.first_v_store;pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
					if !testUserFlag(pestore,USER_FLAG_ACTIVATED):continue
					if testUserFlag(pestore,FLAG_REQUIRED):continue
					setUserFlag(pestore,FLAG_REQUIRED)
					Q.push(pestore)
					//Write(pobj_var,' ',pestore,' ');Writeln(parser.Canonical.dumpCode(pestore,fcolor_user_flags))
			else
				pe=Q[I]
				if !testUserFlag(pe,USER_FLAG_ACTIVATED):continue
				//if isSpecial(pe)&&!isStore(pecaller):
				//	continue
				flags=readPool(pe)
				if (flags&EFLAG_MASK)==EFLAG_FCALL:
					n_args_pe=flags&~EFLAG_MASK
					//Writeln(parser.Canonical.dumpCode(pe,fcolor_user_flags))
					//Writeln(n_args_pe)
					for i=0:n_args_pe-1
						pearg=readPool(pe+EXPR_OFS_ARGS+i)
						if testUserFlag(pearg,FLAG_REQUIRED):continue
						setUserFlag(pearg,FLAG_REQUIRED)
						Q.push(pearg)
						//Writeln(parser.Canonical.dumpCode(pearg,fcolor_user_flags))
				else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
					pobj_var=getVariable(pe)
					if pobj_var&&testUserFlag(pobj_var,USER_FLAG_ACTIVATED)&&!testUserFlag(pobj_var,FLAG_REQUIRED):
						setUserFlag(pobj_var,FLAG_REQUIRED)
						Q.push(pobj_var|0x80000000)
		//if DEBUG_DUMP_DERIV:
		//	Writeln('final-relevant: ',final_vars)
		//generate the new function / constants
		//use interpretation - the function only serves to precompute the unrelated const table - maul the original? pobjfn_dup
		//consts could get involved in various ways...
		//unify consts vs vars?
		//var-const interaction: + - * / pow
		//need a dedicated IR, and sth gvn-like (created intermediates, var to equ row/column)
		struct TQuadTerm
			int var_a,var_b
			int const_id
		class CEquationTerm
			TQuadTerm[] terms
			PExpression pe
		all_equations=new CEquationTerm[]
		////////////////
		auto addEquation(CEquationTerm eq)
			all_equations.push(eq)
		////////////////
		struct TEquConst
			PCTObject pvar
			int is_cns
			int is_rcp
			int is_neg
		pv_const_array=makevar(pobjfn_dup)
		cvid_map=new int[int]
		consts=new TEquConst[]
		cid_dbl0=getid_const(const_type(CTYPE_FLOAT,64),__double_as_longlong(0.0))
		cid_dbl1=getid_const(const_type(CTYPE_FLOAT,64),__double_as_longlong(1.0))
		as_cstores=new PExpression[2]
		//0 and 1 are the const array allocations
		auto cnsVariableId(PCTObject pvar,int is_cns,int is_rcp,int is_neg)
			auto key=(is_cns?0x80000000+pvar:pvar*4+is_rcp*2+is_neg)
			auto ret=cvid_map[key]
			if !ret:
				ret=int(consts.n)
				consts.push(TEquConst(){'pvar':pvar,'is_cns':is_cns,'is_rcp':is_rcp,'is_neg':is_neg})
				peval=is_cns?exprcns(pvar):exprvar(pvar)
				if is_rcp:peval=call(g_id_operator_div,exprcns(cid_dbl1),peval)
				if is_neg:peval=call(g_id_operator_sub,exprcns(cid_dbl0),peval)
				as_cstores.push(indcall([call(g_id_dot,exprvar(pv_const_array),exprstr(g_id_set_operator_bracket)),expriptr(ret),peval]))
				cvid_map[key]=ret
			return ret
		auto cnsNeg(int cvid)
			ec=consts[cvid]
			if ec.is_cns:
				ca=Util.ctNumber(ec.pvar)
				ct_result=ca.type
				if ct_result==const_type(CTYPE_FLOAT,32):
					ca.val_bin^=0x80000000L
				else if ct_result==const_type(CTYPE_FLOAT,64):
					ca.val_bin^=0x8000000000000000LL
				else
					ca.val_bin=-ca.val_bin
				ec.pvar=getid_const(ca.type,ca.val_bin)
			else
				ec.is_neg=!ec.is_neg
			return cnsVariableId(ec.pvar,ec.is_cns,ec.is_rcp,ec.is_neg)
		auto cnsRcp(int cvid)
			ec=consts[cvid]
			if ec.is_cns:
				ca=Util.ctNumber(ec.pvar)
				ca=castConst(ca,const_type(CTYPE_FLOAT,64))
				ca.val_bin=__double_as_longlong(1./__longlong_as_double(ca.val_bin))
				ec.pvar=getid_const(ca.type,ca.val_bin)
			else
				ec.is_rcp=!ec.is_rcp
			return cnsVariableId(ec.pvar,ec.is_cns,ec.is_rcp,ec.is_neg)
		auto cnsMul(int cvid0,int cvid1)
			auto pv_temp=makevar(pobjfn_dup)
			as_cstores.push(call(g_id_store,exprvar(pv_temp),call(g_id_operator_mul,
				indcall([call(g_id_dot,exprvar(pv_const_array),exprstr(g_id_operator_bracket)),expriptr(cvid0)]),
				indcall([call(g_id_dot,exprvar(pv_const_array),exprstr(g_id_operator_bracket)),expriptr(cvid1)]))))
			return cnsVariableId(pv_temp,0,0,0)
		/////////////////////////
		auto dumpEquation(CEquationTerm pequ)
			auto s=new string
			foreach et in pequ.terms
				s.push(FormatAsText('+C',et.const_id,'*'))
				if et.var_a>=0:s.push(FormatAsText('x',et.var_a))
				if et.var_b>=0:s.push(FormatAsText('x',et.var_b))
			return s
		/////////////////////////
		//create 1 and -1
		cnsVariableId(cid_dbl1,1,0,0)
		cnsVariableId(getid_const(const_type(CTYPE_FLOAT,64),__double_as_longlong(-1.0)),1,0,0)
		evid_map=new int[i64]
		evid_realvar=new PCTObject[]
		auto equPowerTo(int evid,int poweri)
			assert(poweri>0)
			if poweri==1:
				pequ=new CEquationTerm
				pequ.terms=[TQuadTerm(){'var_a':evid,'var_b':-1,'const_id':0}]
				pequ.pe=exprvar(evid_realvar[evid])
				return pequ
			pequ0=equPowerTo(evid,poweri>>1)
			if pequ0.terms.n!=1||pequ0.terms[0].var_b!=-1:pequ0=equMakeVar(pequ0)
			assert(pequ0.terms.n==1&&pequ0.terms[0].var_b==-1)
			assert(pequ0.terms[0].var_a!=-1)
			pequ0.terms[0].var_b=pequ0.terms[0].var_a
			//it should be cheap to clone
			pequ0.pe=call(g_id_operator_mul,pequ0.pe,cloneExpr(pequ0.pe))
			if poweri&1:
				pequ0=equMakeVar(pequ0)
				pequ0.terms[0].var_b=evid
				pequ0.pe=call(g_id_operator_mul,pequ0.pe,exprvar(evid_realvar[evid]))
			return pequ0
		//do not use original code, regenerate expr for every var
		auto equVariableId(PCTObject pvar,int inv_power)
			auto key=((i64(pvar)<<32)|i64(u32(inv_power)))
			auto ret=evid_map[key]-1
			if ret==-1:
				if inv_power==1:
					ret=int(evid_realvar.n)
					evid_map[key]=ret+1
					evid_realvar.push(pvar)
				else
					evid_original=equVariableId(pvar,1)//should have appeared before, OK to call it here
					ret=int(evid_realvar.n)
					evid_map[key]=ret+1
					pvar_new=makevar(pobjfn_dup)
					evid_realvar.push(pvar_new)
					key2=((i64(pvar_new)<<32)|1LL)
					evid_map[key2]=ret+1
					//for pow, it won't be lower triangular
					p_cstores=as_cstores.n
					as_cstores.push(0)
					pequ0=equPowerTo(ret,System.Math.abs(inv_power))
					if inv_power==-1:
						pe_root=call(g_id_operator_div,exprcns(cid_dbl1),exprvar(evid_realvar[evid_original]))
					else
						pobjfn_powd=readCtUniqueInEvalFlow(pecall,[g_id_meta_state,getid("__ANM_powd")])
						pe_root=indcall([exprctval(pobjfn_powd),exprvar(evid_realvar[evid_original]),exprcns(getid_const(const_type(CTYPE_FLOAT,64),__double_as_longlong(1.0/double(inv_power))))])
					//this must be done *before* the power!
					as_cstores[p_cstores]=call(g_id_store,exprvar(pvar_new),pe_root)
					if inv_power<0:
						//*evid_original-1
						if pequ0.terms.n!=1||pequ0.terms[0].var_b!=-1:pequ0=equMakeVar(pequ0)
						assert(pequ0.terms.n==1&&pequ0.terms[0].var_b==-1)
						pequ0.terms[0].var_b=evid_original
						pequ0.terms.push(TQuadTerm(){'var_a':-1,'var_b':-1,'const_id':1})
						if DEBUG_DUMP_DERIV:
							Writeln('x',ret,' for equation: ',dumpEquation(pequ0),' (rcp(pow(x',evid_original,',1/',System.Math.abs(inv_power),')))')
							Writeln('    level 0: ',dumpExpr(pe_root,__zero(fcolorer_callback)))
						addEquation(pequ0)
					else
						//-evid_original
						pequ0.terms.push(TQuadTerm(){'var_a':evid_original,'var_b':-1,'const_id':1})
						if DEBUG_DUMP_DERIV:
							Writeln('x',ret,' for equation: ',dumpEquation(pequ0),' pow(x',evid_original,',1/',System.Math.abs(inv_power),')')
							Writeln('    level 0: ',dumpExpr(pe_root,__zero(fcolorer_callback)))
						addEquation(pequ0)
			if DEBUG_DUMP_DERIV:
				Writeln('x',ret,' <- ',dumpObject(pvar),' ',inv_power)
			return ret
		auto equMakeVar(CEquationTerm pequ)
			ret=int(evid_realvar.n)
			pvar_new=makevar(pobjfn_dup)
			evid_realvar.push(pvar_new)
			as_cstores.push(call(g_id_store,exprvar(pvar_new),pequ.pe))
			pequ.terms.push(TQuadTerm(){'var_a':ret,'var_b':-1,'const_id':1})
			if DEBUG_DUMP_DERIV:
				Writeln('x',ret,' for equation: ',dumpEquation(pequ),' makevar')
				Writeln('    level 0: ',dumpExpr(pequ.pe,__zero(fcolorer_callback)))
			addEquation(pequ)
			pequ2=new CEquationTerm
			pequ2.terms=[TQuadTerm(){'var_a':ret,'var_b':-1,'const_id':0}]
			pequ2.pe=exprvar(pvar_new)
			auto key=((i64(pvar_new)<<32)|1LL)
			evid_map[key]=ret+1
			return pequ2
		errored=0
		auto generateEquations(PExpression pe)
			if isExpr(pe,EFLAG_FCALL):
				val=getExprValue(pe)
				if val.tid==g_vtid_CNS:
					pequ=new CEquationTerm
					pequ.terms=[TQuadTerm(){'var_a':-1,'var_b':-1,'const_id':cnsVariableId(val.val,1,0,0)}]
					pequ.pe=exprcns(val.val)
					return pequ
				if isBuiltin(pe,g_id_block)||isBuiltin(pe,g_id_blockex):
					n_args=getExprNArgs(pe)
					for i=0:n_args-1
						generateEquations(readPool(pe+EXPR_OFS_ARGS+i))
					return CEquationTerm.NULL
				else if isBuiltin(pe,g_id_if):
					n_args_if=getExprNArgs(pe)
					for i=1:2:n_args_if-1
						pe_branch=readPool(pe+EXPR_OFS_ARGS+i)
						if testUserFlag(pe_branch,QUEUE_FLAG_REACH):
							generateEquations(pe_branch)
				else if isBuiltin(pe,g_id_nop)||isBuiltin(pe,g_id_assert_ctval)||isBuiltin(pe,g_id_function):
					return CEquationTerm.NULL
				else if isBuiltin(pe,g_id_store):
					pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
					assert(!!pobj_var)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					if isExpr(pe_value,EFLAG_CTVAL)||isExpr(pe_value,EFLAG_STRING):
						//ignore _deriv artifacts
						setnop(pe)
						return CEquationTerm.NULL
					//if readPool(pe)==EFLAG_FCALL+3:
					//	Writeln('shit! ',dumpExpr(pe,__zero(fcolorer_callback)),' ',readPool(pe_value))
					//	//assert(0)
					if !testUserFlag(pobj_var,FLAG_RELATED)||!testUserFlag(pobj_var,FLAG_REQUIRED):
						//unrelated store - keep it as is
						as_cstores.push(pe)
						//setnop(pe)
						return CEquationTerm.NULL
					if isBuiltin(pe_value,g_id_ldparam):
						//we still need them - order 0
						as_cstores.push(pe)
						//setnop(pe)
						return CEquationTerm.NULL
					//it's an equation
					pequ=generateEquations(pe_value)
					if !pequ:
						//somehow we ignored it, keep around for safety
						as_cstores.push(pe)
						return CEquationTerm.NULL
					assert(!!pequ)
					//add a -1*term, then apply the equation
					as_cstores.push(call(g_id_store,exprvar(pobj_var),pequ.pe))
					pequ.terms.push(TQuadTerm(){'var_a':equVariableId(pobj_var,1),'var_b':-1,'const_id':1})
					if DEBUG_DUMP_DERIV:
						Writeln('x',equVariableId(pobj_var,1),' for equation: ',dumpEquation(pequ),' ',dumpExpr(pe,__zero(fcolorer_callback)))
						Writeln('    level 0: ',dumpExpr(pequ.pe,__zero(fcolorer_callback)))
					addEquation(pequ)
					return CEquationTerm.NULL
				else if !testUserFlag(pe,FLAG_RELATED)||!testUserFlag(pe,FLAG_REQUIRED):
					//var it
					if isBuiltin(pe,g_id_stdot):
						assert(isExpr(readPool(pe+EXPR_OFS_ARGS+0),EFLAG_VARIABLE)&&getVariable(readPool(pe+EXPR_OFS_ARGS+0))==readPool(pobjfn_dup+FUNCTION_OFS_PVAR_RETURN))
						setnop(pe)
						return CEquationTerm.NULL
					if isBuiltin(pe,g_id_dot):
						peobj=readPool(pe+EXPR_OFS_ARGS+0)
						if isExpr(peobj,EFLAG_VARIABLE):
							//for valid unrelated dots, we won't even reach here
							//if testUserFlag(getVariable(peobj),VAR_FLAG_PARAM):
							//we could have flattened 2nd-order loads
							//param member load - ignore it since the value won't be used at all
							//it would be used in order 0
							//setnop(pe)
							return CEquationTerm.NULL
					if Platform.BUILD=="debug":
						if isSpecial(pe)&&!isArithmetic(pe):
							Writeln('bad-unrelated: ',dumpExpr(pe,__zero(fcolorer_callback)))
						if DEBUG_DUMP_DERIV:
							Writeln('unrelated: ',dumpExpr(pe,__zero(fcolorer_callback)))
					if isBuiltin(readPool(pe+EXPR_OFS_CALLER),g_id_block):
						//the shit isn't even stored, don't bother
						return CEquationTerm.NULL
					pequ=new CEquationTerm
					pv_temp=makevar(pobjfn_dup)
					as_cstores.push(call(g_id_store,exprvar(pv_temp),pe))
					pequ.terms=[TQuadTerm(){'var_a':-1,'var_b':-1,'const_id':cnsVariableId(pv_temp,0,0,0)}]
					pequ.pe=exprvar(pv_temp)
					return pequ
				else if isBuiltin(pe,g_id_operator_add)||isBuiltin(pe,g_id_operator_sub):
					assert(readPool(pe)==EFLAG_FCALL+2)
					pequ0=generateEquations(readPool(pe+EXPR_OFS_ARGS+0))
					pequ1=generateEquations(readPool(pe+EXPR_OFS_ARGS+1))
					if isBuiltin(pe,g_id_operator_add):
						pequ0.terms.push(pequ1.terms)
						pequ0.pe=call(g_id_operator_add,pequ0.pe,pequ1.pe)
					else
						foreach et in pequ1.terms
							et2=et
							et2.const_id=cnsNeg(et2.const_id)
							pequ0.terms.push(et2)
						pequ0.pe=call(g_id_operator_sub,pequ0.pe,pequ1.pe)
					return pequ0
				else if isBuiltin(pe,g_id_operator_neg):
					//just negate all the cnses
					pequ0=generateEquations(readPool(pe+EXPR_OFS_ARGS+0))
					foreach et,J in pequ0.terms
						et2=et
						et2.const_id=cnsNeg(et2.const_id)
						pequ0.terms[J]=et2
					pequ0.pe=pe
					return pequ0
				else if isBuiltin(pe,g_id_operator_mul):
					assert(readPool(pe)==EFLAG_FCALL+2)
					pequ0=generateEquations(readPool(pe+EXPR_OFS_ARGS+0))
					pequ1=generateEquations(readPool(pe+EXPR_OFS_ARGS+1))
					if pequ0.terms.n!=1||pequ0.terms[0].var_b!=-1:pequ0=equMakeVar(pequ0)
					if pequ1.terms.n!=1||pequ1.terms[0].var_b!=-1:pequ1=equMakeVar(pequ1)
					assert(pequ0.terms.n==1&&pequ0.terms[0].var_b==-1)
					assert(pequ1.terms.n==1&&pequ1.terms[0].var_b==-1)
					pequ0.terms[0].var_b=pequ1.terms[0].var_a
					if !pequ1.terms[0].const_id:
						//nothing
					else if !pequ0.terms[0].const_id:
						pequ0.terms[0].const_id=pequ1.terms[0].const_id
					else
						pequ0.terms[0].const_id=cnsMul(pequ0.terms[0].const_id,pequ1.terms[0].const_id)
					pequ0.pe=call(g_id_operator_mul,pequ0.pe,pequ1.pe)
					return pequ0
				else if isBuiltin(pe,g_id_operator_div):
					assert(readPool(pe)==EFLAG_FCALL+2)
					pequ0=generateEquations(readPool(pe+EXPR_OFS_ARGS+0))
					pequ1=generateEquations(readPool(pe+EXPR_OFS_ARGS+1))
					if pequ1.terms.n!=1||pequ1.terms[0].var_b!=-1:pequ1=equMakeVar(pequ1)
					assert(pequ1.terms.n==1&&pequ1.terms[0].var_b==-1)
					ec=pequ1.terms[0]
					if ec.var_a!=-1:
						ec.var_a=equVariableId(evid_realvar[ec.var_a],-1)
					if ec.const_id!=0&&ec.const_id!=1:
						ec.const_id=cnsRcp(ec.const_id)
					if pequ0.terms.n!=1||pequ0.terms[0].var_b!=-1:pequ0=equMakeVar(pequ0)
					assert(pequ0.terms.n==1&&pequ0.terms[0].var_b==-1)
					pequ0.terms[0].var_b=ec.var_a
					if !ec.const_id:
						//nothing
					else if !pequ0.terms[0].const_id:
						pequ0.terms[0].const_id=ec.const_id
					else
						pequ0.terms[0].const_id=cnsMul(pequ0.terms[0].const_id,ec.const_id)
					pequ0.pe=call(g_id_operator_div,pequ0.pe,pequ1.pe)
					return pequ0
				else
					pobjfn=getExprFunction(pe)
					id_fname=readPool(pobjfn+FUNCTION_OFS_NAME)
					if id_fname==g_id_powd&&readPool(pe)==EFLAG_FCALL+2:
						//it's pow
						val_power=getExprValue(readPool(pe+EXPR_OFS_ARGS+1))
						if val_power.tid!=g_vtid_CNS:
							errorAtExpr(ETYPE_ERROR,readPool(pe+EXPR_OFS_ARGS+1),"'@1' is not a constant, only rational constant powers are allowed in an ANM-decomposed function".Replace(["@1",citeexpr(readPool(pe+EXPR_OFS_ARGS+1))]))
							errored=1
							return CEquationTerm.NULL
						dval_power=castConst(Util.ctNumber(val_power.val),getBuiltinType(const_type(CTYPE_FLOAT,64)))
						dpower=__longlong_as_double(dval_power.val_bin)
						if abs(dpower)<1e-7:
							errorAtExpr(ETYPE_ERROR,pe,"panic: we should have optimized out this - 'powd(something,0.0)'")
							errored=1
							return CEquationTerm.NULL
						A=0
						B=0
						for Bi=1:99
							Ad=dpower*double(Bi)
							Ai=floor(Ad+0.5)
							if abs(Ad-Ai)<1e-7:
								A=int(Ai)
								B=Bi
								break
						if !B:
							errorAtExpr(ETYPE_ERROR,readPool(pe+EXPR_OFS_ARGS+1),"'@1' is not rational (tried a divisor of 1-99), only rational constant powers are allowed in an ANM-decomposed function".Replace(["@1",citeexpr(readPool(pe+EXPR_OFS_ARGS+1))]))
							errored=1
							return CEquationTerm.NULL
						if A<0:
							A=-A
							B=-B
						///////////////
						pequ0=generateEquations(readPool(pe+EXPR_OFS_ARGS+0))
						if pequ0.terms.n!=1||pequ0.terms[0].var_b!=-1:pequ0=equMakeVar(pequ0)
						assert(pequ0.terms.n==1&&pequ0.terms[0].var_b==-1)
						assert(pequ0.terms[0].var_a!=-1)
						evid_root=equVariableId(evid_realvar[pequ0.terms[0].var_a],B)
						return equPowerTo(evid_root,A)
					errorAtExpr(ETYPE_ERROR,pe,"unsupported operation '@1' in ANM code".Replace(["@1",citeexpr(pe)]))
					if Platform.BUILD=="debug":
						Writeln('bad-related: ',dumpExpr(pe,__zero(fcolorer_callback)))
						assert(0)
			else if isExpr(pe,EFLAG_VARIABLE):
				pobj_var=getVariable(pe)
				pequ=new CEquationTerm
				if testUserFlag(pobj_var,FLAG_RELATED)&&testUserFlag(pobj_var,FLAG_REQUIRED):
					pequ.terms=[TQuadTerm(){'var_a':equVariableId(pobj_var,1),'var_b':-1,'const_id':0}]
				else
					if DEBUG_DUMP_DERIV:
						Writeln('var-unrelated: ',dumpExpr(pe,__zero(fcolorer_callback)))
					pequ.terms=[TQuadTerm(){'var_a':-1,'var_b':-1,'const_id':cnsVariableId(pobj_var,0,0,0)}]
				pequ.pe=exprvar(pobj_var)
				return pequ
			else if isExpr(pe,EFLAG_CONST):
				if DEBUG_DUMP_DERIV:
					Writeln('const-unrelated: ',dumpExpr(pe,__zero(fcolorer_callback)))
				cid=readPool(pe)&~EFLAG_MASK
				pequ=new CEquationTerm
				pequ.terms=[TQuadTerm(){'var_a':-1,'var_b':-1,'const_id':cnsVariableId(cid,1,0,0)}]
				pequ.pe=exprcns(cid)
				return pequ
			else
				//if Platform.BUILD=="debug":
				//	Writeln('unrecognized thingy: ',dumpExpr(pe,__zero(fcolorer_callback)))
				return CEquationTerm.NULL
			return CEquationTerm.NULL
		evid_params=new int[var_list_params.n]
		foreach pobj_var,J in var_list_params
			evid_params[J]=equVariableId(pobj_var,1)
		if DEBUG_DUMP_DERIV:
			Writeln('before generateEquations:\n=======================\n',dumpExpr(code,__zero(fcolorer_callback)))
		generateEquations(code)
		if errored:
			setnop(pecall)
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		evid_ret=new int[var_list_ret.n]
		foreach pobj_var,J in var_list_ret
			evid_ret[J]=equVariableId(pobj_var,1)
		//generate the consts, replace the original code
		//alloc pv_const_array and return it
		//also store order 0 to the same array
		pobjfn_array=getStdObject(pecall,STDTYPE_ARRAY)
		as_cstores[0]=(call(g_id_store,exprvar(pv_const_array),indcall([indcall([exprctval(pobjfn_array),exprctval(getBuiltinType(const_type(CTYPE_FLOAT,64)))])])))
		as_cstores[1]=(indcall([call(g_id_dot,exprvar(pv_const_array),exprstr(g_id_init)),expriptr(consts.n+evid_realvar.n),exprcns(getid_const(const_type(CTYPE_INT,16),0LL))]))
		foreach pobj_var,J in evid_realvar
			as_cstores.push(indcall([call(g_id_dot,exprvar(pv_const_array),exprstr(g_id_set_operator_bracket)),expriptr(consts.n+J),exprvar(pobj_var)]))
		pe_code_new=vcall(g_id_block,as_cstores)
		//clearUserFlags(code,0)
		pe_decl=readPool(pobjfn_dup+FUNCTION_OFS_PEDECL)
		n_args_decl=getExprNArgs(pe_decl)
		sccpQueueReach(insertCallAt(pe_decl,~(n_args_decl-1),function(PExpression pe){return pe_code_new}))
		writePool(pobjfn_dup+FUNCTION_OFS_CODE,pe_code_new)
		writePool(pobjfn_dup+FUNCTION_OFS_PVAR_RETURN,pv_const_array)
		writePool(pv_const_array+VAR_OFS_ID,g_id_return)
		//Writeln('shit:')
		//Writeln(dumpExpr(g_pe_top,__zero(fcolorer_callback)))
		//assert(0)
		//generate equations as a packed int array, and pass to external equation generator / interpreter - could use the "__C(@decl)" approach
		//__C(@decl) generator function
		pe_const_evid=expr_C_const(evid_ret[0:].ConvertToAsBinary(char))
		pe_const_evid_params=expr_C_const(evid_params[0:].ConvertToAsBinary(char))
		buf_terms=new int[]
		buf_pequ=new int[]
		foreach pequ in all_equations
			buf_pequ.push(int(buf_terms.n))
			foreach et in pequ.terms
				buf_terms.push(et.var_a)
				buf_terms.push(et.var_b)
				buf_terms.push(et.const_id)
		buf_pequ.push(int(buf_terms.n))
		pe_const_terms=expr_C_const(buf_terms[0:].ConvertToAsBinary(char))
		pe_const_pequ=expr_C_const(buf_pequ[0:].ConvertToAsBinary(char))
		//translate pecall - make a tuple object
		//the counts...
		pobjfn_ANM_decomposed_result=readCtUniqueInEvalFlow(pecall,[g_id_meta_state,getid("__ANM_decomposed_result")])
		assert(!!pobjfn_ANM_decomposed_result)
		//Writeln(buf_terms)
		//Writeln(buf_pequ)
		//Writeln(evid_ret)
		replaceExpr(pecall,indcall([exprctval(pobjfn_ANM_decomposed_result),
			pe_const_terms,expriptr(buf_terms.n),
			pe_const_pequ,expriptr(buf_pequ.n),
			pe_const_evid,expriptr(evid_ret.n),
			pe_const_evid_params,expriptr(evid_params.n),
			expriptr(consts.n),expriptr(evid_realvar.n),
			exprctval(pobjfn_dup)]))
		writePool(pobjfn_dup+FUNCTION_OFS_FLAGS,(readPool(pobjfn_dup+FUNCTION_OFS_FLAGS)&~FFLAG_IS_SYMDERIV_TEMP)|FFLAG_IS_SYMDERIV)
		if DEBUG_DUMP_DERIV:
			Writeln('=========ANM decomposed')
			Writeln(dumpExpr(pe_code_new,__zero(fcolorer_callback)))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_ANM_decompose,fANMdecompose_onreach,fANMdecompose_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL|FFLAG_DEPENDS_ON_OTHER_CODE)
	}
	//////////////////////////////////////
	//operator overloading
	auto enableOverloading(int id_opr)
		fadd_overload_oneval=function(PExpression pecall,int expr_oplevel){
			n_args=getExprNArgs(pecall)
			pe_fn=readPool(pecall+EXPR_OFS_ARGS+n_args-1)
			pobjfn=getExprValueAs(pe_fn,g_vtid_CTVAL)
			if !pobjfn||!readPool(pobjfn+FUNCTION_OFS_ONEVAL):return TSCCPValue(){'tid':g_vtid_UNINIT}
			ts=new PCTObject[n_args]
			ts[0]=id_opr
			is_valid=0
			for i=0:n_args-2
				pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
				t=getExprValueAs(pe_argi,g_vtid_CTVAL)
				if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
				if tisclass(t)&&!tisfunction(t):is_valid=1
				ts[i+1]=t
			if !is_valid:
				errorAtExpr(ETYPE_ERROR,pecall,"overloaded operator '@1' is invalid - there must be at least one object-typed operand".Replace(["@1",citeexpr(pecall)]))
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			writePool(pobjfn+FUNCTION_OFS_NAME,id_opr)
			writeCtUniqueInEvalFlow(ts,pobjfn)
			replaceExpr(pecall,pe_fn)
			setnop(pecall)
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),1LL)}
		}
		registerPrimitive(catid(g_id_set_,id_opr),__zero(fcompiler_callback),fadd_overload_oneval,__zero(fcompiler_callback),FFLAG_SPECIAL)
	auto checkOverload(int id_opr,PExpression pecall)
		n_args=getExprNArgs(pecall)
		need_check=0
		all_cns=1
		for i=0:n_args-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			val=getExprValue(pe_argi)
			if val.tid==g_vtid_RTVAR:
				all_cns=0
			else if val.tid==g_vtid_CNS&&ctNumber(val.val).type==CTYPE_TYPED_NULL:
				//typed NULLs *can* be overloaded
				all_cns=0
			//Writeln(i,' ',dumpExpr(pe_argi,__zero(fcolorer_callback)))
			t=getExprType(pe_argi)
			if !t:return 0
			if tisclass(t)&&!tisfunction(t):
				need_check=1
		if !need_check||all_cns:return 0
		ts=new PCTObject[n_args+1]
		ts[0]=id_opr
		for i=0:n_args-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			t=getExprType(pe_argi)
			ts[i+1]=t
		pobjfn=readCtUniqueInEvalFlow(pecall,ts)
		if pobjfn:
			insertCallAt(pecall,0,function(PExpression pe){return exprctval(pobjfn)})
			sccpQueueEval(pecall)
		return 1
	//////////////////////////////////////
	//the special operators
	//2: undetermined
	auto evaluateAsLogic(TSCCPValue val_a){
		if val_a.tid==g_vtid_CNS:
			return !isValueZero(val_a)
		else if val_a.tid==g_vtid_STR||val_a.tid==g_vtid_CTVAL:
			return 1
		return 2
	}
	flogicnot_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		pe_arg0=readPool(pecall+EXPR_OFS_ARGS+0)
		val_a=getExprValue(pe_arg0)
		if val_a.tid==g_vtid_UNINIT:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if FunctionToLogic(pe_arg0):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		logic_val=evaluateAsLogic(val_a)
		if logic_val==2:
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getBuiltinType(const_type(CTYPE_INT,32))}
		else
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),i64(!logic_val))}
	}
	flogicnot_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('!')
		genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_PREFIX)
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_operator_logic_not,__zero(fcompiler_callback),flogicnot_oneval,flogicnot_oncgen,FFLAG_ARITHMETIC|FFLAG_IS_PURE)
	fbitnot_oneval=function(PExpression pecall,int expr_oplevel){
		if checkOverload(g_id_operator_bit_not,pecall):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		val_a=getExprValue(readPool(pecall+EXPR_OFS_ARGS+0))
		if val_a.tid==g_vtid_CNS:
			ca=Util.ctNumber(val_a.val)
			ta=getBuiltinType(ca.type)
			if (ca.type&CTYPE_MASK)!=CTYPE_INT&&(ca.type&CTYPE_MASK)!=CTYPE_UINT:
				errorAtExpr(ETYPE_ERROR,pecall,"invalid operation ~@1 in expression '@2': the operator can only be applied to integers".Replace([
					"@1",dumpType(ta),
					"@2",citeexpr(pecall)]))
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ca.type,~ca.val_bin)}
		t=getValueType(val_a)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		if !tisbuiltin(t)||(readPool(t+1)&CTYPE_MASK)!=CTYPE_INT&&(readPool(t+1)&CTYPE_MASK)!=CTYPE_UINT:
			errorAtExpr(ETYPE_ERROR,pecall,"invalid operation ~@1 in expression '@2': the operator can only be applied to integers".Replace([
				"@1",dumpType(ta),
				"@2",citeexpr(pecall)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fbitnot_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		pe_argi=readPool(pecall+EXPR_OFS_ARGS+0)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('~')
		genCode(pe_argi,LEVEL_PREFIX)
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_operator_bit_not,__zero(fcompiler_callback),fbitnot_oneval,fbitnot_oncgen,FFLAG_ARITHMETIC|FFLAG_IS_PURE)
	enableOverloading(g_id_operator_bit_not)
	fnegation_oneval=function(PExpression pecall,int expr_oplevel){
		if checkOverload(g_id_operator_neg,pecall):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		val_a=getExprValue(readPool(pecall+EXPR_OFS_ARGS+0))
		if val_a.tid==g_vtid_CNS:
			ca=Util.ctNumber(val_a.val)
			ct_result=ca.type
			if ct_result==const_type(CTYPE_FLOAT,32):
				ca.val_bin^=0x80000000L
			else if ct_result==const_type(CTYPE_FLOAT,64):
				ca.val_bin^=0x8000000000000000LL
			else
				ca.val_bin=-ca.val_bin
			return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ca.type,ca.val_bin)}
		t=getValueType(val_a)
		if !t:return TSCCPValue(){'tid':g_vtid_UNINIT}
		if tisbuiltin(t):
			ct=readPool(t+1)
		else
			ct=CTYPE_INVALID
		if !tisbuiltin(t)||(ct&CTYPE_MASK)!=CTYPE_INT&&(ct&CTYPE_MASK)!=CTYPE_UINT&&(ct&CTYPE_MASK)!=CTYPE_FLOAT:
			errorAtExpr(ETYPE_ERROR,pecall,"invalid operation -@1 in expression '@2': only numbers can be negated".Replace([
				"@1",dumpType(t),
				"@2",citeexpr(pecall)]))
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fnegation_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		assert(n_args==1)
		pe_argi=readPool(pecall+EXPR_OFS_ARGS+0)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		g_code_buffer.push('-')
		genCode(pe_argi,LEVEL_PREFIX)
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_operator_neg,__zero(fcompiler_callback),fnegation_oneval,fnegation_oncgen,FFLAG_ARITHMETIC|FFLAG_IS_PURE)
	enableOverloading(g_id_operator_neg)
	//////
	fadd_gen_int_oneval=function(PExpression pecall,int expr_oplevel){
		if checkOverload(g_id_operator_add_generic_int,pecall):
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		n_args=getExprNArgs(pecall)
		assert(n_args==2)
		pe_opr0=readPool(pecall+EXPR_OFS_ARGS+0)
		pe_opr1=readPool(pecall+EXPR_OFS_ARGS+1)
		assert(isExpr(pe_opr1,EFLAG_CONST))
		t=getExprType(pe_opr0)
		if t:
			//cast and switch to operator+ once we get the type
			sccpQueueReach(insertCallAt(pecall,~1,function(PExpression pe){return call(g_id_cast,exprctval(t),pe_opr1)}))
			sccpQueueReach(insertCallAt(pecall,0,function(PExpression pe){return exprctval(getBuiltin(g_id_operator_add))}))
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_operator_add_generic_int,__zero(fcompiler_callback),fadd_gen_int_oneval,__zero(fcompiler_callback),FFLAG_ARITHMETIC|FFLAG_IS_PURE)
	enableOverloading(g_id_operator_add_generic_int)
	//////////////////////////////////////
	//raw C
	fcwrap_oneval=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<2:
			errorAtExpr(ETYPE_ERROR,pecall,"__C(type,'code',...) takes at least 2 arguments")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		for i=2:n_args-1
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			val=getExprValue(pe_argi)
			if val.tid==g_vtid_CTVAL:
				pobjfn=getAsFunction(val.val)
				if pobjfn:
					//function passed into C, setused ...
					setFunctionUsed(pobjfn)
					setParameterSlotTypes(pobjfn)
		pe_type=readPool(pecall+EXPR_OFS_ARGS+0)
		t=getExprValueAs(pe_type,g_vtid_CTVAL)
		if !t:
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		else
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fcwrap_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		if n_args<2:return TSCCPValue(){'tid':g_vtid_UNINIT}
		pe_stemplate=readPool(pecall+EXPR_OFS_ARGS+1)
		id_stemplate=getExprValueAs(pe_stemplate,g_vtid_STR)
		if !id_stemplate:
			errorAtExpr(ETYPE_ERROR,pe_stemplate,"__C(type,'code',...) must have a string for code")
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		stemplate=new(getIdString(id_stemplate))
		replace_args=new string[]
		sbk=g_code_buffer
		for i=2:n_args-1
			g_code_buffer=new string
			pe_argi=readPool(pecall+EXPR_OFS_ARGS+i)
			val=getExprValue(pe_argi)
			if val.tid==g_vtid_CTVAL:
				//hack for func
				pe_argi=exprctval(val.val)
			genCode(pe_argi,LEVEL_POSTFIX)
			replace_args.push("@"+toBase32(i-1))
			replace_args.push(g_code_buffer)
		g_code_buffer=sbk
		if replace_args.n:
			stemplate=stemplate.Replace(replace_args)
		if stemplate.StartsWith("@global:"):
			if expr_oplevel:
				errorAtExpr(ETYPE_ERROR,pecall,'"@global:..." C code cannot be used in expressions')
			g_c_global_buffer.push('\n')
			g_c_global_buffer.push(stemplate[8:])
			g_c_global_buffer.push('\n')
		else if stemplate.StartsWith("@decl:"):
			//declare a struct and obtain a pointer
			sdecl=g_c_scope_stack.back().outer_code_buffer
			sdecl.push(stemplate[6:].Replace(["@1",'s7_v'+toBase32(pecall)]))
			sdecl.push(';')
			if expr_oplevel:
				g_code_buffer.push('(')
			g_code_buffer.push('(void*)&s7_v')
			g_code_buffer.push(toBase32(pecall))
			if expr_oplevel:
				g_code_buffer.push(')')
		else if stemplate.StartsWith("@raw:"):
			//internal const
			g_c_global_buffer.push(stemplate[5:])
			vid=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+2),g_vtid_CNS)
			g_code_buffer.push('s7_CD')
			g_code_buffer.push(toBase32(vid))
		else
			if expr_oplevel:
				g_code_buffer.push('(')
			g_code_buffer.push(stemplate)
			if expr_oplevel:
				g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_C_wrap,__zero(fcompiler_callback),fcwrap_oneval,fcwrap_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	registerPrimitive(g_id_C_wrap_pure,__zero(fcompiler_callback),fcwrap_oneval,fcwrap_oncgen,FFLAG_SPECIAL|FFLAG_IS_PURE)
	//////////////////////////////////////
	//debug
	fcallstack_oncgen=function(PExpression pecall,int expr_oplevel){
		assert(g_enable_debug_instrumentation)
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		if pobjfn:
			//use a local variable to maintain that... ->dad at pop
			g_code_buffer.push("spapPushCallStack(&s7_Dd)")
			g_code_buffer.push(';')
			genLineInfoExpr(pecall)
			g_c_scope_stack.back().dbg_slots.push(pecall)
		else
			g_code_buffer.push("spapPopCallStack();")
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_callstack,__zero(fcompiler_callback),__zero(fcompiler_callback),fcallstack_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	fset_callstack_oncgen=function(PExpression pecall,int expr_oplevel){
		genLineInfoExpr(pecall)
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_set_callstack,__zero(fcompiler_callback),__zero(fcompiler_callback),fset_callstack_oncgen,FFLAG_SPECIAL|FFLAG_IS_PRELIVE)
	//////////////////////////////////////
	//stackalloc
	fstackzero_oneval=function(PExpression pecall,int expr_oplevel){
		auto t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t}
	}
	fstackzero_oncgen=function(PExpression pecall,int expr_oplevel){
		auto t=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
		pe_target=readPool(pecall+EXPR_OFS_ARGS+0)
		pobj_var=getExprValueAs(pe_target,g_vtid_CTVAL)
		g_c_scope_stack.back().var_stores.push(pobj_var)
		g_code_buffer.push('((')
		genClassName(t)
		g_code_buffer.push('*)memset((&s7_SA_')
		g_code_buffer.push(toBase32(pobj_var))
		g_code_buffer.push('),0,sizeof(')
		genClassName(t)
		g_code_buffer.push(')))')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	//stackzero has RC side effect - it zeroes out "allocated" pointers
	registerPrimitive(g_id_stackzero,__zero(fcompiler_callback),fstackzero_oneval,fstackzero_oncgen,FFLAG_SPECIAL|FFLAG_RC_HAS_SIDE_EFFECT)
	//fstack_force_slot_oncgen=function(PExpression pecall,int expr_oplevel){
	//	pe_target=readPool(pecall+EXPR_OFS_ARGS+0)
	//	pobj_var=getExprValueAs(pe_target,g_vtid_CTVAL)
	//	g_c_scope_stack.back().var_stores.push(pobj_var)
	//	return TSCCPValue(){'tid':g_vtid_UNINIT}
	//}
	//registerPrimitive(g_id_stack_force_slot,__zero(fcompiler_callback),fdummy_callback,fstack_force_slot_oncgen,FFLAG_SPECIAL)
	farray_malloc_oneval=fget_rtti_oneval
	//function(PExpression pecall,int expr_oplevel){
	//	return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getBuiltinType(const_type(CTYPE_INT,Util.bitSize()))}
	//}
	farray_malloc_oncgen=function(PExpression pecall,int expr_oplevel){
		n_args=getExprNArgs(pecall)
		pe_bsize=readPool(pecall+EXPR_OFS_ARGS+0)
		need_bracket=0
		if expr_oplevel&&expr_oplevel<LEVEL_PREFIX:
			need_bracket=1
			g_code_buffer.push('(')
		//cast to iptr, needed in the context
		g_code_buffer.push('(')
		genType(getBuiltinType(const_type(CTYPE_INT,Util.bitSize())))
		g_code_buffer.push(')')
		if n_args<3:
			g_code_buffer.push('calloc(1,')
			genCode(pe_bsize,LEVEL_ASSIGNMENT)
			g_code_buffer.push(')')
		else
			bsize=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CNS)
			pobj_var=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+2),g_vtid_CTVAL)
			g_c_scope_stack.back().var_stores.push(pobj_var)
			g_code_buffer.push('memset(s7_arr_')
			g_code_buffer.push(toBase32(pobj_var))
			g_code_buffer.push(',0,sizeof(s7_arr_')
			g_code_buffer.push(toBase32(pobj_var))
			g_code_buffer.push('))')
		if need_bracket:
			g_code_buffer.push(')')
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	}
	registerPrimitive(g_id_array_malloc,__zero(fcompiler_callback),farray_malloc_oneval,farray_malloc_oncgen,FFLAG_SPECIAL)
	//////////////////////////////////////
	//the operators: promote both sides, grand switch, do the op
	inline CreateArithOperator(string opname,char optoken,int level,const fop,const IS_INT_ONLY,const IS_CMP)
		id_opr=getid("operator"+opname)
		auto fop_oneval=function(PExpression pecall,int expr_oplevel){
			if checkOverload(id_opr,pecall):
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			n_args=getExprNArgs(pecall)
			if n_args!=2:
				if optoken=='&'&&n_args==1:
					pe_opr=readPool(pecall+EXPR_OFS_ARGS+0)
					val=getExprValue(pe_opr)
					if val.tid==g_vtid_UNINIT:
						return TSCCPValue(){'tid':g_vtid_UNINIT}
					else
						return TSCCPValue(){'tid':g_vtid_RTVAR,'val':getBuiltinType(CTYPE_POINTER)}
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			pe_opr_a=readPool(pecall+EXPR_OFS_ARGS+0);val_a=getExprValue(pe_opr_a)
			pe_opr_b=readPool(pecall+EXPR_OFS_ARGS+1);val_b=getExprValue(pe_opr_b)
			if optoken=='|':
				if val_a.tid==g_vtid_CTVAL&&val_b.tid==g_vtid_CTVAL:
					pobjfn_a=val_a.val
					pobjfn_b=val_b.val
					if readPool(pobjfn_a)==g_tid_TFunction&&readPool(pobjfn_b)==g_tid_TFunction:
						pobjfn_fn_or=getStdObject(pecall,STDFN_FUNCTIONAL_OR)
						if !pobjfn_fn_or:
							return TSCCPValue(){'tid':g_vtid_UNINIT}
						//just replace the op
						insertCallAt(pecall,0,function(PExpression pe){return exprctval(pobjfn_fn_or)})
						sccpQueueEval(pecall)
						return TSCCPValue(){'tid':g_vtid_UNINIT}
			if val_a.tid==g_vtid_CNS&&val_b.tid==g_vtid_CNS:
				//promoting add
				ca=Util.ctNumber(val_a.val)
				cb=Util.ctNumber(val_b.val)
				ta=getBuiltinType(ca.type)
				tb=getBuiltinType(cb.type)
				if optoken==TOK_LL||optoken==TOK_GG:
					//shift operators - tb should be i32
					if cb.type!=const_type(CTYPE_INT,32)&&cb.type!=const_type(CTYPE_INT,64):
						errorAtExpr(ETYPE_ERROR,pecall,"the bit count '@1' in shift operation '@2' can only be a 32/64-bit integer, not of type '@3'".Replace([
							"@1",citeexpr(readPool(pecall+EXPR_OFS_ARGS+1)),
							"@2",citeexpr(pecall),
							"@3",dumpType(tb)
						]))
						//assert(0)
						return TSCCPValue(){'tid':g_vtid_UNINIT}
					t_result=ta
				else
					t_result=typeMerge(pecall,ta,tb,pe_opr_a,pe_opr_b,1)
				if !t_result:
					//Writeln(dumpExpr(pecall,fcolor_abbrv_blocks))
					errorAtExpr(ETYPE_ERROR,pecall,"invalid operation @1 in expression '@2'".Replace([
						"@1",dumpType(ta)+opname+dumpType(tb),
						"@2",citeexpr(pecall)
					]))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				//if !tisbuiltin(t_result):
				//	Writeln(dumpExpr(pecall,function(PExpression pe){return -1}))
				//	Writeln(ca.type,' ',cb.type,' ',ta,' ',tb,' ',t_result)
				ca=castConst(ca,t_result)
				cb=castConst(cb,t_result)
				ct_result=readPool(t_result+1)
				if IS_CMP:
					ca.type=const_type(CTYPE_INT,32)
					if ct_result==const_type(CTYPE_FLOAT,32):
						ca.val_bin=i64(u32(fop(__int_as_float(int(ca.val_bin)),__int_as_float(int(cb.val_bin)))))
					else if ct_result==const_type(CTYPE_FLOAT,64):
						ca.val_bin=i64(fop(__longlong_as_double(ca.val_bin),__longlong_as_double(cb.val_bin)))
				else if IS_INT_ONLY:
					if (ct_result&CTYPE_MASK)!=CTYPE_INT&&(ct_result&CTYPE_MASK)!=CTYPE_UINT:
						errorAtExpr(ETYPE_ERROR,pecall,"invalid operation @1 in expression '@2': the operator can only be applied to integers".Replace([
							"@1",dumpType(ta)+opname+dumpType(tb),
							"@2",citeexpr(pecall)
						]))
						return TSCCPValue(){'tid':g_vtid_UNINIT}
				else
					if ct_result==const_type(CTYPE_FLOAT,32):
						ca.val_bin=i64(u32(__float_as_int(fop(__int_as_float(int(ca.val_bin)),__int_as_float(int(cb.val_bin))))))
					else if ct_result==const_type(CTYPE_FLOAT,64):
						ca.val_bin=__double_as_longlong(fop(__longlong_as_double(ca.val_bin),__longlong_as_double(cb.val_bin)))
				skip_eval=0
				if (ct_result&CTYPE_MASK)!=CTYPE_FLOAT:
					//-8000000000000000LL/-1LL case: just return -8000000000000000LL
					if optoken=='/':
						if ca.val_bin==0x8000000000000000LL&&cb.val_bin==-1LL:
							//nothing, the result is still 0x8000000000000000
							skip_eval=1
						else if isConstZero(cb):
							//don't even eval
							skip_eval=2
					if !skip_eval:
						n_bits=((ct_result&~CTYPE_MASK)+1)*8
						if (ct_result&CTYPE_MASK)==CTYPE_INT:
							if n_bits<64:
								mask=(i64(1)<<n_bits)-1
								ca.val_bin=(ca.val_bin&mask)|-(ca.val_bin&(i64(1)<<(n_bits-1)))
								cb.val_bin=(cb.val_bin&mask)|-(cb.val_bin&(i64(1)<<(n_bits-1)))
							ca.val_bin=i64(fop(ca.val_bin,cb.val_bin))
						else
							if n_bits<64:
								mask=(i64(1)<<n_bits)-1
								ca.val_bin&=mask
								cb.val_bin&=mask
							ca.val_bin=i64(fop(u64(ca.val_bin),u64(cb.val_bin)))
				if skip_eval!=2:
					//if g_const_values.n>2:
					//	assert(g_const_values[2].val_bin==1LL)
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ca.type,ca.val_bin)}
			if optoken=='+':
				if val_a.tid==g_vtid_STR&&val_b.tid==g_vtid_STR:
					//const string concatenation
					return TSCCPValue(){'tid':g_vtid_STR,'val':catid(val_a.val,val_b.val)}
			if IS_CMP:
				if val_a.tid==g_vtid_STR&&val_b.tid==g_vtid_STR:
					//const string comparison
					cmp_result=i64(fop(getIdString(val_a.val),getIdString(val_b.val)))
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),cmp_result)}
				// < and stuff are needed for __compare
				if val_a.tid==g_vtid_CTVAL&&val_b.tid==g_vtid_CTVAL://&&(optoken==TOK_EQ||optoken==TOK_NE):
					cmp_result=i64(fop(val_a.val,val_b.val))
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(const_type(CTYPE_INT,32),cmp_result)}
			ta=getValueType(val_a)
			tb=getValueType(val_b)
			//type deduction
			if optoken==TOK_LL||optoken==TOK_GG:
				//shift operators - tb should be i32
				if tb!=getBuiltinType(const_type(CTYPE_INT,32))&&tb!=getBuiltinType(const_type(CTYPE_INT,64)):
					if tb:
						errorAtExpr(ETYPE_ERROR,pecall,"the bit count '@1' in shift operation '@2' can only be a 32/64-bit integer, not of type '@3'".Replace([
							"@1",citeexpr(readPool(pecall+EXPR_OFS_ARGS+1)),
							"@2",citeexpr(pecall),
							"@3",dumpType(tb)
						]))
					return TSCCPValue(){'tid':g_vtid_UNINIT}
				t_result=ta
			else
				t_result=typeMerge(pecall,ta,tb,pe_opr_a,pe_opr_b,1)
			//Writeln(parser.Canonical.dumpExpr(pecall,function(PExpression pe){return -1}))
			//Writeln(dumpType(ta),' ',dumpType(tb))
			if !t_result:
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			if optoken=='*'||optoken=='&':
				//*0, &0 shortcircuiting
				if (isValueZero(val_a)||isValueZero(val_b))&&tisbuiltin(t_result):
					ct_result=readPool(t_result+1)
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ct_result,0LL)}
			if optoken=='/':
				//0/ shortcircuiting
				if isValueZero(val_a)&&tisbuiltin(t_result):
					ct_result=readPool(t_result+1)
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ct_result,0LL)}
			if optoken=='%':
				//%1 shortcircuiting
				if isValueOne(val_b)&&tisbuiltin(t_result):
					ct_result=readPool(t_result+1)
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ct_result,0LL)}
			if optoken=='|':
				//|-1 shortcircuiting
				if (isValueNegOne(val_a)||isValueNegOne(val_b))&&tisbuiltin(t_result):
					ct_result=readPool(t_result+1)
					return TSCCPValue(){'tid':g_vtid_CNS,'val':getid_const(ct_result,-1LL)}
			if IS_CMP:
				t_result=getBuiltinType(const_type(CTYPE_INT,32))
			return TSCCPValue(){'tid':g_vtid_RTVAR,'val':t_result}
		}
		auto fop_oncgen=function(PExpression pecall,int outer_level){
			if checkOverload(id_opr,pecall):
				ta=getExprType(readPool(pecall+EXPR_OFS_ARGS+0))
				tb=getExprType(readPool(pecall+EXPR_OFS_ARGS+1))
				errorAtExpr(ETYPE_ERROR,pecall,"unresolved operator @1 in '@2'".Replace([
					"@1",dumpType(ta)+opname+dumpType(tb),
					"@2",citeexpr(pecall)]))
			n_args=getExprNArgs(pecall)
			if n_args==1:
				//unary case
				if outer_level&&outer_level<=level:
					got_bracket=1
					g_code_buffer.push('(')
				g_code_buffer.push(opname)
				genCode(readPool(pecall+EXPR_OFS_ARGS+0),LEVEL_PREFIX)
				if got_bracket://outer_level&&outer_level<level:
					g_code_buffer.push(')')
				return TSCCPValue(){'tid':g_vtid_UNINIT}
			assert(n_args==2)
			my_level=level
			got_bracket=0
			if g_enable_debug_instrumentation&&optoken=='/':
				my_level=LEVEL_ASSIGNMENT
			if outer_level&&outer_level<=my_level:
				got_bracket=1
				g_code_buffer.push('(')
			if g_enable_debug_instrumentation&&optoken=='/':
				genLineInfoExpr(pecall)
				g_code_buffer.push(',')
			genCode(readPool(pecall+EXPR_OFS_ARGS+0),level)
			g_code_buffer.push(opname)
			if optoken=='/':
				g_code_buffer.push(' ')//avoid /*
			genCode(readPool(pecall+EXPR_OFS_ARGS+1),level)
			if got_bracket:
				g_code_buffer.push(')')
			return TSCCPValue(){'tid':g_vtid_UNINIT}
		}
		registerPrimitive(id_opr,__zero(fcompiler_callback),fop_oneval,fop_oncgen,FFLAG_ARITHMETIC|FFLAG_IS_PURE)
		enableOverloading(id_opr)
	CreateArithOperator("*",'*',40,inline(a,b){return a*b},0,0)
	CreateArithOperator("/",'/',40,inline(a,b){return a/b},0,0)
	CreateArithOperator("%",'%',40,inline(a,b){return a%b},1,0)
	CreateArithOperator("+",'+',50,inline(a,b){return a+b},0,0)
	CreateArithOperator("-",'-',50,inline(a,b){return a-b},0,0)
	CreateArithOperator(">>",char(TOK_GG),52,inline(a,b){return a>>int(b)},1,0)
	CreateArithOperator("<<",char(TOK_LL),52,inline(a,b){return a<<int(b)},1,0)
	CreateArithOperator("&",'&',66,inline(a,b){return a&b},1,0)
	CreateArithOperator("^",'^',67,inline(a,b){return a^b},1,0)
	CreateArithOperator("|",'|',68,inline(a,b){return a|b},1,0)
	//////////////////////////////////////
	CreateArithOperator("<",'<',60,inline(a,b){return a<b},0,1)
	CreateArithOperator(">",'>',60,inline(a,b){return a>b},0,1)
	CreateArithOperator("<=",char(TOK_LE),60,inline(a,b){return a<=b},0,1)
	CreateArithOperator(">=",char(TOK_GE),60,inline(a,b){return a>=b},0,1)
	CreateArithOperator("==",char(TOK_EQ),65,inline(a,b){return a==b},0,1)
	CreateArithOperator("!=",char(TOK_NE),65,inline(a,b){return a!=b},0,1)
	//////////////////////////////////////
	//basic types
	registerConst(getid("i8"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,8)))
	registerConst(getid("i16"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,16)))
	registerConst(getid("i32"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,32)))
	registerConst(getid("i64"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,64)))
	registerConst(getid("u8"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_UINT,8)))
	registerConst(getid("u16"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_UINT,16)))
	registerConst(getid("u32"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_UINT,32)))
	registerConst(getid("u64"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_UINT,64)))
	registerConst(getid("f32"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_FLOAT,32)))
	registerConst(getid("f64"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_FLOAT,64)))
	registerConst(getid("char"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,8)))
	registerConst(getid("short"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,16)))
	registerConst(getid("int"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,32)))
	registerConst(getid("float"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_FLOAT,32)))
	registerConst(getid("double"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_FLOAT,64)))
	registerConst(getid("iptr"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_INT,Util.bitSize())))
	registerConst(getid("uptr"),g_vtid_CTVAL,getBuiltinType(const_type(CTYPE_UINT,Util.bitSize())))
	registerConst(getid("__pointer"),g_vtid_CTVAL,getBuiltinType(CTYPE_POINTER))
	registerConst(getid("NULL"),g_vtid_CNS,g_cid_null)

auto resolveNames(PExpression g_pe_top,int is_initial_resolve)
	struct TNameStackItem
		int id
		PCTObject pvar_previous
	saved_names=new TNameStackItem[]
	auto resolveVariablesDfs(PExpression pe)
		//////////////////////
		//translate epos
		epos0=readPool(pe+1)
		epos1=readPool(pe+2)
		//we don't have inline yet, just use this
		if epos0&&epos1>0:
			writePool(pe+1,makeAdvEpos(epos0,epos1))
			writePool(pe+2,-1)
		else if !epos1:
			writePool(pe+1,0)
		//////////////////////
		//resolve variables
		if isExpr(pe,EFLAG_FCALL):
			n_args=getExprNArgs(pe)
			pe_func=readPool(pe+EXPR_OFS_FUNCTION)
			fid=0
			if isExpr(pe_func,EFLAG_VARIABLE):
				fid=getVariable(pe_func)
			has_local_scope=0
			if fid==g_id_block&&n_args>0:
				pearg0=readPool(pe+EXPR_OFS_ARGS+0)
				if readPool(pearg0)==EFLAG_STRING+g_id_block:
					//block with local scope
					has_local_scope=1
			else if fid==g_id_function:
				has_local_scope=1
			else if fid==g_id_namespace:
				has_local_scope=1
			else if fid==g_id_store:
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if !isBuiltin(pecaller,g_id_block):
					tmp=g_names_resolved
					g_names_resolved=1
					errorAtExpr(ETYPE_ERROR,pe,"assignments can only appear at the top level of a statement block")
					//Writeln(dumpExpr(readPool(pecaller+EXPR_OFS_FUNCTION),__zero(fcolorer_callback)))
					g_names_resolved=tmp
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				//Writeln('store translation? ',dumpExpr(pe_var,__zero(fcolorer_callback)))
				if isExpr(pe_var,EFLAG_FCALL):
					n_args_pevar=readPool(pe_var)&~EFLAG_MASK
					as=new PExpression[n_args_pevar+2]
					for i=-1:n_args_pevar-1
						as[i+1]=readPool(pe_var+EXPR_OFS_ARGS+i)
					as[n_args_pevar+1]=readPool(pe+EXPR_OFS_ARGS+1)
					pe_stored_func=as[0]
					if isBuiltinR(pe_stored_func,g_id_dot):
						assert(readPool(pe_stored_func)==EFLAG_FCALL+2)
						pe_member_name=readPool(pe_stored_func+EXPR_OFS_ARGS+1)
						assert(isExpr(pe_member_name,EFLAG_STRING))
						writePool(pe_member_name,EFLAG_STRING|catid(g_id_set_,(readPool(pe_member_name)&~EFLAG_MASK)))
					else if isExpr(pe_stored_func,EFLAG_VARIABLE):
						writePool(pe_stored_func,EFLAG_VARIABLE|catid(g_id_set_,getVariable(pe_stored_func)))
					else
						bk=g_names_resolved;g_names_resolved=1
						errorAtExpr(ETYPE_ERROR,pe_var,"cannot assign a value to expression '@1'".Replace(["@1",citeexpr(pe_var)]))
						g_names_resolved=bk
						writePool(pe,EFLAG_CONST+getid_const(const_type(CTYPE_INT,32),0LL))
						return
					pestfunc=fillepos(indcall(as),readPool(pe+1),readPool(pe+2))
					pecaller=readPool(pe+EXPR_OFS_CALLER)
					resolveVariablesDfs(insertCallAt(pecaller,pe,function(PExpression pe){return pestfunc}))
					return
			//do it here: resolveVariablesDfs needs to check for has_local_scope guys itself, so we can't resolve it early
			resolveVariablesDfs(readPool(pe+EXPR_OFS_FUNCTION))
			if has_local_scope:return
			for i=0:n_args-1
				resolveVariablesDfs(readPool(pe+EXPR_OFS_ARGS+i))
		else if isExpr(pe,EFLAG_VARIABLE):
			//resolve
			id=getVariable(pe)
			pv=g_symbols[id].user_slot
			if !pv:
				//undeclared variable
				//Writeln('>>> ',dumpExpr(pe,__zero(fcolorer_callback)))
				bk=g_names_resolved;g_names_resolved=1
				errorAtExpr(ETYPE_ERROR,pe,"undeclared variable '@1'".Replace(["@1",getIdString(id)]))
				g_names_resolved=bk
				writePool(pe,EFLAG_CONST+getid_const(const_type(CTYPE_INT,32),0LL))
			else if readPool(pv)==g_tid_TNameSpace:
				//dot search
				pobj_space=pv
				pv=0
				pe_cur=pe
				while pobj_space:
					pecaller=readPool(pe_cur+EXPR_OFS_CALLER)
					if isBuiltin(pecaller,g_id_dot)||isBuiltin(pecaller,g_id_stdot)&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe_cur:
						pe_member_name=readPool(pecaller+EXPR_OFS_ARGS+1)
						member_name_flags=readPool(pe_member_name)
						assert((member_name_flags&EFLAG_MASK)==EFLAG_STRING)
						id_member_name=(member_name_flags&~EFLAG_MASK)
						l=0
						r=readPool(pobj_space+1)-1
						while l<=r
							m=(l+r)>>1
							id_item=readPool(pobj_space+2+m*2)
							if id_item<=id_member_name:
								l=m+1
							else
								r=m-1
						if r>=0&&readPool(pobj_space+2+r*2)==id_member_name:
							pobj_space_next=readPool(pobj_space+2+r*2+1)
							assert(!!pobj_space_next)
							pe_cur=pecaller
							if readPool(pobj_space_next)==g_tid_TNameSpace:
								pobj_space=pobj_space_next
							else
								//we found it
								pv=pobj_space_next
								break
						else
							bk=g_names_resolved;g_names_resolved=1
							errorAtExpr(ETYPE_ERROR,pe_cur,"namespace '@1' doesn't have member '@2'".Replace(["@1",citeexpr(pe_cur),"@2",getIdString(id_member_name)]))
							g_names_resolved=bk
							break
					else
						bk=g_names_resolved;g_names_resolved=1
						errorAtExpr(ETYPE_ERROR,pe_cur,"namespace '@1' cannot be used directly".Replace(["@1",citeexpr(pe_cur)]))
						g_names_resolved=bk
						break
				//Writeln('namespace: ',citeexpr(pe_cur))
				if pv:
					if isBuiltin(pe_cur,g_id_stdot):
						//we should be able to reach the 2nd param during later resolve
						tmp=g_names_resolved
						g_names_resolved=1
						pe_new=call(g_id_store,exprvar(pv),readPool(pe_cur+EXPR_OFS_ARGS+2))
						g_names_resolved=tmp
					else
						assert(isBuiltin(pe_cur,g_id_dot))
						pe_new=exprvar(pv)
					pecaller=readPool(pe_cur+EXPR_OFS_CALLER)
					insertCallAt(pecaller,pe_cur,function(PExpression pe){return pe_new})
				else
					pecaller=readPool(pe_cur+EXPR_OFS_CALLER)
					insertCallAt(pecaller,pe_cur,function(PExpression pe){return expriptr(0)})
			else
				writePool(pe,pv|EFLAG_VARIABLE)
	local_scope_children=new PExpression[]
	g_global_scope=PCTObject(0)
	auto findStoreDfs(PCTObject pf_owner,PCTObject pf_return_scope,PExpression pe)
		if isExpr(pe,EFLAG_FCALL):
			n_args=getExprNArgs(pe)
			pe_func=readPool(pe+EXPR_OFS_FUNCTION)
			fid=0
			if isExpr(pe_func,EFLAG_VARIABLE):
				fid=getVariable(pe_func)
			if fid==g_id_block&&n_args>0:
				pearg0=readPool(pe+EXPR_OFS_ARGS+0)
				if readPool(pearg0)==EFLAG_STRING+g_id_block:
					//block with local scope
					local_scope_children.push(pe)
					return
			else if fid==g_id_function:
				local_scope_children.push(pe)
				return 
			else if fid==g_id_namespace:
				local_scope_children.push(pe)
				return
			else if fid==g_id_store:
				//declare it
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				if isExpr(pe_var,EFLAG_FCALL):
					//tuple ass has to be recursively translated, so do it here
					n_args_pevar=readPool(pe_var)&~EFLAG_MASK
					if isBuiltinR(pe_var,g_id_block)&&readPool(readPool(pe_var+EXPR_OFS_ARGS+0))==EFLAG_STRING+g_id_tuple:
						//tuple ass - get rid of the new, ass the original rvalues
						//as becomes useless later
						//destroy the tuple flag, remove the final var
						//Writeln('tuple ass!!! '+dumpExpr(pe_var,__zero(fcolorer_callback)))
						insertCallAt(pe_var,~0,function(PExpression pe){return expriptr(0)})
						writePool(pe_var,EFLAG_FCALL+n_args_pevar-1)
						//modify the new
						pe_new=readPool(pe_var+EXPR_OFS_ARGS+1)
						assert(isBuiltinR(pe_new,g_id_store))
						insertCallAt(pe_new,~1,function(PExpression pe_dummy){return readPool(pe+EXPR_OFS_ARGS+1)})
						//reverse the ass direction
						for i=2:n_args_pevar-2
							pe_store_dot_i=readPool(pe_var+EXPR_OFS_ARGS+i)
							assert(isBuiltinR(pe_store_dot_i,g_id_store))
							pe_dot_i=readPool(pe_store_dot_i+EXPR_OFS_ARGS+0)
							assert(isBuiltinR(pe_dot_i,g_id_dot))
							pe_value_i=readPool(pe_store_dot_i+EXPR_OFS_ARGS+1)
							assert(isExpr(readPool(pe_dot_i+EXPR_OFS_ARGS+0),EFLAG_VARIABLE))
							pv_temp=getVariable(readPool(pe_dot_i+EXPR_OFS_ARGS+0))
							assert(!!pv_temp)
							writePool(pe_store_dot_i+EXPR_OFS_ARGS+0,pe_value_i)
							writePool(pe_store_dot_i+EXPR_OFS_ARGS+1,pe_dot_i)
						//Writeln('tuple assed!!! '+dumpExpr(pe_var,__zero(fcolorer_callback)))
						//replace the original store
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						findStoreDfs(pf_owner,pf_return_scope,insertCallAt(pecaller,pe,function(PExpression pe){return pe_var}))
						return
				else if isExpr(pe_var,EFLAG_VARIABLE):
					id=getVariable(pe_var)
					if n_args>2||!g_symbols[id].user_slot:
						//declare
						saved_names.push(TNameStackItem(){'id':id,'pvar_previous':g_symbols[id].user_slot})
						pv=makevar(pf_owner)
						if isBuiltinR(readPool(pe+EXPR_OFS_ARGS+1),g_id_ldparam):
							setUserFlag(pv,VAR_FLAG_PARAM)
						//else
						//	if id!=g_id_this&&id!=g_id_return:
						//		setUserFlag(pv,VAR_FLAG_STRUCT_SLOT_ALLOCATED)//user-defined vars must be allocated... unless it's a param or this
						//this is a must-have: we may need a lookup later
						writePool(pv+VAR_OFS_ID,id)
						g_symbols[id].user_slot=pv
						if id==g_id_return:
							if !readPool(pf_owner+FUNCTION_OFS_PVAR_RETURN):
								writePool(pf_owner+FUNCTION_OFS_PVAR_RETURN,pv)
							else
								errorAtExpr(ETYPE_ERROR,pe,"duplicate return variable")
								//assert(0)
						writePool(pv+VAR_OFS_DEFINING_STORE,pe)
					else
						if testUserFlag(pv,VAR_FLAG_PARAM):
							errorAtExpr(ETYPE_ERROR,pe,"function parameter '"+getIdString(id)+"' cannot be overwritten")
			else if fid==g_id_import:
				pobj_space=g_root_namespace
				for i=0:n_args-1
					assert(readPool(pobj_space)==g_tid_TNameSpace)
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					assert(isExpr(pe_argi,EFLAG_STRING))
					id_space=readPool(pe_argi)&~EFLAG_MASK
					l=0
					r=readPool(pobj_space+1)-1
					while l<=r
						m=(l+r)>>1
						id_item=readPool(pobj_space+2+m*2)
						if id_item<=id_space:
							l=m+1
						else
							r=m-1
					auto getBadNamespace()
						serr=new string
						for j=0:i
							if j:serr.push('.')
							pe_argj=readPool(pe+EXPR_OFS_ARGS+i)
							assert(isExpr(pe_argj,EFLAG_STRING))
							id_space_j=readPool(pe_argj)&~EFLAG_MASK
							serr.push(getIdString(id_space_j))
						return serr
					if r>=0&&readPool(pobj_space+2+r*2)==id_space:
						pobj_space_next=readPool(pobj_space+2+r*2+1)
						if !pobj_space_next:
							serr=getBadNamespace()
							errorAtExpr(ETYPE_ERROR,pe_argi,"'@1' is not a namespace".Replace(["@1",serr]))
							writePool(pe,EFLAG_STRING+g_id_import)
							return
						else
							pobj_space=pobj_space_next
					else
						serr=getBadNamespace()
						errorAtExpr(ETYPE_ERROR,pe_argi,"undeclared namespace '@1'".Replace(["@1",serr]))
						writePool(pe,EFLAG_STRING+g_id_import)
						return
				writePool(pe,EFLAG_STRING+g_id_import)
				n_items=readPool(pobj_space+1)
				for i=0:n_items-1
					id_item=readPool(pobj_space+2+i*2)
					pobj_imported=readPool(pobj_space+3+i*2)
					saved_names.push(TNameStackItem(){'id':id_item,'pvar_previous':g_symbols[id_item].user_slot})
					g_symbols[id_item].user_slot=pobj_imported
			else if fid==g_id_blockex:
				pe_arg0=readPool(pe+EXPR_OFS_ARGS+0)
				if readPool(pe_arg0)==EFLAG_STRING+g_id_return:
					//resolve return using pf_return_scope
					writePool(pe_arg0,EFLAG_STRING+getReturnLabel(pf_return_scope))
			for i=-1:n_args-1
				findStoreDfs(pf_owner,pf_return_scope,readPool(pe+EXPR_OFS_ARGS+i))
	auto resolveDfs(PCTObject pf_owner,PCTObject pf_return_scope,PExpression pe,int fdepth)
		fdepth_recurse=fdepth
		if isExpr(pe,EFLAG_FCALL):
			n_args=getExprNArgs(pe)
			pe_func=readPool(pe+EXPR_OFS_FUNCTION)
			fid=0
			if isExpr(pe_func,EFLAG_VARIABLE):
				fid=getVariable(pe_func)
			pf_owner_new=pf_owner
			pf_return_scope_new=pf_return_scope
			n0_saved_names=saved_names.n
			n0_local_scope_children=local_scope_children.n
			has_local_scope=0
			define_new_return_var=1
			auto bindNamespaceMembers(PCTObject pobj_space)
				assert(has_local_scope)
				auto n=readPool(pobj_space+1)
				for i=0:n-1
					id_item=readPool(pobj_space+2+i*2)
					obj_item=readPool(pobj_space+3+i*2)
					saved_names.push(TNameStackItem(){'id':id_item,'pvar_previous':g_symbols[id_item].user_slot})
					g_symbols[id_item].user_slot=obj_item
			if fid==g_id_block&&n_args>0:
				pearg0=readPool(pe+EXPR_OFS_ARGS+0)
				if readPool(pearg0)==EFLAG_STRING+g_id_block:
					//block with local scope
					has_local_scope=1
			else if fid==g_id_namespace:
				//bind the pre-declared variables
				has_local_scope=1
				placeholder_flag=readPool(readPool(pe+EXPR_OFS_ARGS+2))
				if (placeholder_flag&EFLAG_MASK)!=EFLAG_CTVAL:
					errorAtExpr(ETYPE_ERROR,pe,"namespaces cannot appear in other classes / functions")
				else
					bindNamespaceMembers(placeholder_flag&~EFLAG_MASK)
			else if fid==g_id_function:
				has_local_scope=2
				//set up ldparam
				//inline parameters don't have to be typed, could use va_arg(i), but ldparam could still take an auto type
				pe_decl=pe
				as=new int[]
				n_funcargs=(n_args-2)>>1
				all_pe_ldparam=new int[n_funcargs]
				for i=1:2:n_args-3
					//declare and define params
					petype=readPool(pe_decl+(EXPR_OFS_ARGS)+i)
					pe_argname=readPool(pe_decl+(EXPR_OFS_ARGS+1)+i)
					if (readPool(pe_argname)&EFLAG_MASK)!=EFLAG_STRING:
						errorAtExpr(ETYPE_ERROR,pe_argname,"this function parameter name should be a string")
						continue
					//coulddo: epos
					epos0=readPool(petype+1)
					if !epos0:epos0=readPool(pe_argname+1)
					epos1=readPool(pe_argname+2)
					if !epos1:epos1=readPool(petype+1)
					pe_ldparam=call(g_id_ldparam,expriptr(i>>1),cloneExpr(petype),cloneExpr(pe_argname))
					all_pe_ldparam[i>>1]=pe_ldparam
					as.push(fillepos(call(g_id_store,exprvar(readPool(pe_argname)&~EFLAG_MASK),pe_ldparam,expriptr(0)),epos0,epos1))
				if !as.n:
					//need something as the rc insert position of the lambda ctx
					as.push(call(g_id_nop))
				code_new=insertCallAt(pe_decl,~(n_args-1),function(PExpression code_old){as.push(code_old);return vcall(g_id_block,as)})
				//create the function object, save it in the value slot
				fn=TFunction(){'code':code_new,'pe_decl':pe_decl}
				fn.obj_oneval=0
				fn.obj_oncgen=0
				//fn.nest_depth=fdepth_recurse
				fdepth_recurse++
				pf_owner_new=poolObject(fn)
				pe_ccnv=readPool(pe+EXPR_OFS_ARGS)
				if readPool(pe_ccnv)==EFLAG_STRING+g_id_inline_loopbody:
					define_new_return_var=0
				else
					pf_return_scope_new=pf_owner_new
				p_param_values=int(g_ctobject_pool.n)
				writePool(pf_owner_new+FUNCTION_OFS_PPARAM_VALUE_SLOTS,p_param_values)
				assert(sizeof(TSCCPValue)/sizeof(int)==2)
				g_ctobject_pool.resize(p_param_values+n_funcargs*3)
				for i=0:n_funcargs-1
					writePool(p_param_values+i*3,g_vtid_UNINIT)
					writePool(p_param_values+i*3+2,all_pe_ldparam[i])
				writePool(pe+EXPR_OFS_VALUE,g_vtid_CTVAL)
				writePool(pe+EXPR_OFS_VALUE+1,pf_owner_new)
				if is_initial_resolve&&!g_global_scope:
					//declare all namespace variable in the newly-created global scope
					g_global_scope=pf_owner_new
					auto createNamespaceMembers(PCTObject pobj_space)
						auto n=readPool(pobj_space+1)
						for i=0:n-1
							id_item=readPool(pobj_space+2+i*2)
							obj_item=readPool(pobj_space+3+i*2)
							if !obj_item:
								pv=makevar(g_global_scope)
								writePool(pv+VAR_OFS_ID,id_item)
								writePool(pobj_space+3+i*2,pv)
							else
								createNamespaceMembers(obj_item)
					createNamespaceMembers(g_root_namespace)
					bindNamespaceMembers(g_root_namespace)
			if has_local_scope:
				if has_local_scope==2:
					//function level, force-clear the "return" slot, unless it's a foreach inline
					if define_new_return_var:
						saved_names.push(TNameStackItem(){'id':g_id_return,'pvar_previous':g_symbols[g_id_return].user_slot})
						g_symbols[g_id_return].user_slot=0
					pe_ccnv=readPool(pe+EXPR_OFS_ARGS)
					if readPool(pe_ccnv)==EFLAG_STRING+g_id_inline:
						//inline function - define "arguments"
						saved_names.push(TNameStackItem(){'id':g_id_arguments,'pvar_previous':g_symbols[g_id_arguments].user_slot})
						pv=makevar(pf_owner_new)
						writePool(pv+VAR_OFS_ID,g_id_arguments)
						g_symbols[g_id_arguments].user_slot=pv
				for i=0:n_args-1
					findStoreDfs(pf_owner_new,pf_return_scope_new,readPool(pe+EXPR_OFS_ARGS+i))
			else
				findStoreDfs(pf_owner,pf_return_scope,pe)
			n1=local_scope_children.n
			//Writeln('local_scope_children=',local_scope_children[n0_local_scope_children:n1-1])
			for i=n0_local_scope_children:n1-1
				resolveDfs(pf_owner_new,pf_return_scope_new,local_scope_children[i],fdepth_recurse)
			local_scope_children.resize(n0_local_scope_children)
			if has_local_scope:
				//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
				for i=0:n_args-1
					resolveVariablesDfs(readPool(pe+EXPR_OFS_ARGS+i))
				//call pass 1 at each local scope
				//Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
				//restore context
				for i=saved_names.n-1:-1:n0_saved_names
					svitem=saved_names[i]
					g_symbols[svitem.id].user_slot=svitem.pvar_previous
				saved_names.resize(n0_saved_names)
				if fid==g_id_namespace:
					//replace the namespace with a normal scoped block
					writePool(pe,EFLAG_FCALL+2)
					insertCallAt(pe,0,function(PExpression pe){return exprvar(g_id_block)})
					insertCallAt(pe,~0,function(PExpression pe){return exprstr(g_id_block)})
	resolveDfs(0,0,g_pe_top,0)
	resolveVariablesDfs(g_pe_top)
	g_names_resolved=1

///////////////////////////////////////////////////////////////
auto registerPrimitive(int id,fcompiler_callback fonreach,fcompiler_callback foneval,fcompiler_callback foncgen,int flags)
	auto value=varWrap(poolObject(TFunction(){
		'pe_decl':call(g_id_function,exprstr(g_id_function)),
		'obj_onreach':registerCompilerCallback(fonreach),
		'obj_oneval':registerCompilerCallback(foneval),
		'obj_oncgen':registerCompilerCallback(foncgen),
		'id_name':id,
		'flags':flags}))
	g_symbols[id].user_slot=value

auto registerConst(int id,int tid,int val)
	value=poolObject(TVariable(){
		'id':id,
		'tid':tid,
		'val':val})
	g_symbols[id].user_slot=value

//struct TCompilerPrimitive
//	fcompiler_callback onreach
//	fcompiler_callback oneval
g_compiler_callbacks=[__zero(fcompiler_callback)]
auto registerCompilerCallback(fcompiler_callback f)
	if !f:return 0
	n0=int(g_compiler_callbacks.n)
	g_compiler_callbacks.push(f)
	//return poolObject(TCompilerFunction(){'cbid':int(n0)})
	//ret=int(g_ctobject_pool.n)
	//g_ctobject_pool.push(n0)
	//return ret
	return n0

auto varWrap(PCTObject v)
	//create a VARIABLE that is a TFunction that exports those two objects
	//do we need TFunction? positive
	return poolObject(TVariable(){'tid':g_vtid_CTVAL,'val':v})

auto cnsWrap(int cid)
	//create a VARIABLE that is a TFunction that exports those two objects
	//do we need TFunction? positive
	return poolObject(TVariable(){'tid':g_vtid_CNS,'val':cid})

auto createConstant(int cns)
	return cnsWrap(getid_const(const_type(CTYPE_INT,32),i64(cns)))

//////////////////////////////////////////////////
//sccp
//reach or eval is well-defined up reaching the thing
g_sccp_queue_reach=new PExpression[]
g_sccp_queue_eval=new PExpression[]
auto sccpQueueReach(PExpression pecaller)
	//assert(pecaller!=92937)
	flags=readPool(pecaller)
	if (flags&EFLAG_MASK)!=EFLAG_FCALL:
		setUserFlag(pecaller,QUEUE_FLAG_REACH)
		if (flags&EFLAG_MASK)!=EFLAG_VARIABLE:return pecaller
		g_sccp_queue_reach.push(pecaller)
		return pecaller
	if !testUserFlag(pecaller,QUEUE_FLAG_REACH)
		setUserFlag(pecaller,QUEUE_FLAG_REACH)
		g_sccp_queue_reach.push(pecaller)
		if DEBUG_REACH_LOG:
			Writeln(FormatAsText('queuereach ',pecaller,' ',dumpExpr(pecaller,fcolor_abbrv_blocks)))
	return pecaller
	
g_counters_final_code_size=0LL
g_counters_sccp_calls=0LL
g_counters_eval=0LL
g_counters_queue_eval=0LL
auto sccpQueueEval(PExpression pecaller)
	if Platform.BUILD=="debug":
		g_counters_queue_eval++
	if !pecaller:return 0
	flags=readPool(pecaller)
	if (flags&EFLAG_MASK)!=EFLAG_FCALL:
		//g_sccp_queue.push(pecaller)
		return 0
	if !testUserFlag(pecaller,QUEUE_FLAG_EVAL)
		if !testUserFlag(pecaller,QUEUE_FLAG_REACH):
			//inline param optimization has put evaled-param into unreached ifs
			//wait until it's reached
			return 0
		if DEBUG_EVAL_LOG:
			Writeln('>> sccpQueueEval ',pecaller)
			if !testUserFlag(pecaller,QUEUE_FLAG_REACH):
				if !isBuiltin(pecaller,g_id_ldparam):
					Writeln("root="+dumpExpr(g_pe_top,fcolor_reach_eval))
					Writeln("cannot eval unreached: "+dumpExpr(pecaller,__zero(fcolorer_callback)))
					assert(0)
		setUserFlag(pecaller,QUEUE_FLAG_EVAL)
		//assert(testUserFlag(pecaller,QUEUE_FLAG_REACH))
		g_sccp_queue_eval.push(pecaller)
		//in case anything changed, re-reach it
		//need a flag to avoid dupicate re-reach
		if !testUserFlag(pecaller,QUEUE_FLAG_ONREACH_CALLED):
			if DEBUG_REACH_LOG:
				//Writeln(FormatAsText('re-reach ',pecaller,' ',dumpExpr(pecaller,fcolor_reach_eval)))
				Writeln(FormatAsText('re-reach ',pecaller,' ',dumpExpr(pecaller,__zero(fcolorer_callback))))
			assert(testUserFlag(pecaller,QUEUE_FLAG_REACH)||isBuiltin(pecaller,g_id_ldparam))
			queueReachChild(pecaller)
		return 1
	return 0

auto queueEvalUsers(PCTObject pobj_var)
	//vv=readPoolTyped(pobj_var,TVariable)
	//peuser=vv.first_v_user
	for(peuser=readPool(pobj_var+VAR_OFS_USER_QUEUE);peuser;peuser=readPool(peuser+EXPR_OFS_NEXT_V_USER))
		if isExpr(peuser,EFLAG_VARIABLE)
			pecaller=readPool(peuser+EXPR_OFS_CALLER)
			if testUserFlag(pecaller,QUEUE_FLAG_REACH):
				sccpQueueEval(pecaller)
				if DEBUG_EVAL_LOG:
					Writeln('>> queueeval ',pecaller)
		else
			//if Platform.BUILD=="debug":
			//	if !isExpr(peuser,EFLAG_FCALL):
			//		Writeln('==============')
			//		Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
			//		Writeln('==============')
			//		Writeln(dumpExpr(peuser,__zero(fcolorer_callback)))
			if !isExpr(peuser,EFLAG_FCALL):
				//nuked expr
				assert(readPool(peuser)==EFLAG_STRING+g_empty_id)
				continue
			if testUserFlag(peuser,QUEUE_FLAG_REACH):
				sccpQueueEval(peuser)
				if DEBUG_EVAL_LOG:
					Writeln('>> queueeval ',peuser)

auto queueEvalFunction(PCTObject pobjfn)
	if !pobjfn:return
	//consider-as-changed
	writePool(pobjfn+FUNCTION_OFS_VALUE_TIME,++g_value_time)
	if DEBUG_EVAL_LOG:
		Writeln('queueEvalFunction ',g_value_time,' ',getIdString(readPoolTyped(pobjfn,TFunction).id_name))
	for(plistitem=readPool(pobjfn+FUNCTION_OFS_FUSER);plistitem;plistitem=readPool(plistitem))
		peuser=readPool(plistitem+1)
		//Writeln('>> ',dumpExpr(peuser,__zero(fcolorer_callback)))
		if peuser&0x80000000:
			sccpQueueEval(peuser&0x7fffffff)
		else
			pecaller=readPool(peuser+EXPR_OFS_CALLER)
			if pecaller:
				sccpQueueEval(pecaller)
	//peuser=readPoolTyped(pobjfn,TFunction).pe_decl
	peuser=readPool(pobjfn+FUNCTION_OFS_PEDECL)
	//Writeln('>> ',dumpExpr(peuser,__zero(fcolorer_callback)))
	pecaller=readPool(peuser+EXPR_OFS_CALLER)
	if pecaller:
		sccpQueueEval(pecaller)

auto getOwningFunction(PExpression pe)
	//enum scope from parents
	for(pei=pe;pei;)
		pe_parent=readPool(pei+EXPR_OFS_CALLER)
		if isBuiltin(pei,g_id_function):
			val=getExprValue(pei)
			assert(val.tid==g_vtid_CTVAL)
			return val.val
		pei=pe_parent
	if Platform.BUILD=="debug":
		Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
		Writeln(string(pe)+" "+dumpExpr(pe,fcolor_abbrv_blocks))
		Writeln(string(readPool(pe+EXPR_OFS_CALLER))+" "+dumpExpr(readPool(pe+EXPR_OFS_CALLER),fcolor_reach_eval))
		Writeln(string(readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_CALLER))+" "+dumpExpr(readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_CALLER),fcolor_abbrv_blocks))
	assert(0)
	return 0
	
auto invokeCallbackObject(PCTObject fcallback,PExpression pe,int arg0)
	if !fcallback:
		//failed
		return TSCCPValue(){'tid':g_vtid_UNINIT}
	//tid=readPool(fcallback)
	//if tid==g_tid_TCompilerFunction:
	//	return g_compiler_callbacks[readPoolTyped(fcallback,TCompilerFunction).cbid](pe,arg0)
	//errorAtExpr(ETYPE_ERROR,pe,"invalid compiler callback on expression '"+citeexpr(pe)+"'")
	//return TSCCPValue(){'tid':g_vtid_UNINIT}
	return g_compiler_callbacks[fcallback](pe,arg0)
	
auto getExprType(PExpression pe)
	return getValueTypeEx(pe,getExprValue(pe))

auto evaluateAsType(PExpression pe)
	ret=getExprValueAs(pe,g_vtid_CTVAL)
	if !ret:return 0
	tid=readPool(ret)
	//&&(readPoolTyped(tid,TFunction).flags&FFLAG_TYPE)
	if tid==g_tid_TBuiltinType||tid==g_tid_TFunction:return ret
	return 0

auto isValueZero(TSCCPValue val)
	if val.tid==g_vtid_CNS:
		return isConstZero(ctNumber(val.val))
	else
		return 0

auto isValueNegOne(TSCCPValue val)
	if val.tid==g_vtid_CNS:
		return isConstNegOne(ctNumber(val.val))
	else
		return 0

auto isValueOne(TSCCPValue val)
	if val.tid==g_vtid_CNS:
		return isConstOne(ctNumber(val.val))
	else
		return 0

auto makeFunctionType(PExpression pe_queued,PCTObject pobjfn)
	//make a function type, check existing
	assert(getCcnv(pobjfn)!=g_id_inline&&getCcnv(pobjfn)!=g_id_inline_loopbody)
	pobj_var=getReturnVariable(pobjfn)
	if pobj_var:
		t_return=getVariableType(pobj_var)
		if !t_return:
			//we need to have a deducted return type
			//auto functions do not have fn.pvar_return, which has been determined during name resolution
			if DEBUG_EVAL_LOG:
				Writeln('  return type not ready - setused: ',dumpFunction(pobjfn))
			setFunctionUsed(pobjfn)
			setParameterSlotTypes(pobjfn)
			addFunctionUser(pobjfn,pe_queued|0x80000000)
			return 0
	pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
	return makeFunctionTypeRaw(pe_queued,pe_decl,t_return,getFFlag(pobjfn))

auto makeFunctionTypeRaw(PExpression pe_queued,PExpression pe_decl,PCTObject t_return,int flags)
	n_args_pe_decl=readPool(pe_decl)
	n_args=(n_args_pe_decl-2)>>1
	ts=new PCTObject[n_args]
	for i=0:n_args-1
		ts[i]=getExprValueAs(readPool(pe_decl+EXPR_OFS_ARGS+i*2+1),g_vtid_CTVAL)
		if !ts[i]:
			return 0
	keys=[g_id_function_type]
	keys.push(t_return)
	keys.push(ts)
	pobj_ftype=readCtUniqueInEvalFlow(pe_queued,keys)
	if !pobj_ftype:
		ft=TFunctionType(){
			't_ret':t_return,
			'n_args':n_args,
			'p_arg_types':int(g_ctobject_pool.n),
			'flags':flags,
		}
		g_ctobject_pool.push(ts)
		pobj_ftype_raw=poolObject(ft)
		//instantiate the template immediately
		t_function_wrapper=getStdObject(pe_queued,STDTYPE_FUNCTION_IMPL)
		if !t_function_wrapper:
			if DEBUG_EVAL_LOG:
				Writeln('  function wrapper not ready')
			return 0
		t_variant=getStdObject(pe_queued,STDTYPE_VARIANT)
		if t_variant:setFunctionUsed(t_variant)
		pe_temp=indcall([exprctval(t_function_wrapper),exprctval(pobj_ftype_raw)])
		val_ftype=invokeCallbackObject(readPool(t_function_wrapper+FUNCTION_OFS_ONEVAL),pe_temp,0)
		assert(val_ftype.tid==g_vtid_CTVAL)
		pobj_ftype=val_ftype.val
		setFFlag(pobj_ftype,FFLAG_IS_FUNCTION)
		setFunctionUsed(pobj_ftype)
		writePool(pobj_ftype+FUNCTION_OFS_T_RAW_FUNCTION_TYPE,pobj_ftype_raw)
		writeCtUniqueInEvalFlow(keys,pobj_ftype)
	return pobj_ftype

g_stdtype_ids=[getid("stdtype.box"),getid("stdtype.array"),getid("stdtype.string"),getid("stdtype.variant"),getid("stdfn.functional_or"),getid("stdtype.function_impl"),getid("stdfn.make_function"),getid("stdfn.make_string"),getid("stdtype.map"),getid("stdfn.clone")]
g_stdtype_types=new PCTObject[g_stdtype_ids.n]
g_ctype_fixed=0//function and string types become __pointers after this becomes 1
auto getStdObject(PExpression pe_queued,int which)
	ret=g_stdtype_types[which]
	if !ret:
		ret=readCtUniqueInEvalFlow(pe_queued,[g_id_meta_state,g_stdtype_ids[which]])
		if ret:
			g_stdtype_types[which]=ret
	return ret

auto getValueTypeEx(PExpression pe_queued,TSCCPValue val)
	if val.tid==g_vtid_UNINIT:
		return 0
	else if val.tid==g_vtid_CTVAL:
		//if !val.val:
		//	Writeln(dumpCode(g_pe_top,NULL))
		if readPool(val.val)==g_tid_TFunction:
			if getCcnv(val.val)==g_id_function:
				if g_ctype_fixed:
					return getBuiltinType(CTYPE_POINTER)
				else
					return makeFunctionType(pe_queued,val.val)
			else
				//hack for typeof(inline) in member handling
				return getBuiltinType(CTYPE_POINTER)
		else
			if DEBUG_EVAL_LOG:
				Writeln('  ctval is not a function')
		return 0
	else if val.tid==g_vtid_RTVAR:
		return val.val
	else if val.tid==g_vtid_CNS:
		cval=Util.ctNumber(val.val)
		//if cval.type>50:
		//	Writeln('bad cns: ',val.val)
		if cval.type==CTYPE_TYPED_NULL:
			return PCTObject(cval.val_bin)
		return getBuiltinType(cval.type)
	else if val.tid==g_vtid_STR:
		if g_ctype_fixed:
			return getBuiltinType(CTYPE_POINTER)
		else
			return getStdObject(pe_queued,STDTYPE_STRING)
	//Writeln(getIdString(val.tid))
	assert(0)
	return 0

auto getValueType(TSCCPValue val)
	return getValueTypeEx(0,val)
	
auto mergeValues(PExpression pe,TSCCPValue val_old,TSCCPValue val_new0,PExpression pe_old,PExpression pe_new)
	val_new=val_new0
	assert(val_old.tid>=g_vtid_UNINIT&&val_old.tid<=g_vtid_CTVAL)
	assert(val_new.tid>=g_vtid_UNINIT&&val_new.tid<=g_vtid_CTVAL)
	if val_new.tid==g_vtid_CNS&&val_new.val==g_cid_null&&val_old.tid!=g_vtid_CNS:
		//NULL merge, cast NULL to the proper type
		t=getValueTypeEx(pe,val_old)
		if t:
			val_new.val=getid_const(CTYPE_TYPED_NULL,i64(t))
	val_final=val_old
	if val_old.tid==g_vtid_UNINIT:
		val_final=val_new
	else if val_new.tid==g_vtid_UNINIT:
		//val_final=val_old
	else if val_old.tid==g_vtid_RTVAR:
		//val_final=val_old
		//already var, just do a type deduction
		t_old=val_old.val
		t_new=getValueType(val_new)
		if val_new.tid==g_vtid_CTVAL&&!t_new:
			//unready function, ignore for now
			val_final=val_old
		else
			val_final=val_old
			val_final.val=typeMerge(pe,t_old,t_new,pe_old,pe_new,0)
			if val_new.tid==g_vtid_CTVAL&&readPool(val_new.val)==g_tid_TFunction:
				setFunctionUsed(val_new.val)
				setParameterSlotTypes(val_new.val)
				//queueEvalFunction(val_new.val)
			if !val_final.val:
				val_final=val_old
	else if val_old.tid!=val_new.tid:
		//Writeln(getIdString(val_old.tid),' | ',getIdString(val_new.tid))
		val_final.tid=g_vtid_RTVAR
		t_old=getValueTypeEx(pe,val_old)
		t_new=getValueTypeEx(pe,val_new)
		val_final.val=typeMerge(pe,t_old,t_new,pe_old,pe_new,0)
		if !val_final.val:
			val_final=val_old
		if Platform.BUILD=="debug":
			if val_final.val&&readPool(val_final.val)==g_tid_TFunction:
				id_ccnv=getCcnv(val_final.val)
				if id_ccnv==g_id_inline||id_ccnv==g_id_inline_loopbody:
					Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
					assert(0)
		if val_old.tid==g_vtid_CTVAL&&!t_old:
			setFunctionUsed(val_old.val)
			setParameterSlotTypes(val_old.val)
			//queueEvalFunction(val_old.val)
		if val_new.tid==g_vtid_CTVAL&&!t_new:
			setFunctionUsed(val_new.val)
			setParameterSlotTypes(val_new.val)
			//queueEvalFunction(val_new.val)
	else if val_old.val==val_new.val:
		//val_final=val_old
	else if val_old.tid==g_vtid_CNS:
		if Util.ctNumber(val_old.val)!=Util.ctNumber(val_new.val):
			val_final.tid=g_vtid_RTVAR
			val_final.val=typeMerge(pe,getValueType(val_old),getValueType(val_new),pe_old,pe_new,0)
			if !val_final.val:
				val_final=val_old
	else if val_old.tid==g_vtid_STR:
		//strings are interned
		val_final.tid=g_vtid_RTVAR
		val_final.val=getStdObject(pe,STDTYPE_STRING)
		if !val_final.val:
			val_final=val_old
	else if val_old.tid==g_vtid_CTVAL:
		//where val is a PCTObject
		//meta functions should refuse double-evaluation
		//this is definitely an error
		if readPool(val_old.val)==g_tid_TFunction&&readPool(val_new.val)==g_tid_TFunction:
			//what if we don't know about the return type
			t_old=getValueTypeEx(pe,val_old)
			t_new=getValueTypeEx(pe,val_new)
			if !t_old:
				setFunctionUsed(val_old.val)
				setParameterSlotTypes(val_old.val)
				//queueEvalFunction(val_old.val)
			if !t_new:
				setFunctionUsed(val_new.val)
				setParameterSlotTypes(val_new.val)
				//queueEvalFunction(val_new.val)
			t=typeMerge(pe,t_old,t_new,pe_old,pe_new,0)
			if t:
				val_final.tid=g_vtid_RTVAR
				val_final.val=t
			else
				if t_old&&t_new:
					errorAtExpr(ETYPE_ERROR,pe,"incompatible functions types at '@1': '@2' vs '@3',".Replace([
						"@1",citeexpr(pe),
						"@2",dumpType(t_old),
						"@3",dumpType(t_new),
					]))
		else
			errorAtExpr(ETYPE_ERROR,pe,"panic: compile-time expression '@1' must not be ambiguous".Replace(["@1",citeexpr(pe)]))
			//assert(0)
		//assert(0)
	return val_final

auto queueReachChild(PExpression pe)
	pobjfn=getExprFunction(pe)
	//Writeln('>>> ',pe,' ',getIdString(id),' ',pobj)
	if !pobjfn:
		pe_func=readPool(pe+EXPR_OFS_FUNCTION)
		val=getExprValue(pe_func)
		if val.tid!=g_vtid_UNINIT:
			//non-function call, could be a cast, queue it anyway
			n=(readPool(pe)&~EFLAG_MASK)
			for i=n-1:-1:-1
				sccpQueueReach(readPool(pe+EXPR_OFS_ARGS+i))
			setUserFlag(pe,QUEUE_FLAG_ONREACH_CALLED)
		else
			sccpQueueReach(pe_func)
			if DEBUG_REACH_LOG:
				Writeln('unknown func, skipping child reach - ',dumpExpr(pe,__zero(fcolorer_callback)))
		return
	setUserFlag(pe,QUEUE_FLAG_ONREACH_CALLED)
	cb_onreach=readPool(pobjfn+FUNCTION_OFS_ONREACH)
	if cb_onreach:
		//cb_onreach could be another TFunction (a meta)
		invokeCallbackObject(cb_onreach,pe,0)
		return
	n=(readPool(pe)&~EFLAG_MASK)
	//Writeln(getIdString(id),' -> default ',n)
	for i=n-1:-1:-1
		sccpQueueReach(readPool(pe+EXPR_OFS_ARGS+i))

auto sccpProcessReaches()
	while g_sccp_queue_reach.n:
		//Write('R')
		pe=g_sccp_queue_reach.pop()
		//variable can be reached, and it's significant
		flags=readPool(pe)
		if DEBUG_REACH_LOG:
			Writeln(FormatAsText('reach ',pe,' ',dumpExpr(pe,fcolor_reach_eval)))
		if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			//name-to-user link
			pobj=getVariable(pe)
			//need a more reliable flag
			if pobj&&isVariable(pobj):
				//if DEBUG_REACH_LOG:
				//	Writeln('shit! already queued!')
				if !testUserFlag(pe,QUEUE_FLAG_USERS):
					//if DEBUG_REACH_LOG:
					//	Writeln('add var to user queue ',getIdString(id),' ',pe,' pobj=',pobj,'@',ob_resolved,'.',id,' next=',readPool(pobj+VAR_OFS_USER_QUEUE))
					//writePool(pobj+offsetof(TSCCPValue.first_v_user),pe)
					//writePool(pe+offsetof(TVarExpression.next_v_user),pobj)
					setUserFlag(pe,QUEUE_FLAG_USERS)
					//writePool(pobj,g_vtid_UNINIT)
					writePool(pe+EXPR_OFS_NEXT_V_USER,readPool(pobj+VAR_OFS_USER_QUEUE))
					writePool(pobj+VAR_OFS_USER_QUEUE,pe)
			continue
		if (flags&EFLAG_MASK)!=EFLAG_FCALL:
			//produced by setnopNested
			assert(flags==EFLAG_STRING+g_empty_id)
			continue
		//er=readPoolTyped(pe,TExpression)
		//we can only reach anything once
		//unsetUserFlag(pe,QUEUE_FLAG_REACH)
		//////
		//if er.val.tid==g_vtid_UNREACHED:
		//	er.val.tid=g_vtid_UNINIT
		//	writePool(pe+EXPR_OFS_VALUE,g_vtid_UNINIT)
		//eval it later
		sccpQueueEval(pe)
		//queueeval calls queueReachChild for us
		//queueReachChild(pe)

auto addFunctionUser(PCTObject pobjfn,PExpression pe)
	pnext=readPool(pobjfn+FUNCTION_OFS_FUSER)
	plistitem=int(g_ctobject_pool.n)
	g_ctobject_pool.push(pnext)
	g_ctobject_pool.push(pe)
	writePool(pobjfn+FUNCTION_OFS_FUSER,plistitem)

auto sccp(PExpression g_pe_top)
	if Platform.BUILD=="debug":
		g_counters_sccp_calls++
	if g_pe_top:sccpQueueReach(g_pe_top)
	Q0=PExpression[].NULL
	q0head=0
	while g_sccp_queue_reach.n||g_sccp_queue_eval.n
		//sweep first, eval later
		//n0_eval=g_sccp_queue_eval.n
		//the reach queue is order sensitive, and it's not FIFO
		sccpProcessReaches()
		//reverse the queued eval jobs
		//n_reverse=g_sccp_queue_eval.n-n0_eval
		//for i=0:(n_reverse>>1)-1
		//	tmp=g_sccp_queue_eval[n0_eval+i]
		//	g_sccp_queue_eval[n0_eval+i]=g_sccp_queue_eval[n0_eval+(n_reverse-1-i)]
		//	g_sccp_queue_eval[n0_eval+(n_reverse-1-i)]=tmp
		/////////////
		if !Q0||q0head>=Q0.n:
			Q0=g_sccp_queue_eval
			g_sccp_queue_eval=new PExpression[]
			q0head=0
		for(;q0head<Q0.n;)
			if g_sccp_queue_reach.n:break
			pe=Q0[q0head++]
			assert((readPool(pe)&EFLAG_MASK)==EFLAG_FCALL)
			if DEBUG_EVAL_LOG:
				//if !isSpecial(pe):
				Writeln(FormatAsText('eval ',pe,' ',dumpExpr(pe,fcolor_abbrv_blocks)))
			//er=readPoolTyped(pe,TExpression)
			unsetUserFlag(pe,QUEUE_FLAG_EVAL)
			/////////////////
			if isBuiltin(pe,g_id_nop):continue
			if !testUserFlag(pe,QUEUE_FLAG_ONREACH_CALLED):
				//re-test reach in case we have a bad queuing order...
				if DEBUG_REACH_LOG:
					Writeln(FormatAsText('re-reach ',pe,' ',dumpExpr(pe,__zero(fcolorer_callback))))
				assert(testUserFlag(pe,QUEUE_FLAG_REACH)||isBuiltin(pe,g_id_ldparam))
				queueReachChild(pe)
				sccpProcessReaches()
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			pecaller0=pecaller
			if !pecaller&&pe!=g_pe_top||pecaller&&isBuiltin(pecaller,g_id_nop):continue
			pecallee=readPool(pe+EXPR_OFS_FUNCTION)
			val_callee=getExprValue(pecallee)
			pobj=0
			pobjfn=0
			if val_callee.tid==g_vtid_CTVAL:
				pobj=val_callee.val
				pobjfn=getAsFunction(pobj)
			val_new=TSCCPValue(){'tid':g_vtid_UNINIT}
			if Platform.BUILD=="debug":
				g_counters_eval++
			if pobjfn:
				if Platform.BUILD=="debug":
					tbegin(tm_evalcb)
				cb_oneval=readPool(pobjfn+FUNCTION_OFS_ONEVAL)
				//if DEBUG_EVAL_LOG:
				//	Writeln('cb_oneval=',string.ToHex(cb_oneval))
				if cb_oneval:
					val_new=invokeCallbackObject(cb_oneval,pe,0)
					if Platform.BUILD=="debug":
						if !(val_new.tid>=g_vtid_UNINIT&&val_new.tid<=g_vtid_CTVAL):
							Writeln(dumpCode(g_pe_top,__zero(fcolorer_callback)))
							Writeln(FormatAsText('bad value after cb ',pe,' ',dumpExpr(pe,fcolor_abbrv_blocks),' ',val_new.tid,' ',getIdString(val_new.tid)))
							assert(0)
				else
					if DEBUG_EVAL_LOG:
						Writeln('  null callback: ',pobjfn+FUNCTION_OFS_ONEVAL)
				if Platform.BUILD=="debug":
					tend(tm_evalcb)
			else if !pobj&&val_callee.tid!=g_vtid_RTVAR:
				//not ready yet
				val_new=TSCCPValue(){'tid':g_vtid_UNINIT}
				if DEBUG_EVAL_LOG:
					Writeln('  function uninit')
			else
				if DEBUG_EVAL_LOG:
					Writeln('  indirect call')
				vtid=pobj?readPool(pobj):g_vtid_UNINIT
				val_new=TSCCPValue(){'tid':g_vtid_UNINIT}
				if pobj&&vtid==g_vtid_UNINIT:
					//somehow it's a variable, but the variable's value isn't ready yet
					//shouldn't happen
					assert(0)
				else if pobj&&vtid==g_tid_TBuiltinType:
					n_args=getExprNArgs(pe)
					if n_args<=1:
						//builtin-type cast
						auto pecaller=readPool(pe+EXPR_OFS_CALLER)
						if n_args==1:
							peopr=readPool(pe+EXPR_OFS_ARGS+0)
							insertCallAt(pe,~0,function(PExpression pe){return expriptr(0)})
						else
							peopr=expriptr(0)
						insertCallAt(pe,0,function(PExpression pe){return expriptr(0)})
						//writePool(pecallee+EXPR_OFS_CALLER,0)
						//writePool(peopr+EXPR_OFS_CALLER,0)
						sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return call(g_id_cast,pecallee,peopr)}))
						continue
					else
						errorAtExpr(ETYPE_ERROR,pe,"builtin-type '@1' cannot be constructed from @2 arguments".Replace(["@1",dumpType(pobj),"@2",string(n_args)]))
				else{
					//we're sure it's an indirect call
					val_new=TSCCPValue(){'tid':g_vtid_UNINIT}
					auto tcallee=getValueTypeEx(pe,val_callee)
					if tcallee&&tisfunction(tcallee):
						auto ft=readPoolTyped(getRawFunctionType(tcallee),TFunctionType)
						auto n_args=getExprNArgs(pe)
						auto n_funcargs=ft.n_args
						if n_args<n_funcargs:
							errorAtExpr(ETYPE_ERROR,pecallee,"function '@1' takes @2 arguments, but only @3 is provided".Replace([
								"@1",citeexpr(pecallee),
								"@2",string(n_funcargs),
								"@3",string(n_args)]))
						else
							//error check -- # parameters and their types
							param_errored=0
							for i=0:n_funcargs-1
								pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
								t_expected=readPool(ft.p_arg_types+i)
								if !t_expected:continue
								t=getExprType(pe_argi)
								if !t:continue
								if !parameterTypeCheck(t_expected,t):
									errorAtExpr(ETYPE_ERROR,pe_argi,"parameter #@3 type mismatch: '@1' expected but '@2' provided".Replace(["@1",dumpType(t_expected),"@2",dumpType(t),"@3",string(i)]))
									param_errored=1
									continue
							if !param_errored:
								auto t_ret=ft.t_ret
								if t_ret:
									val_new=TSCCPValue(){'tid':g_vtid_RTVAR,'val':t_ret}
				}
			val_old=readPoolTyped(pe+EXPR_OFS_VALUE,TSCCPValue)
			val_final=mergeValues(pe,val_old,val_new, pe,pe)
			if val_old.tid==val_final.tid&&val_old.val==val_final.val:
				//if nothing changed, change nothing
				continue
			//the value changed, eval the caller
			//the caller is a must-queue
			writePoolTyped(pe+EXPR_OFS_VALUE,val_final)
			//pecaller=readPool(pe+EXPR_OFS_CALLER)
			//we must not re-read pecaller - even if the tree changed in the middle, we still need to queue the original caller
			if DEBUG_EVAL_LOG:
				Write('  changed - queue caller ',pecaller0,' ',getIdString(val_old.tid),' -> ',getIdString(val_final.tid))
				if val_final.tid==g_vtid_CNS:
					Write(' ',dumpConst(Util.g_const_values[val_final.val]))
				else if val_final.tid==g_vtid_STR:
					Write(' ',getIdString(val_final.val))
				else if val_final.tid==g_vtid_CTVAL:
					Write(' ',dumpObject(val_final.val))
				else if val_final.tid==g_vtid_RTVAR:
					Write(' ',dumpType(val_final.val))
				Writeln()
			if val_final.tid==g_vtid_RTVAR:
				assert(!!val_final.val)
			//if (val_old.tid==g_vtid_UNINIT||val_final.tid==g_vtid_RTVAR)&&readPool(pecaller+EXPR_OFS_FUNCTION)==pe:
			//	//suddenly, we know what the function is, need to re-queue the reaches
			//	queueReachChild(pecaller)
			sccpQueueEval(pecaller0)
			//check whether we need to add something to a function queue
			if val_final.tid==g_vtid_CTVAL&&isFunction(val_final.val):
				//add to function queue
				//first_function_user
				//if DEBUG_EVAL_LOG:
				//	Writeln('  addFunctionUser (CTVAL)')
				pobjfn_value=val_final.val
				addFunctionUser(pobjfn_value,pe)
	//////////////

g_cdf_hash=uptr(0)
g_cdf_unchanged_count=0
g_has_untranslated_cdf=0
auto evalCodeDependingFunctions()
	cdf_set=new PExpression[]
	changed=0
	auto evalcdf_dfs(PExpression pe)
		ret=0
		if isExpr(pe,EFLAG_FCALL):
			if !testUserFlag(pe,QUEUE_FLAG_REACH):return 0
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				ret|=evalcdf_dfs(readPool(pe+EXPR_OFS_ARGS+i))
			pobjfn=getExprFunction(pe)
			if pobjfn&&(getFFlag(pobjfn)&FFLAG_DEPENDS_ON_OTHER_CODE):
				//Writeln('evalCodeDependingFunctions: '+dumpExpr(pe,fcolor_abbrv_blocks))
				cdf_set.push(pe)
				cb_oneval=readPool(pobjfn+FUNCTION_OFS_ONEVAL)
				if cb_oneval:
					val_new=invokeCallbackObject(cb_oneval,pe,1)
					val_old=readPoolTyped(pe+EXPR_OFS_VALUE,TSCCPValue)
					val_final=mergeValues(pe,val_old,val_new, pe,pe)
					if !(val_old.tid==val_final.tid&&val_old.val==val_final.val):
						writePoolTyped(pe+EXPR_OFS_VALUE,val_final)
						changed=1
					//we need to do it again if we've evaluated anything - any of them is a code changer
					ret=1
		return ret
	//Writeln('g_sccp_queue_eval=',g_sccp_queue_eval.n)
	ret=evalcdf_dfs(g_pe_top)
	if !changed&&cdf_set.n>0:
		h=uptr(cdf_set.__hash__())
		if g_cdf_hash==h:
			g_cdf_unchanged_count++
			if g_cdf_unchanged_count>=3:
				foreach pe in cdf_set
					errorAtExpr(ETYPE_ERROR,pe,"failed to translate code-depending function @1".Replace(["@1",citeexpr(pe)]))
					setnop(pe)
				return 0//force-continue
		else
			g_cdf_unchanged_count=0
		g_cdf_hash=h
	else
		g_cdf_unchanged_count=0
		g_cdf_hash=uptr(0)
	g_has_untranslated_cdf=(cdf_set.n>0)
	return ret

auto isCtorEmpty(PCTObject t_tar,int do_caching)
	fflag0=getFFlag(t_tar)
	if do_caching:
		if fflag0&FFLAG_IS_EMPTY_CTOR_TESTED:
			return !!(fflag0&FFLAG_IS_EMPTY_CTOR)
	assert(tisclass(t_tar))
	pvret_t_tar=readPool(t_tar+FUNCTION_OFS_PVAR_RETURN)
	is_empty=1
	f_test_emptiness=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL):
			if isBuiltin(pe,g_id_block)||isBuiltin(pe,g_id_C_return):return 1
			if isBuiltin(pe,g_id_nop)||isBuiltin(pe,g_id_callstack)||isBuiltin(pe,g_id_function)||isBuiltin(pe,g_id_assert_ctval):return 0
			//only allow zero-valued stores and the standard getcontext / return
			//and methods
			//do not recurse into valid stores
			if !isBuiltin(pe,g_id_store):
				if DEBUG_DUMP_FLATTEN:
					if is_empty:
						Writeln(dumpObject(t_tar)+' not empty: '+dumpExpr(pe,fcolor_abbrv_blocks))
				if do_caching:
					pobjfn=getExprFunction(pe)
					if pobjfn&&tisstruct(pobjfn)&&isCtorEmpty(pobjfn,1):
						//it's fine to recurse into other empty ctors
						return 1
				is_empty=0
				return 0
			auto pe_var=readPool(pe+EXPR_OFS_ARGS+0)
			auto pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			if isBuiltin(pe_value,g_id_force_var):
				pe_value=readPool(pe_value+EXPR_OFS_ARGS+0)
			if isBuiltin(pe_value,g_id_get_lambda_context)||isBuiltin(pe_value,g_id_ldparam)||isBuiltin(pe_value,g_id_tuple):return 0
			if readPool(pe_var)==EFLAG_VARIABLE+pvret_t_tar:return 0
			var_value=getExprValue(pe_var)
			if var_value.tid!=g_vtid_RTVAR:
				//not a real member, ignore
				return 0
			val_value=getExprValue(pe_value)
			if isValueZero(val_value)||isBuiltin(pe_value,g_id_uninit):
				//zero valued
				return 0
			if DEBUG_DUMP_FLATTEN:
				if is_empty:
					Writeln(dumpObject(t_tar)+' not empty: '+dumpExpr(pe,fcolor_abbrv_blocks))
			is_empty=0
		return is_empty
	}
	dfsExpr(readPool(t_tar+FUNCTION_OFS_CODE),f_test_emptiness)
	if do_caching:
		setFFlag(t_tar,FFLAG_IS_EMPTY_CTOR_TESTED|(is_empty?FFLAG_IS_EMPTY_CTOR:0))
	return is_empty
	
g_strflatten_monitored_variables=new PCTObject[][PExpression]
//g_strflatten_monitored_variables=new PCTObject[]
//g_strflatten_eval_queue=new PExpression[]
//tm_flatten_step0=tnew(">strflatten step0")
//tm_flatten_step1=tnew(">strflatten step1")
//tm_flatten_step2=tnew(">strflatten step2")
//tm_flatten_step3=tnew(">strflatten step3")
//one remaining problem - const vector lambdas in derivs may get mistakenly flattened
auto strflatten(PExpression pe_top,PExpression monitoring_base)
	VAR_USER_UNFLATTENABLE=1
	VAR_USER_GOT_NEW=2
	VAR_USER_KEEP_ORIGINAL=4
	//VAR_USER_FLATTENED_VAR_IS_WRITTEN=8
	USER_FLAG_EMPTY_NEW_TESTED=1
	USER_FLAG_IS_EMPTY_NEW=2
	//which-function-accesses-what-member analysis... useless - passing in a class usually accesses its member
	//passed to anything other than dot/stdot = no
	//focus on local objects
	//for each variable, we can compute a global flattenablity flag
	//to make it local... replace the *appeared* obj-member combos with plain variables
	//tbegin(tm_flatten_step0)
	clearUserFlags(pe_top,USER_FLAG_ACTIVATED)
	unflattenable_types=new PCTObject[]
	fmark_flattability=function(PExpression pe,PCTObject pf_owner){
		if isExpr(pe,EFLAG_VARIABLE):
			pobj_var=getVariable(pe)
			if testUserFlag(pobj_var,VAR_USER_UNFLATTENABLE):
				return 0
			if (readPool(pobj_var+VAR_OFS_OWNER)!=pf_owner||
			readPool(pobj_var)!=g_vtid_RTVAR||
			!tisclass(readPool(pobj_var+1))||
			readPool(pobj_var+VAR_OFS_ID)==g_id_this||
			readGlobalI2Hash(int2(pobj_var,0))||
			tisclass(pf_owner)):
				//deny non-locals
				//ignore consts
				//ignore non-class/struct
				//deny "this"
				//ignore already-flattened
				//ignore class members
				//variables accessed elsewhere are striked out here
				if DEBUG_DUMP_FLATTEN:
					Writeln('unflattenable (generic): '+dumpExpr(pe,__zero(fcolorer_callback)))
				setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
				return 0
			t=readPool(pobj_var+1)
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			if !testUserFlag(pecaller,QUEUE_FLAG_REACH):
				if DEBUG_DUMP_FLATTEN:
					Writeln('unflattenable (caller unreached): '+dumpExpr(pecaller,__zero(fcolorer_callback)))
				setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
				return 0
			if (isBuiltin(pecaller,g_id_dot)||isBuiltin(pecaller,g_id_stdot))&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
				//dot usages are flattenable
				pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
				pe_member_name=readPool(pecaller+EXPR_OFS_ARGS+1)
				flags=readPool(pe_member_name)
				if readPool(pecaller_caller+EXPR_OFS_FUNCTION)==pecaller||(flags&EFLAG_MASK)==EFLAG_CTVAL&&!isVariable(flags&~EFLAG_MASK):
					//but not method calls or CTVAL hack dots
					//Writeln('method call: '+dumpExpr(pecaller_caller,fcolor_abbrv_blocks))
					if DEBUG_DUMP_FLATTEN:
						Writeln('unflattenable (method call): '+dumpExpr(pe,__zero(fcolorer_callback))+" "+dumpExpr(pecaller,__zero(fcolorer_callback)))
					setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
				else if readPool(pecaller)==EFLAG_FCALL+3:
					//stdot
					pe_value=readPool(pecaller+EXPR_OFS_ARGS+2)
					if getExprValue(pe_value).tid==g_vtid_UNINIT:
						//nor are structs hosting unresolved members
						//make sure it's not the ctor __uninit
						pobj_member=getDotMember(pecaller,1)
						if readPool(pobj_member)==g_vtid_UNINIT:
							//guilty
							if DEBUG_DUMP_FLATTEN:
								Writeln('unflattenable (unresolved value): '+dumpExpr(pe,__zero(fcolorer_callback))+" "+dumpExpr(pecaller,__zero(fcolorer_callback)))
							//assert(0)
							errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pe_value,"unresolved expression '@1'".Replace(["@1",citeexpr(pe_value)]))
							setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
							t=getVariableType(pobj_var)
							if t:unflattenable_types.push(t)
				return 0
			if isBuiltin(pecaller,g_id_store):
				if readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
					is_write=1
				else
					assert(readPool(pecaller+EXPR_OFS_ARGS+1)==pe)
					is_write=0
				if tisrealclass(t):
					//for classes... ass = reference, only one new is allowed
					//VAR_USER_GOT_NEW
					if is_write:
						pe_value=readPool(pecaller+EXPR_OFS_ARGS+1)
						if isExpr(pe_value,EFLAG_FCALL)&&getExprValueAs(readPool(pe_value+EXPR_OFS_FUNCTION),g_vtid_CTVAL)==t:
							if testUserFlag(pobj_var,VAR_USER_GOT_NEW):
								if DEBUG_DUMP_FLATTEN:
									Writeln('unflattenable (multiple new): '+dumpExpr(pe,__zero(fcolorer_callback)))
								setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
							else
								setUserFlag(pobj_var,VAR_USER_GOT_NEW)
						else
							if DEBUG_DUMP_FLATTEN:
								Writeln('unflattenable (not newed): '+dumpExpr(pe,__zero(fcolorer_callback)))
							setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
					else
						if DEBUG_DUMP_FLATTEN:
							Writeln('unflattenable (class referenced): '+dumpExpr(pe,__zero(fcolorer_callback)))
						setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
				else
					//for structs, it's ok to ass to anything else... where we need to default up the non-flattened - store the flattened back and do the ass as is
					//only elim the ctor call for the trivialest structs - float3
					//deadelim should get rid of it... questionable
					if is_write:
						//do not flatten force-cast pointers - they are usually __memory
						//neither should we flatten dots - they are in the middle of some other object
						//unless we're in symderiv
						pe_value=readPool(pecaller+EXPR_OFS_ARGS+1)
						if isBuiltin(pe_value,g_id_cast):
							if DEBUG_DUMP_FLATTEN:
								Writeln('unflattenable (memory struct): '+dumpExpr(pe,__zero(fcolorer_callback)))
							setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
						if isBuiltin(pe_value,g_id_dot):
							for(;;)
								if (getFFlag(pf_owner)&FFLAG_IS_SYMDERIV_TEMP):
									pe_dot_object=readPool(pe_value+EXPR_OFS_ARGS+0)
									if isExpr(pe_dot_object,EFLAG_VARIABLE):
										pv_dot_object=getVariable(pe_dot_object)
										if testUserFlag(pv_dot_object,VAR_FLAG_PARAM):
											//we can flatten members of symderiv's param
											break
								//pe_dot_object=readPool(pe_value+EXPR_OFS_ARGS+0)
								//if isExpr(pe_dot_object,EFLAG_VARIABLE):
								//	pv_dot_object=getVariable(pe_dot_object)
								//	if tisstruct(getVariableType(pv_dot_object)):
								//		//struct members should be flatten-able
								//		break
								if DEBUG_DUMP_FLATTEN:
									Writeln('unflattenable (member of another class): '+dumpExpr(pe,__zero(fcolorer_callback)))
								setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
								break
				return 0
			if isBuiltin(pecaller,g_id_stdot)&&readPool(pecaller+EXPR_OFS_ARGS+2)==pe&&tisstruct(t):
				//struct stdot copy is fine
				return 0
			if isBuiltin(pecaller,g_id_typeof)||isBuiltin(pecaller,g_id_has_member):
				//typeof/has_member are fine
				return 0
			if DEBUG_DUMP_FLATTEN:
				Writeln('unflattenable (used in unrecognized function): '+dumpExpr(pe,__zero(fcolorer_callback))+" "+dumpExpr(pecaller,__zero(fcolorer_callback)))
			setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
		else
			if !testUserFlag(pe,QUEUE_FLAG_REACH):
				if g_has_untranslated_cdf&&!isBuiltin(readPool(pe+EXPR_OFS_CALLER),g_id_function):
					//there is cdf left
					//we cannot skip unreached ifs / unrecognized functions - they can get reached after we translate the CDF!
					//but that doesn't apply to function overloading... hacky
				else
					return 0
			if isBuiltin(pe,g_id_function):
				//don't flatten a return value
				pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
				if getFFlag(pobjfn)&FFLAG_IS_SYMDERIV_TEMP:
					//deriv dup, it's OK
					return 1
				pv_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
				//Writeln('pv_return: ',dumpObject(pv_return))
				setUserFlag(pv_return,VAR_USER_UNFLATTENABLE)
			else if isBuiltin(pe,g_id_assert_ctval):
				//ignore assert_ctval
				return 0
		return 1
	}
	dfsExprEx(pe_top,0,fmark_flattability)
	//////////////
	//re-mark the unflattenable types
	unflattenable_types.Sort()
	unflattenable_types.Unique()
	if unflattenable_types.n:
		foreach t in unflattenable_types
			setFFlag(t,FFLAG_TEMP_UNFLATTENABLE)
		fmark_flattability_from_types=function(PExpression pe){
			if isExpr(pe,EFLAG_VARIABLE):
				pobj_var=getVariable(pe)
				if testUserFlag(pobj_var,VAR_USER_UNFLATTENABLE):
					return 0
				if readPool(pobj_var)==g_vtid_RTVAR:
					assert(tisclass(readPool(pobj_var+1)))
					if getFFlag(readPool(pobj_var+1))&FFLAG_TEMP_UNFLATTENABLE:
						setUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)
			return 1
		}
		dfsExpr(pe_top,fmark_flattability_from_types)
		foreach t in unflattenable_types
			writePool(t+FUNCTION_OFS_FLAGS,readPool(t+FUNCTION_OFS_FLAGS)&~FFLAG_TEMP_UNFLATTENABLE)
	//tend(tm_flatten_step0)
	//actually flatten the stuff
	//flattened_items=new int2[]
	if DEBUG_DUMP_FLATTEN:
		//Writeln(g_ctobject_pool.n)
		Writeln(">>> before flatten\n"+dumpExpr(pe_top,fcolor_reach_eval))
	//struct TFlattenedMember
	//	PCTObject pobj_var
	//	PCTObject t
	//all_flattened_members=new TFlattenedMember[]
	n_replaced=0
	auto getFlattenedVariable(PCTObject pobj_var,PCTObject pobj_member,int is_write)
		pobj_ret=readGlobalI2Hash(int2(pobj_var,pobj_member))
		if !pobj_ret:
			pobj_ret=makevar(readPool(pobj_var+VAR_OFS_OWNER))
			setUserFlag(pobj_ret,VAR_USER_UNFLATTENABLE)
			writePool(pobj_ret+VAR_OFS_FLATTENING_OWNER,pobj_var)
			//if g_readable_c_code:
			//need this id for temp detection
			id_obj=readPool(pobj_var+VAR_OFS_ID)
			id_child=readPool(pobj_member+VAR_OFS_ID)
			if id_obj:
				id_child=catid(id_obj,catid(getid("."),id_child))
			writePool(pobj_ret+VAR_OFS_ID,id_child)
			//flattened_items.push(int2(pobj_var,pobj_member))
			writeGlobalI2Hash(int2(pobj_var,pobj_member),pobj_ret)
			writeGlobalI2Hash(int2(pobj_var,0),1)
			if DEBUG_DUMP_FLATTEN:
				Writeln('flatten: ',dumpObject(pobj_var),'.',getIdString(readPool(pobj_member+VAR_OFS_ID)),' ',pobj_ret)
				//pobj_member=lookupFunctionVariable(getVariableType(pobj_var),id_member)
				assert(isVariable(pobj_member))
			n_replaced++
			//rtvar-ify for nested structs - needed in copy
			//assert(readPool(pobj_member)==g_vtid_RTVAR)
			if readPool(pobj_member)==g_vtid_RTVAR:
				t=readPool(pobj_member+1)
				if tisstruct(t):
					//we need to set the type - no one sets it *for* us before it's needed
					//well, we must generate one - using transformCode?
					//it's defined during the memcpies
					///////
					writePool(pobj_ret+0,g_vtid_RTVAR)
					writePool(pobj_ret+1,t)
					setUserFlag(pobj_ret,VAR_FLAG_FLATTENED_STRUCT_MEMBER)
			//all_flattened_members.push(TFlattenedMember(){'pobj_var':pobj_ret;'t':t})
		//if is_write:
		//	setUserFlag(pobj_ret,VAR_USER_FLATTENED_VAR_IS_WRITTEN)
		return pobj_ret
	//tbegin(tm_flatten_step1)
	empty_news=new PExpression[]
	znew_pending_setnops=new PExpression[]
	//need_renaming=0
	//rename_map=new PCTObject[PCTObject]
	fflatten_struct_variables=function(PExpression pe0){
		//if !readPool(pe0+EXPR_OFS_CALLER):
		//	Writeln('bad pe0: ',pe0)
		auto pe=pe0
		if !testUserFlag(pe,QUEUE_FLAG_REACH):
			if !isExpr(pe,EFLAG_VARIABLE):return 0
		if isBuiltin(pe,g_id_dot)||isBuiltin(pe,g_id_stdot):
			//this has to be tested before the memcpy stdot branch
			//Writeln("dot detected: "+dumpExpr(pe,fcolor_abbrv_blocks))
			pe_object=readPool(pe+EXPR_OFS_ARGS+0)
			if isExpr(pe_object,EFLAG_VARIABLE):
				pobj_var=getVariable(pe_object)
				assert(pobj_var)
				if !testUserFlag(pobj_var,VAR_USER_UNFLATTENABLE):
					//we reached something flattenable
					if isBuiltin(pe,g_id_dot)&&getExprValue(pe).tid!=g_vtid_RTVAR:
						//ignore constants
						return 1
					pobj_member=getDotMember(pe,0)//getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
					if pobj_member:
						assert(isVariable(pobj_member))
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						//Writeln("dot replaced: "+dumpExpr(pe,fcolor_abbrv_blocks))
						is_write=isBuiltin(pe,g_id_stdot)
						is_class_owned=(!tisstruct(readPool(pobj_var+1)))
						pobj_ret=getFlattenedVariable(pobj_var,pobj_member,is_write)
						//check for store(ptr,dot(nested,"member"))
						t=getVariableType(pobj_member)
						//if !is_write&&tisstruct(t):
						//	if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+1)==pe:
						//		//bingo
						//		pe_store_target=readPool(pecaller+EXPR_OFS_ARGS+0)
						//		pobj_var_target=getVariable(pe_store_target)
						//		need_renaming=1
						//		rename_map[pobj_var_target]=pobj_ret
						//		if DEBUG_DUMP_FLATTEN:
						//			Writeln('make into renaming: ',dumpExpr(pecaller,__zero(fcolorer_callback)))
						//		setnop(pecaller)
						//		return 0
						//if DEBUG_DUMP_FLATTEN:
						//	if !is_write&&tisstruct(t):
						//		if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+1)==pe:
						//			Writeln('would have been renaming: ',dumpExpr(pecaller,__zero(fcolorer_callback)))
						//flatten it
						if is_class_owned:
							//class member, keep the original write
							if is_write:
								pe_pending_setnop=call(g_id_stdot,exprvar(pobj_var),exprctval(pobj_member),exprvar(pobj_ret))
								pe_new=call(g_id_store,exprvar(pobj_ret),readPool(pe+EXPR_OFS_ARGS+2))
								transformCode(pe,__zero(ftransformer_callback), PExpression[].NULL,pe_new,[pe_pending_setnop])
								pe=pe_new
							else
								pe_pending_setnop=call(g_id_keep_alive,exprvar(pobj_var))
								pe_new=exprvar(pobj_ret)
								transformCode(pe,__zero(ftransformer_callback), PExpression[].NULL,pe_new,[pe_pending_setnop])
								pe=pe_new
							znew_pending_setnops.push(pe_pending_setnop)
						else
							if is_write:
								freplacer=function(PExpression pe){return call(g_id_store,exprvar(pobj_ret),readPool(pe+EXPR_OFS_ARGS+2))}
							else
								freplacer=function(PExpression pe){return exprvar(pobj_ret)}
							pe=sccpQueueReach(insertCallAt(pecaller,pe,freplacer))
						//we need to continue processing for nested flattens
		if isBuiltin(pe,g_id_store)||isBuiltin(pe,g_id_stdot):
			if isBuiltin(pe,g_id_stdot):
				pe_var=0
				dfsExpr(readPool(pe+EXPR_OFS_ARGS+0),fflatten_struct_variables)
				pe_value=readPool(pe+EXPR_OFS_ARGS+2)
				dfsExpr(pe_value,fflatten_struct_variables)
				pe_value=readPool(pe+EXPR_OFS_ARGS+2)
				pobj_tar=0
			else
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
				dfsExpr(pe_value,fflatten_struct_variables)
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
				pobj_tar=getVariable(pe_var)
			pobj_src=(isExpr(pe_value,EFLAG_VARIABLE)?getVariable(pe_value):0)
			if pobj_tar&&!testUserFlag(pobj_tar,VAR_USER_UNFLATTENABLE)||pobj_src&&!testUserFlag(pobj_src,VAR_USER_UNFLATTENABLE):
				//need to translate this store
				if !testUserFlag(pobj_tar,VAR_USER_UNFLATTENABLE):
					//if readPool(pobj_tar)!=g_vtid_RTVAR:
					//	Writeln("!!! "+dumpExpr(pe,__zero(fcolorer_callback)))
					assert(readPool(pobj_tar)==g_vtid_RTVAR)
					t_tar=readPool(pobj_tar+1)
					//Writeln(dumpExpr(pe,fcolor_abbrv_blocks))
					if pobj_src&&!testUserFlag(pobj_src,VAR_USER_UNFLATTENABLE):
						//both ends are flattened... trade the appeared member set in another pass... or just copy the full set of members
						//enumMembers
						assert(readPool(pobj_src)==g_vtid_RTVAR)
						t_src=readPool(pobj_src+1)
						if DEBUG_DUMP_FLATTEN:
							Writeln('flat-memcpy(both): ',dumpExpr(pe,__zero(fcolorer_callback)),' ',t_tar,' ',dumpType(t_tar),' ',t_src,' ',dumpType(t_src))
						if t_src!=t_tar:
							//error, ignore it
							return 1
						assert(tisstruct(t_src))
						enableNameLookup(t_tar)
						p_members=readPool(t_tar+FUNCTION_OFS_PMEMBER_LIST)
						n_members=readPool(t_tar+FUNCTION_OFS_NMEMBER_LIST)
						as=new PExpression[]
						for i=0:n_members-1
							id_member=readPool(p_members+i)
							if id_member==g_id_this||id_member==g_id_return:continue
							pobj_member=lookupFunctionVariable(t_tar,id_member)
							if DEBUG_DUMP_FLATTEN:
								Writeln('  ',getIdString(id_member),' ',getIdString(readPool(pobj_member)))
							//assert(readPool(pobj_member)!=g_vtid_UNINIT)
							//need to flatten uninit for symderiv
							vtid=readPool(pobj_member)
							if vtid!=g_vtid_RTVAR:continue//&&vtid!=g_vtid_UNINIT
							pv_tar=getFlattenedVariable(pobj_tar,pobj_member,1)
							pe_cpy=call(g_id_store,exprvar(pv_tar),exprvar(getFlattenedVariable(pobj_src,pobj_member,0)))
							//if !readPool(pv_tar+VAR_OFS_DEFINING_STORE):
							//	writePool(pv_tar+VAR_OFS_DEFINING_STORE,pe_cpy)
							as.push(pe_cpy)
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return vcall(g_id_block,as)}))
					else
						if isExpr(pe_value,EFLAG_FCALL)&&getExprFunction(pe_value)==t_tar:
							//Writeln(FormatAsText('new ',dumpExpr(pe,fcolor_abbrv_blocks)))
							//a new - is it empty? mark using a user flag
							assert(tisstruct(t_tar)||tisrealclass(t_tar))
							pe_decl_t_tar=readPool(t_tar+FUNCTION_OFS_PEDECL)
							if !testUserFlag(pe_decl_t_tar,USER_FLAG_EMPTY_NEW_TESTED):
								//test for empty new
								if isCtorEmpty(t_tar,0):
									setUserFlag(pe_decl_t_tar,USER_FLAG_IS_EMPTY_NEW)
									if DEBUG_DUMP_FLATTEN:
										Writeln('ctor detected as empty: '+dumpObject(t_tar))
							if testUserFlag(pe_decl_t_tar,USER_FLAG_IS_EMPTY_NEW):
								//empty new indeed, do nothing, if turns out the var itself is eliminatable in the end, setnop in a next pass
								empty_news.push(pe)
								return 1
						else if isBuiltin(pe_value,g_id_uninit):
							//tuple-in-a-struct, get rid of it
							setnop(pe)
							return 1
						else if pobj_src:
							//memcpy between vars, we can still hope to flatten it the next round
							//this replaces the original renaming. hopefully SSA would do the dirty job for us
							if DEBUG_DUMP_FLATTEN:
								Writeln('flat-memcpy(tar-only-from-var): ',dumpExpr(pe,__zero(fcolorer_callback)))
							assert(tisstruct(t_tar))
							as=new PExpression[]
							enableNameLookup(t_tar)
							p_members=readPool(t_tar+FUNCTION_OFS_PMEMBER_LIST)
							n_members=readPool(t_tar+FUNCTION_OFS_NMEMBER_LIST)
							epos0_pe=readPool(pe+EXPR_OFS_EPOS)
							for i=0:n_members-1
								id_member=readPool(p_members+i)
								if id_member==g_id_this||id_member==g_id_return:continue
								pobj_member=lookupFunctionVariable(t_tar,id_member)
								if DEBUG_DUMP_FLATTEN:
									Writeln('  ',getIdString(id_member),' ',getIdString(readPool(pobj_member)))
								//need to flatten uninit for symderiv
								vtid=readPool(pobj_member)
								if vtid!=g_vtid_RTVAR:continue//&&vtid!=g_vtid_UNINIT
								pv_tar=getFlattenedVariable(pobj_tar,pobj_member,1)
								pe_cpy=fillepos(call(g_id_store,exprvar(pv_tar),call(g_id_dot,exprvar(pobj_src),exprctval(pobj_member))),epos0_pe,0)
								as.push(pe_cpy)
							transformCode(pe,__zero(ftransformer_callback), as,0,PExpression[].NULL)
							setnop(pe)
							return 1
						else
							//Writeln(FormatAsText('not-new ',getExprFunction(pe_value),' ',t_tar,' ',dumpExpr(pe,fcolor_abbrv_blocks)))
							if Platform.BUILD=="debug":
								//if !tisstruct(t_tar):
								if !tisclass(t_tar):
									Writeln(dumpExpr(pe,fcolor_abbrv_blocks))
							//assert(tisstruct(t_tar))
							assert(tisclass(t_tar))
						if DEBUG_DUMP_FLATTEN:
							Writeln('flat-memcpy(tar-only): ',dumpExpr(pe,__zero(fcolorer_callback)))
						//read back from tar after the store, also, tar itself can no longer be eliminated
						//we could get a class new here
						setUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL)
						if DEBUG_DUMP_FLATTEN:
							Writeln(FormatAsText('keep-original ',dumpExpr(pe,fcolor_abbrv_blocks)))
						as=new PExpression[]
						//Writeln(dumpObject(t_tar))
						enableNameLookup(t_tar)
						p_members=readPool(t_tar+FUNCTION_OFS_PMEMBER_LIST)
						n_members=readPool(t_tar+FUNCTION_OFS_NMEMBER_LIST)
						epos0_pe=readPool(pe+EXPR_OFS_EPOS)
						for i=0:n_members-1
							id_member=readPool(p_members+i)
							if id_member==g_id_this||id_member==g_id_return:continue
							pobj_member=lookupFunctionVariable(t_tar,id_member)
							if DEBUG_DUMP_FLATTEN:
								Writeln('  ',getIdString(id_member),' ',getIdString(readPool(pobj_member)))
							//need to flatten uninit for symderiv
							vtid=readPool(pobj_member)
							if vtid!=g_vtid_RTVAR:continue//&&vtid!=g_vtid_UNINIT
							pv_tar=getFlattenedVariable(pobj_tar,pobj_member,1)
							pe_cpy=fillepos(call(g_id_store,exprvar(pv_tar),call(g_id_dot,exprvar(pobj_tar),exprctval(pobj_member))),epos0_pe,0)
							//if !readPool(pv_tar+VAR_OFS_DEFINING_STORE):
							//	writePool(pv_tar+VAR_OFS_DEFINING_STORE,pe_cpy)
							as.push(pe_cpy)
						transformCode(pe,__zero(ftransformer_callback), PExpression[].NULL,0,as)
				else
					t_src=readPool(pobj_src+1)
					assert(tisstruct(t_src))
					if DEBUG_DUMP_FLATTEN:
						Writeln('flat-memcpy(src-only): ',dumpExpr(pe,__zero(fcolorer_callback)),' ',dumpType(t_src))
					//directly write to tar
					as=new PExpression[]
					if isBuiltin(pe,g_id_stdot):
						//tempify and generate pe_var
						pv_temp=makevar(readPool(pobj_src+VAR_OFS_OWNER))
						as.push(call(g_id_store,exprvar(pv_temp),call(g_id_dot,readPool(pe+EXPR_OFS_ARGS+0),readPool(pe+EXPR_OFS_ARGS+1))))
						writePool(pv_temp+VAR_OFS_DEFINING_STORE,as.back())
					else
						pv_temp=pobj_tar
					enableNameLookup(t_src)
					p_members=readPool(t_src+FUNCTION_OFS_PMEMBER_LIST)
					n_members=readPool(t_src+FUNCTION_OFS_NMEMBER_LIST)
					for i=0:n_members-1
						id_member=readPool(p_members+i)
						if id_member==g_id_this||id_member==g_id_return:continue
						pobj_member=lookupFunctionVariable(t_src,id_member)
						if DEBUG_DUMP_FLATTEN:
							Writeln('  ',getIdString(id_member),' ',getIdString(readPool(pobj_member)))
						vtid=readPool(pobj_member)
						if vtid!=g_vtid_RTVAR:continue
						as.push(call(g_id_stdot,exprvar(pv_temp),exprctval(pobj_member),exprvar(getFlattenedVariable(pobj_src,pobj_member,0))))
					//if !readPool(pe+EXPR_OFS_CALLER):
					//	Writeln('bad pe: ',pe,' ',pe0)
					assert(!!readPool(pe+EXPR_OFS_CALLER))
					transformCode(pe,__zero(ftransformer_callback), as,expriptr(0),PExpression[].NULL)
			return 0
		else if isBuiltin(pe,g_id_assert_ctval):
			//ignore assert_ctval
			return 0
		else if isBuiltin(pe,g_id_typeof)||isBuiltin(pe,g_id_has_member):
			val=getExprValue(pe)
			if val.tid==g_vtid_CTVAL||val.tid==g_vtid_CNS:
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				if isExpr(pe_var,EFLAG_VARIABLE):
					pobj_var=getVariable(pe_var)
					if pobj_var&&!testUserFlag(pobj_var,VAR_USER_UNFLATTENABLE)&&readPool(pobj_var)==g_vtid_RTVAR&&tisstruct(readPool(pobj_var+1)):
						//the meta stuff should be made constant if the variable is about to disappear
						pesubstitute=poolCode(TCnsExpression(){'flags_cid':val.val+((val.tid==g_vtid_CNS)?EFLAG_CONST:EFLAG_CTVAL)})
						replaceExpr(pe,pesubstitute)
						return 0
		return 1
	}
	dfsExpr(pe_top,fflatten_struct_variables)
	//tend(tm_flatten_step1)
	//rename ptr to flattened members
	//if need_renaming:
	//	frename_vars=function(PExpression pe){
	//		if isExpr(pe,EFLAG_VARIABLE):
	//			pv0=getVariable(pe)
	//			pv1=rename_map[pv0]
	//			if pv1:
	//				writePool(pe,EFLAG_VARIABLE+pv1)
	//		return 1
	//	}
	//	dfsExpr(pe_top,frename_vars)
	if DEBUG_DUMP_FLATTEN:
		//Writeln(g_ctobject_pool.n)
		Writeln(">>> after flatten\n"+dumpExpr(pe_top,__zero(fcolorer_callback)))
	//expand the monitored variable lists
	//tbegin(tm_flatten_step2)
	if monitoring_base:
		//foreach pv_list,pe_key in g_strflatten_monitored_variables
		for pe_key=monitoring_base+0:monitoring_base+1
			pv_list=g_strflatten_monitored_variables[pe_key]
			pv_list2=new PCTObject[]
			did=0
			foreach pobj_src in pv_list
				if DEBUG_DUMP_FLATTEN:
					Writeln('monitoring ',pobj_src,' ',testUserFlag(pobj_src,VAR_USER_UNFLATTENABLE))
				if testUserFlag(pobj_src,VAR_USER_UNFLATTENABLE):
					pv_list2.push(pobj_src)
				else
					t_src=getVariableType(pobj_src)
					if !tisclass(t_src):continue
					enableNameLookup(t_src)
					p_members=readPool(t_src+FUNCTION_OFS_PMEMBER_LIST)
					n_members=readPool(t_src+FUNCTION_OFS_NMEMBER_LIST)
					for i=0:n_members-1
						id_member=readPool(p_members+i)
						//if DEBUG_DUMP_FLATTEN:
						//	Writeln('  ',getIdString(id_member))
						if id_member==g_id_this||id_member==g_id_return:continue
						pobj_member=lookupFunctionVariable(t_src,id_member)
						//if DEBUG_DUMP_FLATTEN:
						//	Writeln('  ',dumpObject(pobj_member))
						//need to flatten uninit for symderiv
						vtid=readPool(pobj_member)
						if vtid!=g_vtid_RTVAR:continue//&&vtid!=g_vtid_UNINIT
						pv_list2.push(getFlattenedVariable(pobj_src,pobj_member,0))
					did=1
			if did:
				if DEBUG_DUMP_FLATTEN:
					Writeln('expanded g_strflatten_monitored_variables[',pe_key,']=',pv_list2)
				g_strflatten_monitored_variables[pe_key]=pv_list2
			else
				if DEBUG_DUMP_FLATTEN:
					Writeln('unchanged g_strflatten_monitored_variables[',pe_key,']=',pv_list)
	//reeval the flatten-waiters
	//foreach pe in g_strflatten_eval_queue
	//	sccpQueueEval(pe)
	//g_strflatten_eval_queue.clear()
	//eliminate empty news
	foreach pe in empty_news
		assert(isBuiltin(pe,g_id_store))
		pe_var=readPool(pe+EXPR_OFS_ARGS+0)
		pobj_tar=getVariable(pe_var)
		if !testUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL):
			pobj_var_done=lookupFunctionVariable(getVariableType(pobj_tar),g_id_finalizer)
			if pobj_var_done:
				//if we have a dtor, we need to keep it
				setUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL)
		if DEBUG_DUMP_FLATTEN:
			Writeln(FormatAsText('remove-new ',dumpExpr(pe,fcolor_abbrv_blocks)))
		pe_value=readPool(pe+EXPR_OFS_ARGS+1)
		pe_func=readPool(pe_value+EXPR_OFS_FUNCTION)
		//zero out the members and setnop the ctor
		assert(readPool(pobj_tar)==g_vtid_RTVAR)
		t_tar=readPool(pobj_tar+1)
		p_members=readPool(t_tar+FUNCTION_OFS_PMEMBER_LIST)
		n_members=readPool(t_tar+FUNCTION_OFS_NMEMBER_LIST)
		as=new PExpression[]
		for i=0:n_members-1
			id_member=readPool(p_members+i)
			if id_member==g_id_this||id_member==g_id_return:continue
			pobj_member=lookupFunctionVariable(t_tar,id_member)
			vtid=readPool(pobj_member)
			if vtid!=g_vtid_RTVAR:continue
			pobj_flattened=getFlattenedVariable(pobj_tar,pobj_member,0)
			//!testUserFlag(pobj_flattened,VAR_USER_FLATTENED_VAR_IS_WRITTEN)
			//the VAR_USER_FLATTENED_VAR_IS_WRITTEN test is idiocy
			if readPool(pobj_member)==g_vtid_RTVAR:
				//zero it out
				t_member=readPool(pobj_member+1)
				if tisbuiltin(t_member):
					pecns=exprcns(getid_const(readPool(t_member+1),0LL))
				else if tisstruct(t_member):
					pecns=indcall([exprctval(t_member)])
				else
					pecns=exprcns(getid_const(CTYPE_TYPED_NULL,i64(t_member)))
				as.push(call(g_id_store,exprvar(pobj_flattened),pecns))
				//Writeln('zero out, cid=',cid,' type=',t_member,':',dumpType(t_member),' ',getBuiltinType(const_type(CTYPE_FLOAT,64)),' ',dumpExpr(as.back(),__zero(fcolorer_callback)))
		if !testUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL):
			if isBuiltin(pe_func,g_id_function):
				//it's a tuple construction, keep the function BUT STILL ZERO OUT THE MEMBERS
				//pecaller=readPool(pe+EXPR_OFS_CALLER)
				//sccpQueueReach(insertCallAt(pecaller,pe,function(){return pe_func}))
				transformCode(pe,__zero(ftransformer_callback), as,pe_func,PExpression[].NULL)
			else
				transformCode(pe,__zero(ftransformer_callback), as,0,PExpression[].NULL)
				setnop(pe)
		else
			transformCode(pe,__zero(ftransformer_callback), as,0,PExpression[].NULL)
		if DEBUG_DUMP_FLATTEN:
			if testUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL):
				Writeln(FormatAsText('kept ',dumpExpr(pe,fcolor_abbrv_blocks)))
	foreach pe in znew_pending_setnops
		assert(isBuiltin(pe,g_id_stdot)||isBuiltin(pe,g_id_keep_alive))
		pe_var=readPool(pe+EXPR_OFS_ARGS+0)
		pobj_tar=getVariable(pe_var)
		if !testUserFlag(pobj_tar,VAR_USER_KEEP_ORIGINAL):
			setnop(pe)
	//tend(tm_flatten_step2)
	//tbegin(tm_flatten_step3)
	clearUserFlags(pe_top,0)
	//tend(tm_flatten_step3)
	return n_replaced

auto structCnsToVar(PExpression pecall,PCTObject[] var_list_ret)
	foreach pobj_var in var_list_ret
		t=getVariableType(pobj_var)
		if tisstruct(t):
			varifyDblMembers(pecall,t)

auto localflatten(PExpression pecall,PCTObject pobjfn_dup)
	var_list_ret=g_strflatten_monitored_variables[pecall+0]
	var_list_params=g_strflatten_monitored_variables[pecall+1]
	structCnsToVar(pecall,var_list_ret)
	structCnsToVar(pecall,var_list_params)
	sccp(0)//structCnsToVar invalidates sccp, we need to reeval before the real flattening
	return strflatten(readPool(pobjfn_dup+FUNCTION_OFS_PEDECL), pecall)

tm_sccp=tnew(":sccp")
tm_sccp2=tnew(":sccp2")
auto grandsccp()
	tbegin(tm_sccp)
	if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' 1st SCCP: ')}
	sccp(g_pe_top)
	if DEBUG_DUMP_PASSES:{WriteErr('done\n')}
	for(;;)
		if DEBUG_DUMP_FLATTEN||DEBUG_EVAL_LOG||DEBUG_DUMP_SCCP:
			Writeln('>>> after one sccp pass')
			Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
		if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' CDF: ')}
		evalCodeDependingFunctions()
		if DEBUG_DUMP_PASSES:{if g_has_untranslated_cdf:{WriteErr('[TRY AGAIN]\n');}else{WriteErr('done\n');}}
		if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' more SCCP: ')}
		sccp(0)
		if DEBUG_DUMP_PASSES:{WriteErr('done\n')}
		if !g_has_untranslated_cdf:break
	if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' fixConstantTypes: ')}
	if g_enable_dump&&DEBUG_DUMP_FIX_CONSTANT_TYPES:
		Writeln('>>> before fixing constant types')
		Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
	fixConstantTypes()
	if DEBUG_DUMP_PASSES:{WriteErr('done\n')}
	if g_enable_dump:
		Writeln('>>> after fixing constant types')
		Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
	tend(tm_sccp)
	tbegin(tm_sccp2)
	////////////////////////////
	//we reached the final code
	for(;;)
		did=0
		tbegin(tm_strflatten)
		if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' strflatten: ')}
		if strflatten(g_pe_top,0):
			did=1
			sccp(0)
			if DEBUG_DUMP_PASSES:{WriteErr('[WORKED]\n')}
		else
			if DEBUG_DUMP_PASSES:{WriteErr('dry fire\n')}
		tend(tm_strflatten)
		if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' SSA-GVN: ')}
		if partialSSAGVN(g_pe_top,0,1):
			did=1
			sccp(0)
			if DEBUG_DUMP_PASSES:{WriteErr('[WORKED]\n')}
		else
			if DEBUG_DUMP_PASSES:{WriteErr('dry fire\n')}
		if DEBUG_DUMP_FLATTEN||DEBUG_EVAL_LOG:
			Writeln('>>> after one flatten / deadelim / ssa iteration')
			Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
		if ENABLE_DEADELIM:
			if DEBUG_DUMP_PASSES:{WriteErr(formatNumber(System.Time.t(),{frac:2}),' deadelim: ')}
			if deadelim():
				did=1
				sccp(0)
				//cleaning up the nop is *worth* it
				g_pe_top=dfsFlattenBlocks(PExpression[].NULL,g_pe_top,0,0).x
				if DEBUG_DUMP_PASSES:{WriteErr('[WORKED]\n')}
			else
				if DEBUG_DUMP_PASSES:{WriteErr('dry fire\n')}
		if !did:break
	tend(tm_sccp2)

auto isSSAStatementHost(PExpression pe)
	if !isStatementHost(pe):
		return 0
	else if isBuiltin(pe,g_id_blockex):
		id_word=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_STR)
		if id_word!=g_id_for:
			//not a loop, not statement host
			return 0
	else if isBuiltin(pe,g_id_if):
		val=getExprValue(readPool(pe+EXPR_OFS_ARGS+0))
		if val.tid==g_vtid_CNS:
			//const if, ignore it
			return 0
	return 1
	
auto fcolor_ssa(PExpression pe)
	//val=getExprValue(pe)
	//if val.tid==g_vtid_UNINIT:
	//	if !testUserFlag(pe,QUEUE_FLAG_REACH):
	//		if isExpr(pe,EFLAG_FCALL)&&!isBuiltin(pe,g_id_ldparam):
	//			return -2
	//		else
	//			return -1
	//	if isBuiltin(pe,g_id_block):return -1
	//	return -1
	if isExpr(pe,EFLAG_FCALL)&&isSSAStatementHost(pe):
		return -2
	else
		return -1

//////////////////////////////////////
struct TGVNValue
	//function, a, b
	int3 key
	PCTObject pv_backing
	int epos
class TTraitGVNValue
	TKey=int3
	inline getHash(int id)
		key=g_gvn_values[id].key
		return iptr(key.x^key.y^(key.z<<8))
	inline computeHash(int3 key)
		return iptr(key.x^key.y^(key.z<<8))
	inline isKeyEqual(int id,int3 key)
		key0=g_gvn_values[id].key
		return key0.x==key.x&&key0.y==key.y&&key0.z==key.z
	inline createNew(int3 key,iptr hash)
		key2=TGVNValue(){'key':key}
		ret=int(g_gvn_values.n)
		g_gvn_values.push(key2)
		//g_gvn_backing_var.push(0)
		//assert(g_gvn_backing_var.n==g_gvn_values.n)
		return ret

g_gvn_values=[TGVNValue()]
g_gvn_unique=new CUniqueIDProvider(TTraitGVNValue)
//g_gvn_backing_var=new int[1]

inline get_gvn_id(int3 key,int epos)
	ret=g_gvn_unique._find(1,key)
	if ret==int(g_gvn_values.n-1):
		g_gvn_values.back().epos=epos
	return int(ret)

inline test_gvn_id(int3 key)
	return int(g_gvn_unique._find(0,key))

//should have deadelim before this pass? or after - we could reuse some dead...
//then we'll need single-use remat for ANM? benefit only comes from linear coalescing

auto partialSSAGVN(PExpression pe_top,int aggressive_linear_coalescing,int is_global)
	FLAG_SSA_RENAMED=USER_FLAG_ACTIVATED
	did=0
	sccp(0)
	//label the non-ssa-friendly - those accessed in another function
	//conservative renaming... loops, phi it? ignore phi-ed values
	//our goal: strength reduction, live range separation
	//build and flatten back, only merging phi cliques? copyprop...
	//phi rollback - after SSA, rename phi's relevant asses (ignoring copyprop) to the phi target
	//only if the phi is used
	//just do the basic block thing - split basic blocks first
	//if DEBUG_DUMP_SSA:
	//	Writeln('=== before SSA\n',dumpExpr(pe_top,fcolor_ssa))
	clearUserFlags(pe_top,0)
	all_bbs=new PExpression[]
	auto fcreatebb(PExpression pe,int block_id)
		if isExpr(pe,EFLAG_VARIABLE):
			//set var block id
			pobj_var=getVariable(pe)
			flag0=readPool(pobj_var+VAR_OFS_USER_FLAGS)
			block_id_old=(flag0&USER_FLAG_MASK)
			block_id_write=block_id+1
			if block_id_old&&block_id_old!=block_id_write||block_id==-1||readPool(pobj_var)!=g_vtid_RTVAR||tisstruct(readPool(pobj_var+1)):
				block_id_write=USER_FLAG_MASK
			else
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				//151022: this condition wasn't even working!
				//if pecaller&&isBuiltin(pecaller,g_id_aliased)||readPool(pobj_var)==g_vtid_RTVAR&&tisclass(pobj_var+1):
				if pecaller&&isBuiltin(pecaller,g_id_aliased):
					//don't mess with the aliased!
					block_id_write=USER_FLAG_MASK
			writePool(pobj_var+VAR_OFS_USER_FLAGS,(flag0&~USER_FLAG_MASK)|block_id_write)
			return
		if !testUserFlag(pe,QUEUE_FLAG_REACH):return
		if isExpr(pe,EFLAG_FCALL):
			block_id_recurse=block_id
			if isBuiltin(pe,g_id_block):
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if !pecaller||isSSAStatementHost(pecaller):
					all_bbs.push(pe)
					block_id_recurse=int(all_bbs.n-1)
					if pecaller&&isBuiltin(pecaller,g_id_function):
						pobjfn=getExprValueAs(pecaller,g_vtid_CTVAL)
						id_ccnv=getCcnv(pobjfn)
						if id_ccnv==g_id_struct||id_ccnv==g_id_class:
							//not allowed
							all_bbs.pop()
							block_id_recurse=-1
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				fcreatebb(readPool(pe+EXPR_OFS_ARGS+i),block_id_recurse)
	fcreatebb(pe_top,-1)
	//////////////////////////////////////
	//give up gvn purity for now - call graph not ready yet
	//do it in deadelim
	//////////////////////////////////////
	//be conservative when coalescing unless we're in ANM -- we don't want to make it O(n^2)
	//only do it when the intermedates were left unused, or when we have aggressive_linear_coalescing
	//is it safe when there are breaks in the middle? should be, we're conservative about used-outside guys, and the fact we reached somewhere means it didn't break
	//g_gvn - hashed op + operand list, int pool, call graph pureness test when we have is_global, C function pureness labeling
	UNPREDICTABLE_VID_BASE=0x40000000
	g_unpredictable_values=new PExpression[]
	ssa_names=new TSSAName[]
	tentative_backing_gvnid=new int[PExpression]
	//is_different_from_code is made global on purpose - it's manipulated during recursion but only saved at impure-pure boundaries
	is_different_from_code=0
	is_referring_to_unpredictable=0
	pf_curblock=0
	p_newly_generated_point=0
	as_just_generated_cse=new PExpression[]
	removable_stores=new PExpression[]
	the_single_use=new PExpression[PCTObject]
	auto initGVN(PExpression pe)
		g_gvn_values.resize(1)
		g_gvn_unique.clear()
		g_unpredictable_values.clear()
		ssa_names.clear()
		tentative_backing_gvnid.clear()
		is_different_from_code=0
		is_referring_to_unpredictable=0
		pf_curblock=getOwningFunction(pe)
		removable_stores.clear()
		the_single_use.clear()
	inline make_unpredictable(PExpression pe)
		g_unpredictable_values.push(pe)
		return int(UNPREDICTABLE_VID_BASE+(g_unpredictable_values.n-1))
	struct TSSAName
		PCTObject pv_original
		PCTObject pv_current
		int gvn_id
	inline isCopyPropFriendlyExpr(PExpression pe_value)
		if isExpr(pe_value,EFLAG_VARIABLE):
			auto pobj_var=getVariable(pe_value)
			auto flag0=readPool(pobj_var+VAR_OFS_USER_FLAGS)
			auto bid=(flag0&USER_FLAG_MASK)
			if bid!=USER_FLAG_MASK&&bid&&(bid&FLAG_SSA_RENAMED):
				return 1
			else
				return 0
		else
			return 0
	auto isCopyPropFriendly(PExpression pe_value,int gvn_id_value)
		//avoid the source-ass problem by only allowing ssa -> ssa propagation
		if ENABLE_GVN:
			//use gvn_id as the test - SSA store creates "var-backed-ness"
			if gvn_id_value&UNPREDICTABLE_VID_BASE:
				return isCopyPropFriendlyExpr(g_unpredictable_values[gvn_id_value-UNPREDICTABLE_VID_BASE])
			else
				return g_gvn_values[gvn_id_value].pv_backing>0
		return isCopyPropFriendlyExpr(pe_value)
	auto getGvnVariable(PExpression pe,int gvn_id)
		if !ENABLE_GVN:
			return getVariable(pe)
		else
			if gvn_id&UNPREDICTABLE_VID_BASE:
				pobj_ret=getVariable(g_unpredictable_values[gvn_id-UNPREDICTABLE_VID_BASE])
				assert(!!pobj_ret)
				return pobj_ret
			else
				pobj_ret=g_gvn_values[gvn_id].pv_backing
				assert(pobj_ret>0)
				return pobj_ret
	auto gvn_generate(int gvn_id,int still_linear)
		if DEBUG_DUMP_SSA:
			Writeln('gvn_generate ',gvn_id)
		if gvn_id&UNPREDICTABLE_VID_BASE:
			pe_ret=g_unpredictable_values[gvn_id-UNPREDICTABLE_VID_BASE]
			assert(!!pe_ret)
			if isExpr(pe_ret,EFLAG_VARIABLE):
				//variables can get dupped
				pe_ret=fillepos(exprvar(getVariable(pe_ret)),readPool(pe_ret+EXPR_OFS_EPOS),readPool(pe_ret+EXPR_OFS_EPOS+1))
				if DEBUG_DUMP_SSA:
					Writeln('  unpredictable var - ',dumpExpr(pe_ret,__zero(fcolorer_callback)))
				return pe_ret
			g_unpredictable_values[gvn_id-UNPREDICTABLE_VID_BASE]=0
			if DEBUG_DUMP_SSA:
				Writeln('  unpredictable - ',dumpExpr(pe_ret,__zero(fcolorer_callback)))
			return pe_ret
		else
			pobj_var=g_gvn_values[gvn_id].pv_backing
			//we may need a clone...
			//if aggressive_linear_coalescing:
			//	if still_linear:pobj_var=0
			if pobj_var<0:
				//CSE - already-generated-ness test
				pe_previous=(pobj_var&0x7fffffff)
				pobj_var=makevar(pf_curblock)
				if DEBUG_DUMP_SSA:
					Writeln('CSE: ',dumpExpr(readPool(pe_previous+EXPR_OFS_CALLER),__zero(fcolorer_callback)),' ',dumpObject(pobj_var))
				if pe_previous>=p_newly_generated_point:
					//just-generated code got CSEed, smash!
					if DEBUG_DUMP_SSA:
						Writeln('  handled locally')
					as_just_generated_cse.push(fillepos(call(g_id_store,exprvar(pobj_var),cloneExpr(pe_previous)),g_gvn_values[gvn_id].epos,-1))
					writePool(pe_previous,EFLAG_VARIABLE+pobj_var)
				else
					if DEBUG_DUMP_SSA:
						Writeln('  transformCode')
					transformCode(pe_previous,function(PExpression pe){return fillepos(call(g_id_store,exprvar(pobj_var),pe_previous),g_gvn_values[gvn_id].epos,-1)}, PExpression[].NULL,exprvar(pobj_var),PExpression[].NULL)
				g_gvn_values[gvn_id].pv_backing=pobj_var
			if pobj_var:
				pe_ret=fillepos(exprvar(pobj_var),g_gvn_values[gvn_id].epos,-1)
				if DEBUG_DUMP_SSA:
					Writeln('  var - ',dumpExpr(pe_ret,__zero(fcolorer_callback)))
				return pe_ret
			gvn_key=g_gvn_values[gvn_id].key
			if gvn_key.x==g_fakectval_gvn_cns:
				pe_ret=exprcns(gvn_key.y)
			else if gvn_key.x==g_fakectval_gvn_str:
				pe_ret=exprstr(gvn_key.y)
			else
				if gvn_key.y==-1:
					args=new(g_ctunique_items[gvn_key.z].key)
					for i=1:args.n-1
						args[i]=gvn_generate(args[i],0)
				else
					still_linear_recurse=still_linear
					if still_linear_recurse:
						if !(gvnkeyIsBuiltin(gvn_key,g_id_operator_add)||gvnkeyIsBuiltin(gvn_key,g_id_operator_sub)):
							still_linear_recurse=0
						else if !gvn_key.y||!gvn_key.z:
							still_linear_recurse=0
					args=[0,gvn_key.y?gvn_generate(gvn_key.y,still_linear_recurse):0,gvn_key.z?gvn_generate(gvn_key.z,still_linear_recurse):0]
					if !gvn_key.z:args.n--
					if !gvn_key.y:args.n--
				args[0]=exprctval(gvn_key.x)
				//Writeln(args,' ',gvn_key,' ',dumpObject(gvn_key.x))
				pe_ret=indcall(args)
				//don't CSE constants - only do it here
				//we may have unwiped leftovers?
				if g_gvn_values[gvn_id].pv_backing<=0:
					g_gvn_values[gvn_id].pv_backing=0x80000000+pe_ret
			if DEBUG_DUMP_SSA:
				Writeln('  ',dumpExpr(pe_ret,__zero(fcolorer_callback)))
			return fillepos(pe_ret,g_gvn_values[gvn_id].epos,-1)
	auto solidifyTentativeBacking(PExpression pe)
		gvn_id=tentative_backing_gvnid[pe]
		if !gvn_id:return
		tentative_backing_gvnid[pe]=0
		if DEBUG_DUMP_SSA:
			if g_gvn_values[gvn_id].pv_backing==0x80000000+pe:
				//if !is_different_from_code:
				Writeln('solidify the tentative backing: ',gvn_id,' ',dumpExpr(pe,__zero(fcolorer_callback)))
		if isExpr(pe,EFLAG_FCALL):
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				wipeoutStaleBackingExpr(readPool(pe+EXPR_OFS_ARGS+i))
	auto wipeoutStaleBackingExpr(PExpression pe)
		gvn_id=tentative_backing_gvnid[pe]
		if !gvn_id:return
		tentative_backing_gvnid[pe]=0
		if g_gvn_values[gvn_id].pv_backing==0x80000000+pe:
			g_gvn_values[gvn_id].pv_backing=0
			if DEBUG_DUMP_SSA:
				//if !is_different_from_code:
				Writeln('wipe out the stale backing: ',gvn_id,' ',dumpExpr(pe,__zero(fcolorer_callback)))
		if isExpr(pe,EFLAG_FCALL):
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				wipeoutStaleBackingExpr(readPool(pe+EXPR_OFS_ARGS+i))
	auto gvn_replace(PExpression pe,int gvn_id)
		if !ENABLE_GVN:
			//nothing
		else
			//aggressive_linear_coalescing should disable that?
			if gvn_id&UNPREDICTABLE_VID_BASE:return
			if !isExpr(pe,EFLAG_FCALL):
				if isExpr(pe,EFLAG_VARIABLE)&&is_different_from_code:
					//variable renaming case
					//n0=g_ctobject_pool.n
					if DEBUG_DUMP_GVN_DETAILS:{Writeln('>>> replace ',dumpExpr(pe,__zero(fcolorer_callback)))}
					p_newly_generated_point=int(g_ctobject_pool.n)
					as_just_generated_cse=new PExpression[]
					pe_replacement=gvn_generate(gvn_id,1)
					transformCode(pe,__zero(ftransformer_callback), as_just_generated_cse,pe_replacement,PExpression[].NULL)
					if DEBUG_DUMP_GVN_DETAILS:{Writeln('<<< into ',dumpExpr(pe_replacement,__zero(fcolorer_callback)))}
					did=1
					//else
					//	g_ctobject_pool'n':n0
				solidifyTentativeBacking(pe)
				return
			if !is_different_from_code:
				//value changed-ness test - can only be caused by peephole and ssa renaming, is_different_from_code
				solidifyTentativeBacking(pe)
				return
			//wipe out the backing vars first
			if DEBUG_DUMP_SSA:
				Writeln('gvn_replace ',dumpExpr(pe,__zero(fcolorer_callback)))
			if DEBUG_DUMP_GVN_DETAILS:{if !did:Write(dumpExpr(pe,__zero(fcolorer_callback)),' -> ')}
			wipeoutStaleBackingExpr(pe)
			p_newly_generated_point=int(g_ctobject_pool.n)
			as_just_generated_cse=new PExpression[]
			pe_replacement=gvn_generate(gvn_id,1)
			transformCode(pe,__zero(ftransformer_callback), as_just_generated_cse,pe_replacement,PExpression[].NULL)
			if DEBUG_DUMP_GVN_DETAILS:{if !did:Write(dumpExpr(pe_replacement,__zero(fcolorer_callback)),' ')}
			did=1
	inline gvnkeyIsBuiltin(int3 gvn_key,int id)
		return gvn_key.x==getBuiltin(id)
	inline gvnIsBuiltin(int gvn_id,int id)
		if gvn_id&UNPREDICTABLE_VID_BASE:return 0
		gvn_key=g_gvn_values[gvn_id].key
		return gvn_key.x==getBuiltin(id)
	inline gvnIsCns(int gvn_id)
		if gvn_id&UNPREDICTABLE_VID_BASE:return 0
		gvn_key=g_gvn_values[gvn_id].key
		return gvn_key.x==g_fakectval_gvn_cns
	inline gvnIsZero(int gvn_id)
		if gvn_id&UNPREDICTABLE_VID_BASE:return 0
		gvn_key=g_gvn_values[gvn_id].key
		return gvn_key.x==g_fakectval_gvn_cns&&isConstZero(ctNumber(gvn_key.y))
	inline gvnIsOne(int gvn_id)
		if gvn_id&UNPREDICTABLE_VID_BASE:return 0
		gvn_key=g_gvn_values[gvn_id].key
		return gvn_key.x==g_fakectval_gvn_cns&&isConstOne(ctNumber(gvn_key.y))
	inline gvnIsNegOne(int gvn_id)
		if gvn_id&UNPREDICTABLE_VID_BASE:return 0
		gvn_key=g_gvn_values[gvn_id].key
		return gvn_key.x==g_fakectval_gvn_cns&&isConstNegOne(ctNumber(gvn_key.y))
	auto gvn_peephole(int3 gvn_key0,PExpression pe)
		n_args=getExprNArgs(pe)
		gvn_key=gvn_key0
		pe_arg0=0
		pe_arg1=1
		if n_args>0:{pe_arg0=readPool(pe+EXPR_OFS_ARGS+0);gvn_key.y=bbssa(pe_arg0)}
		if n_args>1:{pe_arg1=readPool(pe+EXPR_OFS_ARGS+1);gvn_key.z=bbssa(pe_arg1)}
		epos=readPool(pe+EXPR_OFS_EPOS)
		if ENABLE_GVN:
			if pe_arg0:
				t=getExprType(pe_arg0)
				if t&&tisbuiltin(t):
					for(;;)
						//non-zero-and-predictable test
						if u32(gvn_key.y-1)<u32(UNPREDICTABLE_VID_BASE-1)&&u32(gvn_key.z)<u32(UNPREDICTABLE_VID_BASE-1):
							//Write('.')
							//linear merging: a+b*a, b*a+c*a
							if gvnkeyIsBuiltin(gvn_key,g_id_operator_add)||gvnkeyIsBuiltin(gvn_key,g_id_operator_sub):
								if DEBUG_DUMP_SSA:
									Writeln('test linear merging ',dumpExpr(pe,__zero(fcolorer_callback)))
								key_arg0=g_gvn_values[gvn_key.y].key
								if key_arg0.x==g_id_operator_mul&&key_arg0.y>0&&key_arg0.z>0&&gvnIsCns(key_arg0.z):
									tmp=key_arg0.y
									key_arg0.y=key_arg0.z
									key_arg0.z=tmp
								key_arg1=g_gvn_values[gvn_key.z].key
								if key_arg1.x==g_id_operator_mul&&key_arg1.y>0&&key_arg1.z>0&&gvnIsCns(key_arg1.z):
									tmp=key_arg1.y
									key_arg1.y=key_arg1.z
									key_arg1.z=tmp
								if key_arg0.x==g_id_operator_mul&&key_arg1.x==g_id_operator_mul&&key_arg1.z==key_arg0.z&&gvnIsCns(key_arg1.y)&&gvnIsCns(key_arg0.y):
									//b*a+c*a
									cb=ctNumber(g_gvn_values[key_arg0.y].key.y)
									cc=ctNumber(g_gvn_values[key_arg1.y].key.y)
									if cb.type==cc.type:
										if gvnkeyIsBuiltin(gvn_key,g_id_operator_add):
											if cb.type==const_type(CTYPE_FLOAT,32):
												cb.val_bin=i64(u32(__float_as_int((__int_as_float(int(cb.val_bin))+__int_as_float(int(cc.val_bin))))))
											else if cb.type==const_type(CTYPE_FLOAT,64):
												cb.val_bin=__double_as_longlong((__longlong_as_double(cb.val_bin)+__longlong_as_double(cc.val_bin)))
											else
												cb.val_bin+=cc.val_bin
										else
											if cb.type==const_type(CTYPE_FLOAT,32):
												cb.val_bin=i64(u32(__float_as_int((__int_as_float(int(cb.val_bin))-__int_as_float(int(cc.val_bin))))))
											else if cb.type==const_type(CTYPE_FLOAT,64):
												cb.val_bin=__double_as_longlong((__longlong_as_double(cb.val_bin)-__longlong_as_double(cc.val_bin)))
											else
												cb.val_bin-=cc.val_bin
										is_different_from_code=1
										gvn_key.x=getBuiltin(g_id_operator_mul)
										gvn_key.y=get_gvn_id(int3(g_fakectval_gvn_cns,getid_const(cb.type,cb.val_bin),0),epos)
										gvn_key.z=key_arg0.z
								else if key_arg1.x==g_id_operator_mul&&key_arg1.z==gvn_key.y&&gvnIsCns(key_arg1.y):
									//a+b*a
									cb=ctNumber(g_gvn_values[key_arg1.y].key.y)
									if gvnkeyIsBuiltin(gvn_key,g_id_operator_add):
										if cb.type==const_type(CTYPE_FLOAT,32):
											cb.val_bin=i64(u32(__float_as_int((1.0f+__int_as_float(int(cb.val_bin))))))
										else if cb.type==const_type(CTYPE_FLOAT,64):
											cb.val_bin=__double_as_longlong(1.0+__longlong_as_double(cb.val_bin))
										else
											cb.val_bin++
									else
										if cb.type==const_type(CTYPE_FLOAT,32):
											cb.val_bin=i64(u32(__float_as_int((1.0f-__int_as_float(int(cb.val_bin))))))
										else if cb.type==const_type(CTYPE_FLOAT,64):
											cb.val_bin=__double_as_longlong(1.0-__longlong_as_double(cb.val_bin))
										else
											cb.val_bin=1LL-cb.val_bin
									is_different_from_code=1
									gvn_key.x=getBuiltin(g_id_operator_mul)
									gvn_key.z=get_gvn_id(int3(g_fakectval_gvn_cns,getid_const(cb.type,cb.val_bin),0),epos)
							//negation canonicalization: a+-(-b), (-a)+b, -a-b, -a*-b
							key_arg0=g_gvn_values[gvn_key.y].key
							key_arg1=g_gvn_values[gvn_key.z].key
							//gvnkeyIsBuiltin(gvn_key,g_id_operator_add)||
							if gvnkeyIsBuiltin(gvn_key,g_id_operator_sub):
								if gvnkeyIsBuiltin(key_arg1,g_id_operator_neg):
									//try to make everything a +, which is swappable
									//there for we do a-(-b) and ignore a+(-b)
									//we don't want to make (-a)+(-b) and (-a)-(-b) into different expressions
									is_different_from_code=1
									if gvnkeyIsBuiltin(gvn_key,g_id_operator_add):
										gvn_key.x=getBuiltin(g_id_operator_sub)
									else
										gvn_key.x=getBuiltin(g_id_operator_add)
									gvn_key.z=key_arg1.y
									continue
							//if gvnkeyIsBuiltin(gvn_key,g_id_operator_add):
							//	if gvnkeyIsBuiltin(key_arg0,g_id_operator_neg):
							//		//-a+b -> b-a
							//		is_different_from_code=1
							//		gvn_key.x=getBuiltin(g_id_operator_sub)
							//		gvn_key.y=gvn_key.z
							//		gvn_key.z=key_arg0.y
							//		continue
							//else if gvnkeyIsBuiltin(gvn_key,g_id_operator_sub):
							//	//-a-b
							//	//gvn_peephole isn't reentrant for now
							//	//if gvnkeyIsBuiltin(key_arg0,g_id_operator_neg):
							//	//	gvnid_addition=gvn_peephole(int3(getBuiltin(g_id_operator_add),key_arg0.y,gvn_key.z),pe)
							//	//	gvn_key=int3(getBuiltin(g_id_operator_neg),gvnid_addition,0)
							//	//	continue
							//else 
							if gvnkeyIsBuiltin(gvn_key,g_id_operator_mul):
								is_neg0=(key_arg0.x==getBuiltin(g_id_operator_neg))
								is_neg1=(key_arg1.x==getBuiltin(g_id_operator_neg))
								if is_neg0&&is_neg1&&!(key_arg0.y&UNPREDICTABLE_VID_BASE)&&!(key_arg1.y&UNPREDICTABLE_VID_BASE):
									is_different_from_code=1
									gvn_key.y=key_arg0.y
									gvn_key.z=key_arg1.y
									continue
								/*
								//if one side is a negation and the other side is a subtraction, negate the subtraction
								if is_neg0&&gvnkeyIsBuiltin(key_arg1,g_id_operator_sub):
									is_different_from_code=1
									gvn_key.y=key_arg0.y
									gvn_key.z=get_gvn_id(int3(key_arg1.x,key_arg1.z,key_arg1.y),g_gvn_values[gvn_key.z].epos)
									continue
								if is_neg1&&gvnkeyIsBuiltin(key_arg0,g_id_operator_sub):
									is_different_from_code=1
									gvn_key.y=get_gvn_id(int3(key_arg0.x,key_arg0.z,key_arg0.y),g_gvn_values[gvn_key.y].epos)
									gvn_key.z=key_arg1.y
									continue
								//subtraction * subtraction: try to negate both sides and see if we can get a smaller id
								if gvnkeyIsBuiltin(key_arg0,g_id_operator_sub)&&gvnkeyIsBuiltin(key_arg1,g_id_operator_sub):
									id_pair=int2(gvn_key.y,gvn_key.z);if id_pair.x>id_pair.y:{tmp=id_pair.x;id_pair'x':id_pair.y;id_pair'y':tmp}
									id_pair2=int2(
										get_gvn_id(int3(key_arg0.x,key_arg0.z,key_arg0.y),g_gvn_values[gvn_key.y].epos),
										get_gvn_id(int3(key_arg1.x,key_arg1.z,key_arg1.y),g_gvn_values[gvn_key.z].epos));
									if id_pair2.x>id_pair2.y:{tmp=id_pair2.x;id_pair2'x':id_pair2.y;id_pair2'y':tmp}
									if id_pair2.y<id_pair.y:
										is_different_from_code=1
										gvn_key'y':id_pair2.x
										gvn_key.z=id_pair2.y
										continue
								*/
						break
					//Writeln('#')
					//trivial arith
					if gvnkeyIsBuiltin(gvn_key,g_id_operator_add)||gvnkeyIsBuiltin(gvn_key,g_id_operator_or)||gvnkeyIsBuiltin(gvn_key,g_id_operator_xor):
						if gvnIsZero(gvn_key.y):{is_different_from_code=1;return gvn_key.z}
						if gvnIsZero(gvn_key.z):{is_different_from_code=1;return gvn_key.y}
					else if gvnkeyIsBuiltin(gvn_key,g_id_operator_mul):
						if gvnIsOne(gvn_key.y):{is_different_from_code=1;return gvn_key.z}
						if gvnIsOne(gvn_key.z):{is_different_from_code=1;return gvn_key.y}
						if gvnIsZero(gvn_key.y):{is_different_from_code=1;return gvn_key.y}
						if gvnIsZero(gvn_key.z):{is_different_from_code=1;return gvn_key.z}
					else if gvnkeyIsBuiltin(gvn_key,g_id_operator_and):
						if gvnIsZero(gvn_key.y):{is_different_from_code=1;return gvn_key.y}
						if gvnIsZero(gvn_key.z):{is_different_from_code=1;return gvn_key.z}
					else if gvnkeyIsBuiltin(gvn_key,g_id_operator_sub)||gvnkeyIsBuiltin(gvn_key,g_id_operator_shl)||gvnkeyIsBuiltin(gvn_key,g_id_operator_shr):
						if gvnIsZero(gvn_key.z):{is_different_from_code=1;return gvn_key.y}
					else if gvnkeyIsBuiltin(gvn_key,g_id_operator_div):
						if gvnIsOne(gvn_key.z):{is_different_from_code=1;return gvn_key.y}
						if gvnIsZero(gvn_key.y):{is_different_from_code=1;return gvn_key.y}
						//coulddo: *rcp
						//if gvnIsCns(gvn_key.z)
					//forms of negation
					if gvnkeyIsBuiltin(gvn_key,g_id_operator_mul):
						if gvnIsNegOne(gvn_key.y):
							is_different_from_code=1
							gvn_key.x=getBuiltin(g_id_operator_neg)
							gvn_key.y=gvn_key.z;gvn_key.z=0
						else if gvnIsNegOne(gvn_key.z):
							is_different_from_code=1
							gvn_key.x=getBuiltin(g_id_operator_neg)
							gvn_key.z=0
					else if gvnkeyIsBuiltin(gvn_key,g_id_operator_sub):
						if gvnIsZero(gvn_key.y):
							is_different_from_code=1
							gvn_key.x=getBuiltin(g_id_operator_neg)
							gvn_key.y=gvn_key.z
							gvn_key.z=0
						id_neg_b=test_gvn_id(int3(getBuiltin(g_id_operator_neg),gvn_key.z,0))
						if id_neg_b>0:
							//a-b, -b already created, make into a+(-b)
							is_different_from_code=1
							gvn_key.x=getBuiltin(g_id_operator_add)
							gvn_key.z=id_neg_b
					//-(-a)
					if gvnkeyIsBuiltin(gvn_key,g_id_operator_neg):
						if gvnIsBuiltin(gvn_key.y,g_id_operator_neg):
							is_different_from_code=1
							return g_gvn_values[gvn_key.y].key.y
					//coulddo: more convolved examples -- >>24 &0xff or something
					//duplicate operand case
					if gvn_key.y==gvn_key.z:
						if gvnkeyIsBuiltin(gvn_key,g_id_operator_add):
							is_different_from_code=1
							gvn_key.x=getBuiltin(g_id_operator_mul)
							gvn_key.z=get_gvn_id(int3(g_fakectval_gvn_cns,idCastConstI32(2,t),0),epos)
						else if gvnkeyIsBuiltin(gvn_key,g_id_operator_sub)||gvnkeyIsBuiltin(gvn_key,g_id_operator_xor):
							is_different_from_code=1
							gvn_key.x=g_fakectval_gvn_cns
							gvn_key.y=get_gvn_id(int3(g_fakectval_gvn_cns,idCastConstI32(0,t),0),epos)
							gvn_key.z=0
						else if gvnkeyIsBuiltin(gvn_key,g_id_operator_and)||gvnkeyIsBuiltin(gvn_key,g_id_operator_or):
							is_different_from_code=1
							return gvn_key.y
					//the swapping case
					if gvnkeyIsBuiltin(gvn_key,g_id_operator_add)||gvnkeyIsBuiltin(gvn_key,g_id_operator_or)||gvnkeyIsBuiltin(gvn_key,g_id_operator_xor)||gvnkeyIsBuiltin(gvn_key,g_id_operator_and)||gvnkeyIsBuiltin(gvn_key,g_id_operator_mul):
						if gvn_key.y>gvn_key.z&&gvn_key.z:
							//is_different_from_code=1
							tmp=gvn_key.y
							gvn_key.y=gvn_key.z
							gvn_key.z=tmp
		gvn_id_ret=get_gvn_id(gvn_key,epos)
		return gvn_id_ret
	auto bbssa(PExpression pe0)
		pe=pe0
		if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isExpr(pe,EFLAG_FCALL):
			//Writeln('unreach ',dumpExpr(pe,__zero(fcolorer_callback)))
			is_referring_to_unpredictable=1
			return make_unpredictable(0)
		if isExpr(pe,EFLAG_VARIABLE):
			pobj_var=getVariable(pe)
			if readPool(pobj_var)==g_vtid_RTVAR:
				flag0=readPool(pobj_var+VAR_OFS_USER_FLAGS)
				bid=(flag0&USER_FLAG_MASK)
				if bid!=USER_FLAG_MASK&&bid:
					if !(bid&FLAG_SSA_RENAMED):
						//uninit, smash it - could be a loop
						//t=getVariableType(pobj_var)
						//if t&&!tisstruct(t):
						//	errorAtExpr(ETYPE_WARNING,pe,"uninitialized variable '@1'".Replace(["@1",citeexpr(pe)]))
						//errorAtExpr(ETYPE_WARNING,pe,"uninitialized variable '@1'".Replace(["@1",citeexpr(pe)]))
						if DEBUG_DUMP_SSA:
							Writeln('smash uninited var: ',dumpObject(pobj_var))
						writePool(pobj_var+VAR_OFS_USER_FLAGS,flag0|USER_FLAG_MASK)
					else
						//do the renaming
						ssa_vid=(bid&~FLAG_SSA_RENAMED)
						pobj_var_renamed=ssa_names[ssa_vid].pv_current
						if readPool(pe)!=EFLAG_VARIABLE+pobj_var_renamed:
							is_different_from_code=1
							//sccpQueueEval(pe)
							//writePool(pe,EFLAG_VARIABLE+pobj_var_renamed)
							//for the queue
							if DEBUG_DUMP_SSA:
								Writeln('var rename: ',dumpObject(pobj_var),' -> ',dumpObject(pobj_var_renamed))
							replaceExpr(pe,exprvar(pobj_var_renamed))
						return ssa_names[ssa_vid].gvn_id
		else if isExpr(pe,EFLAG_FCALL):
			is_store=0
			is_pure=0
			if isBuiltin(pe,g_id_store):
				is_store=1
			//purity - flagging FFLAG_IS_PURE for c imports... intrinsic __fflag, global int[] for param gvn ids
			pobjfn=getExprFunction(pe)
			if pobjfn&&(getFFlag(pobjfn)&FFLAG_IS_PURE):
				is_pure=1
				if ENABLE_GVN:
					val=getExprValue(pe)
					if val.tid==g_vtid_CNS:
						return get_gvn_id(int3(g_fakectval_gvn_cns,val.val,0),readPool(pe+EXPR_OFS_EPOS))
					else if val.tid==g_vtid_STR:
						return get_gvn_id(int3(g_fakectval_gvn_str,val.val,0),readPool(pe+EXPR_OFS_EPOS))
			gvn_key=int3(pobjfn,0,0)
			n_args=getExprNArgs(pe)
			if !isSSAStatementHost(pe):
				gvn_id_ret=0
				//gvn - int3 hash - if we have more than 3, we know (it's a weird function), just ctUnique the rest into one of the 3 ints
				if is_store:
					pe_var=readPool(pe+EXPR_OFS_ARGS+0)
					pobj_var=getVariable(pe_var)
					assert(!is_pure)
					bk=is_different_from_code
					bk2=is_referring_to_unpredictable
					is_different_from_code=0
					is_referring_to_unpredictable=0
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					gvn_id_value=bbssa(pe_value)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)//var renaming may have changed it
					remove_single_use=(!is_referring_to_unpredictable)
					gvn_replace(pe_value,gvn_id_value)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					is_referring_to_unpredictable=bk2
					is_different_from_code=bk
					if readPool(pobj_var)==g_vtid_RTVAR:
						flag0=readPool(pobj_var+VAR_OFS_USER_FLAGS)
						bid=(flag0&USER_FLAG_MASK)
						if bid!=USER_FLAG_MASK&&bid:
							if DEBUG_DUMP_SSA:
								Writeln('SSA-friendly store ',dumpExpr(pe,__zero(fcolorer_callback)))
							if !(bid&FLAG_SSA_RENAMED):
								//mode switch to SSA, but the variable name remains unchanged
								bid--
								writePool(pobj_var+VAR_OFS_USER_FLAGS,(flag0&~USER_FLAG_MASK)+(FLAG_SSA_RENAMED+int(ssa_names.n)))
								pv_current=pobj_var
								if isCopyPropFriendly(pe_value,gvn_id_value):
									//copyprop
									pv_current=getGvnVariable(pe_value,gvn_id_value)
									if DEBUG_DUMP_SSA:
										Writeln('1st-copy-prop rename: ',dumpExpr(pe,__zero(fcolorer_callback)),' ',gvn_id_value,' ',dumpObject(pv_current))
									//the ANM/deriv returns should have been protected this way
									if readPool(pobj_var+VAR_OFS_ID)==g_id_return:
										replaceExpr(pe_value,exprvar(pv_current))
									else
										setnop(pe)
								ssa_names.push(TSSAName(){'pv_original':pobj_var,'pv_current':pv_current,'gvn_id':gvn_id_value})
								ssa_vid=int(ssa_names.n)-1
							else
								ssa_vid=(bid&~FLAG_SSA_RENAMED)
								//give the variable a new name
								if isCopyPropFriendly(pe_value,gvn_id_value):
									//copyprop
									ssa_names[ssa_vid].pv_current=getGvnVariable(pe_value,gvn_id_value)
									ssa_names[ssa_vid].gvn_id=gvn_id_value
									if DEBUG_DUMP_SSA:
										Writeln('copy-prop rename: ',dumpExpr(pe,__zero(fcolorer_callback)),' ',dumpObject(ssa_names[ssa_vid].pv_current))
									//the ANM/deriv returns should have been protected this way
									if readPool(pobj_var+VAR_OFS_ID)==g_id_return:
										replaceExpr(pe_value,exprvar(ssa_names[ssa_vid].pv_current))
									else
										setnop(pe)
								else
									//true new value
									pv_dup=makevar(readPool(pobj_var+VAR_OFS_OWNER))
									writePool(pv_dup+VAR_OFS_FLATTENING_OWNER,readPool(pobj_var+VAR_OFS_FLATTENING_OWNER))
									ssa_names[ssa_vid].pv_current=pv_dup
									ssa_names[ssa_vid].gvn_id=gvn_id_value
									if DEBUG_DUMP_SSA:
										Writeln('rename: ',dumpExpr(pe,__zero(fcolorer_callback)),' ',dumpObject(ssa_names[ssa_vid].pv_current))
									writePool(pv_dup+VAR_OFS_ID,readPool(pobj_var+VAR_OFS_ID))
									//writePool(pe_var,EFLAG_VARIABLE+pv_dup)
									//transformCode(pe_var,NULL, NULL,exprvar(pv_dup),NULL)
									//sccpQueueEval(pe)
									//we gotta replace pe for the queue
									pe_renamed=replaceExpr(pe,call(g_id_store,exprvar(pv_dup),pe_value))
									setnop(pe)
									pe=pe_renamed
									if DEBUG_DUMP_GVN_DETAILS:{if !did:Write('SSA rename')}
									did=1
							if remove_single_use:
								//only remove the SSA-friendly ones, put it here -- pe may have changed due to renaming
								removable_stores.push(pe)
							if gvn_id_value&UNPREDICTABLE_VID_BASE:
								g_unpredictable_values[gvn_id_value-UNPREDICTABLE_VID_BASE]=exprvar(ssa_names[ssa_vid].pv_current)
								if DEBUG_DUMP_SSA:
									Writeln('GVN-backing-var-set-unp ',gvn_id_value,' ',dumpExpr(pe,__zero(fcolorer_callback)))
							else
								//if remove_single_use:
								//	if DEBUG_DUMP_SSA:
								//		Writeln('single-use variable removed ',dumpExpr(pe,__zero(fcolorer_callback)))
								//	//don't touch pe, wait for it to get deadelimed
								//	//wipe it out so that no one CSEs the shit
								//	//if is_different_from_code:
								//	wipeoutStaleBackingExpr(pe_value)
								if g_gvn_values[gvn_id_value].pv_backing<=0:
									//avoid replacing the backing var
									g_gvn_values[gvn_id_value].pv_backing=ssa_names[ssa_vid].pv_current
									if DEBUG_DUMP_SSA:
										Writeln('GVN-backing-var-set ',gvn_id_value,' ',dumpExpr(pe,__zero(fcolorer_callback)))
								else
									if DEBUG_DUMP_SSA:
										Writeln('backing-var remained as ',dumpObject(g_gvn_values[gvn_id_value].pv_backing)," even though it's assigned to ",dumpObject(ssa_names[ssa_vid].pv_current))
						else
							if DEBUG_DUMP_SSA:
								Writeln('SSA-hostile store ',dumpExpr(pe,__zero(fcolorer_callback)))
					gvn_id_ret=make_unpredictable(pe)
				else if is_pure&&n_args<=2:
					assert(!is_store)
					bk2=is_referring_to_unpredictable
					bbssa(readPool(pe+EXPR_OFS_ARGS+-1))
					is_referring_to_unpredictable=bk2
					//simplify the special cases
					gvn_id_ret=gvn_peephole(gvn_key,pe)
					if DEBUG_DUMP_SSA:
						if gvn_id_ret&UNPREDICTABLE_VID_BASE:
							Writeln('GVN number ',gvn_id_ret,' ',dumpExpr(pe,__zero(fcolorer_callback)),' (peephole)',is_different_from_code?" ***":"")
						else
							Writeln('GVN number ',gvn_id_ret,' ',dumpExpr(pe,__zero(fcolorer_callback)),' (peephole)',is_different_from_code?" ***":"",' ',g_gvn_values[gvn_id_ret].key)
				else if is_pure:
					arg_values=new int[]
					arg_values.push(g_id_gvn_ctunique)
					for i=-1:n_args-1
						bk2=is_referring_to_unpredictable
						val_i=bbssa(readPool(pe+EXPR_OFS_ARGS+i))
						if i>=0:
							arg_values.push(val_i)
						else
							is_referring_to_unpredictable=bk2
					gvn_key.y=-1
					gvn_key.z=ctUnique(arg_values)
					gvn_id_ret=get_gvn_id(gvn_key,readPool(pe+EXPR_OFS_EPOS))
					if DEBUG_DUMP_SSA:
						Writeln('GVN number ',gvn_id_ret,' ',dumpExpr(pe,__zero(fcolorer_callback)))
				else
					for i=-1:n_args-1
						bk=is_different_from_code
						bk2=is_referring_to_unpredictable
						is_different_from_code=0
						is_referring_to_unpredictable=0
						peargi=readPool(pe+EXPR_OFS_ARGS+i)
						gvn_id_i=bbssa(peargi)
						peargi=readPool(pe+EXPR_OFS_ARGS+i)
						gvn_replace(peargi,gvn_id_i)
						is_referring_to_unpredictable=bk2
						is_different_from_code=bk
					is_referring_to_unpredictable=1
					gvn_id_ret=make_unpredictable(pe)
			else
				for i=-1:n_args-1
					peargi=readPool(pe+EXPR_OFS_ARGS+i)
					if !isBuiltin(peargi,g_id_block):
						bk=is_different_from_code
						bk2=is_referring_to_unpredictable
						is_different_from_code=0
						is_referring_to_unpredictable=0
						gvn_id_i=bbssa(peargi)
						peargi=readPool(pe+EXPR_OFS_ARGS+i)
						gvn_replace(peargi,gvn_id_i)
						is_referring_to_unpredictable=bk2
						is_different_from_code=bk
				is_referring_to_unpredictable=1
				gvn_id_ret=make_unpredictable(pe)
			if !(gvn_id_ret&UNPREDICTABLE_VID_BASE):
				tentative_backing_gvnid[pe]=gvn_id_ret//set this no matter what - needed for the wipe check
				if !g_gvn_values[gvn_id_ret].pv_backing:
					//if !is_different_from_code:
					//tentative backing - must set this on is_different_from_code - we need to do a dfs wipe later
					if DEBUG_DUMP_SSA:
						//if !is_different_from_code:
						Writeln('set tentative backing: ',gvn_id_ret,' ',dumpExpr(pe,__zero(fcolorer_callback)))
					g_gvn_values[gvn_id_ret].pv_backing=0x80000000+pe
				else
					//non-trivial expression has an old value, CSE opportunity
					if DEBUG_DUMP_SSA:
						if !is_different_from_code:
							Writeln('value not new in GVN: ',gvn_id_ret,' ',g_gvn_values[gvn_id_ret].pv_backing,' ',dumpExpr(pe,__zero(fcolorer_callback)))
					is_different_from_code=1
			assert(gvn_id_ret!=0)
			return gvn_id_ret
		if ENABLE_GVN:
			val=getExprValue(pe)
			if val.tid==g_vtid_CNS:
				return get_gvn_id(int3(g_fakectval_gvn_cns,val.val,0),readPool(pe+EXPR_OFS_EPOS))
			else if val.tid==g_vtid_STR:
				return get_gvn_id(int3(g_fakectval_gvn_str,val.val,0),readPool(pe+EXPR_OFS_EPOS))
		is_referring_to_unpredictable=1
		return make_unpredictable(pe)
	auto countUsesSSA(PExpression pe)
		if isExpr(pe,EFLAG_VARIABLE):
			pobj_var=getVariable(pe)
			if readPool(pobj_var)==g_vtid_RTVAR:
				pe0=the_single_use[pobj_var]
				if pe0==0x40000000:
					the_single_use[pobj_var]=pe
				else if pe0>=0:
					the_single_use[pobj_var]=-1
		else if isExpr(pe,EFLAG_FCALL):
			if !testUserFlag(pe,QUEUE_FLAG_REACH):return
			n_args=getExprNArgs(pe)
			if !isSSAStatementHost(pe):
				if isBuiltin(pe,g_id_store):
					pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
					assert(!!pobj_var)
					//detect multiple stores - we must have exactly one store and exactly one use
					pe0=the_single_use[pobj_var]
					if pe0!=0:
						pe0=-1
					else
						pe0=0x40000000
					the_single_use[pobj_var]=pe0
					countUsesSSA(readPool(pe+EXPR_OFS_ARGS+1))
				else
					for i=-1:n_args-1
						countUsesSSA(readPool(pe+EXPR_OFS_ARGS+i))
			else
				for i=-1:n_args-1
					peargi=readPool(pe+EXPR_OFS_ARGS+i)
					if !isBuiltin(peargi,g_id_block):
						countUsesSSA(peargi)
	foreach pe_bb in all_bbs
		initGVN(pe_bb)
		if DEBUG_DUMP_SSA:
			Writeln('=== before SSA\n',dumpExpr(pe_bb,fcolor_ssa))
		bbssa(pe_bb)
		if removable_stores.n:
			sccpProcessReaches()//need to get the reaches right
			countUsesSSA(pe_bb)
			foreach pe in removable_stores
				if isBuiltin(pe,g_id_nop):continue//copy-proped, don't do it again
				pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
				assert(!!pobj_var)
				pe_use=the_single_use[pobj_var]
				if pe_use>0&&pe_use!=0x40000000:
					//remove the single-use
					if DEBUG_DUMP_SSA:
						Writeln('remove: ',dumpExpr(pe,__zero(fcolorer_callback)),' ',dumpExpr(readPool(pe_use+EXPR_OFS_CALLER),__zero(fcolorer_callback)))
					did=1
					replaceExpr(pe_use,readPool(pe+EXPR_OFS_ARGS+1))
					setnop(pe)
		if DEBUG_DUMP_SSA:
			Writeln('=== after SSA\n',dumpExpr(pe_bb,fcolor_ssa))
	return did

auto deadelim()
	if DEBUG_DUMP_DEADELIM:
		Writeln('=== before deadelim')
		Writeln(dumpExpr(g_pe_top,fcolor_just_reach))
	did=0
	//redoDefUseChains()
	//expr liveness labeling
	//need an explicit clause for empty ctors - the NULL construction is marked as live but the ctor should be removed anyway
	FLAG_IS_LIVE=1
	FLAG_EXPR_PARENT_SCAN_DONE=2
	//FLAG_IS_CTOR_ZERO_STORE=4
	clearUserFlags(g_pe_top,0)
	Q=new PExpression[]
	fn_caller_lists=new PExpression[][PCTObject]
	auto dfsRootLives(PExpression pe,int in_class)
		if !isExpr(pe,EFLAG_FCALL):return 0
		if !testUserFlag(pe,QUEUE_FLAG_REACH):
			return 0
		in_class_recurse=in_class
		(inline(){
			auto pobjfn=getExprFunction(pe)
			if !pobjfn:
				if DEBUG_DUMP_DEADELIM:
					Writeln('indcall prelive: ',dumpExpr(pe,fcolor_abbrv_blocks))
				Q.push(pe)
				return 1
			else
				auto fflag=getFFlag(pobjfn)
				if (fflag&FFLAG_IMPORTED)&&!(fflag&FFLAG_IS_PURE)||(fflag&FFLAG_IS_PRELIVE):
					if DEBUG_DUMP_DEADELIM:
						Writeln('impure prelive: ',dumpExpr(pe,fcolor_abbrv_blocks))
					Q.push(pe)
					return 1
				//else if isBuiltin(pe,g_id_set_memory)||isBuiltin(pe,g_id_C_wrap)||isBuiltin(pe,g_id_force_alive)||isBuiltin(pe,g_id_export)||isBuiltin(pe,g_id_blockex):
				//	Q.push(pe)
				//	return 1
				if isBuiltin(pe,g_id_stdot):
					pobj_member=getDotMember(pe,0)
					if pobj_member&&readPool(pobj_member)==g_vtid_RTVAR:
						if tisclass(readPool(pobj_member+1)):
							//class member store / struct memcpy - it's prelive
							if DEBUG_DUMP_DEADELIM:
								Writeln('class member prelive: ',dumpExpr(pe,fcolor_abbrv_blocks))
							Q.push(pe)
							return 1
				else if isBuiltin(pe,g_id_store):
					//if in_class&&isValueZero(getExprValue(readPool(pe+EXPR_OFS_ARGS+1))):
					//	//empty ctor flag
					//	setUserFlag(pe,FLAG_IS_CTOR_ZERO_STORE)
					pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
					if pobj_var&&readPool(pobj_var)==g_vtid_RTVAR:
						if tisstruct(readPool(pobj_var+1)):
							id_var=readPool(pobj_var+VAR_OFS_ID)
							if id_var!=g_id_this&&id_var!=g_id_return:
								//implicit memcpy - it's prelive
								if DEBUG_DUMP_DEADELIM:
									Writeln('memcpy prelive: ',dumpExpr(pe,fcolor_abbrv_blocks))
								Q.push(pe)
								return 1
				if pobjfn:
					callers=fn_caller_lists[pobjfn]
					if !callers:
						callers=new PExpression[]
						fn_caller_lists[pobjfn]=callers
					callers.push(pe)
			return 1
		})()
		if isBuiltin(pe,g_id_function):
			pf_owner_recurse=getExprValueAs(pe,g_vtid_CTVAL)
			in_class_recurse=isFunctionClassOrStruct(pf_owner_recurse)
		n_args=getExprNArgs(pe)
		for i=-1:n_args-1
			dfsRootLives(readPool(pe+EXPR_OFS_ARGS+i),in_class_recurse)
	dfsRootLives(g_pe_top,0)
	foreach pe in Q
		setUserFlag(pe,FLAG_IS_LIVE)
	///////////////////////////////
	//propagating the liveness
	auto marklive(PExpression pe)
		if !testUserFlag(pe,FLAG_IS_LIVE):
			Q.push(pe)
			setUserFlag(pe,FLAG_IS_LIVE)
	auto marklive_var(PCTObject pobj_var)
		if !testUserFlag(pobj_var,FLAG_IS_LIVE):
			Q.push(pobj_var|0x80000000)
			setUserFlag(pobj_var,FLAG_IS_LIVE)
	auto markreturn(PCTObject pobjfn)
		pobj_var_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
		if pobj_var_return:
			if DEBUG_DUMP_DEADELIM:
				Writeln('  return var: ',dumpObject(pobj_var_return))
			marklive_var(pobj_var_return)
	//Writeln('==========')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	for(head=0;head<Q.n;head++)
		auto Q_i=Q[head]
		if Q_i<0:
			//var to definition
			pobj_var=(Q_i&0x7fffffff)
			vtid=readPool(pobj_var)
			if vtid==g_vtid_RTVAR:
				t=getVariableType(pobj_var)
				if tisfunction(t):
					//function types are force-alived if there is at least 1 var
					dfsExpr(readPool(t+FUNCTION_OFS_CODE),function(PExpression pe){marklive(pe);return 1})
			else if vtid==g_vtid_CTVAL
				pobjfn=getAsFunction(readPool(pobj_var+1))
				if pobjfn:markreturn(pobjfn)
			if DEBUG_DUMP_DEADELIM:
				Writeln('var live: ',dumpObject(pobj_var))
			for(pestore=readPool(pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
				//if testUserFlag(pestore,FLAG_IS_CTOR_ZERO_STORE):
				//	//avoid marking zero stores from here
				//	continue
				if DEBUG_DUMP_DEADELIM:
					Writeln('  mark store: ',dumpExpr(pestore,fcolor_abbrv_blocks))
				marklive(pestore)
		else
			pecall=Q_i
			if DEBUG_DUMP_DEADELIM:
				Writeln('expr live: ',dumpExpr(pecall,fcolor_abbrv_blocks))
			if isExpr(pecall,EFLAG_FCALL):
				//call to param
				if !isBuiltin(pecall,g_id_block):
					n_args=getExprNArgs(pecall)
					for i=-1:n_args-1
						peargi=readPool(pecall+EXPR_OFS_ARGS+i)
						marklive(peargi)
				if isBuiltin(pecall,g_id_dot)||isBuiltin(pecall,g_id_stdot):
					pobj_member=getDotMember(pecall,0)
					if pobj_member:
						marklive_var(pobj_member)
				pobjfn=getExprFunction(pecall)
				if pobjfn&&!(getFFlag(pobjfn)&FFLAG_BUILTIN)&&!isBuiltin(readPool(pecall+EXPR_OFS_CALLER),g_id_block):
					//return value use
					markreturn(pobjfn)
			else if isExpr(pecall,EFLAG_CTVAL):
				//function to declaration and return value
				pobj_ctval=(readPool(pecall)&~EFLAG_MASK)
				pobjfn=getAsFunction(pobj_ctval)
				if pobjfn:
					//pecode=readPool(pobjfn+FUNCTION_OFS_CODE)
					//marklive(pecode)
					assert(readPool(pobjfn)==g_tid_TFunction)
					if !(getFFlag(pobjfn)&FFLAG_BUILTIN):
						marklive(readPool(pobjfn+FUNCTION_OFS_PEDECL))
						markreturn(pobjfn)
			else if isExpr(pecall,EFLAG_VARIABLE):
				marklive_var(getVariable(pecall))
			//depending control flow, containing function
			for(pei=pecall;pei;pei=readPool(pei+EXPR_OFS_CALLER))
				if testUserFlag(pei,FLAG_EXPR_PARENT_SCAN_DONE):break
				setUserFlag(pei,FLAG_EXPR_PARENT_SCAN_DONE)
				if isBuiltin(pei,g_id_if)||isBuiltin(pei,g_id_blockex):
					//don't propagate to block params... but make itself alive
					marklive(pei)
				else if isBuiltin(pei,g_id_function):
					//owning function becomes impure, mark all callers
					pobjfn=getExprValueAs(pei,g_vtid_CTVAL)
					assert(!!pobjfn)
					if pobjfn:
						if DEBUG_DUMP_DEADELIM:
							Writeln('  mark function: ',dumpFunction(pobjfn))
						if tisclass(pobjfn):
							//if it's a class, the return value is always alive
							markreturn(pobjfn)
						callers=fn_caller_lists[pobjfn]
						if callers:
							foreach pecaller in callers
								marklive(pecaller)
					break
	///////////////////////////////
	//prune the dead
	auto dfsPruneDead(PExpression pe,PExpression[] as)
		if isExpr(pe,EFLAG_FCALL):
			if !testUserFlag(pe,QUEUE_FLAG_REACH):return
			if isBuiltin(pe,g_id_nop):return
			n_args=getExprNArgs(pe)
			as_recurse=PExpression[].NULL
			dead_parent=0
			if isBuiltin(pe,g_id_function):
				//test the return value - if it gets dead, we remove it
				pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
				pobj_var_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
				if pobj_var_return&&!testUserFlag(pobj_var_return,FLAG_IS_LIVE):
					writePool(pobjfn+FUNCTION_OFS_PVAR_RETURN,0)
				//remove dead members from member lists
				if (getFFlag(pobjfn)&FFLAG_NAME_LOOKUP_READY):
					p_members=readPool(pobjfn+FUNCTION_OFS_PMEMBER_LIST)
					n_members=readPool(pobjfn+FUNCTION_OFS_NMEMBER_LIST)
					n2=0
					for i=0:n_members-1
						id_member=readPool(p_members+i)
						pobj_var=lookupFunctionVariable(pobjfn,id_member)
						if testUserFlag(pobj_var,FLAG_IS_LIVE):
							writePool(p_members+n2,id_member)
							n2++
					if n2<n_members:
						writePool(pobjfn+FUNCTION_OFS_NMEMBER_LIST,n2)
				if DEBUG_DUMP_DEADELIM:
					Writeln('begin ',dumpFunction(pobjfn))
			else if !testUserFlag(pe,FLAG_IS_LIVE):
				if !isBuiltin(pe,g_id_block):
					as_recurse=new PExpression[]
					dead_parent=1
				if isBuiltin(pe,g_id_if):
					val_cond=getExprValue(readPool(pe+EXPR_OFS_ARGS+0))
					if val_cond.tid==g_vtid_UNINIT:
						errorAtExpr(ETYPE_ERROR,readPool(pe+EXPR_OFS_ARGS+0),"unresolved if condition")
						if g_enable_dump:
							Writeln('cond ',dumpExpr(readPool(pe+EXPR_OFS_ARGS+0),fcolor_abbrv_blocks))
			for i=-1:n_args-1
				peargi=readPool(pe+EXPR_OFS_ARGS+i)
				dfsPruneDead(peargi,as_recurse)
			if DEBUG_DUMP_DEADELIM:
				if isBuiltin(pe,g_id_function):
					dbg_pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
					Writeln('end ',dumpFunction(dbg_pobjfn))
			if dead_parent:
				did=1
				//dead parent - live param
				if DEBUG_DUMP_DEADELIM:
					dbg_is_trivial_dead=0
					if isBuiltin(pe,g_id_store):
						dbg_val=getExprValue(readPool(pe+EXPR_OFS_ARGS+1))
					else
						dbg_val=getExprValue(pe)
					if dbg_val.tid!=g_vtid_RTVAR:
						dbg_is_trivial_dead=1
					if !dbg_is_trivial_dead:
						Writeln('dead: ',dumpExpr(pe,fcolor_abbrv_blocks))
				if as_recurse.n:
					//if as_recurse.n==1:
					//	transformCode(pe,NULL, NULL,as_recurse[0],NULL)
					//else
					replaceExpr(pe,vcall(g_id_block,as_recurse))
				else
					setnop(pe)
			else
				if as:as.push(pe)
	dfsPruneDead(g_pe_top,PExpression[].NULL)
	if DEBUG_DUMP_DEADELIM:
		Writeln('=== after deadelim')
		Writeln(dumpExpr(g_pe_top,fcolor_just_reach))
	clearUserFlags(g_pe_top,0)
	return did
	
g_pe_top=PExpression(0)
g_root_namespace=PCTObject(0)
g_t_root_namespace=PCTObject(0)

auto removeUselessReturns(PExpression pe,int id_return_label)
	if !isBuiltin(pe,g_id_block):
		return
	n_args=getExprNArgs(pe)
	for(;;)
		if !n_args:break
		pe_last=readPool(pe+EXPR_OFS_ARGS+n_args-1)
		//Writeln("removeUselessReturns "+dumpExpr(pe_last,fcolor_abbrv_blocks))
		if isBuiltin(pe_last,g_id_if):
			n_args_if=readPool(pe_last)&~EFLAG_MASK
			for i=1:2:n_args_if-1
				removeUselessReturns(readPool(pe_last+EXPR_OFS_ARGS+i),id_return_label)
			break
		else if isBuiltin(pe_last,g_id_block):
			removeUselessReturns(pe_last,id_return_label)
			break
		else if isBuiltin(pe_last,g_id_blockex)&&readPool(readPool(pe_last+EXPR_OFS_ARGS+0))==EFLAG_STRING+id_return_label:
			//remove the now useless tail return
			n_args--
			writePool(pe,EFLAG_FCALL+n_args)
		else
			break
	
auto flattenAfterParsing(PExpression[] block_as,PExpression pe)
	if !isExpr(pe,EFLAG_FCALL):
		return pe
	n_args=getExprNArgs(pe)
	if isBuiltin(pe,g_id_block):
		pecaller=readPool(pe+EXPR_OFS_CALLER)
		if !pecaller||isStatementHost(pecaller):
			//it's a valid host
			as_new=new PExpression[]
			for i=0:n_args-1
				peargi=readPool(pe+EXPR_OFS_ARGS+i)
				assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
				peargi=flattenAfterParsing(as_new,peargi)
				if peargi:as_new.push(peargi)
			n2=0
			foreach pei in as_new
				as_new[n2++]=pei
			as_new.resize(n2)
			pe_ret=replaceBlockArgs(pe,as_new,0)
			return pe_ret
		else
			//we should pull it out
			for i=0:n_args-2
				peargi=readPool(pe+EXPR_OFS_ARGS+i)
				assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
				peargi=flattenAfterParsing(block_as,peargi)
				writePool(peargi+EXPR_OFS_CALLER,0)
				block_as.push(peargi)
			peargi=readPool(pe+EXPR_OFS_ARGS+n_args-1)
			assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
			peargi=flattenAfterParsing(block_as,peargi)
			writePool(peargi+EXPR_OFS_CALLER,0)
			return peargi
	else
		//just dfs
		is_function=isBuiltin(pe,g_id_function)
		for i=-1:n_args-1
			peargi0=readPool(pe+EXPR_OFS_ARGS+i)
			assert(readPool(peargi0+EXPR_OFS_CALLER)==pe)
			peargi=flattenAfterParsing(block_as,peargi0)
			if peargi!=peargi0:
				if is_function&&i==n_args-1:
					//__function case: replace fn.code
					pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
					writePool(pobjfn+FUNCTION_OFS_CODE,peargi)
				writePool(pe+EXPR_OFS_ARGS+i,peargi)
				writePool(peargi+EXPR_OFS_CALLER,pe)
			if is_function&&i==n_args-1:
				pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
				removeUselessReturns(peargi,getReturnLabel(pobjfn))
		return pe

if Platform.BUILD=="debug":
	auto validateEPoses(PExpression pe)
		//fwarning=function(PExpression pe){
		//	if isBuiltinR(pe,g_id_block):return -2
		//	return 10
		//}
		ferror=function(PExpression pe){
			if isBuiltinR(pe,g_id_block):return -2
			return 12
		}
		fvalidate=function(PExpression pe){
			epos0=readPool(pe+1)
			epos1=readPool(pe+2)
			if !epos0&&!epos1:
				if isExpr(pe,EFLAG_VARIABLE)||isExpr(pe,EFLAG_STRING)||isExpr(pe,EFLAG_CONST):
					//vid=getVariable(pe)
					//if vid==g_id_store||vid==g_id_dot:return 0
					return 0
				//Writeln("no epos: "+dumpExpr(pe,fwarning))
			else if !epos0://||!epos1:
				Writeln("half epos "+string(!epos1)+": "+dumpExpr(pe,ferror))
			else
				//id_fn0=getLineInfo(epos0)
				//id_fn1=getLineInfo(epos1)
				//if id_fn0!=id_fn1:
				//	Writeln("bad epos: "+dumpExpr(pe,ferror))
			return 1
		}
		dfsExpr(pe,fvalidate)
	
auto createRootExpression(string s_main_function_name)
	//scan namespaces
	auto scan_for_namespaces(PExpression pe,int2[] items_list)
		if isExpr(pe,EFLAG_FCALL)
			n_args=getExprNArgs(pe)
			if isBuiltinR(pe,g_id_namespace):
				//a namespace
				items_list_recurse=new int2[]
				scan_for_namespaces(readPool(pe+EXPR_OFS_ARGS+1),items_list_recurse)
				pobj_space=poolObject(TNameSpace(){'n_members':int(items_list_recurse.n)})
				items_list_recurse.Sort(inline(a,b){return a.x<b.x})
				g_ctobject_pool.push(items_list_recurse[0:].ConvertToAsBinary(int))
				//add the namespace itself and set it to the expression
				assert((readPool(readPool(pe+EXPR_OFS_ARGS+0))&EFLAG_MASK)==EFLAG_STRING)
				items_list.push(int2(readPool(readPool(pe+EXPR_OFS_ARGS+0))&~EFLAG_MASK,pobj_space))
				assert(!!pobj_space)
				writePool(readPool(pe+EXPR_OFS_ARGS+2),EFLAG_CTVAL+pobj_space)
				return pobj_space
			else if isBuiltinR(pe,g_id_store):
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
				//if items_list&&readPool(pe)==3+EFLAG_FCALL&&readPool(readPool(pe+EXPR_OFS_ARGS+2))==EFLAG_STRING+g_id_namespace:
				if items_list&&isExpr(pe_var,EFLAG_VARIABLE):
					id_var=getVariable(pe_var)
					if !isTempId(id_var)&&id_var!=g_id_this&&id_var!=g_id_return:
						items_list.push(int2(id_var,0))
						if readPool(pe)==EFLAG_FCALL+3:
							//force disable autos
							writePool(pe,EFLAG_FCALL+2)
				scan_for_namespaces(pe_value,items_list)
				return 0
			else
				items_list_recurse=items_list
				if isBuiltinR(pe,g_id_function)||isBuiltinR(pe,g_id_block)&&n_args>=1&&readPool(readPool(pe+EXPR_OFS_ARGS+0))==EFLAG_STRING+g_id_block:
					//function / "__block" boundary, reset the item list
					items_list_recurse=NULL
				ret=0
				for i=-1:n_args-1
					ret_i=scan_for_namespaces(readPool(pe+EXPR_OFS_ARGS+i),items_list_recurse)
					if !ret&&ret_i:ret=ret_i
				return ret
		return 0
	if Platform.BUILD=="debug":
		foreach pe in g_top_level_exprs
			validateEPoses(pe)
	g_top_block=vcall(g_id_block,g_top_level_exprs)
	g_pe_top=call(g_id_export,exprstr(getid(s_main_function_name)),call(g_id_function,exprstr(g_id_function),g_top_block))
	//have to scan g_top_block instead of g_pe_top - the function wrapper resets the item list
	root_items=new int2[]
	scan_for_namespaces(g_top_block,root_items)
	g_root_namespace=poolObject(TNameSpace(){'n_members':int(root_items.n)})
	root_items.Sort(inline(a,b){return a.x<b.x})
	g_ctobject_pool.push(root_items[0:].ConvertToAsBinary(int))
	if Platform.BUILD=="debug":
		if g_enable_dump:
			auto dumpNamespace(int n_tabs,PCTObject pobj_space)
				assert(readPool(pobj_space)==g_tid_TNameSpace)
				auto n=readPool(pobj_space+1)
				for i=0:n-1
					id_item=readPool(pobj_space+2+i*2)
					for j=0:n_tabs-1
						Write('  ')
					Write(getIdString(id_item),':')
					pobj_child_space=readPool(pobj_space+2+i*2+1)
					if pobj_child_space:
						Writeln('{')
						dumpNamespace(n_tabs+1,pobj_child_space)
						for j=0:n_tabs-1
							Write('  ')
						Writeln('},')
					else
						Writeln('...;')
			dumpNamespace(0,g_root_namespace)
	g_top_level_exprs=PExpression[].NULL
	//resolve names
	//Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
	resolveNames(g_pe_top,1)
	//flatten nested blocks
	g_pe_top=flattenAfterParsing(PExpression[].NULL,g_pe_top)

auto clearUserFlags(PExpression pe,int flag0)
	writePool(pe+EXPR_OFS_USER_FLAGS,flag0|(readPool(pe+EXPR_OFS_USER_FLAGS)&~USER_FLAG_MASK))
	flags=readPool(pe)
	if (flags&EFLAG_MASK)==EFLAG_FCALL:
		nargs=(flags&~EFLAG_MASK)
		for i=-1:nargs-1
			clearUserFlags(readPool(pe+EXPR_OFS_ARGS+i),flag0)
	else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
		pobj=getVariable(pe)
		if pobj:
			writePool(pobj+VAR_OFS_USER_FLAGS,flag0|(readPool(pobj+VAR_OFS_USER_FLAGS)&~VAR_USER_FLAG_MASK))
			//if g_ctobject_pool.n>371:
			//	if !g_ctobject_pool[371]:
			//		Writeln('smash! ',dumpExpr(pe,__zero(fcolorer_callback)))
			//	assert(!!g_ctobject_pool[371])
	///////////

auto isSpecial(PExpression pe)
	assert((readPool(pe)&EFLAG_MASK)==EFLAG_FCALL)
	pobjfn=getExprFunction(pe)
	if pobjfn:
		return (getFFlag(pobjfn)&FFLAG_SPECIAL)
	return 0

auto isStatementHost(PExpression pe)
	assert((readPool(pe)&EFLAG_MASK)==EFLAG_FCALL)
	pobjfn=getExprFunction(pe)
	if pobjfn:
		return (getFFlag(pobjfn)&FFLAG_STATEMENT_HOST)
	return 0

auto isArithmetic(PExpression pe)
	assert((readPool(pe)&EFLAG_MASK)==EFLAG_FCALL)
	pobjfn=getExprFunction(pe)
	if pobjfn:
		return (getFFlag(pobjfn)&FFLAG_ARITHMETIC)
	return 0

auto getNumberOfArguments(PCTObject pobjfn)
	pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
	n_args=getExprNArgs(pe_decl+0)
	return (n_args-2)>>1

auto getReturnVariable(PCTObject pobjfn)
	return readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)

auto getVariableType(PCTObject pobj_var)
	return getValueType(readPoolTyped(pobj_var,TSCCPValue))

auto getReturnType(PCTObject pobjfn)
	pobj_var=getReturnVariable(pobjfn)
	if !pobj_var:return 0
	return getVariableType(pobj_var)

auto getStoreTarget(PExpression pe)
	n_args=getExprNArgs(pe)
	if n_args!=2&&n_args!=3:return 0
	pevarname=readPool(pe+(EXPR_OFS_ARGS))
	if (readPool(pevarname)&EFLAG_MASK)!=EFLAG_VARIABLE:
		return 0
	//create the variable
	return getVariable(pevarname)

auto setFunctionUsed(PCTObject pobjfn)
	//reach the function code
	//fn=readPoolTyped(pobjfn,TFunction)
	code=readPool(pobjfn+FUNCTION_OFS_CODE)
	//reach the value and set up a scope
	//if getExprValue(fn.code).tid==g_vtid_UNREACHED:
	//pe_decl=fn.pe_decl
	if !testUserFlag(code,QUEUE_FLAG_REACH)
		sccpQueueReach(code)
		return 1
	return 0

auto cloneFunction(PCTObject pobjfn)
	pobjfn_cloned=cloneFunctionEx(pobjfn,new PCTObject[PCTObject],CLONE_WIPE_TO_UNREACHED|CLONE_VARS|CLONE_KEEP_VAR_IDS)
	pe_decl_old=readPool(pobjfn+FUNCTION_OFS_PEDECL)
	pe_decl_cloned=readPool(pobjfn_cloned+FUNCTION_OFS_PEDECL)
	//pe_decl_caller=readPool(pe_decl_old+EXPR_OFS_CALLER)
	transformCode(pe_decl_old,__zero(ftransformer_callback), [pe_decl_cloned],pe_decl_old,PExpression[].NULL)
	return pobjfn_cloned

auto enableNameLookup(PCTObject pobjfn)
	assert(readPool(pobjfn)==g_tid_TFunction)
	if (getFFlag(pobjfn)&FFLAG_NAME_LOOKUP_READY):return
	pecode=readPool(pobjfn+FUNCTION_OFS_CODE)
	//Writeln("enableNameLookup ",dumpExpr(pecode,__zero(fcolorer_callback)))
	all_decls=new PCTObject[]
	fscan_for_decls=function(PExpression pe){
		if isBuiltin(pe,g_id_function):return 0
		if isBuiltin(pe,g_id_store):
			pe_var=readPool(pe+EXPR_OFS_ARGS+0)
			pobj_var=getVariable(pe_var)
			//Writeln(pobj_var,' ',getIdString(readPool(pobj_var+VAR_OFS_ID)),' ',dumpObject(readPool(pobj_var+VAR_OFS_OWNER)),' ',dumpObject(pobjfn))
			if pobj_var&&readPool(pobj_var+VAR_OFS_OWNER)==pobjfn:
				id=readPool(pobj_var+VAR_OFS_ID)
				if id&&!isTempId(id):
					all_decls.push(pobj_var)
			return 1
		return 1
	}
	dfsExpr(pecode,fscan_for_decls)
	all_decls.Sort()
	all_decls.Unique()
	all_ids=new int[all_decls.n]
	foreach pobj_var,I in all_decls
		id=readPool(pobj_var+VAR_OFS_ID)
		writeGlobalI2Hash(int2(pobjfn,id),pobj_var)
		all_ids[I]=id
	n0=int(g_ctobject_pool.n)
	g_ctobject_pool.push(all_ids)
	writePool(pobjfn+FUNCTION_OFS_PMEMBER_LIST,n0)
	writePool(pobjfn+FUNCTION_OFS_NMEMBER_LIST,int(all_ids.n))
	setFFlag(pobjfn,FFLAG_NAME_LOOKUP_READY)

//tm_lookup=tnew("lookupFunctionVariable")
if Platform.BUILD=="debug":
	tm_evalcb=tnew("eval_callbacks")
tm_strflatten=tnew("strflatten")
auto lookupFunctionVariable(PCTObject pobjfn,int id)
	//tbegin(tm_lookup)
	enableNameLookup(pobjfn)
	ret=readGlobalI2Hash(int2(pobjfn,id))
	//tend(tm_lookup)
	return ret

auto readCtUniqueInEvalFlow(PExpression pe_queued,int[] key)
	pobj_ret=ctUnique(key)
	if pobj_ret:
		if readPool(pobj_ret)!=g_tid_TCtUniqueEvalQueue:
			return pobj_ret
	if pe_queued:
		key2=new(key)
		key2.push(pe_queued)
		is_in_queue=ctUnique(key2)
		if is_in_queue:return 0
		ctUnique(key2)=1
		ctUnique(key)=poolObject(TCtUniqueEvalQueue(){'next':pobj_ret,'pe':pe_queued})
	return 0

auto writeCtUniqueInEvalFlow(int[] key,PCTObject pobj)
	pobj_old=ctUnique(key)
	if pobj_old:
		if readPool(pobj_old)!=g_tid_TCtUniqueEvalQueue:
			if Platform.BUILD=="debug":
				Writeln('bad writeCtUniqueInEvalFlow: ',dumpObject(pobj_old),' already there ',key)
			assert(0)
			return
		for(;pobj_old;)
			qitem=readPoolTyped(pobj_old,TCtUniqueEvalQueue)
			pobj_old=qitem.next
			pe=qitem.pe
			flags=readPool(pe)
			if (flags&EFLAG_MASK)!=EFLAG_FCALL:
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if pecaller:sccpQueueEval(pecaller)
			else
				sccpQueueEval(pe)
	ctUnique(key)=pobj

////////////////////////////////////
auto replaceBlockArgs(PExpression pe,PExpression[] as_new,int do_insertcallat)
	n_args=getExprNArgs(pe)
	if int(as_new.n)<=n_args:
		n2=int(as_new.n)
		writePool(pe,n2+EFLAG_FCALL)
		for i=0:n2-1
			writePool(pe+EXPR_OFS_ARGS+i,as_new[i])
			writePool(as_new[i]+EXPR_OFS_CALLER,pe)
	else
		fexpandblock=function(PExpression pe){
			pe_ret=vcall(g_id_block,as_new)
			writePool(pe_ret+1,readPool(pe+1))
			writePool(pe_ret+2,readPool(pe+2))
			writePool(pe_ret+EXPR_OFS_USER_FLAGS,readPool(pe+EXPR_OFS_USER_FLAGS))
			//writePool(pe_ret+EXPR_OFS_NAME_OR_VAR,readPool(pe+EXPR_OFS_NAME_OR_VAR))
			writePool(pe_ret+EXPR_OFS_VALUE,readPool(pe+EXPR_OFS_VALUE))
			writePool(pe_ret+EXPR_OFS_VALUE+1,readPool(pe+EXPR_OFS_VALUE+1))
			foreach pe_argi in as_new
				writePool(pe_argi+EXPR_OFS_CALLER,pe_ret)
			return pe_ret
		}
		pecaller=readPool(pe+EXPR_OFS_CALLER)
		if do_insertcallat&&pecaller:
			return sccpQueueReach(insertCallAt(pecaller,pe,fexpandblock))
		else
			return fexpandblock(pe)
	return pe

auto appendCode(PCTObject pobjfn,PExpression[] new_args)
	//fn=readPoolTyped(pobjfn,TFunction)
	code=readPool(pobjfn+FUNCTION_OFS_CODE)
	assert(isBuiltin(code,g_id_block))
	n_args=getExprNArgs(code)
	as_new=new int[n_args]
	for i=0:n_args-1
		as_new[i]=readPool(code+EXPR_OFS_ARGS+i)
	foreach pe in new_args
		sccpQueueReach(pe)
		as_new.push(pe)
	code=replaceBlockArgs(code,as_new,1)
	writePool(pobjfn+FUNCTION_OFS_CODE,code)

auto fillNestDepths()
	auto dfsFillNestDepth(PExpression pe,int nest_depth)
		nest_depth_recurse=nest_depth
		if isExpr(pe,EFLAG_FCALL)
			if isBuiltin(pe,g_id_function):
				nest_depth_recurse++
				pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
				assert(!!pobjfn)
				if pobjfn:
					writePool(pobjfn+FUNCTION_OFS_NEST_DEPTH,nest_depth)
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				dfsFillNestDepth(readPool(pe+EXPR_OFS_ARGS+i),nest_depth_recurse)
	dfsFillNestDepth(g_pe_top,0)

//returns replacement_expression, (simple) has_sideeffect
auto dfsFlattenBlocks(PExpression[] block_as,PExpression pe,int nest_depth, int do_cleanup)
	//ignore the unreached
	//if getExprValue(pe).tid==g_vtid_UNREACHED:
	//Writeln(pe,' ',dumpExpr(pe,fcolor_abbrv_blocks))
	nest_depth_recurse=nest_depth
	if isBuiltin(pe,g_id_function):
		nest_depth_recurse++
		pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
		assert(!!pobjfn)
		if pobjfn:
			writePool(pobjfn+FUNCTION_OFS_NEST_DEPTH,nest_depth)
	//if !testUserFlag(pe,QUEUE_FLAG_REACH):
	//	//Writeln("X "+dumpExpr(pe,fcolor_abbrv_blocks))
	//	return pe,1
	//Writeln("F "+dumpExpr(pe,fcolor_abbrv_blocks))
	//if do_cleanup:
	//this should have been safe for non-final uses
	if isExpr(pe,EFLAG_VARIABLE)||isExpr(pe,EFLAG_FCALL)&&(isBuiltin(pe,g_id_dot)&&readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION)!=pe||isBuiltin(pe,g_id_ldlambda)||isBuiltin(pe,g_id_cast)||isBuiltin(pe,g_id_has_member)||isArithmetic(pe)):
		val=getExprValue(pe)
		if val.tid==g_vtid_CNS||val.tid==g_vtid_STR||val.tid==g_vtid_CTVAL:
			if val.tid==g_vtid_CTVAL:
				pesubstitute=poolCode(TCnsExpression(){'flags_cid':val.val+EFLAG_CTVAL})
			else
				pesubstitute=poolCode(TCnsExpression(){'flags_cid':val.val+((val.tid==g_vtid_CNS)?EFLAG_CONST:EFLAG_STRING)})
			return int2(pesubstitute,0)
		//return pe,1
	if !isExpr(pe,EFLAG_FCALL):
		return int2(pe,0)
	n_args=getExprNArgs(pe)
	if isBuiltin(pe,g_id_block):
		pecaller=readPool(pe+EXPR_OFS_CALLER)
		//assert(n_args>0)
		//pe_args=readPool(pe+EXPR_OFS_ARGS+0)
		//bflags=getExprValueAs(pe_args,g_vtid_CNS)
		//Writeln('scanning block: ',dumpExpr(pe,__zero(fcolorer_callback)))
		if !pecaller||isStatementHost(pecaller)://||(bflags&(BFLAG_LOOP|BFLAG_BREAK_CONTINUE_USED)):
			//it's a valid host
			//Writeln('not-pulled ',pe,' ',pecaller,' ',pecaller?isStatementHost(pecaller):0)
			as_new=new PExpression[]
			for i=0:n_args-1
				peargi=readPool(pe+EXPR_OFS_ARGS+i)
				assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
				peargi=dfsFlattenBlocks(as_new,peargi,nest_depth_recurse, do_cleanup).x
				if peargi&&!isBuiltin(peargi,g_id_nop):
					as_new.push(peargi)
			n2=0
			foreach pei in as_new
				//isBuiltin(pei,g_id_function)
				if isExpr(pei,EFLAG_VARIABLE)||isExpr(pei,EFLAG_CONST)||isExpr(pei,EFLAG_STRING)||isExpr(pei,EFLAG_CTVAL):
					//nothing
				else
					as_new[n2++]=pei
			as_new.resize(n2)
			pe_ret=replaceBlockArgs(pe,as_new,0)
			return int2(pe_ret,1)
		else
			//we should pull it out
			//Writeln('pull out ',dumpExpr(pe,__zero(fcolorer_callback)))
			for i=0:n_args-2
				peargi=readPool(pe+EXPR_OFS_ARGS+i)
				assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
				peargi=dfsFlattenBlocks(block_as,peargi,nest_depth_recurse, do_cleanup).x
				writePool(peargi+EXPR_OFS_CALLER,0)
				if peargi&&!isBuiltin(peargi,g_id_nop):
					block_as.push(peargi)
			peargi=readPool(pe+EXPR_OFS_ARGS+n_args-1)
			assert(readPool(peargi+EXPR_OFS_CALLER)==pe)
			dfsret=dfsFlattenBlocks(block_as,peargi,nest_depth_recurse, do_cleanup)
			(peargi,has_sideeffect)=(dfsret.x,dfsret.y)
			writePool(peargi+EXPR_OFS_CALLER,0)
			return int2(peargi,has_sideeffect)
	else
		//just dfs
		if isBuiltin(pe,g_id_assert_ctval):return int2(0,0)
		if do_cleanup&&isBuiltin(pe,g_id_if):
			pe_cond=readPool(pe+EXPR_OFS_ARGS+0)
			val_cond=getExprValue(pe_cond)
			//if val_cond.tid==g_vtid_UNINIT:
			//	assert(0)
			if val_cond.tid==g_vtid_CNS||val_cond.tid==g_vtid_STR:
				cns_branch=computeConstIfBranch(pe,val_cond)
				pe_chosen_branch=readPool(pe+EXPR_OFS_ARGS+cns_branch)
				setnop(pe)
				if isExpr(pe_cond,EFLAG_FCALL):
					//in case the constant condition has a side effect...
					pobjfn_cond=getExprFunction(pe_cond)
					if !(getFFlag(pobjfn_cond)&FFLAG_BUILTIN):
						block_as.push(pe_cond)
				//Writeln(">>> "+dumpExpr(pe_chosen_branch,fcolor_reach_eval))
				dfsret=dfsFlattenBlocks(block_as,pe_chosen_branch,nest_depth_recurse, do_cleanup)
				(pesubstitute,has_sideeffect)=(dfsret.x,dfsret.y)
				return int2(pesubstitute,has_sideeffect)
		if isBuiltin(pe,g_id_store):{
			if n_args==3:
				//force-declaration no longer makes sense
				writePool(pe,2|EFLAG_FCALL)
			//clean up the expr
			peargi0=readPool(pe+EXPR_OFS_ARGS+1)
			assert(readPool(peargi0+EXPR_OFS_CALLER)==pe)
			dfsret=dfsFlattenBlocks(block_as,peargi0,nest_depth_recurse, do_cleanup)
			(peargi,has_sideeffect)=(dfsret.x,dfsret.y)
			if peargi!=peargi0:
				writePool(pe+EXPR_OFS_ARGS+1,peargi)
				writePool(peargi+EXPR_OFS_CALLER,pe)
			if do_cleanup&&!has_sideeffect:
				//eliminate side-effect-free stores
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				val=getExprValue(pe_var)
				if val.tid==g_vtid_CNS||val.tid==g_vtid_STR||val.tid==g_vtid_CTVAL:
					//pobj_var=getVariable(pe_var)
					//if readPool(pobj_var+VAR_OFS_ID)!=g_id_return:
					return int2(0,0)
			return int2(pe,1)
		}
		has_sideeffect=!isArithmetic(pe)
		is_function=isBuiltin(pe,g_id_function)
		for i=-1:n_args-1
			peargi0=readPool(pe+EXPR_OFS_ARGS+i)
			if Platform.BUILD=="debug":
				if readPool(peargi0+EXPR_OFS_CALLER)!=pe:
					Writeln(FormatAsText(dumpExpr(pe,fcolor_abbrv_blocks),' ',dumpExpr(peargi0,fcolor_abbrv_blocks)))
			assert(readPool(peargi0+EXPR_OFS_CALLER)==pe)
			dfsret=dfsFlattenBlocks(block_as,peargi0,nest_depth_recurse, do_cleanup)
			(peargi,has_sideeffect_i)=(dfsret.x,dfsret.y)
			has_sideeffect|=has_sideeffect_i
			if peargi!=peargi0:
				if is_function&&i==n_args-1:
					//__function case: replace fn.code
					pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
					writePool(pobjfn+FUNCTION_OFS_CODE,peargi)
				writePool(pe+EXPR_OFS_ARGS+i,peargi)
				writePool(peargi+EXPR_OFS_CALLER,pe)
		if do_cleanup&&!has_sideeffect:
			val=getExprValue(pe)
			if val.tid==g_vtid_CNS||val.tid==g_vtid_STR:
				pesubstitute=poolCode(TCnsExpression(){'flags_cid':val.val+((val.tid==g_vtid_CNS)?EFLAG_CONST:EFLAG_STRING)})
				return int2(pesubstitute,0)
		//return removeTrivialArithmetic(pe),1
		return int2(pe,1)

auto flattenBlocks()
	//g_pe_top=dfsFlattenBlocks(NULL,g_pe_top,0,1)
	g_pe_top=dfsFlattenBlocks(PExpression[].NULL,g_pe_top,0,0).x
	
auto cleanup()
	g_pe_top=dfsFlattenBlocks(PExpression[].NULL,g_pe_top,0,1).x
	if Platform.BUILD=="debug":
		g_counters_final_code_size=0LL
		dfsExpr(g_pe_top,function(PExpression pe){g_counters_final_code_size++;return 1;})

////////////////////////////////////
//the type system
//inline PExpression castto(PExpression petype,PExpression pe)
//	return call(g_id_cast,petype,pe)

auto typeMerge(PExpression pe,PCTObject t_old,PCTObject t_new,PExpression pe_old,PExpression pe_new,int is_arith)
	if t_old==t_new:return t_old
	if !t_old||!t_new:return 0
	if g_ctype_fixed:
		if t_new==getBuiltinType(CTYPE_POINTER)&&tisclass(t_old):
			//ignore fixed new types
			return t_old
		if t_old==getBuiltinType(CTYPE_POINTER)&&tisclass(t_new):
			//ignore changed old types
			return t_new
	if is_arith:
		if tisbuiltin(t_old)&&tisbuiltin(t_new):
			ct_old=readPool(t_old+1)
			ct_new=readPool(t_new+1)
			if (ct_old&CTYPE_MASK)==(ct_new&CTYPE_MASK):
				return getBuiltinType(max(ct_old,ct_new))
			if (ct_old&CTYPE_MASK)==CTYPE_FLOAT||(ct_new&CTYPE_MASK)==CTYPE_FLOAT:
				return getBuiltinType(max(ct_old&~CTYPE_MASK,ct_new&~CTYPE_MASK)+CTYPE_FLOAT)
			return 0
	else
		if tisbuiltin(t_old)&&tisbuiltin(t_new):
			ct_old=readPool(t_old+1)
			ct_new=readPool(t_new+1)
			if (ct_old==const_type(CTYPE_INT,32)||ct_old==const_type(CTYPE_INT,64))&&(ct_new==const_type(CTYPE_INT,32)||ct_new==const_type(CTYPE_INT,64)):
				//promote i32 to i64
				return getBuiltinType(max(ct_old,ct_new))
	if pe_old<0:
		//it's different assignments of a same variable
		pobj_var=(pe_old&0x7fffffff)
		all_t_olds=new PCTObject[]
		all_pe_olds=new PExpression[]
		for(pestore=readPool(pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
			if isBuiltin(pestore,g_id_store):
				pe_value=readPool(pestore+EXPR_OFS_ARGS+1)
			else if isBuiltin(pestore,g_id_stdot):
				pe_value=readPool(pestore+EXPR_OFS_ARGS+2)
			else
				assert(0)
				continue
			t_old_2=getExprType(pe_value)
			if t_old_2!=t_new&&t_old_2:
				all_t_olds.push(t_old_2)
				all_pe_olds.push(pestore)
		if !all_pe_olds.n:
			s_t_olds=dumpType(t_old)
			s_pe_olds="<unknown>"
		else
			all_t_olds_bak=new(all_t_olds)
			all_t_olds.Sort()
			all_t_olds.Unique()
			if all_t_olds.n>1:
				s_t_olds=new string
				foreach t_old_2 in all_t_olds_bak.ReverseOrder()
					if s_t_olds.n:s_t_olds.push(',')
					s_t_olds.push(dumpType(t_old_2))
			else
				s_t_olds=dumpType(all_t_olds[0])
			s_pe_olds=new string
			foreach pe_old_2 in all_pe_olds.ReverseOrder()
				if s_pe_olds.n:s_pe_olds.push(';')
				s_pe_olds.push(citeexpr(pe_old_2))
		//Writeln(dumpExpr(pe_new,fcolor_abbrv_blocks))
		//Writeln(readPool(pe_new+1),' ',readPool(pe_new+2))
		errorAtExpr(ETYPE_ERROR,pe,"variable '@1' was of type '@2' in previous statements '@3', but it becomes '@4' in '@5'".Replace([
			"@1",getIdString(readPool(pobj_var+VAR_OFS_ID)),
			"@2",s_t_olds,
			"@3",s_pe_olds,
			"@4",dumpType(t_new),
			"@5",citeexpr(pe_new)]))
	else if pe_old==pe_new:
		//panic
		errorAtExpr(ETYPE_ERROR,pe,"panic: the same expression '@1' evaluated into different types '@2' and '@3'".Replace([
			"@1",citeexpr(pe_old),
			"@2",dumpType(t_old),
			"@3",dumpType(t_new)]))
	else
		errorAtExpr(ETYPE_ERROR,pe,"type mismatch between type '@3' operand '@1' and type '@4' operand '@2'".Replace([
			"@1",citeexpr(pe_old),
			"@2",citeexpr(pe_new),
			"@3",dumpType(t_old),
			"@4",dumpType(t_new)]))
	return 0//getStdObject(0,STDTYPE_VARIANT)

auto castConst(TConstValue ca,PCTObject t_result)
	if tisclass(t_result)&&ca.type==CTYPE_POINTER&&!ca.val_bin:
		return TConstValue(){'type':CTYPE_TYPED_NULL,'val_bin':i64(t_result)}
	if !tisbuiltin(t_result):
		return TConstValue(){'type':CTYPE_INVALID}
	ct_result=readPool(t_result+1)
	assert(u32(ct_result)<u32(CTYPE_COUNT))
	if ca.type==ct_result:return ca
	canorm=ca
	if ca.type==CTYPE_TYPED_NULL&&(ct_result==CTYPE_POINTER||ct_result==const_type(CTYPE_INT,Util.bitSize())||ct_result==const_type(CTYPE_UINT,Util.bitSize())):
		//CTYPE_TYPED_NULL to iptr / __pointer -- needed for iptr(object)
		canorm.type=ct_result
		return canorm
	if ca.type==CTYPE_TYPED_NULL||ca.type==CTYPE_INVALID||ca.type==CTYPE_POINTER&&ca.val_bin&&((ct_result&CTYPE_MASK)==CTYPE_FLOAT):
		return TConstValue(){'type':CTYPE_INVALID}
	n_bits=((ca.type&~CTYPE_MASK)+1)*8
	if ((ca.type&CTYPE_MASK)==CTYPE_INT):
		if n_bits<64:
			mask=(i64(1)<<n_bits)-1
			canorm.val_bin=(ca.val_bin&mask)|-(ca.val_bin&(i64(1)<<(n_bits-1)))
	else if ((ca.type&CTYPE_MASK)==CTYPE_UINT):
		if n_bits<64:
			mask=(i64(1)<<n_bits)-1
			canorm.val_bin=(ca.val_bin&mask)
	if ((ct_result&CTYPE_MASK)!=CTYPE_FLOAT)&&((ca.type&CTYPE_MASK)!=CTYPE_FLOAT):
		canorm.type=ct_result
		return canorm
	//////////////////////
	//source to double
	dval=0.
	if ((canorm.type&CTYPE_MASK)==CTYPE_INT):
		dval=f64(canorm.val_bin)
	else if ((ca.type&CTYPE_MASK)==CTYPE_UINT):
		dval=f64(u64(canorm.val_bin))
	else
		if ca.type==CTYPE_POINTER:
			assert(!ca.val_bin)
			dval=0.
		else
			assert((ca.type&CTYPE_MASK)==CTYPE_FLOAT)
			if ca.type==const_type(CTYPE_FLOAT,32):
				dval=f64(__int_as_float(i32(ca.val_bin)))
			else
				assert(ca.type==const_type(CTYPE_FLOAT,64))
				dval=__longlong_as_double(ca.val_bin)
	////////////////////////////////
	//double to destination
	ret=ca
	ret.type=ct_result
	if ((ct_result&CTYPE_MASK)==CTYPE_INT):
		ret.val_bin=i64(dval)
	else if ((ct_result&CTYPE_MASK)==CTYPE_UINT):
		ret.val_bin=i64(u64(dval))
	else
		if (ct_result&CTYPE_MASK)!=CTYPE_FLOAT:
			return TConstValue(){'type':CTYPE_INVALID}
		if ct_result==const_type(CTYPE_FLOAT,32):
			ret.val_bin=i64(__float_as_int(f32(dval)))
		else
			assert(ct_result==const_type(CTYPE_FLOAT,64))
			ret.val_bin=__double_as_longlong(dval)
	return ret

auto idCastConstI32(int val,PCTObject t_result)
	cval=castConst(TConstValue(){'val_bin':i64(val),'type':const_type(CTYPE_INT,32)},t_result)
	return getid_const(cval.type,cval.val_bin)

USER_FLAG_RC_SLOTID_MASK=0x00ffffff
USER_FLAG_RC_IS_SAFE_STORE=0x02000000
//USER_FLAG_RC_IS_GENERATED_STORE=0x02000000
USER_FLAG_RC_STORE_WITHOUT_ADDREF=0x01000000
VAR_USER_FLAG_RC_SLOTID_MASK=0x00ffffff
VAR_USER_FLAG_RC_SLOT_ALLOCATED=0x02000000
VAR_USER_FLAG_RC_IS_GENERATED_PULLOUT=0x01000000
famcallback=function(int):int
auto ancestorMerge(const is_death,PExpression pe_old0,PExpression pe_new0,famcallback fgetdepth,famcallback fgetbirthid)
	//return the merged and whether the new one can be considered as a safe-store
	pe_old=pe_old0
	pe_new=pe_new0
	if !pe_old:return int2(pe_new,1)
	is_store_safe=0
	//Writeln('-------------------------')
	for(;;)
		//Writeln(dumpExpr(pe_old,fcolor_abbrv_blocks)+' vs '+dumpExpr(pe_new,fcolor_abbrv_blocks))
		assert(!!pe_old)
		assert(!!pe_new)
		pecaller_old=readPool(pe_old+EXPR_OFS_CALLER)
		pecaller_new=readPool(pe_new+EXPR_OFS_CALLER)
		slotid_old=(readPool(pe_old+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
		slotid_new=(readPool(pe_new+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
		if pecaller_old==pecaller_new&&!isBuiltin(pecaller_old,g_id_if):
			//same level, not safe for stores, return the later one
			//but if they're different branches of the same if... we're doomed
			if is_death:
				return int2(slotid_old>slotid_new?pe_new:pe_old,is_store_safe)
			else
				slotid_old=fgetbirthid(slotid_old)
				slotid_new=fgetbirthid(slotid_new)
				return int2(slotid_old<slotid_new?pe_new:pe_old,is_store_safe)
		depth_old=fgetdepth(slotid_old)
		depth_new=fgetdepth(slotid_new)
		if depth_old==depth_new:
			pecaller_caller_old=readPool(pecaller_old+EXPR_OFS_CALLER)
			pecaller_caller_new=readPool(pecaller_new+EXPR_OFS_CALLER)
			if pecaller_caller_old==pecaller_caller_new&&isBuiltin(pecaller_caller_old,g_id_if):
				//different branches of the same if, store is safe
				is_store_safe=1
			pe_old=pecaller_old
			pe_new=pecaller_new
		else if depth_old>depth_new:
			pe_old=pecaller_old
		else
			pe_new=pecaller_new

auto removeSCCPJunk()
	fremove_junk=function(PExpression pe){
		if isBuiltin(pe,g_id_assert_ctval):
			//remove the assert_ctval guys
			setnop(pe)
			return 0
		if isBuiltin(pe,g_id_function):
			id_ccnv=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_STR)
			if id_ccnv==g_id_inline||id_ccnv==g_id_inline_loopbody:
				//remove all inline functions
				replaceExpr(pe,expriptr(0))
				return 0
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
				if i>=0:
					//simplify the types in function declarations
					val=getExprValue(pe_argi)
					if val.tid==g_vtid_CTVAL&&!isExpr(pe_argi,EFLAG_CTVAL):
						writePool(pe_argi,EFLAG_CTVAL+val.val)
				dfsExpr(pe_argi,fremove_junk)
			if readPool(pe)==EFLAG_FCALL+n_args:
				pe_code=readPool(pe+EXPR_OFS_ARGS+n_args-1)
				if isExpr(pe_code,EFLAG_FCALL):
					//make return explicit
					pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
					pvar_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
					as=new PExpression[]
					if g_enable_debug_instrumentation:
						as.push(call(g_id_callstack,exprctval(pobjfn)))
					as.push(pe_code)
					as.push(pvar_return?call(g_id_C_return,exprvar(pvar_return)):call(g_id_C_return))
					sccpQueueReach(insertCallAt(pe,~(n_args-1),function(PExpression pe){return vcall(g_id_block,as)}))
					sccpProcessReaches()
					//Writeln(">>> "+dumpExpr(pe,fcolor_reach_eval))
			return 0
		if isBuiltin(pe,g_id_store):
			pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			if isBuiltin(pe_value,g_id_aliased)||isBuiltin(pe_value,g_id_uninit):
				//remove the & hacks and the declaration hacks
				setnop(pe)
				return 0
		if !testUserFlag(pe,QUEUE_FLAG_REACH)
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			if isBuiltin(pe,g_id_block):
				if isBuiltin(pecaller,g_id_function):
					//unused function, smash the function
					writePool(pe,EFLAG_STRING+g_empty_id)
				else if isStatementHost(pecaller):
					//unused if branch, smash itself
					writePool(pe,EFLAG_STRING+g_empty_id)
				return 0
		return 1
	}
	dfsExpr(g_pe_top,fremove_junk)

auto getRootNamespaceType()
	assert(isBuiltin(g_pe_top,g_id_export))
	assert(isBuiltin(readPool(g_pe_top+EXPR_OFS_ARGS+1),g_id_function))
	return getExprValueAs(readPool(g_pe_top+EXPR_OFS_ARGS+1),g_vtid_CTVAL)

////////////////////////////
auto doStackAllocs()
	if !ENABLE_STACK_ALLOCS:return
	FLAG_IS_LEAKED=1
	FLAG_IS_RESIZED=2
	FLAG_IS_LAMBDAED=4
	PARAMID_THIS=0x7fffffff
	clearUserFlags(g_pe_top,0)
	///////////////////////////////////////////////////
	//mark context leakers - class / struct ctor, non-call use of local function value + lambda access
	//class / struct ctor is obvious
	//lambda-leaked functions count as classes and should go the member path - but assignment to the var is still a variable leak!
	TEMP_FLAG_FUNC_ASSIGN_LEAK=1
	//TEMP_FLAG_LAMBDA_ACCESS=2
	temp_fflag=0
	pobj_local_owner=0
	struct TPrescanStackItem
		PCTObject pobjfn
		int has_lambda_access
	stk=new TPrescanStackItem[]
	stk.push(TPrescanStackItem(){pobjfn:0})
	fprescan_for_lambdas=function(PExpression pe){
		if !testUserFlag(pe,QUEUE_FLAG_REACH)&&!isExpr(pe,EFLAG_VARIABLE):
			return 0
		if isBuiltin(pe,g_id_function):
			auto pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
			assert(!!pobjfn)
			pobj_local_owner=pobjfn
			stk.push(TPrescanStackItem(){pobjfn:pobjfn})
			auto stack_fflag=temp_fflag
			temp_fflag=0
			for i=0:(readPool(pe)&~EFLAG_MASK)-1
				dfsExpr(readPool(pe+EXPR_OFS_ARGS+i),fprescan_for_lambdas)
			sitem=stk.pop()
			if temp_fflag==TEMP_FLAG_FUNC_ASSIGN_LEAK&&sitem.has_lambda_access||tisclass(pobjfn):
				if DEBUG_DUMP_STACKALLOC:
					if !tisclass(pobjfn):
						Writeln('lambda leaked ',dumpFunction(pobjfn))
				setFFlag(pobjfn,FFLAG_LAMBDA_LEAKED)
			stack_fflag|=temp_fflag
			temp_fflag=stack_fflag
			pobj_local_owner=stk[stk.n-1].pobjfn
			return 0
		if isExpr(pe,EFLAG_VARIABLE):
			pobj_var=getVariable(pe)
			tid_var=readPool(pobj_var)
			pfowner=readPool(pobj_var+VAR_OFS_OWNER)
			if pfowner!=pobj_local_owner&&pfowner&&(tid_var==g_vtid_RTVAR||tid_var==g_vtid_CTVAL):
				setUserFlag(pobj_var,FLAG_IS_LAMBDAED)
				if tid_var==g_vtid_RTVAR||readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION)!=pe&&isFunction(readPool(pobj_var+1)):
					for j=stk.n-1:-1:0
						if stk[j].pobjfn==pfowner:
							for k=j:stk.n-1
								if DEBUG_DUMP_STACKALLOC:
									if !stk[k].has_lambda_access&&!tisclass(pfowner):
										Writeln('lambda access ',dumpExpr(readPool(pe+EXPR_OFS_CALLER),fcolor_abbrv_blocks),' ',dumpFunction(pfowner))
								stk[k].has_lambda_access=1
							break
			return 1
		if isBuiltin(pe,g_id_dot)||isBuiltin(pe,g_id_stdot):
			pe_member_name=readPool(pe+EXPR_OFS_ARGS+1)
			//detect hack for template, which shouldn't be dfsed
			if isExpr(pe_member_name,EFLAG_CTVAL)&&!isVariable(getExprValueAs(pe_member_name,g_vtid_CTVAL)):
				//pass
			else
				pobj_member=getDotMember(pe,0)
				if pobj_member:
					setUserFlag(pobj_member,FLAG_IS_LAMBDAED)
		if isExpr(pe,EFLAG_FCALL):
			//assign leak
			if isBuiltin(pe,g_id_store):
				auto val=getExprValue(readPool(pe+EXPR_OFS_ARGS+0))
				if val.tid==g_vtid_CTVAL:
					//harmless const store, ignore
					return 1
			else if isBuiltin(pe,g_id_stdot):
				pe_member_name=readPool(pe+EXPR_OFS_ARGS+1)
				if isExpr(pe_member_name,EFLAG_CTVAL):
					pvalue=getExprValueAs(pe_member_name,g_vtid_CTVAL)
				else
					pvalue=getDotMember(pe,0)
				if !pvalue||readPool(pvalue)==g_vtid_CTVAL:
					//erroneous stdot is harmless
					return 1
			else
				pobjfn=getExprFunction(pe)
				if pobjfn&&(getFFlag(pobjfn)&FFLAG_BUILTIN)&&pobjfn!=g_id_set_memory:
					//non-store/stdot built-in should be harmless
					return 1
			//if any param is a function... it's leaked
			if !(temp_fflag&TEMP_FLAG_FUNC_ASSIGN_LEAK):
				n_args=getExprNArgs(pe)
				for i=0:n_args-1
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					pobjfn_i=getExprValueAs(pe_argi,g_vtid_CTVAL)
					if pobjfn_i&&isFunction(pobjfn_i):
						if DEBUG_DUMP_STACKALLOC:
							if !(temp_fflag&TEMP_FLAG_FUNC_ASSIGN_LEAK)&&pobj_local_owner:
								Writeln('assign leak ',dumpExpr(pe,fcolor_abbrv_blocks),' ',dumpFunction(pobj_local_owner))
						temp_fflag|=TEMP_FLAG_FUNC_ASSIGN_LEAK
						return 1
		return 1
	}
	dfsExpr(g_pe_top,fprescan_for_lambdas)
	///////////////////////////////////////////////////
	//mark leaking variables / param leakness flags
	//todo: members - store(?,dot()) case - middle state - "leaked" from stack but is a static member
	//find leak roots
	funarg_leaks=new i8[i64]
	Q=new PCTObject[]
	QF=new PCTObject[]
	setVarExprLeak=function(PExpression pe_leak,int flag){
		//leaked counts as resized, but not vice versa
		if !isExpr(pe_leak,EFLAG_VARIABLE):return
		auto pobj_var=getVariable(pe_leak)
		if readPool(pobj_var+VAR_OFS_ID)==g_id_this:
			setFunargLeak(getOwningFunction(pe_leak),PARAMID_THIS)
			return
		if testUserFlag(pobj_var,FLAG_IS_LEAKED|flag):return
		setUserFlag(pobj_var,flag)
		if !tisrealclass(getVariableType(pobj_var)):return
		Q.push(pobj_var)
		if DEBUG_DUMP_STACKALLOC:
			Writeln(flag==FLAG_IS_LEAKED?'setVarExprLeak ':'setVarResize ',dumpObject(pobj_var))
	}
	setFunargLeak=function(PCTObject pobjfn,int paramid){
		auto key=(i64(pobjfn)<<32)+i64(paramid)
		if funarg_leaks[key]:return
		funarg_leaks[key]=i8(1)
		QF.push(pobjfn)
		QF.push(paramid)
		if DEBUG_DUMP_STACKALLOC:
			Writeln('setFunargLeak ',dumpObject(pobjfn),' ',paramid)
	}
	ffind_leak_root=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL)&&!testUserFlag(pe,QUEUE_FLAG_REACH):return 0
		if isBuiltin(pe,g_id_stdot):
			//invalidate the VALUE
			pe_value=readPool(pe+EXPR_OFS_ARGS+2)
			if isExpr(pe_value,EFLAG_VARIABLE):
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_value,FLAG_IS_LEAKED)
		else if isBuiltin(pe,g_id_cast):
			//invalidate the OPERAND
			pe_src=readPool(pe+EXPR_OFS_ARGS+1)
			if isExpr(pe_src,EFLAG_VARIABLE):
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_src,FLAG_IS_LEAKED)
		else if isBuiltin(pe,g_id_force_leak):
			pe_src=readPool(pe+EXPR_OFS_ARGS+0)
			if isExpr(pe_src,EFLAG_VARIABLE):
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_src,FLAG_IS_LEAKED)
			return 1
		else if (isBuiltin(pe,g_id_dot)&&
		readPool(readPool(pe+EXPR_OFS_ARGS+1))==EFLAG_STRING+g_id_set_slice&&
		readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION)==pe):
			//set_slice, functions as a copy, need to test non-temp case
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			pe_var=readPool(pe+EXPR_OFS_ARGS+0)
			if isExpr(pe_var,EFLAG_VARIABLE):
				pobj_var=getVariable(pe_var)
				if !isTempId(readPool(pobj_var+VAR_OFS_ID)):
					if DEBUG_DUMP_STACKALLOC:
						Writeln('leak root (slice) ',dumpExpr(readPool(pe+EXPR_OFS_CALLER),fcolor_abbrv_blocks))
					pe_setslice_arg=readPool(pecaller+EXPR_OFS_ARGS+0)
					setVarExprLeak(pe_var,FLAG_IS_LEAKED)
					setVarExprLeak(pe_setslice_arg,FLAG_IS_LEAKED)
		else if isBuiltin(pe,g_id_store):
			pe_var=readPool(pe+EXPR_OFS_ARGS+0)
			pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			pobj_var=getVariable(pe_var)
			if isBuiltin(pe_value,g_id_dot)||isBuiltin(pe_value,g_id_cast):
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_var,FLAG_IS_LEAKED)
			if isExpr(pe_value,EFLAG_VARIABLE)&&!isTempId(readPool(pobj_var+VAR_OFS_ID)):
				//non-temp copy
				//pvar_src=getVariable(pe_value)
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_var,FLAG_IS_LEAKED)
				setVarExprLeak(pe_value,FLAG_IS_LEAKED)
			else if readPool(pobj_var+VAR_OFS_ID)==g_id_return:
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_var,FLAG_IS_LEAKED)
			else if (getFFlag(readPool(pobj_var+VAR_OFS_OWNER))&FFLAG_LAMBDA_LEAKED)&&testUserFlag(pobj_var,FLAG_IS_LAMBDAED):
				//if the function is lambda-leaked and the variable is lambdaed, it's out of question
				if DEBUG_DUMP_STACKALLOC:
					Writeln('leak root (lambda) ',dumpExpr(pe,fcolor_abbrv_blocks))
				setVarExprLeak(pe_var,FLAG_IS_LEAKED)
			else
				//elegible, do multi-store test
				n_stores=0
				pestore_defining=0
				for(pestore=readPool(pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
					if !isBuiltin(pestore,g_id_store):continue
					pestore_defining=pestore
					n_stores++
					if n_stores>1:break
				if n_stores!=1:
					if DEBUG_DUMP_STACKALLOC:
						Writeln('multi-store ',dumpExpr(pe,fcolor_abbrv_blocks))
					setVarExprLeak(pe_var,FLAG_IS_LEAKED)
				else
					//only allow new
					assert(pestore_defining==pe)
					pobjfn_defining=(isExpr(pe_value,EFLAG_FCALL)?getExprFunction(pe_value):0)
					if !(!isExpr(pe_value,EFLAG_FCALL)||pobjfn_defining&&tisrealclass(pobjfn_defining)||isBuiltin(pe_value,g_id_ldparam)||isBuiltin(pe_value,g_id_get_lambda_context)):
						if DEBUG_DUMP_STACKALLOC:
							Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
						setVarExprLeak(pe_var,FLAG_IS_LEAKED)
		else if (readPool(pe)&EFLAG_MASK)==EFLAG_FCALL:
			pobjfn=getExprFunction(pe)
			if !pobjfn:
				//indirect call leaks all args
				n_args=getExprNArgs(pe)
				for i=0:pobjfn-1
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					if isExpr(pe_argi,EFLAG_VARIABLE):
						if DEBUG_DUMP_STACKALLOC:
							Writeln('leak root ',dumpExpr(pe,fcolor_abbrv_blocks))
						setVarExprLeak(pe_argi,FLAG_IS_LEAKED)
		return 1
	}
	dfsExpr(g_pe_top,ffind_leak_root)
	//build full caller list, it's always needed
	all_calls=new i64[]
	fbuild_caller_list=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL)&&!testUserFlag(pe,QUEUE_FLAG_REACH):return 0
		if (readPool(pe)&EFLAG_MASK)==EFLAG_FCALL:
			pobjfn=getExprFunction(pe)
			if pobjfn:
				if !(getFFlag(pobjfn)&(FFLAG_BUILTIN|FFLAG_IMPORTED)):
					all_calls.push((i64(pobjfn)<<32)+i64(pe))
		return 1
	}
	dfsExpr(g_pe_top,fbuild_caller_list)
	all_calls.Sort()
	for i=0:all_calls.n-1
		pobjfn_i=int(all_calls[i]>>32)
		if i&&int(all_calls[i-1]>>32)!=pobjfn_i:
			writePool(pobjfn_i+FUNCTION_OFS_P_FULL_CALLER_LIST,int(i))
	all_calls.push(-1LL)
	//propagate out
	fpropagate=function(int flag){
		for(;Q.n||QF.n;)
			for(I=0;I<Q.n;I++)
				pobj_var=Q[I]
				//var - propagate through both directions of assignments
				for(peuser=readPool(pobj_var+VAR_OFS_USER_QUEUE);peuser;peuser=readPool(peuser+EXPR_OFS_NEXT_V_USER))
					pe=peuser
					if isExpr(pe,EFLAG_VARIABLE)
						pe=readPool(pe+EXPR_OFS_CALLER)
					pecaller=readPool(pe+EXPR_OFS_CALLER)
					if isBuiltin(pe,g_id_store):
						pe_var=readPool(pe+EXPR_OFS_ARGS+0)
						pe_value=readPool(pe+EXPR_OFS_ARGS+1)
						setVarExprLeak(pe_var,flag)
						if isExpr(pe_value,EFLAG_VARIABLE):
							setVarExprLeak(pe_value,flag)
					else if isBuiltin(pe,g_id_dot)&&readPool(readPool(pe+EXPR_OFS_ARGS+1))==EFLAG_STRING+g_id_set_slice&&readPool(pecaller+EXPR_OFS_FUNCTION)==pe:
						//g_id_set_slice propagates like an assignment
						pe_src=readPool(pecaller+EXPR_OFS_ARGS+0)
						if isExpr(pe_src,EFLAG_VARIABLE):
							setVarExprLeak(pe_src,flag)
					if isExpr(pecaller,EFLAG_FCALL):
						pefunc=readPool(pecaller+EXPR_OFS_FUNCTION)
						if isBuiltin(pefunc,g_id_dot)&&readPool(readPool(pefunc+EXPR_OFS_ARGS+1))==EFLAG_STRING+g_id_set_slice&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
							//g_id_set_slice propagates like an assignment
							pe_tar=readPool(pefunc+EXPR_OFS_ARGS+0)
							if isExpr(pe_tar,EFLAG_VARIABLE):
								setVarExprLeak(pe_tar,flag)
				for(pestore=readPool(pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
					pe=pestore
					if isBuiltin(pe,g_id_store):
						pe_var=readPool(pe+EXPR_OFS_ARGS+0)
						pe_value=readPool(pe+EXPR_OFS_ARGS+1)
						setVarExprLeak(pe_var,flag)
						if isExpr(pe_value,EFLAG_VARIABLE):
							setVarExprLeak(pe_value,flag)
						else if isBuiltin(pe_value,g_id_ldparam):
							//propagate to funarg
							//expecting it to be sparse
							paramid=getExprValueAs(readPool(pe_value+EXPR_OFS_ARGS+0),g_vtid_CNS)
							pf_owner=getOwningFunction(pe)
							setFunargLeak(pf_owner,paramid)
						//else if isBuiltin(pe_value,g_id_get_lambda_context):
						//	paramid=PARAMID_THIS
						//	pf_owner=getOwningFunction(pe)
						//	setFunargLeak(pf_owner,paramid)
			Q.clear()
			for(I=0;I<QF.n;I+=2)
				//fun-arg - two ints
				pobjfn=QF[I+0]
				paramid=QF[I+1]
				//propagate to all calling instances
				ppe_callers=readPool(pobjfn+FUNCTION_OFS_P_FULL_CALLER_LIST)
				if !ppe_callers:continue
				for(j=ppe_callers;;j++)
					if int(all_calls[j]>>32)!=pobjfn:break
					pecaller=int(all_calls[j])
					n_args=getExprNArgs(pecaller)
					if paramid<n_args:
						pearg=readPool(pecaller+EXPR_OFS_ARGS+paramid)
						if isExpr(pearg,EFLAG_VARIABLE):
							setVarExprLeak(pearg,flag)
					else if paramid==PARAMID_THIS:
						pefunc=readPool(pecaller+EXPR_OFS_FUNCTION)
						if isBuiltin(pefunc,g_id_dot):
							pearg=readPool(pefunc+EXPR_OFS_ARGS+0)
							if isExpr(pearg,EFLAG_VARIABLE):
								setVarExprLeak(pearg,flag)
			QF.clear()
	}
	fpropagate(FLAG_IS_LEAKED)
	///////////////////////////////////////////////////
	//mark statically sized arrays
	//resize test, not leaked, not resized = OK... resize flag can propagate the same way? different queue
	//resize root... funarg propagates
	//leak counts as resized, and it's already propagated
	ffind_resize_root=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL)&&!testUserFlag(pe,QUEUE_FLAG_REACH):return 0
		//just find the resize calls
		if !isExpr(pe,EFLAG_FCALL):return 1
		pefunc=readPool(pe+EXPR_OFS_FUNCTION)
		if !isBuiltin(pefunc,g_id_dot):return 1
		peobj=readPool(pefunc+EXPR_OFS_ARGS+0)
		if !isExpr(peobj,EFLAG_VARIABLE):return 1
		pobj_var=getVariable(peobj)
		if testUserFlag(pobj_var,FLAG_IS_LEAKED|FLAG_IS_RESIZED):return 1
		t=getVariableType(pobj_var)
		//if DEBUG_DUMP_STACKALLOC:
		//	Writeln('almost resize call before t test ',t,' ',dumpExpr(pe,fcolor_abbrv_blocks))
		if !tisarray(t):return 1
		//if DEBUG_DUMP_STACKALLOC:
		//	Writeln('almost resize call before pobj_member test ',dumpExpr(pe,fcolor_abbrv_blocks))
		pe_member=readPool(pefunc+EXPR_OFS_ARGS+1)
		pobj_member=getDotMember(pefunc,0)
		pobj_fn=0
		if isExpr(pe_member,EFLAG_CTVAL):
			pobj_fn=getExprValueAs(pe_member,g_vtid_CTVAL)
		id_call=readPool(pobj_member+VAR_OFS_ID)
		//Writeln('>>> ',pobj_fn,' ',dumpObject(pobj_member),' ',dumpExpr(pe,fcolor_abbrv_blocks))
		//&&!(pobj_fn&&(getFFlag(pobj_fn)&FFLAG_IS_CONVERT_TO_AS_BINARY))
		if id_call!=g_id_resize:return 1
		if DEBUG_DUMP_STACKALLOC:
			Writeln('resize-like call ',dumpExpr(pe,fcolor_abbrv_blocks))
		setVarExprLeak(peobj,FLAG_IS_RESIZED)
		return 1
	}
	dfsExpr(g_pe_top,ffind_resize_root)
	//propagate out
	//funarg table is NOT cleared - if it's leaking, it invalidates static arrays already
	fpropagate(FLAG_IS_RESIZED)
	///////////////////////////////////////////////////
	//transform into static allocation
	//just add an optional allocated lambda pointer param to all class ctors
	//for empty ctors we could just get rid of it - and we have isCtorEmpty
	//if isCtorEmpty(pobjfn,1):
	changed=0
	fmake_stack_allocs=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL)&&!testUserFlag(pe,QUEUE_FLAG_REACH):return 0
		if isBuiltin(pe,g_id_store):
			pe_var=readPool(pe+EXPR_OFS_ARGS+0)
			pobj_var=getVariable(pe_var)
			if !testUserFlag(pobj_var,FLAG_IS_LEAKED)&&tisrealclass(getVariableType(pobj_var)):
				//stack new
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
				if isBuiltin(pe_value,g_id_get_lambda_context):
					//it's 'this', do nothing
				else if !isExpr(pe_value,EFLAG_FCALL)||isBuiltin(pe_value,g_id_ldparam):
					//we still need RC... for same-function things, but do it stack-style
					if DEBUG_DUMP_STACKALLOC:
						Writeln('stack-style-rc ',dumpExpr(pe,fcolor_abbrv_blocks))
					setUserFlag(pobj_var,VAR_FLAG_CLASS_STACK_STYLE_RC)
				else
					if DEBUG_DUMP_STACKALLOC:
						Writeln('stackalloc ',dumpExpr(pe,fcolor_abbrv_blocks))
					pobjfn=getExprFunction(pe_value)
					setUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED|VAR_FLAG_CLASS_STACK_STYLE_RC)
					if isCtorEmpty(pobjfn,1):
						//remove it, make it memset + local ptr ass
						changed=1
						pe_replacement=call(g_id_stackzero,exprctval(pobj_var),exprctval(pobjfn))
						sccpQueueReach(insertCallAt(pe,~1,function(PExpression pe0){return pe_replacement}))
						return 0
					else
						//pass a param to the allocation - hack at code generation time
						//generate declaration the same way
						//setUserFlag(pe_value,EXPR_FLAG_IS_STACK_ALLOC)
		else if isBuiltin(pe,g_id_array_malloc):
			//size must be const and reasonable
			pe_bsize=readPool(pe+EXPR_OFS_ARGS+0)
			petype=readPool(pe+EXPR_OFS_ARGS+1)
			val=getExprValue(pe_bsize)
			if val.tid!=g_vtid_CNS:return 1
			if !isConstReasonableSASize(g_const_values[val.val]):return 1
			//it must be:
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			is_stdot=0
			pobj_var=0
			if isBuiltin(pecaller,g_id_store):
				//store to flattened thing (always stack friendly - not used in function calls, not copied out)
				if readPool(pecaller+EXPR_OFS_ARGS+1)!=pe:return 1
				peflattened=readPool(pecaller+EXPR_OFS_ARGS+0)
				pobj_var_flattened=getVariable(peflattened)
				pobj_var=readPool(pobj_var_flattened+VAR_OFS_FLATTENING_OWNER)
				if !pobj_var:return 1
			else if isBuiltin(pecaller,g_id_stdot):
				//stdot to object (stack friendly if not leaked and not resized)
				is_stdot=1
				if readPool(pecaller+EXPR_OFS_ARGS+2)!=pe:return 1
				peobj=readPool(pecaller+EXPR_OFS_ARGS+0)
				if !isExpr(peobj,EFLAG_VARIABLE):return 1
				pobj_var=getVariable(peobj)
				if testUserFlag(pobj_var,FLAG_IS_LEAKED|FLAG_IS_RESIZED):return 1
			else
				return 1
			//flag the var and stackify the alloc
			//set destructor_nbound_or_slice_reference=2 anyway for safety
			if DEBUG_DUMP_STACKALLOC:
				Writeln('stackarray ',dumpExpr(pecaller,fcolor_abbrv_blocks))
			changed=1
			t_element=getExprValueAs(petype,g_vtid_CTVAL)
			setUserFlag(pobj_var,VAR_FLAG_ARRAY_STACK_ALLOCED)
			pe_dtor_smash=call(g_id_stdot,
				exprvar(pobj_var),
				exprstr(g_id_destructor_nbound_or_slice_reference),
				expriptr(2))
			pe_array_stackalloc=call(g_id_array_malloc,
				exprcns(val.val),
				exprctval(t_element),
				exprctval(pobj_var))
			bsize=getExprValueAs(pe_bsize,g_vtid_CNS)
			g_array_stackalloc_info[pobj_var]=int3(t_element,bsize,pobj_var)
			pe_new=transformCode(pe,__zero(ftransformer_callback), PExpression[].NULL,pe_array_stackalloc,[pe_dtor_smash])
			return 0
		return 1
	}
	dfsExpr(g_pe_top,fmake_stack_allocs)
	//////////////////////
	clearUserFlags(g_pe_top,0)
	if changed:
		sccp(0)

////////////////////////////
struct TStringConstItem
	iptr p
	iptr n
	int id
g_all_strings=new int[]
g_global_strings_code=new string
g_c_str_consts=new TStringConstItem[]
g_c_str_idmap=new iptr[int]
auto fixConstantTypes()
	//it must not be a builtin/imported param
	//but const-to-var stores are an exception
	//we may need to call functions - another round of sccp, but with a switch flagged - types change
	//change the value definition? function-with-this-bounded-to? no
	//const-dotted has to be directly called, or 'this' will be ignored, it's our restriction
	//constify the const calls, then replace the function-ctval at store boundaries - ignore other cases for now
	g_sccp_queue_reach.clear()
	g_sccp_queue_eval.clear()
	ffix_const_types=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL)&&!testUserFlag(pe,QUEUE_FLAG_REACH):return 0
		//if isExpr(pe,EFLAG_FCALL):
		val=getExprValue(pe)
		pecaller=readPool(pe+EXPR_OFS_CALLER)
		if pecaller:
			if val.tid==g_vtid_CTVAL:
				if readPool(pecaller+EXPR_OFS_FUNCTION)==pe:
					//ordinary function, ignore
					if !isBuiltin(pe,g_id_dot):return 1
					//it's dot-called, check for type matchness
					pobjfn=val.val
					t_obj=getExprType(readPool(pe+EXPR_OFS_ARGS+0))
					t_parent=getOwningFunction(readPool(readPool(pobjfn+FUNCTION_OFS_PEDECL)+EXPR_OFS_CALLER))
					if t_obj==t_parent:
						//good type
						return 1
					else
						//otherwise, we do need to pointerify it
						//Writeln(dumpExpr(pecaller,fcolor_reach_eval))
			if (val.tid==g_vtid_CTVAL&&readPool(val.val)==g_tid_TFunction||val.tid==g_vtid_STR)&&!isBuiltin(pe,g_id_ldparam):
				need_to_translate=0
				if DEBUG_DUMP_FIX_CONSTANT_TYPES:
					need_to_translate_reason="no_need"
				ignore_dot=0
				pobj_var_fptr_type_update=0
				pobjfn_caller=getExprFunction(pecaller)
				if val.tid==g_vtid_CTVAL&&readPool(pecaller+EXPR_OFS_FUNCTION)==pe:
					//dotcall
					need_to_translate=1
					ignore_dot=1
					if DEBUG_DUMP_FIX_CONSTANT_TYPES:
						need_to_translate_reason="dotcall"
				else if !pobjfn_caller||!(getFFlag(pobjfn_caller)&(FFLAG_BUILTIN|FFLAG_IMPORTED)):
					//normal call, translate
					need_to_translate=1
					if DEBUG_DUMP_FIX_CONSTANT_TYPES:
						need_to_translate_reason="normalcall"
				else if isBuiltin(pecaller,g_id_dot)&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
					//val.tid==g_vtid_STR
					pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
					if readPool(pecaller_caller+EXPR_OFS_FUNCTION)==pecaller:
						//dot caller - str-only so no need of sccp test
						//141106: it's no longer str only - function methods
						need_to_translate=1
						if DEBUG_DUMP_FIX_CONSTANT_TYPES:
							need_to_translate_reason="dot_caller"
				else if ((isBuiltin(pecaller,g_id_store)||isBuiltin(pecaller,g_id_struct_copy))&&readPool(pecaller+EXPR_OFS_ARGS+1)==pe||
				isBuiltin(pecaller,g_id_stdot)&&readPool(pecaller+EXPR_OFS_ARGS+2)==pe):
					//it's stored, test the target
					if isBuiltin(pecaller,g_id_stdot):
						pobj_member=getDotMember(pecaller,1)
						val_var=readPoolTyped(pobj_member,TSCCPValue)
						//pobj_var_fptr_type_update=pobj_member
					else
						pe_var=readPool(pecaller+EXPR_OFS_ARGS+0)
						val_var=getExprValue(pe_var)
						pobj_var=getVariable(pe_var)
						if readPool(pobj_var+VAR_OFS_ID)==g_id_return:
							//return values have to be translated too
							val_var.tid=g_vtid_RTVAR
						pobj_var_fptr_type_update=pobj_var
					if val_var.tid==g_vtid_RTVAR:
						//stored to var, translate
						need_to_translate=1
						if DEBUG_DUMP_FIX_CONSTANT_TYPES:
							need_to_translate_reason="store_to_var"
				if need_to_translate:
					//const -> var link, translate
					//Writeln('>>> '+dumpExpr(pe,fcolor_abbrv_blocks))
					if val.tid==g_vtid_CTVAL:
						//function value, make the struct
						assert(readPool(val.val)==g_tid_TFunction)
						t=getValueType(val)
						if !t||!tisfunction(t):
							//make sure that we don't translate anything wrong
							return 1
						if DEBUG_DUMP_FIX_CONSTANT_TYPES:
							Writeln('translate function const (',need_to_translate_reason,'): ',dumpFunction(val.val),' ',dumpExpr(pecaller,fcolor_abbrv_blocks))
						setFFlag(val.val,FFLAG_HAS_FPTR_TAKEN)
						got_this=0
						if isBuiltin(pe,g_id_dot)&&!ignore_dot:
							pe_this=readPool(pe+EXPR_OFS_ARGS+0)
							got_this=1
						else
							t_parent=getOwningFunction(readPool(readPool(val.val+FUNCTION_OFS_PEDECL)+EXPR_OFS_CALLER))
							//we need a lambda context - put a smart g_id_get_lambda_context
							//pe_this=exprcns(getid_const(CTYPE_POINTER,0LL))
							pe_this=call(g_id_get_lambda_context,exprctval(t_parent))
						if !t:
							id_ccnv=getCcnv(val.val)
							if id_ccnv==g_id_inline||id_ccnv==g_id_inline_loopbody:
								errorAtExpr(ETYPE_ERROR,pe,"inline function '@1' cannot be used as a run-time value".Replace(["@1",citeexpr(pe)]))
							else
								errorAtExpr(ETYPE_ERROR,pe,"template/invalid function '@1' cannot be used as a run-time value".Replace(["@1",citeexpr(pe)]))
							return 1
						assert(!!t)
						if !tisfunction(t):
							//Writeln('bad function type: ',dumpType(t),' ',dumpExpr(pe,__zero(fcolorer_callback)))
							errorAtExpr(ETYPE_ERROR,pe,"'@1' is not a C-like function and cannot be used as a run-time function pointer".Replace(["@1",citeexpr(pe)]))
						//update the store target type if there is one
						if pobj_var_fptr_type_update:
							if DEBUG_EVAL_LOG:
								Writeln('update function type ',dumpObject(pobj_var_fptr_type_update),' ',dumpExpr(pecaller,fcolor_abbrv_blocks))
							//writePool(pobj_var_fptr_type_update+0,g_vtid_RTVAR)
							//writePool(pobj_var_fptr_type_update+1,t)
							fstore_eval_core_ex(pecaller,pobj_var_fptr_type_update,TSCCPValue(){'tid':g_vtid_RTVAR,'val':t},1)
						//we have to keep pe in case it's a function decl, but we don't want to ass it that way
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){
							auto pe_dummy=(ignore_dot||got_this)?expriptr(0):pe;
							return indcall([exprctval(getStdObject(0,STDFN_MAKE_FUNCTION)),exprctval(t),pe_this,exprctval(val.val),pe_dummy]);
						}))
						return 1
					else
						assert(val.tid==g_vtid_STR)
						if DEBUG_DUMP_FIX_CONSTANT_TYPES:
							Writeln('translate string const (',need_to_translate_reason,'): "',getIdString(val.val),'" ',dumpExpr(pecaller,fcolor_abbrv_blocks))
						//pe_new=indcall([exprctval(getStdObject(0,STDFN_MAKE_STRING)),exprstr(val.val),expriptr(getIdString(val.val).n)])
						pe_new=indcall([exprctval(getStdObject(0,STDFN_MAKE_STRING)),call(g_id_global_string_cns,exprstr(val.val))])
						g_all_strings.push(val.val)
						replaceExpr(pe,pe_new)
						return 1
			else if val.tid==g_vtid_RTVAR:
				t=val.val
				if tisclass(t):
					pobjfn_caller=getExprFunction(pecaller)
					if pobjfn_caller&&(getFFlag(pobjfn_caller)&FFLAG_IMPORTED):
						//class to C, check method
						if lookupFunctionVariable(t,g_id_C_autocast):
							//we got one, call it
							sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return indcall([call(g_id_dot,pe,exprstr(g_id_C_autocast))])}))
							return 1
			//Writeln(">>> "+dumpExpr(pecaller,fcolor_abbrv_blocks)+" "+dumpExpr(pe,fcolor_abbrv_blocks)+" "+getIdString(val.tid))
		return 1
	}
	dfsExpr(g_pe_top,ffix_const_types)
	g_ctype_fixed=1
	sccp(0)
	//generate the string table
	g_all_strings.Sort()
	g_all_strings.Unique()
	if !g_all_strings.n:return
	g_global_strings_code.push('static const char s7_CS0[]="')
	pprev_line=0L
	n_real_chars=0L
	foreach id,I in g_all_strings
		g_c_str_idmap[id]=I
		s=getIdString(id)
		ps=n_real_chars
		foreach ch in s
			genChar(g_global_strings_code,int(u8(ch)))
			if g_global_strings_code.n-pprev_line>=16000://1048000:
				g_global_strings_code.push('"\n"')
				pprev_line=g_global_strings_code.n-1
		genChar(g_global_strings_code,0)
		n_real_chars+=s.n+1
		g_c_str_consts.push(TStringConstItem(){"p":ps,"n":s.n,'id':id})
	g_global_strings_code.push('";\n')

auto copyFullStackAllocFlags(PCTObject pv_temp,PCTObject pobj_var)
	flags=readPool(pobj_var+EXPR_OFS_USER_FLAGS)&(
			VAR_FLAG_CLASS_IS_STACK_ALLOCED|VAR_FLAG_CLASS_STACK_STYLE_RC|VAR_FLAG_ARRAY_STACK_ALLOCED)
	setUserFlag(pv_temp,flags)
	if flags&VAR_FLAG_ARRAY_STACK_ALLOCED:
		g_array_stackalloc_info[pv_temp]=g_array_stackalloc_info[pobj_var]

//g_dump_eval=0
auto translateLambdas()
	flattenBlocks()
	g_sccp_queue_reach.clear()
	g_sccp_queue_eval.clear()
	//mark the RTTI needs
	//Writeln('--- 0')
	fmark_rtti=function(PExpression pe){
		if isBuiltin(pe,g_id_cast):
			t_target=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
			if t_target==getStdObject(0,STDTYPE_VARIANT):
				t_source=getExprType(readPool(pe+EXPR_OFS_ARGS+1))
				if t_source&&readPool(t_source)==g_tid_TFunction:
					assert(!tisstruct(t_source))
					setFFlag(t_source,FFLAG_LAMBDA_NEEDS_RTTI)
		else if isBuiltin(pe,g_id_get_rtti):
			//object RTTI shouldn't set the flag - it doesn't happen
			t_rtti_source=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
			if t_rtti_source&&readPool(t_rtti_source)==g_tid_TFunction:
				assert(!tisstruct(t_rtti_source))
				setFFlag(t_rtti_source,FFLAG_LAMBDA_NEEDS_RTTI)
		return 1
	}
	dfsExpr(g_pe_top,fmark_rtti)
	setFFlag(getStdObject(0,STDTYPE_VARIANT),FFLAG_LAMBDA_NEEDS_RTTI)
	//label the namespace variables for globalification
	t_root_namespace=getRootNamespaceType()
	g_t_root_namespace=t_root_namespace
	//scan for lambdas
	pobj_local_owner=0
	lambda_stack=new PCTObject[]
	//Writeln('--- 1')
	g_all_lambdas=new PCTObject[]
	fscan_for_lambdas=function(PExpression pe){
		//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&!isExpr(pe,EFLAG_VARIABLE):
		//	return 0
		if isBuiltin(pe,g_id_function):
			pobjfn_bk=pobj_local_owner
			pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
			assert(!!pobjfn)
			pobj_local_owner=pobjfn
			lambda_stack.push(pobjfn)
			for i=0:(readPool(pe)&~EFLAG_MASK)-1
				dfsExpr(readPool(pe+EXPR_OFS_ARGS+i),fscan_for_lambdas)
			//if pobjfn:
			lambda_stack.pop()
			pobj_local_owner=pobjfn_bk
			return 0
		if isBuiltin(pe,g_id_dot)||isBuiltin(pe,g_id_stdot):
			pe_member_name=readPool(pe+EXPR_OFS_ARGS+1)
			if isExpr(pe_member_name,EFLAG_CTVAL):
				//hack for template, don't translate
				val=getExprValueAs(pe_member_name,g_vtid_CTVAL)
				if !isVariable(val):
					return 1
			pobj_member=getDotMember(pe,0)
			if !pobj_member:
				//errored expr
				setnop(pe)
				return 1
			if isBuiltin(pe,g_id_dot):
				tid=readPool(pobj_member)
				if tid!=g_vtid_RTVAR:
					//const case
					if tid==g_vtid_CTVAL:
						//ctval: leave it a dot, but replace it with a ctval-hack-dot
						writePool(pe_member_name,EFLAG_CTVAL+readPool(pobj_member+1))
						return 1
					else if tid==g_vtid_CNS:
						writePool(pe,EFLAG_CONST+readPool(pobj_member+1))
						return 1
					else if tid==g_vtid_STR:
						writePool(pe,EFLAG_STRING+readPool(pobj_member+1))
						return 1
					assert(tid==g_vtid_UNINIT)//in this case, just give an error
				idfn=g_id_ldlambda
			else
				idfn=g_id_stlambda
			//if g_names_resolved:
			pobjfn=g_symbols[idfn].user_slot
			insertCallAt(pe,0,function(PExpression pe){return exprvar(pobjfn)})
			//writePool(pe+EXPR_OFS_NAME_OR_VAR,pobjfn)
			assert(!!pobj_member)
			writePool(pe_member_name,EFLAG_CTVAL+pobj_member)
			return 1
		else if isBuiltin(pe,g_id_get_lambda_context):
			pe_levels=readPool(pe+EXPR_OFS_ARGS+0)
			val_levels=getExprValue(pe_levels)
			is_tentative=0
			if val_levels.tid==g_vtid_CTVAL:
				//only function pointer contexts get here
				//coulddo: this process can be made iterative so that we avoid unnecessary contexts
				//but it's easier to just hack this case
				//convert to # levels
				is_tentative=1
				pfowner=val_levels.val
				their_level=-1
				for j=lambda_stack.n-1:-1:0
					if lambda_stack[j]==pfowner:
						their_level=int(j)
						break
				if their_level==lambda_stack.n-1:
					//nothing
				else if their_level<0:
					errorAtExpr(ETYPE_ERROR,pe,"in '@3', one cannot obtain a pointer to function '@1' defined in non-parent function '@2'".Replace([
						"@1",citeexpr(pe),
						"@2",dumpFunction(pfowner),
						"@3",dumpFunction(pobj_local_owner)]))
					writePool(pe,EFLAG_STRING+g_empty_id)
					writePool(lambda_stack[0]+FUNCTION_OFS_FLAGS,readPool(lambda_stack[0]+FUNCTION_OFS_FLAGS)&~(FFLAG_LAMBDA_NEEDS_PARENT_POINTER|FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG))
					return 0
				else if their_level>0:
					//only flag things if it's not the global scope
					setFFlag(pobj_local_owner,FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)
					for j=lambda_stack.n-2:-1:0
						setFFlag(lambda_stack[j],FFLAG_LAMBDA_NEEDS_CONTEXT)
						if j==their_level:
							break
						setFFlag(lambda_stack[j],FFLAG_LAMBDA_NEEDS_PARENT_POINTER|FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)
				else
					//if it's the global... it's simple
					setFFlag(lambda_stack[0],FFLAG_LAMBDA_NEEDS_CONTEXT)
				d_levels=int(lambda_stack.n-1-their_level)
				pe_levels=insertCallAt(pe,~0,function(PExpression pe){return expriptr(their_level==0?0x80000000:d_levels)})
			if getExprValueAs(pe_levels,g_vtid_CNS)==0&&!is_tentative:
				//function pointer contexts are tentative: NULL is a good substitution
				setFFlag(pobj_local_owner,FFLAG_LAMBDA_NEEDS_CONTEXT)
		else if isExpr(pe,EFLAG_VARIABLE)||isExpr(pe,EFLAG_CTVAL)&&readPool(readPool(pe+EXPR_OFS_CALLER)+EXPR_OFS_FUNCTION)==pe:
			if isExpr(pe,EFLAG_VARIABLE):
				pobj_var=getVariable(pe)
				tid_var=readPool(pobj_var)
				pfowner=readPool(pobj_var+VAR_OFS_OWNER)
			else
				valx=getExprValue(pe)
				tid_var=valx.tid
				assert(tid_var==g_vtid_CTVAL)
				pf_called=valx.val
				if !isFunction(pf_called)||getCcnv(pf_called)!=g_id_function:return 1
				if (getFFlag(pf_called)&FFLAG_BUILTIN)||getCcnv(pf_called)!=g_id_function:return 1
				pfowner=getOwningFunction(readPool(readPool(pf_called+FUNCTION_OFS_PEDECL)+EXPR_OFS_CALLER))
				//coulddo: accelerate the 0 case
			//tid_var==g_vtid_CTVAL
			if pfowner!=pobj_local_owner&&pfowner&&(tid_var==g_vtid_RTVAR||tid_var==g_vtid_CTVAL):
				//get their context and mark all outer levels as "outer-lambda-needed"
				their_level=-1
				for j=lambda_stack.n-2:-1:0
					if lambda_stack[j]==pfowner:
						their_level=int(j)
						break
				//here we generate a "get lambda": # parent layers, a name / sth
				if their_level<0:
					//Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
					//Writeln("in '@3', one cannot access '@1' from non-parent function '@2'".Replace([
					//	"@1",citeexpr(pe),
					//	"@2",dumpObject(pfowner),
					//	"@3",dumpObject(pobj_local_owner)]))
					if tid_var==g_vtid_CTVAL:
						//it's OK to call returned constant functions... as long as it's not lambdaed, we assume so
						return 1
					errorAtExpr(ETYPE_ERROR,pe,"in '@3', one cannot access '@1' from non-parent function '@2'".Replace([
						"@1",citeexpr(pe),
						"@2",dumpObject(pfowner),
						"@3",dumpObject(pobj_local_owner)]))
					writePool(pe,EFLAG_STRING+g_empty_id)
					writePool(lambda_stack[0]+FUNCTION_OFS_FLAGS,readPool(lambda_stack[0]+FUNCTION_OFS_FLAGS)&~(FFLAG_LAMBDA_NEEDS_PARENT_POINTER|FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG))
					return 0
				if their_level>0:
					//only flag things if it's not the global scope
					setFFlag(pobj_local_owner,FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)
					for j=lambda_stack.n-2:-1:0
						setFFlag(lambda_stack[j],FFLAG_LAMBDA_NEEDS_CONTEXT)
						if j==their_level:
							break
						setFFlag(lambda_stack[j],FFLAG_LAMBDA_NEEDS_PARENT_POINTER|FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)
				else
					//if it's the global... it's simple
					setFFlag(lambda_stack[0],FFLAG_LAMBDA_NEEDS_CONTEXT)
				d_levels=int(lambda_stack.n-1-their_level)
				if tid_var==g_vtid_CTVAL:
					//Writeln('::: ',dumpFunction(pobj_local_owner),' ',dumpFunction(pfowner),' ',d_levels,' ',their_level,' ',dumpExpr(pe,__zero(fcolorer_callback)))
					return 1
				//Writeln('scanned lambda: ',d_levels)
				pecontext=call(g_id_get_lambda_context,expriptr(their_level==0?0x80000000:d_levels))
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if readPool(pobj_var+VAR_OFS_ID)==g_id_this:
					//eliminate lambda references of 'this'
					setUserFlag(pecontext,QUEUE_FLAG_REACH)
					writePool(pecontext+EXPR_OFS_VALUE+0,readPool(pobj_var+0))
					writePool(pecontext+EXPR_OFS_VALUE+1,readPool(pobj_var+1))
					sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return pecontext}))
				else if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
					//g_id_stlambda
					if getFFlag(pfowner)&FFLAG_IS_PARALLEL:
						errorAtExpr(ETYPE_ERROR,pecaller,"parallel function '@1' must not write external variable '@2'".Replace(["@1",dumpFunction(pfowner),"@2",citeexpr(pe)]))
					pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
					faddstlambda=function(PExpression pestore){
						return call(g_id_stlambda, pecontext, exprctval(pobj_var), readPool(pestore+EXPR_OFS_ARGS+1))
					}
					sccpQueueReach(insertCallAt(pecaller_caller,pecaller,faddstlambda))
				else
					//g_id_ldlambda
					faddldlambda=function(PExpression pe){
						pe_ldlambda_var=call(g_id_ldlambda, pecontext, exprctval(pobj_var))
						writePool(pe_ldlambda_var+EXPR_OFS_VALUE+0,readPool(pobj_var+0))
						writePool(pe_ldlambda_var+EXPR_OFS_VALUE+1,readPool(pobj_var+1))
						return pe_ldlambda_var
					}
					sccpQueueReach(insertCallAt(pecaller,pe,faddldlambda))
				return 0
		return 1
	}
	dfsExpr(g_pe_top,fscan_for_lambdas)
	///////////////////
	//propagate parent-pointer-needed-ness to callers
	fillNestDepths()
	auto dfsFillParentPointer(PCTObject pobjfn)
		pinv=readPool(pobjfn+FUNCTION_OFS_PINV_CALL_GRAPH_EDGES)
		ninv=readPool(pobjfn+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES)
		my_depth=readPool(pobjfn+FUNCTION_OFS_NEST_DEPTH)
		for i=0:ninv-1
			raw_data=readPool(pinv+i)
			pobjfn_caller=raw_data>>1
			//method calls shouldn't count
			if raw_data&1:continue
			if (!(getFFlag(pobjfn_caller)&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)&&
			readPool(pobjfn_caller+FUNCTION_OFS_NEST_DEPTH)>=my_depth):
				setFFlag(pobjfn_caller,FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG)
				dfsFillParentPointer(pobjfn_caller)
	foreach pobjfn in g_all_functions
		if getFFlag(pobjfn)&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG:
			//Writeln('^_^ ',dumpObject(pobjfn))
			dfsFillParentPointer(pobjfn)
	///////////////////
	//remove the false dots
	fremove_false_dots=function(PExpression pe){
		if isExpr(pe,EFLAG_FCALL):
			pobjfn=getExprFunction(pe)
			if pobjfn&&!(getFFlag(pobjfn)&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG):
				pe_func=readPool(pe+EXPR_OFS_FUNCTION)
				if isBuiltin(pe_func,g_id_dot)||isBuiltin(pe_func,g_id_ldlambda)
					//remove the false dot
					sccpQueueReach(insertCallAt(pe,0,function(PExpression pe){return exprctval(pobjfn)}))
		return 1
	}
	dfsExpr(g_pe_top,fremove_false_dots)
	//Writeln('--- 2')
	///////////////////
	//list the needed lambdas for each function
	fscan_for_lambda_members=function(PExpression pe){
		//if !testUserFlag(pe,QUEUE_FLAG_REACH):
		//	return 0
		if isBuiltin(pe,g_id_ldlambda)||isBuiltin(pe,g_id_stlambda):
			//avoid the const-valued stuff
			val_pe=getExprValue(pe)
			if !(val_pe.tid==g_vtid_CTVAL||val_pe.tid==g_vtid_CNS||val_pe.tid==g_vtid_STR):
				pobj_var=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
				vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
				if !(vflags&VAR_FLAG_LAMBDAED):
					writePool(pobj_var+VAR_OFS_USER_FLAGS,vflags|VAR_FLAG_LAMBDAED)
					//if getVariableType(pobj_var)==4967736:
					//	Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
					//assert(getVariableType(pobj_var)!=4967736)
					g_all_lambdas.push(pobj_var)
		return 1
	}
	dfsExpr(g_pe_top,fscan_for_lambda_members)
	//force function type members to be lambdaed
	foreach pobjfn in g_all_functions
		if tisfunction(pobjfn):
			enableNameLookup(pobjfn)
			p_members=readPool(pobjfn+FUNCTION_OFS_PMEMBER_LIST)
			n_members=readPool(pobjfn+FUNCTION_OFS_NMEMBER_LIST)
			for i=0:n_members-1
				id_member=readPool(p_members+i)
				if id_member==g_id_this||id_member==g_id_return||id_member==g_id_ftype_raw||id_member==g_id_Bind:continue
				pobj_var=lookupFunctionVariable(pobjfn,id_member)
				vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
				if !(vflags&VAR_FLAG_LAMBDAED):
					writePool(pobj_var+VAR_OFS_USER_FLAGS,vflags|VAR_FLAG_LAMBDAED)
					g_all_lambdas.push(pobj_var)
	//replace the local accesses of lambdaed vars
	//store_flagged_vars=new PCTObject[]
	//Writeln('--- 3')
	auto dfs_replace_lambdaed(PExpression pe,PCTObject pf_owner,int in_class)
		if isExpr(pe,EFLAG_VARIABLE):
			pobj_var=getVariable(pe)
			if testUserFlag(pobj_var,VAR_FLAG_LAMBDAED)&&readPool(pobj_var)!=g_vtid_CNS:
				//get their context and mark all outer levels as "outer-lambda-needed"
				pecontext=call(g_id_get_lambda_context,expriptr(0))
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if isBuiltin(pecaller,g_id_store)&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
					auto pe_value=readPool(pecaller+EXPR_OFS_ARGS+1)
					if in_class:
						//if !testUserFlag(pobj_var,VAR_USER_FLAG_STORED):
						//	setUserFlag(pobj_var,VAR_USER_FLAG_STORED)
						//	store_flagged_vars.push(pobj_var)
						if readPool(pobj_var+VAR_OFS_DEFINING_STORE)==pecaller:
							val_value=getExprValue(pe_value)
							if isValueZero(val_value)||isBuiltin(pe_value,g_id_uninit):
								//another empty struct ctor case -- deadelim handled it?
								//first zero assignment, remove it
								if DEBUG_DUMP_LAMBDA:
									Writeln('first zero nop: ',dumpExpr(pecaller,__zero(fcolorer_callback)))
								setnop(pecaller)
								return
					if isBuiltin(pe_value,g_id_ldparam):
						//need an intermediate variable so that rc gets handled properly
						pv_temp=makevar(pf_owner)
						pe_store_temp=call(g_id_store,exprvar(pv_temp),pe_value)
						writePool(pv_temp+0,readPool(pobj_var+0))
						writePool(pv_temp+1,readPool(pobj_var+1))
						setUserFlag(pv_temp,VAR_FLAG_PARAM)
						writePool(pv_temp+VAR_OFS_DEFINING_STORE,pe_store_temp)
						transformCode(pecaller,__zero(ftransformer_callback), [pe_store_temp],call(g_id_stlambda, pecontext, exprctval(pobj_var), exprvar(pv_temp)),PExpression[].NULL)
					else
						faddstlambda=function(PExpression pestore){
							return call(g_id_stlambda, pecontext, exprctval(pobj_var), pe_value)
						}
						pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
						pe_replacement=sccpQueueReach(insertCallAt(pecaller_caller,pecaller,faddstlambda))
						//if testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED|VAR_FLAG_ARRAY_STACK_ALLOCED):
						//	transformCode(pe_replacement,__zero(ftransformer_callback),
						//		[call(g_id_stack_force_slot,exprctval(pobj_var))],0,PExpression[].NULL)
				else
					//g_id_ldlambda
					faddldlambda=function(PExpression pe){
						pe_ldlambda_var=call(g_id_ldlambda, pecontext, exprctval(pobj_var))
						writePool(pe_ldlambda_var+EXPR_OFS_VALUE+0,readPool(pobj_var+0))
						writePool(pe_ldlambda_var+EXPR_OFS_VALUE+1,readPool(pobj_var+1))
						return pe_ldlambda_var
					}
					sccpQueueReach(insertCallAt(pecaller,pe,faddldlambda))
				return
		else if isExpr(pe,EFLAG_FCALL):
			pf_owner_recurse=pf_owner
			in_class_recurse=in_class
			//class_cleanup_to=-1
			if isBuiltin(pe,g_id_function):
				pf_owner_recurse=getExprValueAs(pe,g_vtid_CTVAL)
				in_class_recurse=isFunctionClassOrStruct(pf_owner_recurse)//(getCcnv(pf_owner_recurse)==CCNV_CLASS)
				//if in_class_recurse:
				//	class_cleanup_to=store_flagged_vars.n
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				dfs_replace_lambdaed(readPool(pe+EXPR_OFS_ARGS+i),pf_owner_recurse,in_class_recurse)
			//if class_cleanup_to>=0:
			//	for j=class_cleanup_to:store_flagged_vars.n-1
			//		pobj_var=store_flagged_vars[j]
			//		writePool(pobj_var+VAR_OFS_USER_FLAGS,readPool(pobj_var+VAR_OFS_USER_FLAGS)&~VAR_USER_FLAG_STORED)
			//	store_flagged_vars.resize(class_cleanup_to)
	dfs_replace_lambdaed(g_pe_top,0,0)
	if DEBUG_DUMP_LAMBDA:
		Writeln('>>> after dfs_replace_lambdaed')
		Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
	//Writeln('--- 4')
	//generate the context classes
	szptr=Util.bitSize()>>3
	inline sort_sizeof(PCTObject t)
		if tisbuiltin(t):
			ct=readPool(t+1)
			return ((ct&~CTYPE_MASK)+1)
		else if tisstruct(t):
			//hack - put structs first
			return 16
		return szptr
	fmember_compare=function(PCTObject va,PCTObject vb){
		auto pf_owner_a=readPool(va+VAR_OFS_OWNER)
		auto pf_owner_b=readPool(vb+VAR_OFS_OWNER)
		if pf_owner_a<pf_owner_b:return 1
		if pf_owner_a==pf_owner_b:
			auto sza=sort_sizeof(getVariableType(va))
			auto szb=sort_sizeof(getVariableType(vb))
			if sza<szb:return 1
			if sza==szb:return va<vb
		return 0
	}
	g_all_lambdas.Sort(fmember_compare)
	p0=int(g_ctobject_pool.n)
	g_ctobject_pool.push(g_all_lambdas)
	pfowner_cur=-1
	plast=0
	foreach pobj_var,I in g_all_lambdas
		pfowner=readPool(pobj_var+VAR_OFS_OWNER)
		if pfowner!=pfowner_cur:
			if pfowner_cur>=0:
				writePool(pfowner_cur+FUNCTION_OFS_NLAMBDA_VARS,int(I-plast))
				writePool(pfowner_cur+FUNCTION_OFS_PLAMBDA_VARS,p0+plast)
			pfowner_cur=pfowner
			plast=int(I)
	if pfowner_cur>=0:
		writePool(pfowner_cur+FUNCTION_OFS_NLAMBDA_VARS,int(g_all_lambdas.n-plast))
		writePool(pfowner_cur+FUNCTION_OFS_PLAMBDA_VARS,p0+plast)
	//translate struct returns / extra returns
	queue_dfsTranslateStruct=new int3[]
	setnop_jobs=new PExpression[]
	auto dfsTranslateStruct(PExpression pe,PCTObject pf_owner)
		if !isExpr(pe,EFLAG_FCALL):return
		//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
		//Writeln(dumpExpr(pe,fcolor_abbrv_blocks))
		pf_owner_recurse=pf_owner
		pe_recurse_into=pe
		if isBuiltin(pe,g_id_function):
			pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
			pf_owner_recurse=pobjfn
			t_return=getReturnType(pobjfn)
			if tisstruct(t_return):
				//add a last param
				n_args=getExprNArgs(pe)
				as=new PExpression[n_args+3]
				for i=-1:n_args-2
					as[i+1]=readPool(pe+EXPR_OFS_ARGS+i)
				as[n_args+0]=exprctval(t_return)
				as[n_args+1]=exprstr(g_id_return)
				as[n_args+2]=readPool(pe+EXPR_OFS_ARGS+n_args-1)
				pe_new=indcall(as)
				writePool(pe_new+EXPR_OFS_VALUE,readPool(pe+EXPR_OFS_VALUE))
				writePool(pe_new+EXPR_OFS_VALUE+1,readPool(pe+EXPR_OFS_VALUE+1))
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				//Writeln(dumpExpr(pecaller,fcolor_abbrv_blocks))
				//Writeln(dumpExpr(pe,fcolor_abbrv_blocks))
				//Writeln(dumpExpr(pe_new,fcolor_abbrv_blocks))
				sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return pe_new}))
				writePool(pobjfn+FUNCTION_OFS_PEDECL,pe_new)
				//pe_recurse_into=pe_new
				n_funcargs_old=(n_args-2)>>1
				//add a parameter slot
				p_param_values=readPool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
				p_param_values_new=int(g_ctobject_pool.n)
				g_ctobject_pool.resize(p_param_values_new+(n_funcargs_old+1)*3)
				for i=0:n_funcargs_old*3-1
					writePool(p_param_values_new+i,readPool(p_param_values+i))
				writePool(p_param_values_new+n_funcargs_old*3+0,g_vtid_RTVAR)
				writePool(p_param_values_new+n_funcargs_old*3+1,t_return)
				writePool(p_param_values_new+n_funcargs_old*3+2,0)
				writePool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS,p_param_values_new)
				//add the ldparam
				pe_recurse_into=pe_new
				if getCcnv(pobjfn)==g_id_struct:
					//in a struct ctor, translate the getlambdactx in the recursion
					//merely remove the return variable here
					//writePool(pobjfn+FUNCTION_OFS_PVAR_RETURN,0)
					writePool(pobjfn+FUNCTION_OFS_TEMP_SLOT,0)
				else
					//in other struct returners, add a *defining* return=ldparam
					pe_ldparam=call(g_id_ldparam,expriptr(n_funcargs_old),exprctval(t_return),exprstr(g_id_return))
					pvar_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
					pe_store_ldparam=call(g_id_store,exprvar(pvar_return),pe_ldparam)
					writePool(pvar_return+VAR_OFS_DEFINING_STORE,pe_store_ldparam)
					pe_code_new=sccpQueueReach(insertCallAt(pe_new,~(n_args+1),function(PExpression pe_code){
						return call(g_id_block,
							pe_store_ldparam,
							pe_code);
					}))
					writePool(pobjfn+FUNCTION_OFS_CODE,pe_code_new)
					writePool(p_param_values_new+n_funcargs_old*3+2,pe_ldparam)
		else if isBuiltin(pe,g_id_get_lambda_context)&&getCcnv(pf_owner)==g_id_struct:
			//in a struct ctor, translate the getlambdactx into ldparam if it's a this-assignment
			//translate it into the this variable for later calls
			pobjfn=pf_owner
			pecaller=readPool(pe+EXPR_OFS_CALLER)
			pv_this=readPool(pobjfn+FUNCTION_OFS_TEMP_SLOT)
			if !pv_this:
				pe_decl=readPool(pobjfn+FUNCTION_OFS_PEDECL)
				n_args_decl=(readPool(pe_decl)&~EFLAG_MASK)
				n_funcargs_new=(n_args_decl-2)>>1
				t_return=getReturnType(pobjfn)
				//if !t_return:
				//	Writeln(dumpFunction(pobjfn),' ',testUserFlag(pe_decl,QUEUE_FLAG_REACH))
				//	Writeln(dumpExpr(pe_decl,__zero(fcolorer_callback)))
				//	Writeln('-------------------')
				//	Writeln(dumpExpr(g_pe_top,__zero(fcolorer_callback)))
				pe_ldparam=call(g_id_ldparam,expriptr(n_funcargs_new-1),exprctval(t_return),exprstr(g_id_return))
				assert(isBuiltin(pecaller,g_id_store))
				if isBuiltin(pecaller,g_id_store):
					pv_this=getVariable(readPool(pecaller+EXPR_OFS_ARGS+0))
					writePool(pobjfn+FUNCTION_OFS_TEMP_SLOT,pv_this)
				p_param_values_new=readPool(pobjfn+FUNCTION_OFS_PPARAM_VALUE_SLOTS)
				writePool(p_param_values_new+(n_funcargs_new-1)*3+2,pe_ldparam)
			else
				pe_ldparam=exprvar(pv_this)
			sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return pe_ldparam}))
			//we don't have to recurse any more
			return
		else
			t_return=0
			pecallee=readPool(pe+EXPR_OFS_FUNCTION+0)
			pobjfn=getExprFunction(pe)
			if pobjfn:
				if !(getFFlag(pobjfn)&FFLAG_BUILTIN):
					t_return=getReturnType(pobjfn)
			else
				tcallee=getExprType(pecallee)
				if tcallee&&tisfunction(tcallee):
					tcallee=getRawFunctionType(tcallee)
					ft=readPoolTyped(tcallee,TFunctionType)
					t_return=ft.t_ret
			if tisstruct(t_return):
				//for normal fcalls, translate a=f(b) into f(a,b)
				//in the replace_caller cases, pe can't be any other child
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				//Write('>>> ',isExpr(pecaller,g_id_stlambda)&&pe==readPool(pecaller+EXPR_OFS_ARGS+2),' ');Writeln(dumpExpr(pecaller,fcolor_abbrv_blocks))
				replace_caller=0
				if isBuiltin(pecaller,g_id_store)||isBuiltin(pecaller,g_id_struct_copy):
					//directly pass in the target and remove the store
					pe_target=readPool(pecaller+EXPR_OFS_ARGS+0)
					assert(pe_target!=pe)
					replace_caller=1
					pv_tar=getVariable(pe_target)
					if readPool(pv_tar+VAR_OFS_ID)!=g_id_return:
						//the store is destroyed, force allocate it
						if DEBUG_DUMP_STACKALLOC:
							Writeln('VAR_FLAG_STRUCT_SLOT_ALLOCATED ',dumpObject(pv_tar))
						setUserFlag(pv_tar,VAR_FLAG_STRUCT_SLOT_ALLOCATED)
				else if isBuiltin(pecaller,g_id_stlambda)&&pe==readPool(pecaller+EXPR_OFS_ARGS+2):
					//pass in the target as ldlambda
					pe_this=readPool(pecaller+EXPR_OFS_ARGS+0)
					pe_member_name=readPool(pecaller+EXPR_OFS_ARGS+1)
					pe_target=call(g_id_ldlambda,pe_this,pe_member_name)
					replace_caller=1
				else
					//temp it
					pv_temp=makevar(pf_owner)
					writePool(pv_temp,g_vtid_RTVAR)
					writePool(pv_temp+1,t_return)
					pe_target=exprvar(pv_temp)
				//add the target, but keep pe_recurse_into: we don't want to recurse into the "target"
				n_args=getExprNArgs(pe)
				as=new PExpression[n_args+2]
				for i=-1:n_args-1
					as[i+1]=readPool(pe+EXPR_OFS_ARGS+i)
				as[n_args+1]=pe_target
				pe_new=indcall(as)
				writePool(pe_new+EXPR_OFS_VALUE,readPool(pe+EXPR_OFS_VALUE))
				writePool(pe_new+EXPR_OFS_VALUE+1,readPool(pe+EXPR_OFS_VALUE+1))
				//Writeln('SHIT! ',dumpExpr(pe_new,__zero(fcolorer_callback)),' ',pobjfn?string(tisstruct(pobjfn))+" "+string(tisstruct(pobjfn)&&isCtorEmpty(pobjfn)):"")
				if pobjfn&&tisstruct(pobjfn):
					if isCtorEmpty(pobjfn,1):
						//remove empty ctors
						//Writeln('ctor removed ',dumpExpr(pe_new,__zero(fcolorer_callback)))
						setnop_jobs.push(pe_new)
					if replace_caller:
						//if we replace the caller with a ctor call, we need to zero it as well
						//150423: we also need to zero out the class members
						pe_target_zeroing=cloneExpr(pe_target)
						str_member_list=new PCTObject[]
						as_rezero=new PExpression[]
						auto implementRezero(PCTObject t)
							p_members=readPool(t+FUNCTION_OFS_PLAMBDA_VARS)
							n_members=readPool(t+FUNCTION_OFS_NLAMBDA_VARS)
							for i=0:n_members-1
								pv_member=readPool(p_members+i)
								if readPool(pv_member)!=g_vtid_RTVAR:continue
								t_member=readPool(pv_member+1)
								if tisstruct(t_member):
									str_member_list.push(pv_member)
									implementRezero(t_member)
									str_member_list.pop()
								else if tisrealclass(t_member):
									pe_tar=cloneExpr(pe_target)
									foreach pv_str_member in str_member_list
										pe_tar=call(g_id_ldlambda,pe_tar,exprctval(pv_str_member))
									as_rezero.push(call(g_id_stlambda,pe_tar,exprctval(pv_member),exprcns(getid_const(CTYPE_TYPED_NULL,i64(t_member)))))
						implementRezero(pobjfn)
						as_rezero.push(call(g_id_C_rezero_struct_slot,pe_target_zeroing,exprctval(pobjfn)))
						as_rezero.push(pe_new)
						pe_new=vcall(g_id_block,as_rezero)
				//else
				//	Writeln('ctor kept ',dumpExpr(pe_new,__zero(fcolorer_callback)))
				//Write('>>> ');Writeln(dumpExpr(pe_new,fcolor_abbrv_blocks))
				if replace_caller:
					//pecaller_caller=readPool(pecaller+EXPR_OFS_CALLER)
					//sccpQueueReach(insertCallAt(pecaller_caller,pecaller,function(PExpression pe){return pe_new}))
					//setnop(pecaller)
					replaceExpr(pecaller,pe_new)
				else
					//'return' the temp var
					transformCode(pe,__zero(ftransformer_callback), [pe_new],exprvar(pv_temp),PExpression[].NULL)
					//sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return call(g_id_block,pe_new,exprvar(pv_temp))}))
		//recurse
		n_args=getExprNArgs(pe_recurse_into)
		queue_dfsTranslateStruct.push(int3(pe_recurse_into+EXPR_OFS_FUNCTION,n_args+1,pf_owner_recurse))
		//for i=-1:n_args-1
		//	dfsTranslateStruct(readPool(pe_recurse_into+EXPR_OFS_ARGS+i),pf_owner_recurse)
	dfsTranslateStruct(g_pe_top,0)
	while queue_dfsTranslateStruct.n:
		qitem=queue_dfsTranslateStruct.pop()
		auto pe=readPool(qitem.x)
		auto pf_owner=qitem.z
		qitem.x++
		qitem.y--
		if qitem.y:
			queue_dfsTranslateStruct.push(qitem)
		dfsTranslateStruct(pe,pf_owner)
	//Writeln('>>>>>>>>>>>>>> dfsTranslateStruct')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	//System.IO.stdin.ReadLine()
	//copy-prop: only-one-ass + last-use pass ancestor-merge
	//compute live ranges first
	//Writeln('--- 5')
	struct TStructSlot
		int depth
		int birthid
	str_slots=new TStructSlot[]
	auto dfsAllocSlots(PExpression pe,int depth)
		slotid=int(str_slots.n)
		str_slots.push(TStructSlot(){'depth':depth})
		writePool(pe+EXPR_OFS_USER_FLAGS,slotid|(readPool(pe+EXPR_OFS_USER_FLAGS)&~USER_FLAG_MASK))
		flags=readPool(pe)
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
			nargs=(flags&~EFLAG_MASK)
			for i=nargs-1:-1:-1
				dfsAllocSlots(readPool(pe+EXPR_OFS_ARGS+i),depth+1)
			//it's (approximately) the id of the function
			birthid=int(str_slots.n)-1
			assert(birthid>slotid)
			str_slots[slotid].birthid=birthid
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			//clear the user flag of this variable for the subsequent var slot allocation
			pobj=getVariable(pe)
			if pobj:
				writePool(pobj+VAR_OFS_USER_FLAGS,readPool(pobj+VAR_OFS_USER_FLAGS)&~VAR_USER_FLAG_MASK)
	dfsAllocSlots(g_pe_top,0)
	//Writeln('--- 50')
	struct TStructVarSlot
		PCTObject pobj_var
		PCTObject pobj_var_rename_to
		PExpression pe_non_loop_birth
		PExpression pe_non_loop_death
		PExpression pe_birth_before
		PExpression pe_death_after
		int store_count
		////////////////
		int alloced_slot
	str_var_slots=new TStructVarSlot[]
	fgetdepth=function(int slotid){return str_slots[slotid].depth}
	fgetbirthid=function(int slotid){return str_slots[slotid].birthid}
	//Writeln('>>> dfsLiveRange')
	//Writeln(dumpCode(g_pe_top,fcolor_reach_eval))
	auto dfsLiveRange(PExpression pe,PExpression pe_loop)
		auto flags=readPool(pe)
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
			pe_loop_recurse=pe_loop
			if !pe_loop_recurse&&isBuiltin(pe,g_id_blockex):
				if getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_STR)==g_id_for:
					pe_loop_recurse=pe
			else if isBuiltin(pe,g_id_function):
				pe_loop_recurse=0
			nargs=(flags&~EFLAG_MASK)
			for i=-1:nargs-1
				dfsLiveRange(readPool(pe+EXPR_OFS_ARGS+i),pe_loop_recurse)
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			pobj_var=getVariable(pe)
			if pobj_var&&readPool(pobj_var)==g_vtid_RTVAR&&tisstruct(readPool(pobj_var+1)):
				vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
				//merge to live range
				if !(vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED)
					vflags|=VAR_USER_FLAG_RC_SLOT_ALLOCATED+int(str_var_slots.n)
					str_var_slots.push(TStructVarSlot(){'pobj_var':pobj_var,'pobj_var_rename_to':pobj_var})
					writePool(pobj_var+VAR_OFS_USER_FLAGS,vflags)
				vslotid=(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				if (isBuiltin(pecaller,g_id_store)||isBuiltin(pecaller,g_id_struct_copy))&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe:
					str_var_slots[vslotid].store_count++
				pe_to_merge=pe_loop?pe_loop:pecaller
				//Writeln('merge birth ',dumpObject(str_var_slots[vslotid].pobj_var),' ',pecaller)
				str_var_slots[vslotid].pe_non_loop_birth=ancestorMerge(0,str_var_slots[vslotid].pe_non_loop_birth,pe_to_merge,fgetdepth,fgetbirthid).x
				str_var_slots[vslotid].pe_non_loop_death=ancestorMerge(1,str_var_slots[vslotid].pe_non_loop_death,pe_to_merge,fgetdepth,__zero(famcallback)).x
				str_var_slots[vslotid].pe_birth_before=ancestorMerge(0,str_var_slots[vslotid].pe_birth_before,pecaller,fgetdepth,fgetbirthid).x
				str_var_slots[vslotid].pe_death_after=ancestorMerge(1,str_var_slots[vslotid].pe_death_after,pecaller,fgetdepth,__zero(famcallback)).x
	dfsLiveRange(g_pe_top,0)
	//Writeln('--- 51')
	//actually do the copy-prop
	did=0
	foreach vslot,I in str_var_slots
		if vslot.store_count==1&&vslot.pe_birth_before:
			//the only store that writes it
			//str_var_slots[vslotid_src].pe_death_after,' ',vslot.pe_birth_before,' ',
			//Writeln('strcopyprop ',dumpObject(vslot.pobj_var),' ',dumpExpr(vslot.pe_birth_before,__zero(fcolorer_callback)))
			if isBuiltin(vslot.pe_birth_before,g_id_store)&&getVariable(readPool(vslot.pe_birth_before+EXPR_OFS_ARGS))==vslot.pobj_var:
				pe_value=readPool(vslot.pe_birth_before+EXPR_OFS_ARGS+1)
				if isExpr(pe_value,EFLAG_VARIABLE):
					pv_src=getVariable(pe_value)
					vflags_src=readPool(pv_src+VAR_OFS_USER_FLAGS)
					if vflags_src&VAR_USER_FLAG_RC_SLOT_ALLOCATED:
						vslotid_src=(vflags_src&VAR_USER_FLAG_RC_SLOTID_MASK)
						if str_var_slots[vslotid_src].pe_death_after==vslot.pe_birth_before:
							//pe_src_birth=str_var_slots[vslotid_src].pe_birth_before
							//hack the non-propagatables
							n_ok_stores=0
							n_cast_stores=0
							for(pestore=readPool(str_var_slots[vslotid_src].pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
								if isBuiltin(pestore,g_id_store)&&isBuiltin(readPool(pestore+EXPR_OFS_ARGS+1),g_id_cast):
									n_cast_stores++
									continue
								n_ok_stores++
							if n_cast_stores==1&&!n_ok_stores:continue
							//death -> birth, do copyprop... replace all occurances using a dset
							str_var_slots[I].pobj_var_rename_to=pv_src
							str_var_slots[vslotid_src].pe_non_loop_birth=ancestorMerge(0,str_var_slots[vslotid_src].pe_non_loop_birth,str_var_slots[I].pe_non_loop_birth,fgetdepth,fgetbirthid).x
							str_var_slots[vslotid_src].pe_non_loop_death=ancestorMerge(1,str_var_slots[vslotid_src].pe_non_loop_death,str_var_slots[I].pe_non_loop_death,fgetdepth,__zero(famcallback)).x
							str_var_slots[vslotid_src].pe_birth_before=ancestorMerge(0,str_var_slots[vslotid_src].pe_birth_before,str_var_slots[I].pe_birth_before,fgetdepth,fgetbirthid).x
							str_var_slots[vslotid_src].pe_death_after=ancestorMerge(1,str_var_slots[vslotid_src].pe_death_after,str_var_slots[I].pe_death_after,fgetdepth,__zero(famcallback)).x
							did=1
	//Writeln('--- 52')
	if did:
		auto copyPropCollapse(PCTObject pobj_var)
			auto slotid=readPool(pobj_var+VAR_OFS_USER_FLAGS)&VAR_USER_FLAG_RC_SLOTID_MASK
			pv_dad=str_var_slots[slotid].pobj_var_rename_to
			if pobj_var==pv_dad:return pobj_var
			pv_root=copyPropCollapse(pv_dad)
			str_var_slots[slotid].pobj_var_rename_to=pv_root
			return pv_root
		foreach vslot,I in str_var_slots
			copyPropCollapse(vslot.pobj_var)
		auto dfsCopyProp(PExpression pe)
			auto flags=readPool(pe)
			if (flags&EFLAG_MASK)==EFLAG_FCALL:
				//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
				nargs=(flags&~EFLAG_MASK)
				for i=-1:nargs-1
					dfsCopyProp(readPool(pe+EXPR_OFS_ARGS+i))
				//remove the newly created (and pre-existing) self-stores
				if isBuiltin(pe,g_id_store)||isBuiltin(pe,g_id_struct_copy):
					pe_var=readPool(pe+EXPR_OFS_ARGS+0)
					pe_value=readPool(pe+EXPR_OFS_ARGS+1)
					if isExpr(pe_var,EFLAG_VARIABLE)&&isExpr(pe_value,EFLAG_VARIABLE)&&getVariable(pe_var)==getVariable(pe_value):
						setnop(pe)
				else if isBuiltin(pe,g_id_function):
					//need to rename return too
					pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
					pv_return=readPool(pobjfn+FUNCTION_OFS_PVAR_RETURN)
					vflags=readPool(pv_return+VAR_OFS_USER_FLAGS)
					if vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED:
						vslotid=(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
						pv_rename_to=str_var_slots[vslotid].pobj_var_rename_to
						if pv_rename_to!=pv_return:
							writePool(pobjfn+FUNCTION_OFS_PVAR_RETURN,pv_rename_to)
			else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
				pobj_var=getVariable(pe)
				if pobj_var&&readPool(pobj_var)==g_vtid_RTVAR&&tisstruct(readPool(pobj_var+1)):
					//rename to the root variable
					vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
					if vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED:
						vslotid=(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
						pv_rename_to=str_var_slots[vslotid].pobj_var_rename_to
						if pv_rename_to!=pobj_var:
							writePool(pe,EFLAG_VARIABLE+pv_rename_to)
		dfsCopyProp(g_pe_top)
	//Writeln('--- 53')
	//coulddo: a more detailed live range
	//add allocations - need a birth point: pe_non_loop_birth
	str_member_list=new PCTObject[]
	auto implementDestructor(PExpression[] as,PCTObject pv_src,PCTObject t)
		//Writeln('---- ',as.n,' ',dumpType(t))
		p_members=readPool(t+FUNCTION_OFS_PLAMBDA_VARS)
		n_members=readPool(t+FUNCTION_OFS_NLAMBDA_VARS)
		for i=0:n_members-1
			pv_member=readPool(p_members+i)
			if readPool(pv_member)!=g_vtid_RTVAR:continue
			t_member=readPool(pv_member+1)
			if tisstruct(t_member):
				str_member_list.push(pv_member)
				implementDestructor(as,pv_src,t_member)
				str_member_list.pop()
			else if tisclass(t_member):
				pe_var=exprvar(pv_src)
				foreach pv_str_member in str_member_list
					pe_var=call(g_id_ldlambda,pe_var,exprctval(pv_str_member))
				as.push(call(g_id_stlambda,pe_var,exprctval(pv_member),exprcns(getid_const(CTYPE_TYPED_NULL,i64(t_member)))))
	REMODE_FREE=0
	REMODE_RETURN=1
	REMODE_ALLOC=2
	struct TReturnJob
		PExpression pe_insert_at
		PCTObject pobj_var
		//PCTObject t
		int mode
	auto processAllocJobs(PExpression pe,int[] vslotids_recurse,TReturnJob[] return_events)
		vslotids_recurse.Sort()
		vslotids_recurse.Unique()
		struct TAllocJob
			PCTObject pobj_var
			PCTObject t
			int is_free
			int vslotid
			PExpression pe_insert_at
		alloc_jobs=new TAllocJob[]
		foreach vslotid in vslotids_recurse
			//if it's copyproped, it can't have more than 1 stores anyway... but it may generate queuing issues?
			vslot=str_var_slots[vslotid]
			if vslot.pobj_var_rename_to!=vslot.pobj_var:continue
			id_var=readPool(vslot.pobj_var+VAR_OFS_ID)
			if id_var==g_id_return:
				//for returns, do the memcpy without allocing the slot
				if DEBUG_DUMP_STACKALLOC:
					Writeln('VAR_FLAG_STRUCT_SLOT_ALLOCATED ',dumpObject(vslot.pobj_var))
				setUserFlag(vslot.pobj_var,VAR_FLAG_STRUCT_SLOT_ALLOCATED)
				continue
			//check all stores, not just the defining one
			need_to_alloc=0
			n_stores=0
			for(pestore=readPool(vslot.pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
				if isBuiltin(pestore,g_id_store):
					pe_value=readPool(pestore+EXPR_OFS_ARGS+1)
				else
					continue
				n_stores++
				//ldparam test
				if isBuiltin(pe_value,g_id_ldparam):continue
				//array uses cast, don't alloc it
				if isBuiltin(pe_value,g_id_cast):continue
				//part-of-another, don't alloc it
				if isBuiltin(pe_value,g_id_ldlambda):
					if isTempId(id_var):
						continue
					//else
					//	Writeln('>>>>>>> ',dumpExpr(pestore,__zero(fcolorer_callback)))
				//NULL store, ignore
				if isExpr(pe_value,EFLAG_CONST):continue
				need_to_alloc=1
				break
			//not-even-assigned guys are just-generated temps, they must be alloced
			//if Platform.BUILD=="debug":
			//	allocate_otherwise=1
			//	pe_defining_store=readPool(vslot.pobj_var+VAR_OFS_DEFINING_STORE)
			//	if pe_defining_store&&isBuiltin(pe_defining_store,g_id_store):
			//		pe_birth_value=readPool(pe_defining_store+EXPR_OFS_ARGS+1)
			//		if isBuiltin(pe_birth_value,g_id_ldparam)||isBuiltin(pe_birth_value,g_id_cast)||isBuiltin(pe_birth_value,g_id_ldlambda):
			//			allocate_otherwise=0
			//	allocate_here=!(!need_to_alloc&&n_stores>0&&!testUserFlag(vslot.pobj_var,VAR_FLAG_FLATTENED_STRUCT_MEMBER))
			//	if allocate_otherwise!=allocate_here:
			//		Writeln(allocate_here?'NEWLY ALLOCED: ':'NOT ALLOCED: ',dumpExpr(pe_defining_store,__zero(fcolorer_callback)))
			//		for(pestore=readPool(vslot.pobj_var+VAR_OFS_STORE_QUEUE);pestore;pestore=readPool(pestore+EXPR_OFS_NEXT_V_USER))
			//			Writeln('  >>> ',dumpExpr(pestore,__zero(fcolorer_callback)))
			if !need_to_alloc&&n_stores>0&&!testUserFlag(vslot.pobj_var,VAR_FLAG_STRUCT_SLOT_ALLOCATED|VAR_FLAG_FLATTENED_STRUCT_MEMBER):continue
			if testUserFlag(vslot.pobj_var,VAR_FLAG_PARAM):continue//lambdaed struct param...
			//Writeln(">>alloc slot "+dumpObject(vslot.pobj_var)+" "+dumpExpr(pe_birth,fcolor_abbrv_blocks))
			pe_birth=vslot.pe_non_loop_birth
			pe_death=vslot.pe_non_loop_death
			t=getVariableType(vslot.pobj_var)
			alloc_jobs.push(TAllocJob(){'pobj_var':vslot.pobj_var,'vslotid':vslotid,"t":t,'is_free':0,'pe_insert_at':pe_birth})
			alloc_jobs.push(TAllocJob(){'pobj_var':vslot.pobj_var,'vslotid':vslotid,"t":t,'is_free':1,'pe_insert_at':pe_death})
			if DEBUG_DUMP_STACKALLOC:
				Writeln('VAR_FLAG_STRUCT_SLOT_ALLOCATED ',dumpObject(vslot.pobj_var))
			setUserFlag(vslot.pobj_var,VAR_FLAG_STRUCT_SLOT_ALLOCATED)
		inline getExprSlotid(PExpression pe)
			return (readPool(pe+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
		inline getEffectiveSlotid(TAllocJob aj0)
			auto pe=aj0.pe_insert_at
			auto slotid=getExprSlotid(pe)
			if !aj0.is_free:
				slotid=fgetbirthid(slotid)
				return slotid*2+1
			else
				return slotid*2
		alloc_jobs.Sort(inline(aj0,aj1){return getEffectiveSlotid(aj0)>getEffectiveSlotid(aj1)})
		if !alloc_jobs.n:return
		//generate the local struct/union hybrid
		struct TUnionSlot
			PCTObject[] types
		union_slots=new TUnionSlot[]
		free_slots=new int[]
		if DEBUG_DUMP_RC:
			if alloc_jobs.n:
				Writeln(FormatAsText('=== allocating structs for ',dumpFunction(getExprValueAs(pe,g_vtid_CTVAL)),' ',dumpExpr(pe,fcolor_abbrv_blocks)))
		foreach aj in alloc_jobs
			if DEBUG_DUMP_RC:
				Writeln(FormatAsText(aj.is_free?'free ':'alloc ',dumpType(aj.t),' ',dumpObject(str_var_slots[aj.vslotid].pobj_var),' to vslot-',aj.vslotid,' time=',getEffectiveSlotid(aj),' ',dumpExpr(aj.pe_insert_at,fcolor_abbrv_blocks)))
			if aj.is_free:
				free_slots.push(str_var_slots[aj.vslotid].alloced_slot)
			else
				if !free_slots.n:
					free_slots.push(int(union_slots.n))
					union_slots.push(TUnionSlot(){'types':new PCTObject[]})
				alloced_slot=int(free_slots.pop())
				str_var_slots[aj.vslotid].alloced_slot=alloced_slot
				union_slots[alloced_slot].types.push(aj.t)
		as=new PExpression[]
		as.push(exprstr(g_id_struct))
		foreach us in union_slots
			us.types.Sort()
			us.types.Unique()
			as2=new PExpression[]
			as2.push(exprstr(g_id_C_union))
			foreach t in us.types
				as2.push(exprctval(t))
			as.push(vcall(g_id_C_declare_struct_slots,as2))
		pe_declare=vcall(g_id_C_declare_struct_slots,as)
		///////////
		//actually insert the stuff
		pe_decl=pe
		pobjfn=getExprValueAs(pe_decl,g_vtid_CTVAL)
		n_args_decl=readPool(pe_decl)&~EFLAG_MASK
		pe_new_code=sccpQueueReach(insertCallAt(pe_decl,~(n_args_decl-1),function(PExpression pe_code){
			return call(g_id_block,pe_declare,pe_code);
		}))
		writePool(pobjfn+FUNCTION_OFS_CODE,pe_new_code)
		alloc_jobs.Sort(inline(aj0,aj1){return aj0.pe_insert_at<aj1.pe_insert_at})
		//generate the allocations
		pe_insert_at_current=PExpression(0)
		as=new PExpression[]
		auto flushSlotGetters()
			if !pe_insert_at_current||!as.n:return
			transformCode(pe_insert_at_current,__zero(ftransformer_callback),as,0,PExpression[].NULL)
			//pecaller=readPool(pe_insert_at_current+EXPR_OFS_CALLER)
			//sccpQueueReach(insertCallAt(pecaller,pe_insert_at_current,function(PExpression pe_original){as.push(pe_original);return vcall(g_id_block,as)}))
		foreach aj,I in alloc_jobs
			if !aj.is_free:
				if return_events.n:
					return_events.push(TReturnJob(){'pe_insert_at':aj.pe_insert_at,'pobj_var':aj.pobj_var,'mode':REMODE_ALLOC})
				if pe_insert_at_current!=aj.pe_insert_at:
					flushSlotGetters()
					pe_insert_at_current=aj.pe_insert_at
					as=new PExpression[]
				as.push(call(g_id_store,exprvar(aj.pobj_var),call(g_id_C_get_struct_slot,expriptr(str_var_slots[aj.vslotid].alloced_slot),exprctval(aj.t))))
		flushSlotGetters()
		//generate the destructions
		//pull out to the block level
		pe_insert_at_current=PExpression(0)
		//as=new PExpression[1]
		as=new PExpression[]
		auto flushStructDestructors()
			if !pe_insert_at_current||!as.n:return
			transformCode(pe_insert_at_current,__zero(ftransformer_callback),PExpression[].NULL,0,as)
			//pecaller=readPool(pe_insert_at_current+EXPR_OFS_CALLER)
			//sccpQueueReach(insertCallAt(pecaller,pe_insert_at_current,function(PExpression pe_original){as[0]=pe_original;return vcall(g_id_block,as)}))
		foreach aj,I in alloc_jobs
			if aj.is_free:
				pe_block_level_point=promoteToRealBlockLevel(aj.pe_insert_at)
				if return_events.n:
					return_events.push(TReturnJob(){'pe_insert_at':pe_block_level_point,'pobj_var':aj.pobj_var,'mode':REMODE_FREE})
				if pe_insert_at_current!=pe_block_level_point:
					flushStructDestructors()
					pe_insert_at_current=pe_block_level_point
					//as=new PExpression[1]
					as=new PExpression[]
				pv_src=aj.pobj_var
				implementDestructor(as,pv_src,aj.t)
		flushStructDestructors()
		//generate additional destructions at return events
		if return_events.n:
			//sort return events backwards
			return_events.Sortby(inline(re){
				auto slotid=getExprSlotid(re.pe_insert_at)
				if re.mode==REMODE_ALLOC:
					slotid=fgetbirthid(slotid)
				return slotid*4+re.mode
			})
			vs=new PCTObject[]
			foreach re in return_events 
				switch(re.mode){
				case REMODE_FREE:
					vs.push(re.pobj_var)
					break
				case REMODE_RETURN:
					auto as=new PExpression[]
					foreach pobj_var in vs
						t=getVariableType(pobj_var)
						implementDestructor(as,pobj_var,t)
					if as.n:
						pe_updated=transformCode(re.pe_insert_at,__zero(ftransformer_callback),as,0,PExpression[].NULL)
						if DEBUG_DUMP_RC:
							Writeln('dtor added before return: ',dumpExpr(pe_updated,__zero(fcolorer_callback)))
					as=PExpression[].NULL
					break
				case REMODE_ALLOC:
					pobj_var_tmp=0
					for j=vs.n-1:-1:0
						pv=vs[j]
						vs[j]=pobj_var_tmp
						pobj_var_tmp=pv
						if pobj_var_tmp==re.pobj_var:break
					assert(pobj_var_tmp==re.pobj_var)
					vs.pop()
					break
				}
	auto dfsRealAllocation(PExpression pe,int[] vslotids,TReturnJob[] return_events,int id_return_label)
		vslotids_recurse=vslotids
		return_events_recurse=return_events
		id_return_label_recurse=id_return_label
		auto flags=readPool(pe)
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
			is_function=0
			if isBuiltin(pe,g_id_function):
				is_function=1
				vslotids_recurse=new int[]
				return_events_recurse=new TReturnJob[]
				id_return_label_recurse=getReturnLabel(getExprValueAs(pe,g_vtid_CTVAL))
			else if isBuiltin(pe,g_id_blockex):
				id_word=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+0),g_vtid_STR)
				if id_word==id_return_label_recurse:
					//151023: if there is a 'return' in the middle of a function,
					//we need to run the struct dtor in case the 'return' happens
					//put in 'return' events and implementDestructor at them
					//should put in dtor for the free events they skip over
					//the lowest bit is the 'is-free' tag
					return_events.push(TReturnJob(){'pe_insert_at':pe,'mode':REMODE_RETURN})
			n_args=(flags&~EFLAG_MASK)
			for i=-1:n_args-1
				dfsRealAllocation(readPool(pe+EXPR_OFS_ARGS+i),vslotids_recurse,return_events_recurse,id_return_label_recurse)
			if is_function&&vslotids_recurse.n:
				processAllocJobs(pe,vslotids_recurse,return_events_recurse)
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			pobj_var=getVariable(pe)
			vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
			if vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED:
				vslotids.push(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
	//Writeln('--- 54')
	dfsRealAllocation(g_pe_top,int[].NULL,TReturnJob[].NULL,0)
	//generate the explicit destructions... detect copy from NULL
	//Writeln('--- 6')
	ftest_null_copy=function(PExpression pe){
		if isBuiltin(pe,g_id_store)||isBuiltin(pe,g_id_struct_copy):
			auto pe_tar=readPool(pe+EXPR_OFS_ARGS+0)
			auto pe_src=readPool(pe+EXPR_OFS_ARGS+1)
			if getExprValue(pe_src).tid==g_vtid_CNS:
				pv_tar=getVariable(pe_tar)
				if readPool(pv_tar)==g_vtid_RTVAR:
					t=readPool(pv_tar+1)
					if tisstruct(t):
						//struct NULL copy
						as=new PExpression[]
						implementDestructor(as,pv_tar,t)
						transformCode(pe,__zero(ftransformer_callback), as,exprstr(g_empty_id),PExpression[].NULL)
						return 0
			//return 1
		return 1
	}
	dfsExpr(g_pe_top,ftest_null_copy)
	clearUserFlags(g_pe_top,0)
	//Writeln('>>>>>>>>>>> after dfsRealAllocation')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	//System.IO.stdin.ReadLine()
	//translate struct copies
	auto dfsImplementStructCopies(PExpression pe,PCTObject pf_owner)
		auto flags=readPool(pe)
		pf_owner_recurse=pf_owner
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//if !testUserFlag(pe,QUEUE_FLAG_REACH)&&isBuiltin(pe,g_id_block):return
			if isBuiltin(pe,g_id_function):
				pf_owner_recurse=getExprValueAs(pe,g_vtid_CTVAL)
			pv_tar=0
			pe_value=0
			pe_this=0
			if isBuiltin(pe,g_id_store):
				pv_tar=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			else if isBuiltin(pe,g_id_stlambda):
				pv_tar=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
				pe_value=readPool(pe+EXPR_OFS_ARGS+2)
				pe_this=readPool(pe+EXPR_OFS_ARGS+0)
			else if isBuiltin(pe,g_id_struct_copy):
				pv_tar=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
				assert(!!pv_tar)
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			if pv_tar&&readPool(pv_tar)==g_vtid_RTVAR&&tisstruct(readPool(pv_tar+1)):
				//struct copy indeed, transform into an inlined clone
				//copy from NULL should have been handled earlier
				if(isBuiltin(pe_value,g_id_C_get_struct_slot)||
				isBuiltin(pe_value,g_id_ldparam)||
				!testUserFlag(pv_tar,VAR_FLAG_STRUCT_SLOT_ALLOCATED)&&isBuiltin(pe,g_id_store)):
					//for certain things like the allocation, we shouldn't and couldn't do a temp copy: the allocation pass should have ensured that
					return
				//if(isBuiltin(pe_value,g_id_ldparam)||
				//isBuiltin(pe_value,g_id_C_get_struct_slot)||
				//!testUserFlag(pv_tar,VAR_FLAG_FLATTENED_STRUCT_MEMBER)&&(
				//	isBuiltin(pe_value,g_id_ldlambda)&&isBuiltin(pe,g_id_store)||
				//	isBuiltin(pe_value,g_id_cast)&&isBuiltin(pe,g_id_store)&&readPool(pv_tar+VAR_OFS_DEFINING_STORE)==pe)
				//):return
				if Platform.BUILD=="debug":
					if getExprValue(pe_value).tid==g_vtid_CNS:
						Writeln("bad copy: "+dumpExpr(pe,fcolor_reach_eval))
				assert(getExprValue(pe_value).tid!=g_vtid_CNS)
				//ignore ldparam, ldlambda, defining __cast store, and our own allocation
				//Writeln("copy tran: "+dumpExpr(pe,fcolor_reach_eval))
				t=readPool(pv_tar+1)
				pv_src=rcGetVariableIfExprIsOne(pe_value)
				if !pv_src:
					//isBuiltin(pe,g_id_stlambda)
					//if Platform.BUILD=="debug":
					//	if !(isBuiltin(pe_value,g_id_cast)||isBuiltin(pe_value,g_id_ldlambda)&&isBuiltin(pe,g_id_stlambda)):
					//		Writeln('==== tree status')
					//		Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
					//		Writeln("copy tran error: "+dumpExpr(pe,fcolor_reach_eval))
					//assert(isBuiltin(pe_value,g_id_cast)||isBuiltin(pe_value,g_id_ldlambda)&&isBuiltin(pe,g_id_stlambda))
					pv_src=makevar(getOwningFunction(pe))
					writePool(pv_src+0,g_vtid_RTVAR)
					writePool(pv_src+1,t)
					sccpQueueReach(insertCallAt(pe,isBuiltin(pe,g_id_stlambda)?~2:~1,function(PExpression pe){return exprvar(pv_src)}))
					pe_store_src=call(g_id_store,exprvar(pv_src),pe_value)
					writePool(pv_src+VAR_OFS_DEFINING_STORE,pe_store_src)
					transformCode(pe,__zero(ftransformer_callback), [pe_store_src],0,PExpression[].NULL)
				if Platform.BUILD=="debug":
					if !pv_src:
						Writeln("error: "+dumpExpr(pe_value,fcolor_abbrv_blocks))
				assert(!!pv_src)
				as_memcpy=new PExpression[]
				if isBuiltin(pe_value,g_id_block):
					//flatten the store block
					//Writeln(dumpExpr(pe_value,fcolor_reach_eval))
					n_args_value=(readPool(pe_value)&~EFLAG_MASK)
					for i=0:n_args_value-1
						as_memcpy.push(readPool(pe_value+EXPR_OFS_ARGS+i))
				use_level_this=0
				level_this=0
				pv_this=0
				if pe_this:
					//get a this var
					pv_this=rcGetVariableIfExprIsOne(pe_this)
					if !pv_this:
						if isBuiltin(pe_this,g_id_get_lambda_context):
							use_level_this=1
							level_this=getExprValueAs(readPool(pe_this+EXPR_OFS_ARGS+0),g_vtid_CNS)
						else
							pv_this=makevar(pf_owner)
							t_this=getValueType(getExprValue(pe_this))
							writePool(pv_this,g_vtid_RTVAR)
							writePool(pv_this+1,t_this)
							sccpQueueReach(insertCallAt(pe,~0,function(PExpression pe){return exprvar(pv_this)}))
							as_memcpy.push(call(g_id_store,exprvar(pv_this),pe_this))
							writePool(pv_this+VAR_OFS_DEFINING_STORE,as_memcpy.back())
				str_member_list=new PCTObject[]
				auto implementMemcpy(PCTObject t)
					p_members=readPool(t+FUNCTION_OFS_PLAMBDA_VARS)
					n_members=readPool(t+FUNCTION_OFS_NLAMBDA_VARS)
					for i=0:n_members-1
						pv_member=readPool(p_members+i)
						if readPool(pv_member)!=g_vtid_RTVAR:continue
						t_member=readPool(pv_member+1)
						if tisstruct(t_member):
							str_member_list.push(pv_member)
							implementMemcpy(t_member)
							str_member_list.pop()
						else
							pe_src=exprvar(pv_src)
							if use_level_this:
								pe_tar=call(g_id_ldlambda,call(g_id_get_lambda_context,expriptr(level_this)),exprctval(pv_tar))
							else if pv_this:
								pe_tar=call(g_id_ldlambda,exprvar(pv_this),exprctval(pv_tar))
							else
								pe_tar=exprvar(pv_tar)
							foreach pv_str_member in str_member_list
								pe_src=call(g_id_ldlambda,pe_src,exprctval(pv_str_member))
								pe_tar=call(g_id_ldlambda,pe_tar,exprctval(pv_str_member))
							as_memcpy.push(call(g_id_stlambda,pe_tar,exprctval(pv_member),call(g_id_ldlambda,pe_src,exprctval(pv_member))))
				implementMemcpy(t)
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return vcall(g_id_block,as_memcpy)}))
				if DEBUG_DUMP_LAMBDA:
					Writeln('gen memcpy: ',dumpExpr(pe,__zero(fcolorer_callback)))
				setnop(pe)
				return
			n_args=(flags&~EFLAG_MASK)
			for i=-1:n_args-1
				dfsImplementStructCopies(readPool(pe+EXPR_OFS_ARGS+i),pf_owner_recurse)
	dfsImplementStructCopies(g_pe_top,0)
	//Writeln('>>>>>>>>>>> after dfsImplementStructCopies')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	//System.IO.stdin.ReadLine()
	//coulddo: generate cloners
	//generate finalizers... for each lambdaed function
	sccp(0)
	foreach pe in setnop_jobs
		//the empty ctor shit, must remove after sccp to avoid queueing mess
		setnop(pe)
	foreach pobjfn in g_all_functions
		if !(getFFlag(pobjfn)&FFLAG_LAMBDA_NEEDS_CONTEXT):continue
		//Write('>>> ');Writeln(dumpCode(readPool(pobjfn+FUNCTION_OFS_PEDECL),fcolor_reach_eval))
		g_sccp_queue_reach.clear()
		g_sccp_queue_eval.clear()
		g_names_resolved=0
		pe_body=call(g_id_block)
		pe_func=call(g_id_function,exprstr(g_id_function),exprctval(pobjfn),exprstr(g_id_this),pe_body)
		resolveNames(pe_func,0)
		g_names_resolved=1
		sccp(pe_func)
		pobjfn_dtor=getExprValueAs(pe_func,g_vtid_CTVAL)
		pv_this=PCTObject(0)
		flocatevar=function(PExpression pe){
			if pv_this:return 0
			if isBuiltin(pe,g_id_store)
				if isBuiltin(readPool(pe+EXPR_OFS_ARGS+1),g_id_ldparam)
					pv_this=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
					return 0
			return 1
		}
		dfsExpr(pe_func,flocatevar)
		assert(!!pv_this)
		//__done__
		as=new PExpression[]
		pobj_var_done=lookupFunctionVariable(pobjfn,g_id_finalizer)
		if pobj_var_done:
			//set a big refcnt before the dtor
			as.push(call(g_id_addref,exprvar(pv_this),expriptr(0x3ffffffe)))
			as.push(indcall([call(g_id_ldlambda,exprvar(pv_this),exprctval(pobj_var_done))]))
		//recurse into structs
		str_member_list=new PCTObject[]
		auto generateDestructor(PCTObject t)
			p_members=readPool(t+FUNCTION_OFS_PLAMBDA_VARS)
			n_members=readPool(t+FUNCTION_OFS_NLAMBDA_VARS)
			for i=0:n_members-1
				pv_member=readPool(p_members+i)
				if readPool(pv_member)!=g_vtid_RTVAR:continue
				t_member=readPool(pv_member+1)
				if tisstruct(t_member):
					str_member_list.push(pv_member)
					generateDestructor(t_member)
					str_member_list.pop()
				else if tneedrc(t_member):
					pe_var=exprvar(pv_this)
					foreach pv_str_member in str_member_list
						pe_var=call(g_id_ldlambda,pe_var,exprctval(pv_str_member))
					pv_temp=makevar(pobjfn_dtor)
					writePool(pv_temp,g_vtid_RTVAR)
					writePool(pv_temp+1,t_member)
					if !tisclass(pobjfn):
						//151025 - stack-based dtor for lambdaed stackalloced variables
						copyFullStackAllocFlags(pv_temp,pv_member)
					as.push(call(g_id_store,exprvar(pv_temp),call(g_id_ldlambda,pe_var,exprctval(pv_member))))
					writePool(pv_temp+VAR_OFS_DEFINING_STORE,as.back())
					as.push(call(g_id_release,exprvar(pv_temp),expriptr(-1)))
		is_variant=(pobjfn==getStdObject(0,STDTYPE_VARIANT))
		if is_variant:
			//variant dtor, just call the rtti dtor
			as.push(call(g_id_C_free,exprvar(pv_this),exprstr(g_id_variant)))
		else
			generateDestructor(pobjfn)
		if as.n||(getFFlag(pobjfn)&FFLAG_LAMBDA_NEEDS_RTTI)||is_variant:
			//only use the dtor if it's not empty or if we need RTTI
			if !is_variant:
				as.push(call(g_id_C_free,exprvar(pv_this)))
			if g_enable_debug_instrumentation:
				as0=as
				as=new PExpression[]
				as.push(call(g_id_callstack,exprctval(pobjfn_dtor)))
				as.push(as0)
				as.push(call(g_id_callstack,expriptr(0)))
			pe_new_body=replaceBlockArgs(pe_body,as,1)
			writePool(pobjfn+FUNCTION_OFS_FINALIZER,pobjfn_dtor)
			writePool(pobjfn_dtor+FUNCTION_OFS_NAME,g_id_destructor_name)
			g_sccp_queue_reach.clear()
			g_sccp_queue_eval.clear()
			setFunctionUsed(pobjfn_dtor)
			foreach pe in as
				sccpQueueReach(pe)
			//g_dump_eval=1
			pe_decl_t=readPool(pobjfn+FUNCTION_OFS_PEDECL)
			fillepos(pe_new_body,readPool(pe_decl_t+1),readPool(pe_decl_t+2))
			sccp(pe_new_body)
			writePool(readPool(pe_func+EXPR_OFS_ARGS+0),EFLAG_STRING+g_id_dtor_hack_ccnv)
			//Writeln(dumpExpr(pe_func,fcolor_reach_eval))

PCTObject[] g_all_functions
auto createCallGraphDfs(PExpression pe,PCTObject[] edges_caller)
	eflags=readPool(pe)
	if (eflags&EFLAG_MASK)!=EFLAG_FCALL:return
	pobjfn=getExprFunction(pe)
	if !pobjfn:return
	if readPool(pobjfn+FUNCTION_OFS_FLAGS)&FFLAG_NOT_USER_DEFINED:
		//exclude built-in primitives or C imports
	else
		edges_caller.push(pobjfn*2+isBuiltin(readPool(pe+EXPR_OFS_FUNCTION),g_id_dot))
	edges_caller_args=edges_caller
	pobjfn_decled=0
	if isBuiltin(pe,g_id_function):
		pobjfn_decled=getAsFunction(getExprValueAs(pe,g_vtid_CTVAL))
		if pobjfn_decled:
			edges_caller_args=new PCTObject[]
	n_args=(eflags&~EFLAG_MASK)
	for i=-1:n_args-1
		createCallGraphDfs(readPool(pe+EXPR_OFS_ARGS+i),edges_caller_args)
	if pobjfn_decled:
		g_all_functions.push(pobjfn_decled)
		edges_caller_args.Sort()
		edges_caller_args.UniqueBy(inline(int a){return (a>>1)})
		writePool(pobjfn_decled+FUNCTION_OFS_PCALL_GRAPH_EDGES,int(g_ctobject_pool.n))
		writePool(pobjfn_decled+FUNCTION_OFS_NCALL_GRAPH_EDGES,int(edges_caller_args.n))
		g_ctobject_pool.push(edges_caller_args)

auto createCallGraph()
	g_all_functions=new PCTObject[]
	createCallGraphDfs(g_pe_top,PCTObject[].NULL)
	g_all_functions.Sort()
	g_all_functions.Unique()
	//count the inverse edges
	foreach pobjfn in g_all_functions
		p=readPool(pobjfn+FUNCTION_OFS_PCALL_GRAPH_EDGES)
		n=readPool(pobjfn+FUNCTION_OFS_NCALL_GRAPH_EDGES)
		for i=0:n-1
			pobjfn_called=(readPool(p+i)>>1)
			assert(!!pobjfn_called)
			writePool(pobjfn_called+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES,readPool(pobjfn_called+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES)+1)
	if DEBUG_DUMP_CALL_GRAPH:
		all_recorded_func=new int[int]
		foreach pobjfn in g_all_functions
			all_recorded_func[pobjfn]=1
		foreach pobjfn in g_all_functions
			p=readPool(pobjfn+FUNCTION_OFS_PCALL_GRAPH_EDGES)
			n=readPool(pobjfn+FUNCTION_OFS_NCALL_GRAPH_EDGES)
			for i=0:n-1
				pobjfn_called=(readPool(p+i)>>1)
				if !all_recorded_func[pobjfn_called]:
					Writeln('bad: ',dumpObject(pobjfn),' ',pobjfn_called,' ',dumpObject(pobjfn_called))
				assert(!!pobjfn_called)
				writePool(pobjfn_called+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES,readPool(pobjfn_called+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES)+1)
	//and create them
	n0=int(g_ctobject_pool.n)
	cnt=0
	foreach pobjfn in g_all_functions
		ninv=readPool(pobjfn+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES)
		cnt+=ninv
		writePool(pobjfn+FUNCTION_OFS_PINV_CALL_GRAPH_EDGES,n0+cnt)
	g_ctobject_pool.resize(n0+cnt)
	foreach pobjfn in g_all_functions
		p=readPool(pobjfn+FUNCTION_OFS_PCALL_GRAPH_EDGES)
		n=readPool(pobjfn+FUNCTION_OFS_NCALL_GRAPH_EDGES)
		for i=0:n-1
			raw_data=readPool(p+i)
			pobjfn_called=(raw_data>>1)
			assert(pobjfn_called>0)
			if pobjfn_called<0:continue
			if DEBUG_DUMP_CALL_GRAPH:
				Writeln('DEBUG_DUMP_CALL_GRAPH loop2 ',dumpObject(pobjfn_called))//todo
			pinv=readPool(pobjfn_called+FUNCTION_OFS_PINV_CALL_GRAPH_EDGES)-1
			if pinv<0:
				assert(0)
				continue
			writePool(pobjfn_called+FUNCTION_OFS_PINV_CALL_GRAPH_EDGES,pinv)
			writePool(pinv,pobjfn*2+(raw_data&1))
	
inline tneedrc(PCTObject t)
	return tisrealclass(t)

inline isFunctionClassOrStruct(PCTObject pobjfn)
	//return getReturnType(pobjfn)==pobjfn
	ccnv=getCcnv(pobjfn)
	return ccnv==g_id_class||ccnv==g_id_struct

auto promoteToBlockLevel(PExpression pe)
	if isBuiltin(pe,g_id_block):return pe
	for(pei=pe;;)
		pecaller=readPool(pei+EXPR_OFS_CALLER)
		if !pecaller||isBuiltin(pecaller,g_id_block):
			return pei
		pei=pecaller

inline promoteToRealBlockLevel(PExpression pe)
	return promoteToBlockLevel(pe)
//PExpression promoteToRealBlockLevel(PExpression pe)
//	if isBuiltin(pe,g_id_block)&&isStatementHost(readPool(pe+EXPR_OFS_CALLER)):return pe
//	for(pei=pe;;)
//		pecaller=readPool(pei+EXPR_OFS_CALLER)
//		if !pecaller||isBuiltin(pecaller,g_id_block)&&isStatementHost(readPool(pecaller+EXPR_OFS_CALLER)):
//			return pei
//		pei=pecaller

auto rcGetVariableIfExprIsOne(PExpression pe)
	pei=pe
	//while isBuiltin(pei,g_id_block):
	//	pei=readPool(pei+EXPR_OFS_ARGS+(readPool(pei+0)&~EFLAG_MASK)-1)
	if isExpr(pei,EFLAG_VARIABLE):
		return getVariable(pei)
	return 0

auto genRefcnt()
	//flattenBlocks()
	cleanup()
	g_sccp_queue_reach.clear()
	g_sccp_queue_eval.clear()
	auto isrcvar(PCTObject pobj_var)
		vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
		return !(vflags&(VAR_FLAG_LAMBDAED|VAR_FLAG_PARAM))&&readPool(pobj_var)==g_vtid_RTVAR&&tneedrc(getVariableType(pobj_var))
	//global function-has-rc-ness from the call graph
	//store in FFLAG_RC_HAS_SIDE_EFFECT
	//the criteria: storing anything strong
	auto rcdfsDetectSideEffect(PExpression pe)
		eflags=readPool(pe)
		if (eflags&EFLAG_MASK)!=EFLAG_FCALL:return 0
		if isBuiltin(pe,g_id_function):return 0
		//indcall is an unconditional side effect
		if !getExprFunction(pe)||isBuiltin(pe,g_id_explicit_rc):
			return 1
		pobj_var=0
		pe_value=0
		if isBuiltin(pe,g_id_store):
			pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
			pe_value=readPool(pe+EXPR_OFS_ARGS+1)
		else if isBuiltin(pe,g_id_stlambda):
			pobj_var=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
			pe_value=readPool(pe+EXPR_OFS_ARGS+2)
		if pobj_var&&!isBuiltin(pe_value,g_id_ldparam):
			//t=getVariableType(pobj_var)
			if isrcvar(pobj_var):
				return 1
		n_args=(eflags&~EFLAG_MASK)
		for i=-1:n_args-1
			if rcdfsDetectSideEffect(readPool(pe+EXPR_OFS_ARGS+i)):
				return 1
		return 0
	auto rcdfsFlagAsSideEffect(PCTObject pobjfn)
		if (getFFlag(pobjfn)&FFLAG_RC_HAS_SIDE_EFFECT):
			return
		setFFlag(pobjfn,FFLAG_RC_HAS_SIDE_EFFECT)
		pinv=readPool(pobjfn+FUNCTION_OFS_PINV_CALL_GRAPH_EDGES)
		ninv=readPool(pobjfn+FUNCTION_OFS_NINV_CALL_GRAPH_EDGES)
		for i=0:ninv-1
			rcdfsFlagAsSideEffect(readPool(pinv+i)>>1)
	foreach pobjfn in g_all_functions
		if !(getFFlag(pobjfn)&FFLAG_RC_HAS_SIDE_EFFECT)&&rcdfsDetectSideEffect(readPoolTyped(pobjfn,TFunction).code):
			rcdfsFlagAsSideEffect(pobjfn)
	//make sure everything strong is held in a variable
	queue_no_addref=new PExpression[]
	//queue_no_prerelease=new PExpression[]
	auto rcdfsGenrcParams(PExpression pe,PCTObject pf_owner)
		pf_owner_recurse=pf_owner
		pe_recurse_into=pe
		eflags=readPool(pe)
		if isBuiltin(pe,g_id_function):
			pf_owner_recurse=getExprValueAs(pe,g_vtid_CTVAL)
		if (eflags&EFLAG_MASK)==EFLAG_FCALL:
			t_return=0
			is_ldlambda=0
			if isBuiltin(pe,g_id_ldlambda):
				pobj_var=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
				if pobj_var:
					t_return=getVariableType(pobj_var)
					pecaller=readPool(pe+EXPR_OFS_CALLER)
					if (isBuiltin(pecaller,g_id_ldlambda)||
					isBuiltin(pecaller,g_id_stlambda)&&readPool(pecaller+EXPR_OFS_ARGS+0)==pe):
						//always canceled: nested dots
						t_return=0
				is_ldlambda=1
			else
				pecallee=readPool(pe+EXPR_OFS_FUNCTION+0)
				pobjfn=getExprFunction(pe)
				if pobjfn:
					if !(getFFlag(pobjfn)&FFLAG_BUILTIN):
						t_return=getReturnType(pobjfn)
				else
					tcallee=getExprType(pecallee)
					if tisfunction(tcallee):
						tcallee=getRawFunctionType(tcallee)
						ft=readPoolTyped(tcallee,TFunctionType)
						t_return=ft.t_ret
			//avoid pulling out function constants
			if tneedrc(t_return)&&getExprValue(pe).tid!=g_vtid_CTVAL:
				//param temp holding, backup the value and release later... unless it's a direct store, where we release that later for a cancel-out
				//the rc is meant to cancel out the function addref
				pecaller=readPool(pe+EXPR_OFS_CALLER)
				//Writeln('>>> '+dumpExpr(pecaller,fcolor_abbrv_blocks))
				if isBuiltin(pecaller,g_id_store)&&pe==readPool(pecaller+EXPR_OFS_ARGS+1):
					//it's the store source, we have a readily-available variable
					//just remove the store addref
					//Writeln(">>> "+dumpExpr(pecaller,fcolor_abbrv_blocks))
					if !is_ldlambda:
						queue_no_addref.push(pecaller)
				else
					//we need to temp this
					pv_temp=makevar(pf_owner)
					if tisrealclass(t_return):
						//have to exclude class members - stlambda
						if is_ldlambda:
							//copy stackalloc flags
							pobj_var=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
							if pobj_var&&!tisclass(readPool(pobj_var+VAR_OFS_OWNER)):
								if DEBUG_DUMP_STACKALLOC:
									if readPool(pobj_var+EXPR_OFS_USER_FLAGS)&(
									VAR_FLAG_CLASS_STACK_STYLE_RC)
										Writeln('copy stackalloc flags ',dumpObject(pv_temp),' <- ',dumpObject(pobj_var))
								setUserFlag(pv_temp,
									readPool(pobj_var+EXPR_OFS_USER_FLAGS)&(
										VAR_FLAG_CLASS_STACK_STYLE_RC))
						if isBuiltin(pecaller,g_id_stlambda)&&pe==readPool(pecaller+EXPR_OFS_ARGS+2):
							//151025: copy stackalloc flags for stlambda
							//it's not enough - we need to correctly attribute the ALLOC - so copy VAR_FLAG_CLASS_IS_STACK_ALLOCED
							//got rid of __stack_force_slot so there should be only one slot
							pobj_var=getExprValueAs(readPool(pecaller+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
							if pobj_var&&!tisclass(readPool(pobj_var+VAR_OFS_OWNER)):
								if DEBUG_DUMP_STACKALLOC:
									if readPool(pobj_var+EXPR_OFS_USER_FLAGS)&(
									VAR_FLAG_CLASS_IS_STACK_ALLOCED|VAR_FLAG_CLASS_STACK_STYLE_RC|VAR_FLAG_ARRAY_STACK_ALLOCED)
										Writeln('copy stackalloc flags (stlambda) ',dumpObject(pv_temp),' <- ',dumpObject(pobj_var))
								copyFullStackAllocFlags(pv_temp,pobj_var)
					t_temp=t_return
					writePool(pv_temp,g_vtid_RTVAR)
					writePool(pv_temp+1,t_temp)
					setUserFlag(pv_temp,VAR_USER_FLAG_RC_IS_GENERATED_PULLOUT)
					pe_recurse_into=pe
					fstore_temp=function(PExpression pe){
						pe_temp_store=call(g_id_store,exprvar(pv_temp),pe);
						writePool(pv_temp+VAR_OFS_DEFINING_STORE,pe_temp_store)
						if !is_ldlambda:
							queue_no_addref.push(pe_temp_store)
						//queue_no_prerelease.push(pe_temp_store)
						return pe_temp_store
					}
					//NULL it immediately afterwards
					//pe_null_store=call(g_id_store,exprvar(pv_temp),exprcns(getid_const(CTYPE_TYPED_NULL,(i64)t_return)))
					//queue_no_addref.push(pe_null_store)
					transformCode(pe,fstore_temp, PExpression[].NULL,exprvar(pv_temp),PExpression[].NULL)
					//transformCode(pe,fstore_temp, NULL,exprvar(pv_temp),[pe_null_store])
					//pe_recurse_into=sccpQueueReach(insertCallAt(pecaller,pe,fstore_temp))
		eflags=readPool(pe_recurse_into)
		if (eflags&EFLAG_MASK)==EFLAG_FCALL:
			n_args=eflags&~EFLAG_MASK
			for i=-1:n_args-1
				rcdfsGenrcParams(readPool(pe_recurse_into+EXPR_OFS_ARGS+i),pf_owner_recurse)
	rcdfsGenrcParams(g_pe_top,0)
	//compute a slot id for each instruction, and merge the rc insertion locations
	struct TRCSlot
		int depth
		char is_rc_atomic_block
	rc_slots=new TRCSlot[]
	rc_slots.push(TRCSlot(){'depth':-1})
	auto rcdfsAllocSlots(PExpression pe,int depth)
		//FFLAG_RC_HAS_SIDE_EFFECT, deadelim needs something else -- pure imports count as deadelim side-effect, but not RC
		//also, all non-special functions count as FFLAG_RC_HAS_SIDE_EFFECT implicitly
		slotid=int(rc_slots.n)
		rc_slots.push(TRCSlot(){'depth':depth})
		writePool(pe+EXPR_OFS_USER_FLAGS,slotid|(readPool(pe+EXPR_OFS_USER_FLAGS)&~USER_FLAG_MASK))
		flags=readPool(pe)
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			n_args=(flags&~EFLAG_MASK)
			for i=n_args-1:-1:-1
				rcdfsAllocSlots(readPool(pe+EXPR_OFS_ARGS+i),depth+1)
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			//clear the user flag of this variable for the subsequent slot allocation
			pobj=getVariable(pe)
			if pobj:
				writePool(pobj+VAR_OFS_USER_FLAGS,readPool(pobj+VAR_OFS_USER_FLAGS)&~VAR_USER_FLAG_MASK)
	rcdfsAllocSlots(g_pe_top,0)
	//now we can set the flags
	foreach pe in queue_no_addref
		setUserFlag(pe,USER_FLAG_RC_STORE_WITHOUT_ADDREF)
	queue_no_addref.discard()
	//identify unbreakable blocks for live range purposes
	CLabelMap=PExpression[int]
	auto rcdfsIdentifyAtomicBlocks(PExpression pe,CLabelMap current_labels)
		if isExpr(pe,EFLAG_FCALL):
			id_word_restore=0
			current_labels_recurse=current_labels
			if isBuiltin(pe,g_id_function):
				current_labels_recurse=new PExpression[int]
				pobjfn=getExprValueAs(pe,g_vtid_CTVAL)
				if pobjfn:
					n_args=getExprNArgs(pe)
					pe_code=readPool(pe+EXPR_OFS_ARGS+n_args-1)
					if isBuiltin(pe_code,g_id_block)
						current_labels_recurse[getReturnLabel(pobjfn)]=pe_code
			else if isBuiltin(pe,g_id_blockex)
				p_args=0
				id_word=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+p_args),g_vtid_STR)
				if id_word==g_id_for:
					//for is always unbreakable
					slotid=(readPool(pe+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
					if DEBUG_DUMP_RC:
						if !rc_slots[slotid].is_rc_atomic_block:
							Writeln('is_rc_atomic_block: ',dumpExpr(pe,fcolor_abbrv_blocks))
					rc_slots[slotid].is_rc_atomic_block=i8(1)
					p_args++
					id_word=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+p_args),g_vtid_STR)
				if id_word==g_id_blockex:
					//it's a host
					p_args++
					id_word=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+p_args),g_vtid_STR)
					current_labels_recurse[id_word]=pe
					id_word_restore=id_word
				else
					pe_block_level=current_labels_recurse[id_word]
					if pe_block_level:
						slotid=(readPool(pe_block_level+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
						if DEBUG_DUMP_RC:
							if !rc_slots[slotid].is_rc_atomic_block:
								Writeln('is_rc_atomic_block: ',slotid,' ',dumpExpr(pe,fcolor_abbrv_blocks),' -> ',dumpExpr(pe_block_level,fcolor_abbrv_blocks))
						rc_slots[slotid].is_rc_atomic_block=i8(1)
					//else
					//	if DEBUG_DUMP_RC:
					//		Writeln('unrecognized label ',dumpExpr(pe,fcolor_abbrv_blocks))
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				rcdfsIdentifyAtomicBlocks(readPool(pe+EXPR_OFS_ARGS+i),current_labels_recurse)
			if id_word_restore:
				current_labels_recurse[id_word_restore]=0
	rcdfsIdentifyAtomicBlocks(g_pe_top,CLabelMap.NULL)
	//allocate per-variable slots and do the merging
	/*
	always-NULL analysis:
		dfs, maintain
			known-NULL list
			known-non-NULL list
		merge branches at the end of if
		just ignore NULL asses and mark the first asses only
	safe-ass merge for a "no-longer-safe-beyond" location
		the same common ancestor merge
		whether the newly added guy is safe depends on the merge process
		ditch the externally-used in the very beginning
		don't even dfs into loops
	*/
	struct TRCVarSlot
		PCTObject pobj_var
		PExpression pe_death_merged
		PExpression pe_store_unsafe_beyond
	rc_var_slots=new TRCVarSlot[]
	fgetdepth=function(int slotid){return rc_slots[slotid].depth}
	auto rcdfsComputeSafeStoreAndVarDeath(PExpression pe,int is_safe_store_possible, PExpression pe_loop)
		auto flags=readPool(pe)
		auto is_safe_store_possible_recurse=is_safe_store_possible
		if (flags&EFLAG_MASK)==EFLAG_FCALL:
			//safe store isn't possible inside loops
			pe_loop_recurse=pe_loop
			slotid=(readPool(pe+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
			if isBuiltin(pe,g_id_function):
				is_safe_store_possible_recurse=1
				pe_loop_recurse=0
			else if rc_slots[slotid].is_rc_atomic_block:
				is_safe_store_possible_recurse=0
				if !pe_loop_recurse:
					pe_loop_recurse=pe
			//else if isBuiltin(pe,g_id_rc_local_holder):
			n_args=(flags&~EFLAG_MASK)
			for i=-1:n_args-1
				rcdfsComputeSafeStoreAndVarDeath(readPool(pe+EXPR_OFS_ARGS+i),is_safe_store_possible_recurse,pe_loop_recurse)
			if isBuiltin(pe,g_id_store):
				pe_store_var=readPool(pe+EXPR_OFS_ARGS+0)
				pobj_var=getVariable(pe_store_var)
				vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
				if isrcvar(pobj_var):
					//we need to merge it even if the current one can't possibly be safe
					if !(vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED)
						vflags|=VAR_USER_FLAG_RC_SLOT_ALLOCATED+int(rc_var_slots.n)
						rc_var_slots.push(TRCVarSlot(){'pobj_var':pobj_var})
						writePool(pobj_var+VAR_OFS_USER_FLAGS,vflags)
					vslotid=(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
					amret=ancestorMerge(1,rc_var_slots[vslotid].pe_store_unsafe_beyond,pe,fgetdepth,__zero(famcallback))
					(pe_merged,is_safe)=(amret.x,amret.y)
					rc_var_slots[vslotid].pe_store_unsafe_beyond=pe_merged
					if is_safe&&is_safe_store_possible:
						//mark pe as safe
						setUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE)
		else if (flags&EFLAG_MASK)==EFLAG_VARIABLE:
			pobj_var=getVariable(pe)
			if pobj_var:
				pecaller=0
				while pobj_var:
					//merge to death - and do it for all the flattening owners
					if isrcvar(pobj_var):
						if !pecaller:
							//don't mess with dot, do it lazily
							pecaller=readPool(pe+EXPR_OFS_CALLER)
							while isBuiltin(pecaller,g_id_dot):
								pecaller=readPool(pecaller+EXPR_OFS_CALLER)
						vflags=readPool(pobj_var+VAR_OFS_USER_FLAGS)
						if !(vflags&VAR_USER_FLAG_RC_SLOT_ALLOCATED)
							vflags|=VAR_USER_FLAG_RC_SLOT_ALLOCATED+int(rc_var_slots.n)
							rc_var_slots.push(TRCVarSlot(){'pobj_var':pobj_var})
							writePool(pobj_var+VAR_OFS_USER_FLAGS,vflags)
						vslotid=(vflags&VAR_USER_FLAG_RC_SLOTID_MASK)
						pe_merged=ancestorMerge(1,rc_var_slots[vslotid].pe_death_merged,pe_loop?pe_loop:pecaller,fgetdepth,__zero(famcallback)).x
						rc_var_slots[vslotid].pe_death_merged=pe_merged
					pobj_var=readPool(pobj_var+VAR_OFS_FLATTENING_OWNER)
					//if pobj_var:
					//	Writeln('owner: ',dumpObject(pobj_var))
	rcdfsComputeSafeStoreAndVarDeath(g_pe_top,1,0)
	//Writeln(">>> point #1\n"+dumpCode(g_pe_top,fcolor_reach_eval))
	///////////////////////////////////////////////////
	//generate rc
	struct TRefcntLine
		PExpression pe
		PCTObject v
		int delta
		i8 is_cancel_only
		i8 need_null_out
		if Platform.BUILD=="debug":
			int debug_id_source
	all_rcs=new TRefcntLine[]
	null_outs=new TRefcntLine[]
	//Writeln('-------')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	//non-safe store, stlambda: save the previous value, then addref/release after the store location
	queue_rcdfsGenrcStore=new int3[]
	auto rcdfsGenrcStore(PExpression pe,PCTObject pf_owner)
		//Write('.')
		pe_recurse_into=pe
		pf_owner_recurse=pf_owner
		if isBuiltin(pe,g_id_function):
			pf_owner_recurse=getExprValueAs(pe,g_vtid_CTVAL)
		else if isBuiltin(pe,g_id_explicit_rc):
			n_args=getExprNArgs(pe)
			assert(n_args==2)
			delta=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CNS)
			if delta:
				peobj=readPool(pe+EXPR_OFS_ARGS+0)
				if getExprValue(peobj).tid==g_vtid_RTVAR:
					if isExpr(peobj,EFLAG_VARIABLE):
						pobj_var=getVariable(peobj)
						pe_rcpoint=pe
						setnop(pe)
					else
						pv_temp=makevar(pf_owner)
						writePool(pv_temp,g_vtid_RTVAR)
						writePool(pv_temp+1,getExprType(peobj))
						pobj_var=pv_temp
						pecaller=readPool(pe+EXPR_OFS_CALLER)
						old_user_flags=readPool(pe+EXPR_OFS_USER_FLAGS)
						pe_rcpoint=sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){return call(g_id_store,exprvar(pv_temp),peobj)}))
						writePool(pv_temp+VAR_OFS_DEFINING_STORE,pe_rcpoint)
						writePool(pe_rcpoint+EXPR_OFS_USER_FLAGS,old_user_flags)
					all_rcs.push(TRefcntLine(){'pe':pe_rcpoint,"v":pobj_var,'delta':delta})
					if Platform.BUILD=="debug":
						all_rcs.back().debug_id_source=getid('explicit_rc')
				else
					setnop(pe)
			else
				errorAtExpr(ETYPE_ERROR,readPool(pe+EXPR_OFS_ARGS+1),"explicit rc must have a non-zero, constant delta")
		else if (isBuiltin(pe,g_id_store)||isBuiltin(pe,g_id_stlambda))&&!(testUserFlag(pe,USER_FLAG_RC_STORE_WITHOUT_ADDREF)&&testUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE)):
			if isBuiltin(pe,g_id_store):
				pe_var=readPool(pe+EXPR_OFS_ARGS+0)
				val_expr0=getExprValue(pe_var)
				if val_expr0.tid==g_vtid_RTVAR:
					pobj_var=getVariable(pe_var)
				else
					pobj_var=0
				pe_value=readPool(pe+EXPR_OFS_ARGS+1)
			else
				pobj_var=getExprValueAs(readPool(pe+EXPR_OFS_ARGS+1),g_vtid_CTVAL)
				pe_value=readPool(pe+EXPR_OFS_ARGS+2)
			if pobj_var&&readPool(pobj_var)==g_vtid_RTVAR:
				t=getVariableType(pobj_var)
				if tneedrc(t)&&!isBuiltin(pe_value,g_id_ldparam):
					if !testUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE):
						pv_temp=makevar(pf_owner)
						writePool(pv_temp,g_vtid_RTVAR)
						writePool(pv_temp+1,t)
						if tisrealclass(t)&&testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED):
							//class / struct members could mistakenly have their VAR_FLAG_CLASS_STACK_STYLE_RC set
							//it's harmless... unless copied here
							//setUserFlag(pv_temp,
							//	readPool(pobj_var+EXPR_OFS_USER_FLAGS)&(
							//		VAR_FLAG_CLASS_STACK_STYLE_RC))
							if DEBUG_DUMP_STACKALLOC:
								Writeln('copy stackalloc flags ',dumpObject(pv_temp),' <- ',dumpObject(pobj_var))
							setUserFlag(pv_temp,VAR_FLAG_CLASS_STACK_STYLE_RC)
					//pe_recurse_into=pe_value
					if isBuiltin(pe,g_id_store):
						as_backup=new PExpression[]
						if !testUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE):
							as_backup.push(call(g_id_store,exprvar(pv_temp),exprvar(pobj_var)))
						pv_value=rcGetVariableIfExprIsOne(pe_value)
						if !pv_value:
							pv_value=pobj_var
					else
						as_backup=new PExpression[]
						if !testUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE):
							pe_this=readPool(pe+EXPR_OFS_ARGS+0)
							pv_this=rcGetVariableIfExprIsOne(pe_this)
							if pv_this:
								as_backup.push(call(g_id_store,exprvar(pv_temp),call(g_id_ldlambda,exprvar(pv_this),exprctval(pobj_var))))
							else if isBuiltin(pe_this,g_id_get_lambda_context):
								d_levels=getExprValueAs(readPool(pe_this+EXPR_OFS_ARGS+0),g_vtid_CNS)
								as_backup.push(call(g_id_store,exprvar(pv_temp),
									call(g_id_ldlambda,call(g_id_get_lambda_context,expriptr(d_levels)),
									exprctval(pobj_var))))
							else
								pv_this=makevar(pf_owner)
								t_this=getValueType(getExprValue(pe_this))
								writePool(pv_this,g_vtid_RTVAR)
								writePool(pv_this+1,t_this)
								sccpQueueReach(insertCallAt(pe,~0,function(PExpression pe){return exprvar(pv_this)}))
								as_backup.push(call(g_id_store,exprvar(pv_this),pe_this))
								writePool(pv_this+VAR_OFS_DEFINING_STORE,as_backup.back())
								as_backup.push(call(g_id_store,exprvar(pv_temp),call(g_id_ldlambda,exprvar(pv_this),exprctval(pobj_var))))
						////////
						pe_value=readPool(pe+EXPR_OFS_ARGS+2)
						pv_value=rcGetVariableIfExprIsOne(pe_value)
						if !pv_value&&!isExpr(pe_value,EFLAG_CONST):
							pv_value=makevar(pf_owner)
							t_value=getValueType(getExprValue(pe_value))
							writePool(pv_value,g_vtid_RTVAR)
							writePool(pv_value+1,t_value)
							sccpQueueReach(insertCallAt(pe,~2,function(PExpression pe){return exprvar(pv_value)}))
							as_backup.push(call(g_id_store,exprvar(pv_value),pe_value))
							writePool(pv_value+VAR_OFS_DEFINING_STORE,as_backup.back())
						////////
					//Writeln(">>> "+dumpExpr(pe_recurse_into,fcolor_reach_eval))
					//pe_block=sccpQueueReach(insertCallAt(pecaller,pe,function(PExpression pe){as_backup.push(pe);return vcall(g_id_block,as_backup)}))
					//uninit for this -> getlambdacontext
					tid_value=getExprValue(pe_value).tid
					if (tid_value==g_vtid_RTVAR||tid_value==g_vtid_UNINIT)&&!testUserFlag(pe,USER_FLAG_RC_STORE_WITHOUT_ADDREF):
						all_rcs.push(TRefcntLine(){'pe':pe,"v":pv_value,'delta':1})
						if Platform.BUILD=="debug":
							all_rcs.back().debug_id_source=getid('post_store_addref')
					if !testUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE):
						is_released_before=0
						pe_real_value=pe_value
						if isExpr(pe_real_value,EFLAG_VARIABLE):
							pv_real_value=getVariable(pe_real_value)
							if testUserFlag(pv_real_value,VAR_USER_FLAG_RC_IS_GENERATED_PULLOUT):
								pe_pullout_store=readPool(pv_real_value+VAR_OFS_DEFINING_STORE)
								assert(isBuiltin(pe_pullout_store,g_id_store))
								pe_real_value=readPool(pe_pullout_store+EXPR_OFS_ARGS+1)
						if(isBuiltin(pe_real_value,g_id_stackzero)||
						isExpr(pe_real_value,EFLAG_FCALL)&&tisrealclass(getExprFunction(pe_real_value))):
							if isBuiltin(pe,g_id_store):
								//if pe_value is from a new, we should release first for stackalloc and general efficiency
								assert(as_backup.n==1)
								if DEBUG_DUMP_STACKALLOC:
									Writeln('release before store ',dumpExpr(pe,fcolor_abbrv_blocks))
								pe_nop=call(g_id_nop)
								as_backup.clear()
								as_backup.push(pe_nop)
								all_rcs.push(TRefcntLine(){'pe':pe_nop,"v":pobj_var,'delta':-1})
								if Platform.BUILD=="debug":
									all_rcs.back().debug_id_source=getid('pre_store_release')
							else
								if DEBUG_DUMP_STACKALLOC:
									Writeln('release before stlambda ',dumpExpr(pe,fcolor_abbrv_blocks))
								pe_nop=call(g_id_nop)
								as_backup.push(pe_nop)
								debug_hacked_store=0
								for i=as_backup.n-1:-1:1
									as_backup[i]=as_backup[i-1]
									if isBuiltin(as_backup[i],g_id_store)&&getVariable(readPool(as_backup[i]+EXPR_OFS_ARGS+0))==pv_temp:
										as_backup[i]=pe_nop
										debug_hacked_store=1
										break
								assert(debug_hacked_store)
								if !debug_hacked_store:
									as_backup[0]=pe_nop
								all_rcs.push(TRefcntLine(){'pe':pe_nop,"v":pv_temp,'delta':-1})
								if Platform.BUILD=="debug":
									all_rcs.back().debug_id_source=getid('pre_store_release')
							is_released_before=1
						if !is_released_before:
							all_rcs.push(TRefcntLine(){'pe':pe,"v":pv_temp,'delta':-1})
							if Platform.BUILD=="debug":
								all_rcs.back().debug_id_source=getid('post_store_release')
					foreach pe_added in as_backup
						setUserFlag(pe_added,USER_FLAG_RC_IS_SAFE_STORE|USER_FLAG_RC_STORE_WITHOUT_ADDREF)
					setUserFlag(pe,USER_FLAG_RC_IS_SAFE_STORE|USER_FLAG_RC_STORE_WITHOUT_ADDREF)
					pe_recurse_into=transformCode(pe,__zero(ftransformer_callback), as_backup,0,PExpression[].NULL)
		eflags=readPool(pe_recurse_into)
		if (eflags&EFLAG_MASK)==EFLAG_FCALL:
			n_args=eflags&~EFLAG_MASK
			queue_rcdfsGenrcStore.push(int3(pe_recurse_into+EXPR_OFS_FUNCTION,n_args+1,pf_owner_recurse))
			//for i=-1:n_args-1
			//	rcdfsGenrcStore(readPool(pe_recurse_into+EXPR_OFS_ARGS+i),pf_owner_recurse)
	rcdfsGenrcStore(g_pe_top,0)
	while queue_rcdfsGenrcStore.n:
		qitem=queue_rcdfsGenrcStore.pop()
		auto pe=readPool(qitem.x)
		auto pf_owner=qitem.z
		qitem.x++
		qitem.y--
		if qitem.y:
			queue_rcdfsGenrcStore.push(qitem)
		rcdfsGenrcStore(pe,pf_owner)
	//Writeln(">>> point #2\n"+dumpCode(g_pe_top,fcolor_reach_eval))
	/*
	each non-lambda variable:
		at death
		if it was in a loop, pull out of the loop
			could do it as a part of the mapping process... but others can't be mapped this way
	*/
	foreach vslot in rc_var_slots
		if readPool(vslot.pobj_var+VAR_OFS_ID)==g_id_return:
			//the return value doesn't die
			continue
		assert(vslot.pe_death_merged>=0)
		all_rcs.push(TRefcntLine(){'pe':vslot.pe_death_merged,"v":vslot.pobj_var,'delta':-1})
		if Platform.BUILD=="debug":
			all_rcs.back().debug_id_source=getid('last_use_release')
		//NULL out the supposedly "dead" variable, released or not
		null_outs.push(TRefcntLine(){'pe':vslot.pe_death_merged,"v":vslot.pobj_var,'delta':0x80000000,'need_null_out':i8(1)})
		if Platform.BUILD=="debug":
			null_outs.back().debug_id_source=getid('last_use_null_out')
	//function begin/end
	foreach pobjfn in g_all_functions
		if getFFlag(pobjfn)&FFLAG_LAMBDA_NEEDS_CONTEXT:
			//fn=readPoolTyped(pobjfn,TFunction)
			if isFunctionClassOrStruct(pobjfn):
				//don't need to do that for classes
				//pobj_var=lookupFunctionVariable(pobjfn,g_id_this)
				continue
			pe_fbody=readPool(pobjfn+FUNCTION_OFS_CODE)
			pe_fhead=pe_fbody
			while isBuiltin(pe_fhead,g_id_block):
				pe_fhead=readPool(pe_fhead+EXPR_OFS_ARGS+0)
			all_rcs.push(TRefcntLine(){'pe':pe_fhead,"v":0,'delta':1})
			if Platform.BUILD=="debug":
				all_rcs.back().debug_id_source=getid('function_begin')
			all_rcs.push(TRefcntLine(){'pe':pe_fbody,"v":0,'delta':-1})
			if Platform.BUILD=="debug":
				all_rcs.back().debug_id_source=getid('function_end')
			rcdfsFlagAsSideEffect(pobjfn)
	if DEBUG_DUMP_RC:
		Writeln('==== DEBUG_DUMP_RC')
		Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	//forward merge pass
	all_rcs.push(null_outs)
	all_rcs.Sort(inline(rcia,rcib){return rcia.pe<rcib.pe;})
	p_rc_first=new int[int]
	for i=0:all_rcs.n-1
		if !i||all_rcs[i].pe!=all_rcs[i-1].pe:
			p_rc_first[all_rcs[i].pe]=int(i+1)
	if DEBUG_DUMP_RC:
		foreach rcitem in all_rcs
			Write('original> ')
			if Platform.BUILD=="debug":
				slotid=(readPool(rcitem.pe+EXPR_OFS_USER_FLAGS)&USER_FLAG_RC_SLOTID_MASK)
				Write(getIdString(rcitem.debug_id_source),' #',slotid,' ',)
			if rcitem.v:
				Write(rcitem.delta,' ',dumpObject(rcitem.v),' ');Writeln(dumpExpr(rcitem.pe,function(PExpression pe){if pe==rcitem.pe:return fcolor_reach_eval(pe);return fcolor_abbrv_blocks(pe)}))
			else
				Write(rcitem.delta,' lambda ');Writeln(dumpExpr(rcitem.pe,fcolor_abbrv_blocks))
	var_in_rc=new int[PCTObject]
	auto flushRC(TRefcntLine[] current_rcs0,PExpression pe, int is_after,PCTObject pobj_var)
		if pobj_var:
			current_rcs=new TRefcntLine[]
			n2=0L
			foreach rcitem in current_rcs0
				if rcitem.v==pobj_var:
					current_rcs.push(rcitem)
				else
					current_rcs0[n2]=rcitem
					n2++
			current_rcs0.resize(n2)
			var_in_rc[pobj_var]=0
		else
			current_rcs=current_rcs0
			var_in_rc.clear()
		current_rcs.Sort(inline(rcia,rcib){return rcia.v<rcib.v})
		current_rcs_merged=new TRefcntLine[]
		rc_current=TRefcntLine(){'is_cancel_only':i8(1)}
		foreach rcitem in current_rcs
			if DEBUG_DUMP_RC:
				Write('    ')
				if Platform.BUILD=="debug":
					Write(getIdString(rcitem.debug_id_source),' ')
				if rcitem.v:
					Write(rcitem.delta,' ',dumpObject(rcitem.v),' ');Writeln(dumpExpr(rcitem.pe,function(PExpression pe){if pe==rcitem.pe:return fcolor_reach_eval(pe);return fcolor_abbrv_blocks(pe)}))
				else
					Write(rcitem.delta,' lambda ');Writeln(dumpExpr(rcitem.pe,fcolor_abbrv_blocks))
			if rcitem.need_null_out:
				current_rcs_merged.push(rcitem)
				continue
			if rc_current.v!=rcitem.v:
				if rc_current.delta||!rc_current.is_cancel_only:
					current_rcs_merged.push(rc_current)
				rc_current=TRefcntLine(){'pe':pe,"v":rcitem.v,'is_cancel_only':i8(1)}
			rc_current.delta+=rcitem.delta
			if rcitem.delta<0&&!rcitem.is_cancel_only:
				rc_current.is_cancel_only=i8(0)
		if rc_current.delta||!rc_current.is_cancel_only:
			current_rcs_merged.push(rc_current)
		//current_rcs_merged.Sort(inline(rcia,rcib){return rcia.delta>rcib.delta||rcia.delta==rcib.delta&&rcia.v<rcib.v})
		current_rcs_merged.Sortby(inline(rci){
			//positive goes first, temp id goes first, v disambiguities
			//nullout goes last
			//160227: avoid the self-compile rc bug
			auto delta_key=(rci.delta<0?2:((rci.delta==0)?1:0))
			return u32(
				(int(rci.need_null_out)<<31)+
				(delta_key<<29)+
				((rci.v&&!isTempId(readPool(rci.v+VAR_OFS_ID)))<<28)+
				rci.v)
		})
		as_rc_current=new PExpression[]
		foreach rcitem in current_rcs_merged
			pe_var=(rcitem.v?exprvar(rcitem.v):expriptr(0))
			if rcitem.need_null_out:
				assert(rcitem.v)
				t=getVariableType(rcitem.v)
				pe_dorc=call(g_id_store,pe_var,exprcns(getid_const(CTYPE_TYPED_NULL,i64(t))))
			else if rcitem.delta>0||rcitem.is_cancel_only:
				pe_dorc=call(g_id_addref,pe_var,expriptr(rcitem.delta))
			else
				pe_dorc=call(g_id_release,pe_var,expriptr(rcitem.delta))
			as_rc_current.push(pe_dorc)
		if as_rc_current.n:
			if is_after:
				transformCode(pe,__zero(ftransformer_callback), PExpression[].NULL,0,as_rc_current)
			else
				transformCode(pe,__zero(ftransformer_callback), as_rc_current,0,PExpression[].NULL)
		current_rcs.clear()
	auto rcdfsMergeAndGenerateRC(TRefcntLine[] current_rcs,PExpression pe)
		flush_self=0
		if isExpr(pe,EFLAG_FCALL):
			is_blocked=0
			rcs_recurse=current_rcs
			if isStatementHost(pe):
				is_blocked=1
			flush_children=0
			n_args=getExprNArgs(pe)
			for i=-1:n_args-1
				pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
				if is_blocked:
					rcs_recurse=new TRefcntLine[]
				flush_children|=rcdfsMergeAndGenerateRC(rcs_recurse,pe_argi)
				if is_blocked&&rcs_recurse.n:
					if DEBUG_DUMP_RC:
						Writeln('flushing block tail rc: ',dumpExpr(pe_argi,fcolor_abbrv_blocks),' from ',dumpExpr(pe,fcolor_abbrv_blocks))
					flushRC(rcs_recurse,pe_argi,1, 0)
					flush_children|=1
			if is_blocked&&!isBuiltin(pe,g_id_function):
				//break and friends... should caused a flush above, across simple {} blocks
				//but they should not cause the {} themselves to flush
				//therefore, or flush_children in both places
				flush_self|=flush_children
			if !flush_self:
				pobjfn=getExprFunction(pe)
				if pobjfn:
					flag=getFFlag(pobjfn)
				else
					//true indirect calls may have a side effect
					flag=FFLAG_RC_HAS_SIDE_EFFECT
				if (flag&FFLAG_RC_HAS_SIDE_EFFECT):
					flush_self=1
			if flush_self:
				if DEBUG_DUMP_RC:
					if current_rcs.n:
						Writeln('flushing rc: ',dumpExpr(pe,fcolor_abbrv_blocks))
					else
						Writeln('empty flushing: ',dumpExpr(pe,fcolor_abbrv_blocks))
				flushRC(current_rcs,pe,0, 0)
			else if isBuiltin(pe,g_id_store):
				pobj_var=getVariable(readPool(pe+EXPR_OFS_ARGS+0))
				if pobj_var&&var_in_rc[pobj_var]:
					if DEBUG_DUMP_RC:
						if current_rcs.n:
							Writeln('flushing per-var rc: ',pobj_var,' ',dumpExpr(pe,fcolor_abbrv_blocks))
					flushRC(current_rcs,pe,0, pobj_var)
		p_rc=p_rc_first[pe]-1
		if p_rc>=0:
			while p_rc<all_rcs.n&&all_rcs[p_rc].pe==pe:
				rcitem=all_rcs[p_rc]
				var_in_rc[rcitem.v]=1
				current_rcs.push(rcitem)
				p_rc++
		return flush_self|flush_children
	rcdfsMergeAndGenerateRC(TRefcntLine[].NULL,g_pe_top)
	//Writeln('>>> after flushRC')
	//Writeln(dumpExpr(g_pe_top,fcolor_reach_eval))
	clearUserFlags(g_pe_top,0)
	//sccpProcessReaches()
	sccp(0)

auto instrumentForDebugging()
	////only the branches are explicitly marked
	//auto finstrument(PExpression pe,PExpression pe_block_next)
	//	if isExpr(pe,EFLAG_FCALL):
	//		n_args=getExprNArgs(pe)
	//		is_block=isBuiltin(pe,g_id_block)
	//		is_flow_control=(isBuiltin(pe,g_id_if)||isBuiltin(pe,g_id_blockex))
	//		if is_flow_control:
	//			transformCode(pe,NULL,
	//				[fillepos(call(g_id_set_callstack),readPool(pe+1),readPool(pe+2))],
	//				0,
	//				[fillepos(call(g_id_set_callstack),readPool(pe_block_next+1),readPool(pe_block_next+2))])
	//		//maintain the next-of-branches
	//		for i=-1:n_args-1
	//			pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
	//			if is_flow_control:
	//				if isBuiltin(pe_argi,g_id_block):
	//					transformCode(pe_argi,NULL,[fillepos(call(g_id_set_callstack),readPool(pe_argi+1),readPool(pe_argi+2))],0,NULL)
	//			if is_block&&i+1<n_args:
	//				pe_argi_next=readPool(pe+EXPR_OFS_ARGS+i+1)
	//			else
	//				pe_argi_next=pe_block_next
	//			finstrument(pe_argi,pe_argi_next)
	//finstrument(g_pe_top,0)
	//tempify crashable call args
	auto ftempify_args(PExpression pe,PCTObject pf_owner){
		if isExpr(pe,EFLAG_FCALL):
			if isBuiltin(pe,g_id_C_wrap):
				//ignore __C arguments - they can be whole-expr replacements and should not be tempified
				return 0
			pobjfn=getExprFunction(pe)
			if !pobjfn:return 1
			cbobj_oncgen=readPool(pobjfn+FUNCTION_OFS_ONCGEN)
			if cbobj_oncgen==g_cbobj_cimport_cgen||cbobj_oncgen==g_cbobj_generated_function_oncgen:
				//tempify all args
				as=PExpression[].NULL
				n_args=getExprNArgs(pe)
				for i=-1:n_args-1
					pe_argi=readPool(pe+EXPR_OFS_ARGS+i)
					if !isExpr(pe_argi,EFLAG_FCALL):continue
					val=getExprValue(pe_argi)
					if val.tid!=g_vtid_RTVAR:continue
					pv_temp=makevar(pf_owner)
					writePool(pv_temp+0,val.tid)
					writePool(pv_temp+1,val.val)
					sccpQueueReach(insertCallAt(pe,~i,function(PExpression pe){return exprvar(pv_temp)}))
					if !as:as=new PExpression[]
					as.push(call(g_id_store,exprvar(pv_temp),pe_argi))
					writePool(pv_temp+VAR_OFS_DEFINING_STORE,as.back())
				if as:
					pe_new=transformCode(pe,__zero(ftransformer_callback), as,0,PExpression[].NULL)
					dfsExprEx(pe_new,pf_owner,ftempify_args)
					return 0
				else
					return 1
		return 1
	}
	dfsExprEx(g_pe_top,0,ftempify_args)

//////////////////////////////////////////////////
struct TCScope
	string outer_code_buffer
	PCTObject[] var_stores
	PExpression[] dbg_slots
g_c_headers=new int[]
g_c_ftypes=new PCTObject[]
g_struct_code_per_type=new string[PCTObject]
g_all_struct_types=new PCTObject[]
g_structs_slots_buffer=new string
g_forward_buffer=new string
g_c_global_buffer=new string
g_local_decl_buffer=new string
g_debug_file_info_buffer=new string
g_debug_line_info_buffer=new string
g_local_return_buffer=new string
g_code_buffer=new string
g_gencode_queue=new PExpression[]
g_c_scope_stack=new TCScope[]
g_current_labels=new int[int]
g_readable_c_code=0
g_enable_debug_instrumentation=0
g_current_line_info_id=0
g_enable_c_line_info=1
g_current_c_line_epos=0
g_current_c_line_idfn=0
g_current_c_line_line=0
auto genConst(int cid)
	cns=Util.ctNumber(cid)
	if cns.type==const_type(CTYPE_FLOAT,32):
		if int(cns.val_bin)<0:
			g_code_buffer.push(' ')
		g_code_buffer.push(formatNumber(__int_as_float(int(cns.val_bin)),{frac:9,scientific:1}))
		g_code_buffer.push('f')
	else if cns.type==const_type(CTYPE_FLOAT,64):
		if cns.val_bin<0:
			g_code_buffer.push(' ')
		g_code_buffer.push(formatNumber(__longlong_as_double(cns.val_bin),{frac:23,scientific:1}))
	else if cns.type==CTYPE_TYPED_NULL:
		g_code_buffer.push('((')
		genType(PCTObject(cns.val_bin))
		g_code_buffer.push(')NULL)')
	else
		if cns.type==CTYPE_POINTER:
			g_code_buffer.push('(void*)')
			n_bits=Util.bitSize()
		else
			n_bits=((cns.type&~CTYPE_MASK)+1)*8
		if n_bits<32:
			g_code_buffer.push('(')
			if ((cns.type&CTYPE_MASK)==CTYPE_UINT):
				g_code_buffer.push('unsigned ')
			if n_bits==8:
				g_code_buffer.push('char ')
			else
				//if n_bits!=16:
				//	Writeln(g_code_buffer,' ',n_bits,' ',cns)
				assert(n_bits==16)
				g_code_buffer.push('short ')
			g_code_buffer.push(')')
		if ((cns.type&CTYPE_MASK)==CTYPE_INT)||cns.type==CTYPE_POINTER:
			if n_bits>=64:
				mask=-1LL
				mask_sgn=0LL
			else
				mask=(i64(1)<<n_bits)-1
				mask_sgn=(i64(1)<<(n_bits-1))
			if n_bits==32&&i32(cns.val_bin)==0x80000000:
				sval="0x80000000"
			else
				sval=string((cns.val_bin&mask)|-(cns.val_bin&mask_sgn))
			if sval[0]=='-':
				g_code_buffer.push(' ')
			g_code_buffer.push(sval)
		else if ((cns.type&CTYPE_MASK)==CTYPE_UINT):
			if n_bits>=64:
				mask=-1LL
			else
				mask=(i64(1)<<n_bits)-1
			sval=string(u64(cns.val_bin&mask))
			g_code_buffer.push(sval)
		if ((cns.type&CTYPE_MASK)==CTYPE_UINT):
			g_code_buffer.push('u')
		if n_bits>32:
			g_code_buffer.push('LL')
auto genCode(PExpression pe,int expr_oplevel)
	flags=readPool(pe)
	switch flags&EFLAG_MASK{
	case EFLAG_FCALL:
		//n_args=flags&~EFLAG_MASK
		pobjfn=getExprFunction(pe)
		cb_oncgen=0
		if pobjfn:
			cb_oncgen=readPool(pobjfn+FUNCTION_OFS_ONCGEN)
			if !cb_oncgen:
				//assert(0)
				if Platform.BUILD=="debug":
					//Writeln(dumpExpr(pe,fcolor_abbrv_blocks))
					Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
				errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pe,"unable to generate C code for '@1'".Replace(["@1",citeexpr(pe)]))
				return
			invokeCallbackObject(cb_oncgen,pe,expr_oplevel)
		else
			pecallee=readPool(pe+EXPR_OFS_FUNCTION)
			n_args=getExprNArgs(pe)
			pftype=getExprType(pecallee)
			if !tisfunction(pftype):
				//coulddo: improve error message - operator[] case, method case, ...
				errorAtExpr(ETYPE_ERROR,pecallee,"'@1' is not a function and can't be called here, it's currently of type '@2'".Replace(["@1",citeexpr(pecallee),"@2",dumpType(pftype)]))
				//Writeln(dumpType(pftype))
				//Writeln(">>> "+dumpExpr(pe,fcolor_abbrv_blocks))
				//assert(0)
				return
			t_raw_function_type=getRawFunctionType(pftype)
			//ft=readPoolTyped(t_raw_function_type,TFunctionType)
			g_c_ftypes.push(t_raw_function_type)
			g_code_buffer.push('((s7_TF')
			g_code_buffer.push(toBase32(t_raw_function_type))
			g_code_buffer.push(')')
			genCode(pecallee,LEVEL_POSTFIX)
			g_code_buffer.push('->m_')
			g_code_buffer.push(toBase32(lookupFunctionVariable(pftype,g_id_ptr_fn)))
			g_code_buffer.push(')(')
			//if ft.flags&FFLAG_LAMBDA_NEEDS_PARENT_POINTER_ARG:
			//	g_code_buffer.push('s7_BL,')
			genCode(pecallee,LEVEL_POSTFIX)
			g_code_buffer.push('->m_')
			g_code_buffer.push(toBase32(lookupFunctionVariable(pftype,g_id_ptr_this)))
			for i=0:n_args-1
				g_code_buffer.push(',')
				genCode(readPool(pe+EXPR_OFS_ARGS+i),LEVEL_ASSIGNMENT)
			if g_code_buffer.back()==',':
				g_code_buffer.pop()
			g_code_buffer.push(')')
		break
	case EFLAG_CONST:
		//coulddo: accurate formatting
		genConst(flags&~EFLAG_MASK)
		break
	case EFLAG_CTVAL:
		pobjfn=(readPool(pe)&~EFLAG_MASK)
		if readPool(pobjfn)!=g_tid_TFunction:
			errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pe,"unable to generate C code for compile-time only expression '@1'".Replace(["@1",citeexpr(pe)]))
			g_code_buffer.push('?err?')
		else
			g_code_buffer.push('((void*)')
			genFunctionName(pobjfn)
			g_code_buffer.push(')')
			queueCodeGen(pobjfn)
		break
	case EFLAG_STRING:
		g_code_buffer.push('"')
		g_code_buffer.push(genString(getIdString(flags&~EFLAG_MASK)))
		g_code_buffer.push('"')
		break
	case EFLAG_VARIABLE:
		pobj_var=getVariable(pe)
		if !pobj_var:
			errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pe,"unable to generate C code for undeclared variable '@1'".Replace(["@1",citeexpr(pe)]))
			g_code_buffer.push('?err?')
		else
			if expr_oplevel==LEVEL_STORE_HACK:
				dat_var=readPoolTyped(pobj_var,TSCCPValue)
				t=getValueType(dat_var)
				if !t:
					errorAtExpr(ETYPE_LOW_LEVEL_ERROR,pe,"failed to deduce the type of variable '@1' (variable '@2')".Replace(["@1",citeexpr(pe),"@2",dumpExpr(pe,__zero(fcolorer_callback))]))
				else
					if Platform.BUILD=="debug":
						if readPool(t)==g_tid_TFunction:
							id_ccnv=getCcnv(t)
							if id_ccnv==g_id_inline||id_ccnv==g_id_inline_loopbody:
								Writeln(dumpExpr(pe,__zero(fcolorer_callback)))
								assert(0)
					if !(readPool(pobj_var+VAR_OFS_USER_FLAGS)&VAR_FLAG_LAMBDAED):
						g_c_scope_stack.back().var_stores.push(pobj_var)
			if readPool(pobj_var+VAR_OFS_USER_FLAGS)&VAR_FLAG_LAMBDAED:
				//is-lambda test when generating variables
				assert(0)
				g_code_buffer.push('s7_BL->m_')
				g_code_buffer.push(toBase32(pobj_var))
			else
				genVar(pobj_var)
		break
	}

auto genFilteredName(int id)
	s=getIdString(id)
	foreach ch,I in s
		if !g_c_id_allowed[int(u8(ch))]:
			g_code_buffer.push('_')
		else
			g_code_buffer.push(ch)
		if I>32:break

auto genCommentName(int id)
	//g_code_buffer.push('/*')
	//g_code_buffer.push(getIdString(id))
	//g_code_buffer.push('*/')
	genFilteredName(id)
	
auto genFunctionName(PCTObject pobjfn)
	//fn=readPoolTyped(pobjfn,TFunction)
	id_name=readPool(pobjfn+FUNCTION_OFS_NAME)
	if getFFlag(pobjfn)&FFLAG_EXPORTED:
		genFilteredName(id_name)
	else
		g_code_buffer.push("s7_f")
		g_code_buffer.push(toBase32(pobjfn))
		//if toBase32(pobjfn)=='1EQ6DM'&&g_code_buffer.d==g_structs_slots_buffer.d:
		//	Writeln(dumpFunction(pobjfn))
		//	assert(0)
		if id_name&&g_readable_c_code:
			g_code_buffer.push('_')
			genCommentName(id_name)

auto genVar(PCTObject pobj_var)
	g_code_buffer.push('s7_v')
	g_code_buffer.push(toBase32(pobj_var))
	if g_readable_c_code:
		id_name=readPool(pobj_var+VAR_OFS_ID)
		if id_name:
			g_code_buffer.push('_')
			genCommentName(id_name)

auto cgPushScope()
	g_c_scope_stack.push(TCScope(){'outer_code_buffer':g_code_buffer,'var_stores':new PCTObject[],'dbg_slots':new PCTObject[]})
	g_code_buffer=new string
	assert(!g_local_decl_buffer.n)

g_array_stackalloc_info=new int3[PCTObject]
auto cgPopScope()
	stk=g_c_scope_stack.pop()
	vars=stk.var_stores
	//Writeln(vars.d,' ',vars.n,' ',vars.sz)
	vars.Sort()
	vars.Unique()
	s_inside=g_code_buffer
	g_code_buffer=stk.outer_code_buffer
	g_code_buffer.push(g_local_decl_buffer)
	g_local_decl_buffer=new string
	//g_code_buffer.push('{')
	foreach pobj_var in vars
		dat_var=readPoolTyped(pobj_var,TSCCPValue)
		t=getValueType(dat_var)
		if !t:continue
		if tisrealclass(t):
			if testUserFlag(pobj_var,VAR_FLAG_CLASS_IS_STACK_ALLOCED):
				//do NOT initialize the pointer to the slot - we want to fool NULL tests
				genClassName(t)
				g_code_buffer.push(' s7_SA_')
				g_code_buffer.push(toBase32(pobj_var))
				g_code_buffer.push(';')
			if testUserFlag(pobj_var,VAR_FLAG_ARRAY_STACK_ALLOCED):
				sainfo=g_array_stackalloc_info[pobj_var]
				t_element=sainfo.x
				bsize=sainfo.y
				if Platform.BUILD=="debug":
					if !t_element:
						Writeln('bad stack array ',dumpObject(pobj_var))
				assert(!!t_element)
				genType(t_element)
				g_code_buffer.push(' s7_arr_')
				g_code_buffer.push(toBase32(sainfo.z))
				g_code_buffer.push('[')
				g_code_buffer.push(string(bsize))
				g_code_buffer.push('/sizeof(')
				genType(t_element)
				g_code_buffer.push(')];')
		if testUserFlag(pobj_var,VAR_FLAG_LAMBDAED):continue
		//Writeln(dumpObject(pobj_var),' ',t)
		genType(t)
		g_code_buffer.push(' ')
		genVar(pobj_var)
		g_code_buffer.push('=(')
		genType(t)
		g_code_buffer.push(')0')
		g_code_buffer.push(';')
		g_code_buffer.push('\n')
	foreach pecall in stk.dbg_slots
		pobjfn=getExprValueAs(readPool(pecall+EXPR_OFS_ARGS+0),g_vtid_CTVAL)
		g_code_buffer.push('TCallStackItemEx s7_Dd')
		g_code_buffer.push('={NULL,')
		genLIString(g_code_buffer,getLIObjectStringPair(pobjfn).x)
		g_code_buffer.push('};')
		g_code_buffer.push('\n')
	g_code_buffer.push(s_inside)
	g_current_c_line_epos=0
	//g_code_buffer.push('}')

auto genClassName(PCTObject t)
	g_code_buffer.push("struct s7_TL")
	g_code_buffer.push(toBase32(t))
	if g_readable_c_code:
		id_name=readPool(t+FUNCTION_OFS_NAME)
		if id_name:
			g_code_buffer.push('_')
			genCommentName(id_name)

auto genType(PCTObject t)
	if tisbuiltin(t):
		ct=readPool(t+1)
		n_bits=((ct&~CTYPE_MASK)+1)*8
		if ct==const_type(CTYPE_FLOAT,32):
			g_code_buffer.push('float')
			return
		else if ct==const_type(CTYPE_FLOAT,64):
			g_code_buffer.push('double')
			return
		if ct==CTYPE_POINTER:
			g_code_buffer.push('void* ')
			return
		if ((ct&CTYPE_MASK)==CTYPE_UINT):
			g_code_buffer.push('unsigned ')
		if n_bits==8:
			g_code_buffer.push('char')
		else if n_bits==16:
			g_code_buffer.push('short')
		else if n_bits==32:
			g_code_buffer.push('int')
		else
			assert(n_bits==64)
			g_code_buffer.push('long long')
		return
	if !t:
		g_code_buffer.push("err!")
		return
	//class / struct / lambda context
	if readPool(t)==g_tid_TFunction:
		genClassName(t)
		g_code_buffer.push("*")
		queueCodeGen(t)
		return
	if Platform.BUILD=="debug":
		Writeln(dumpObject(t))
	assert(0)
	
g_s7_TF_rtti_dtor_used=0
auto genAllCode()
	//don't generate variant ctor - it's useless... but we need its lambda ctx
	//setFFlag(getStdObject(0,STDTYPE_VARIANT),FFLAG_CGEN_QUEUED)
	g_in_code_gen=1
	genCode(g_pe_top,0)
	//it's a function queue
	for(i=0;i<g_gencode_queue.n;i++)
		//Writeln('gencode: ')
		//Writeln(dumpCode(g_gencode_queue[i],__zero(fcolorer_callback)))
		genCode(g_gencode_queue[i],LEVEL_FUNCTION_HACK)
	/////////
	s_headers=new string
	s_headers.push("#define S7_POINTER_BITS "+string(Util.bitSize())+"\n")
	g_c_headers.push(getid("stdlib.h"))//for malloc
	g_c_headers.push(getid("string.h"))//for memset
	if g_enable_debug_instrumentation:
		g_c_headers.push(getid("spaprt_portable.h"))//for debug
	g_c_headers.Sort()
	g_c_headers.Unique()
	json_headers=g_json_pool[getid("h_files")]
	foreach id_header in g_c_headers
		s_headers.push("#include \"")
		s_headers.push(getIdString(id_header).Replace(["\\","/"]))
		s_headers.push("\"\n")
		json_headers.push(id_header)
	s_headers.push("typedef "+(Util.bitSize()==64?"long long":"int")+" s7_CT_iptr;")
	//////////
	auto genStructDef(PCTObject t)
		//avoid duplication
		auto s=g_struct_code_per_type[t]
		if !s:return
		g_struct_code_per_type[t]=string.NULL
		//generate depends first
		plambda_vars=readPool(t+FUNCTION_OFS_PLAMBDA_VARS)
		nlambda_vars=readPool(t+FUNCTION_OFS_NLAMBDA_VARS)
		for j=0:nlambda_vars-1
			pobj_var=readPool(plambda_vars+j)
			t_member=getVariableType(pobj_var)
			if t_member:genStructDef(t_member)
		//generate itself last
		s_headers.push(s)
	foreach t in g_all_struct_types
		genStructDef(t)
	//////////
	s_headers.push(g_structs_slots_buffer)
	//generate function types
	sbk=g_code_buffer
	g_code_buffer=new string
	g_c_ftypes.Sort()
	g_c_ftypes.Unique()
	foreach t_raw_function_type in g_c_ftypes
		ft=readPoolTyped(t_raw_function_type,TFunctionType)
		g_code_buffer.push('typedef ')
		if ft.t_ret&&!tisstruct(ft.t_ret):
			genType(ft.t_ret)
		else
			g_code_buffer.push('void')
		g_code_buffer.push('(*s7_TF')
		g_code_buffer.push(toBase32(t_raw_function_type))
		g_code_buffer.push(')(void*')
		for j=0:ft.n_args-1
			g_code_buffer.push(',')
			genType(readPool(ft.p_arg_types+j))
		if ft.t_ret&&tisstruct(ft.t_ret):
			g_code_buffer.push(',')
			genType(ft.t_ret)
		g_code_buffer.push(');\n')
	if g_s7_TF_rtti_dtor_used:
		g_code_buffer.push("typedef void(*s7_TF_rtti_dtor)(void*);")
	s_headers.push(g_code_buffer)
	g_code_buffer=sbk
	/////////
	s_headers.push(g_forward_buffer)
	s_headers.push(g_c_global_buffer)
	s_headers.push(g_global_strings_code)
	/////////
	if g_enable_debug_instrumentation:
		s_headers.push(g_debug_file_info_buffer)
		s_headers.push('static const TLineInfoItemEx s7_DL[]={')
		s_headers.push(g_debug_line_info_buffer)
		s_headers.push('};')
	s_headers.push(g_code_buffer)
	return s_headers
