//todo: pull in duktape.c
//coulddo: type-weakening: const property names
//DUK_OPT_NO_JX
//DUK_OPT_NO_JC
module duktape
	duk_create_heap_default=__c_function(__pointer,"duk_create_heap_default","duktape.h", "c_files","duktape.c")
	duk_destroy_heap=__c_function(int,"duk_destroy_heap","duktape.h")
	duk_push_lstring=__c_function(__pointer,"duk_push_lstring","duktape.h")
	duk_push_number=__c_function(int,"duk_push_number","duktape.h")
	duk_push_pointer=__c_function(int,"duk_push_pointer","duktape.h")
	duk_push_int=__c_function(int,"duk_push_int","duktape.h")
	duk_push_this=__c_function(int,"duk_push_this","duktape.h")
	duk_push_undefined=__c_function(int,"duk_push_undefined","duktape.h")
	duk_dup=__c_function(int,"duk_dup","duktape.h")
	duk_swap_top=__c_function(int,"duk_swap_top","duktape.h")
	duk_remove=__c_function(int,"duk_remove","duktape.h")
	duk_pop=__c_function(int,"duk_pop","duktape.h")
	duk_pop_2=__c_function(int,"duk_pop_2","duktape.h")
	duk_get_top=__c_function(int,"duk_get_top","duktape.h")
	duk_to_number=__c_function(double,"duk_to_number","duktape.h")
	duk_to_int32=__c_function(i32,"duk_to_int32","duktape.h")
	duk_to_uint32=__c_function(u32,"duk_to_uint32","duktape.h")
	duk_to_lstring=__c_function(__pointer,"duk_to_lstring","duktape.h")
	duk_get_prop=__c_function(int,"duk_get_prop","duktape.h")
	duk_get_prop_index=__c_function(int,"duk_get_prop_index","duktape.h")
	duk_get_int=__c_function(int,"duk_get_int","duktape.h")
	duk_get_pointer=__c_function(__pointer,"duk_get_pointer","duktape.h")
	duk_get_length=__c_function(iptr,"duk_get_length","duktape.h")
	duk_get_prototype=__c_function(int,"duk_get_prototype","duktape.h")
	duk_push_heap_stash=__c_function(int,"duk_push_heap_stash","duktape.h")
	duk_push_object=__c_function(int,"duk_push_object","duktape.h")
	duk_push_array=__c_function(int,"duk_push_array","duktape.h")
	duk_push_global_object=__c_function(int,"duk_push_global_object","duktape.h")
	duk_put_prop_index=__c_function(int,"duk_put_prop_index","duktape.h")
	duk_put_prop=__c_function(int,"duk_put_prop","duktape.h")
	duk_set_magic=__c_function(int,"duk_set_magic","duktape.h")
	duk_is_object=__c_function(int,"duk_is_object","duktape.h")
	duk_is_function=__c_function(int,"duk_is_function","duktape.h")
	duk_is_undefined=__c_function(int,"duk_is_undefined","duktape.h")
	duk_is_null_or_undefined=__c_function(int,"duk_is_null_or_undefined","duktape.h")
	duk_has_prop=__c_function(int,"duk_has_prop","duktape.h")
	//duk_peval=__c_function(int,"duk_peval","duktape.h")
	duk_eval_raw=__c_function(int,"duk_eval_raw","duktape.h")
	duk_pcall=__c_function(int,"duk_pcall","duktape.h")
	duk_pcall_method=__c_function(int,"duk_pcall_method","duktape.h")
	duk_set_finalizer=__c_function(int,"duk_set_finalizer","duktape.h")
	duk_set_prototype=__c_function(int,"duk_set_prototype","duktape.h")
	duk_to_object=__c_function(int,"duk_to_object","duktape.h")
	//duk_to_pointer=__c_function(int,"duk_to_pointer","duktape.h")
	duk_to_primitive=__c_function(int,"duk_to_primitive","duktape.h")
	duk_error=__c_function(int,"duk_error","duktape.h")
	duk_push_error_object=__c_function(int,"duk_push_error_object","duktape.h")
	duk_is_error=__c_function(int,"duk_is_error","duktape.h")
	///////
	DUK_COMPILE_EVAL=(1 << 0)
	DUK_COMPILE_FUNCTION=(1 << 1)
	DUK_COMPILE_STRICT=(1 << 2)
	DUK_COMPILE_SAFE=(1 << 3)
	DUK_COMPILE_NORESULT=(1 << 4)
	DUK_COMPILE_NOSOURCE=(1 << 5)
	DUK_COMPILE_STRLEN=(1 << 6)
	///////
	//least wrapping - use the original api to get the args
	//the who-hold-the-reference problem
	//problem: we can't assign it willy-nilly, the RC doesn't work for funcobjs, most likely we just get a bunch of global API
	//use magic
	JSNativeCallback=function(JSContext):int
	auto call_ctx_callback(__pointer hctx,int fid)
		duk_push_heap_stash(hctx);
		duk_get_prop_index(hctx,-1,1)
		pctx=__cast(JSContext,duk_get_pointer(hctx,-1))
		duk_pop_2(hctx)
		return pctx.m_all_callbacks[fid](pctx)
	__C(int,"@global:
	typedef int(*s7_CB_duktape_fptr)(void*,int);
	duk_ret_t s7_CB_duktape(duk_context *ctx){
		duk_int_t magic=duk_get_current_magic(ctx);
		int ret=((s7_CB_duktape_fptr)@1)((void*)ctx,(int)magic);
		if(ret==-1){duk_throw(ctx);}
		return ret;
	}",call_ctx_callback)
	__reach(call_ctx_callback)
	class JSContext
		m_hctx=duk_create_heap_default()
		m_ref_first_free=-1
		m_ref_count=1
		m_all_callbacks=new JSNativeCallback[]
		m_cached_prototypes=new JSObject[iptr]
		inline _ctx()
			return __C(__pointer,"(duk_context*)@1",m_hctx)
		auto __done__()
			duk_destroy_heap(m_hctx)
		///////////
		//init the ref-holding stash
		auto _init_stash()
			//set-up stash[0] as an array of ref-holders, ref 0 is always the global object
			duk_push_heap_stash(_ctx());
			duk_push_array(_ctx());
			duk_push_global_object(_ctx())
			duk_put_prop_index(_ctx(),-2,0);//array[0]=global
			duk_put_prop_index(_ctx(),-2,0);//stash[0]=array[0]
			duk_push_pointer(_ctx(),__cast(__pointer,this))
			duk_put_prop_index(_ctx(),-2,1);//stash[1]=this
			duk_pop(_ctx());
			///////////////
			//set up a default finalizer
			m_all_callbacks.push(function(JSContext JS){
				duk_to_primitive(_ctx(),0,0)
				vptr=duk_get_pointer(_ctx(),0)
				if vptr:
					ret=__cast(__variant,vptr)
					__explicit_rc(ret,-1)
				return 0
			})
		//ref allocation / free
		inline _push_stash_array()
			duk_push_heap_stash(_ctx());
			duk_get_prop_index(_ctx(),-1,0)
			duk_remove(_ctx(),-2)
		auto _alloc_refid()
			if m_ref_first_free>=0:
				//fetch the next free list element
				ret=m_ref_first_free
				//[] -> [array]
				_push_stash_array()
				//[array] -> [next]
				duk_get_prop_index(_ctx(),-1,m_ref_first_free)
				duk_remove(_ctx(),-2)
				//pop
				m_ref_first_free=duk_get_int(_ctx(),-1)
				duk_pop(_ctx())
			return m_ref_count++
		auto _free_refid(int refid)
			_push_stash_array()
			duk_push_int(_ctx(),m_ref_first_free)
			duk_put_prop_index(_ctx(),-2,refid);
			duk_pop(_ctx())
			m_ref_first_free=refid
		auto _pop_object()
			if !duk_is_undefined(_ctx(),-1):
				duk_to_object(_ctx(),-1)
			refid=_alloc_refid()
			_push_stash_array()
			duk_swap_top(_ctx(),-2)
			duk_put_prop_index(_ctx(),-2,refid)
			//leaves the stash array in the stack
			return refid
		auto _pop_function()
			if !duk_is_function(_ctx(),-1):
				duk_pop(_ctx())
				duk_push_undefined(_ctx())
			refid=_alloc_refid()
			_push_stash_array()
			duk_swap_top(_ctx(),-2)
			duk_put_prop_index(_ctx(),-2,refid)
			//leaves the stash array in the stack
			return refid
		auto _push_object(int refid)
			_push_stash_array()
			duk_get_prop_index(_ctx(),-1,refid);
			duk_remove(_ctx(),-2)
		inline _push_value(value)
			T=typeof(value)
			if T==string:
				duk_push_lstring(_ctx(),value,value.n)
			else if __is_type("int",T)||__is_type("float",T)://&&T!=i64&&T!=u64
				duk_push_number(_ctx(),double(value))
			else if T==JSNativeCallback:
				//wrap it up in s7_CB_duktape
				fid=int(m_all_callbacks.n)
				m_all_callbacks.push(value)
				__C(int,"duk_push_c_function(@1,s7_CB_duktape,DUK_VARARGS)",_ctx())
				duk_set_magic(_ctx(),-1,fid)
			else if T==JSObject://||T==JSFunction:
				if !value:
					duk_push_undefined(_ctx())
				else
					if Platform.BUILD=="debug":
						if __cast(iptr,value.m_jsctx)!=__cast(iptr,this):
							__basic_api.spapReportError("cannot mix JS objects from different contexts")
					_push_object(value.m_handle)
			else if T==__pointer:
				duk_push_pointer(_ctx(),value)
			else if __has_member(value,"__JS_autocast"):
				if !value:
					duk_push_undefined(_ctx())
				else
					_push_value(value.__JS_autocast(this))
			else if __has_member(value,"__JS_prototype")
				////////////
				//make into object and set the prototype if it has one
				if !value:
					duk_push_undefined(_ctx())
				else
					obj=variant(value)
					__explicit_rc(obj,1)
					//////////
					rtti=iptr(__get_rtti(obj))
					obj_proto=m_cached_prototypes[rtti]
					if !obj_proto:
						obj_proto=New()
						value.__JS_prototype(obj_proto)
						m_cached_prototypes[rtti]=obj_proto
					//////////
					duk_push_object(_ctx())
					duk_push_pointer(_ctx(),__cast(__pointer,obj))
					duk_put_prop_index(_ctx(),-2,0);
					_push_object(obj_proto.m_handle)
					duk_set_prototype(_ctx(),-2)
					////////////
					//set the finalizer
					__C(int,"duk_push_c_function(@1,s7_CB_duktape,1)",_ctx())
					duk_set_magic(_ctx(),-1,0)
					duk_set_finalizer(_ctx(),-2)
			else
				if !value:
					duk_push_undefined(_ctx())
				else
					obj=variant(value)
					__explicit_rc(obj,1)
					duk_push_pointer(_ctx(),__cast(__pointer,obj))
					//set a releasing finalizer
					duk_to_object(_ctx(),-1)
					////////////
					//set the finalizer
					__C(int,"duk_push_c_function(@1,s7_CB_duktape,1)",_ctx())
					duk_set_magic(_ctx(),-1,0)
					duk_set_finalizer(_ctx(),-2)
		inline _put_prop_and_pop(value)
			_push_value(value)
			duk_put_prop(_ctx(),-3)
			duk_pop(_ctx())
		inline _pop_typed(T,count)
			if T==double:
				ret=duk_to_number(_ctx(),-1)
			else if T==i32:
				ret=duk_to_int32(_ctx(),-1)
			else if T==u32:
				ret=duk_to_uint32(_ctx(),-1)
			else if __is_type("int",T)||__is_type("float",T)://&&T!=i64&&T!=u64
				ret=T(duk_to_number(_ctx(),-1))
			else if T==string:
				if duk_is_null_or_undefined(_ctx(),-1):
					ret=string.NULL
				else
					lg=0L
					pstr=iptr(duk_to_lstring(_ctx(),-1,&lg))
					ret=__ptrToString(pstr,lg)
			else if T==JSObject:
				refid=_pop_object()
				ret=JSObject(){"m_jsctx":this,"m_handle":refid}
				//else if T==JSFunction:
				//	refid=_pop_function()
				//	ret=JSFunction(){"m_jsctx":this,"m_handle":refid}
			else if T==__pointer:
				ret=duk_get_pointer(_ctx(),-1)
			else if __has_member(__zero(T),"__JS_prototype")
				duk_get_prop_index(_ctx(),-1,0)
				duk_to_primitive(_ctx(),-1,0)
				vptr=duk_get_pointer(_ctx(),-1)
				if !vptr:
					ret=__zero(T)
				else
					ret=__cast(__variant,vptr).as(T)
				duk_pop(_ctx())
			else
				//duk_to_pointer(_ctx(),-1)
				duk_to_primitive(_ctx(),-1,0)
				vptr=duk_get_pointer(_ctx(),-1)
				if !vptr:
					ret=__zero(T)
				else
					ret=__cast(__variant,vptr).as(T)
			if count==1:
				duk_pop(_ctx())
			else
				duk_pop_2(_ctx())
			return ret
		/////////
		inline GetGlobal()
			return new JSObject(){"m_jsctx":this}
		inline debugGetStashArray()
			_push_stash_array()
			return _pop_typed(JSObject,1)
		auto NewArray()
			duk_push_array(_ctx())
			return _pop_typed(JSObject,1)
		auto New()
			duk_push_object(_ctx())
			return _pop_typed(JSObject,1)
		/////////
		auto GetThis()
			duk_push_this(_ctx())
			return _pop_typed(JSObject,1)
		inline GetNativeThis(T)
			js_this=GetThis()
			if !js_this:
				return __zero(T)
			else
				return js_this.as(T)
		inline GetParamCount()
			return duk_get_top(_ctx());
		inline Param(int id)
			return {
				as:inline(T){
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						return _pop_typed(T,1);
					else
						return T.NULL
				},
				or:inline(dflt){
					auto T=typeof(dflt)
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						return _pop_typed(T,1);
					else
						return dflt
				}
			}
		inline Return()
			n_args=arguments.length
			if n_args==1:
				_push_value(arguments[0])
				return 1
			else if n_args==0:
				return 0
			else
				__error("JSContext.Return can only take 0 or 1 arguments")
		inline ReturnError(string serr)
			s=new(serr)
			s.push(char(0))
			duk_push_error_object(_ctx(),1,"%s",s)
			return -1
		auto debugError(string serr)
			s=new(serr)
			s.push(char(0))
			duk_error(_ctx(),1,"%s",s)
			s.discard()
		/////////
		inline eval(T,string s)
			__explicit_rc(this,1)
			if arguments.length>2:
				sfile=arguments[2]
			else
				sfile="<eval>"
			duk_push_lstring(_ctx(),__pointer(sfile.d),s.n)
			duk_eval_raw(_ctx(),s,s.n,DUK_COMPILE_EVAL|DUK_COMPILE_SAFE|DUK_COMPILE_NOSOURCE)
			//todo: check the return status to see whether it's an error
			ret=_pop_typed(T,1)
			__explicit_rc(this,-1)
			return ret
		auto debugEval(string scode,string fnamen)
			errobj=eval(JSObject,scode,fnamen)
			if errobj&&errobj.has("stack"):
				//todo: duk_is_error
				System.Console.Writeln(errobj["stack"].as(string))
				return 0
			else
				return 1
		auto debugRunFile(string fname)
			scode=System.IO.ReadAll(fname)
			if !scode:
				System.Console.Writeln("failed to load js file: '@1'".Replace(["@1",fname]))
				return 0
			fnamen=new(fname)
			fnamen.push(char(0))
			return debugEval(scode,fnamen)
		/////////
		_init_stash()
	///////
	inline _push_subscript(ctx,name)
		T=typeof(name)
		if T==string:
			duk_push_lstring(ctx,name,name.n)
		else if __is_type("int",T):
			duk_push_int(ctx,int(name))
		else
			__error("invalid Javascript subscript type '@1': only int and string are allowed",T)
	if Platform.BUILD=="debug":
		class _IncompleteJSPropertyAccess_Checker
			m_completed=0
			auto __done__()
				if !m_completed:
					__basic_api.spapReportError("JS object property read must be completed with .as, .or, .Call. If you're expecting an object, use .as(JSObject)")
	struct _IncompleteJSPropertyAccess
		m_jsctx=JSContext.NULL
		if Platform.BUILD=="debug":
			m_checker=_IncompleteJSPropertyAccess_Checker()
		inline _ctx()
			return m_jsctx._ctx()
		inline has(name)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			if duk_is_object(_ctx(),-1):
				_push_subscript(_ctx(),name)
				ret=duk_has_prop(_ctx(),-2)
			else
				ret=0
			duk_pop_2(_ctx())
			return ret
		inline operator[](name)
			//[object previous-subscript] -> [child current-subscript]
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			duk_remove(_ctx(),-2)
			_push_subscript(_ctx(),name)
			return this
		inline as(T)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			//[object previous-subscript] -> [object value] -> []
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			return m_jsctx._pop_typed(T,2)
		inline or(dflt)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			//[object previous-subscript] -> [object value] -> []
			T=typeof(dflt)
			if duk_is_object(_ctx(),-2):
				duk_dup(_ctx(),-1)
				if duk_has_prop(_ctx(),-3):
					duk_get_prop(_ctx(),-2)//for the *previous* subscript
					return m_jsctx._pop_typed(T,2)
			duk_pop_2(_ctx())
			return dflt
		inline set_operator[](name,value)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			duk_remove(_ctx(),-2)
			_push_subscript(_ctx(),name)
			m_jsctx._put_prop_and_pop(value)
		inline Call(T)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>0:
					m_jsctx._push_value(arguments0[i])
			duk_pcall(_ctx(),arguments0.length-1)
			return m_jsctx._pop_typed(T,2)
		inline CallAsMethod(T,arg_this)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			m_jsctx._push_value(arg_this)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,2)
		inline CallMethod(T,string fname)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			return this.as(JSObject).CallMethod.call(arguments)
	///////
	//don't new this in external code
	class JSObject
		m_jsctx=JSContext.NULL
		m_handle=0
		inline _ctx()
			return m_jsctx._ctx()
		inline GetContext()
			return m_jsctx
		inline has(name)
			m_jsctx._push_object(m_handle)
			if duk_is_object(_ctx(),-1):
				_push_subscript(_ctx(),name)
				ret=duk_has_prop(_ctx(),-2)
			else
				ret=0
			duk_pop(_ctx())
			return ret
		inline length()
			m_jsctx._push_object(m_handle)
			ret=duk_get_length(_ctx(),-1)
			duk_pop(_ctx())
			return ret
		inline operator[](name)
			//[] -> [object subscript]
			if Platform.BUILD=="debug":
				if !m_jsctx:
					__basic_api.spapReportError("JSObject must not be created through new")
			m_jsctx._push_object(m_handle)
			_push_subscript(_ctx(),name)
			return _IncompleteJSPropertyAccess(){"m_jsctx":m_jsctx}
		inline set_operator[](name,value)
			m_jsctx._push_object(m_handle)
			_push_subscript(_ctx(),name)
			m_jsctx._put_prop_and_pop(value)
		inline as(T)
			m_jsctx._push_object(m_handle)
			return m_jsctx._pop_typed(T,1)
		inline Call(T)
			m_jsctx._push_object(m_handle)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>0:
					m_jsctx._push_value(arguments0[i])
			duk_pcall(_ctx(),arguments0.length-1)
			return m_jsctx._pop_typed(T,1)
		inline CallAsMethod(T,arg_this)
			m_jsctx._push_object(m_handle)
			m_jsctx._push_value(arg_this)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,1)
		inline CallMethod(T,string fname)
			m_jsctx._push_object(m_handle)
			_push_subscript(_ctx(),fname)
			duk_get_prop(_ctx(),-2)
			duk_swap_top(_ctx(),-2)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,1)
		inline SetPrototype(JSObject proto)
			m_jsctx._push_object(m_handle)
			m_jsctx._push_object(proto.m_handle)
			duk_set_prototype(_ctx(),-2)
			duk_pop(_ctx())
		auto __done__()
			if m_handle:
				m_jsctx._free_refid(m_handle)
				m_jsctx=JSContext.NULL
		////////////////////////////////
		inline ExportProperty(self,name)
			sname=name
			T_class=typeof(self)
			T_property=typeof(__dot(self,name))
			prop=m_jsctx.New()
			prop["get"]=function(JSContext JS){
				js_this=JS.GetThis();
				if !js_this:return 0
				native_this=js_this.as(T_class)
				if !native_this:return 0
				return JS.Return(__dot(native_this,name))
			}
			prop["set"]=function(JSContext JS){
				js_this=JS.GetThis();
				if !js_this:return 0
				native_this=js_this.as(T_class)
				if !native_this:return 0
				__dot(native_this,name)=JS.Param(0).as(T_property)
				return 0
			}
			m_jsctx.GetGlobal()["Object"]["defineProperty"].Call(JSObject,this,sname,prop)
		inline ExportMethod(self,sname,fn)
			T_class=typeof(self)
			this[sname]=function(JSContext JS){
				native_this=JS.GetNativeThis(T_class)
				if !native_this:return 0
				return fn.Bind(native_this)(JS)
			}
		
JSContext=duktape.JSContext
JSObject=duktape.JSObject
