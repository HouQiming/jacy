import "system.jc"
import System.Console.*
import System.Algorithm.*

/*
real pb value:
	storage (pointer / array)
	type desc struct
	methods:
		operator[]
		set_operator[]
		compile-time map would help tremendously for structs...
			but it's unlikely for us to have too many members
type desc struct methods:
	create value
	GetSubscriptOffset
this is a simpler, but less optimizable struct system
	it can easily support union
	if it does so, it cannot be easily flattened
*/

/*
robust serialization:
	we want: fast same-type detection, fast different type readback
	same-type detection would be a simple string ==
	for struct, we should have an offset-to-offset memcpy
	we also want the type desc to be easily *consumable*
differentiate const-sized array and var-length array?
	they are different when serialized
	do we want to be *THAT* robust? yes
		the item-day-tick array
		varsized element
	separate per-instance-offset-table-needing things into a different series of PB types
	confusing mess
		PBArray
		PBStruct
		PBVArray
		(X) PBArrayV
			is this even useful? if the elements are variable-sized, we need an offset table anyway
			a const n won't make it faster?
				how do we pack the offset tables?
		PBVArrayV
		PBStructV
			is offset table even a good idea here?
				it is indeed faster for read-only data
			but, a class member is worth it when you do frequent pushes
	just use normal jc structs / arrays
		could bridge array / PB interpretation with u8[]
			each PB type is a struct with a unique jc type and ideally, no real member
		PB is still needed for low level arrays - fast + predictable layout (type desc more likely to match exactly)
	offset-table-based 2D array with small secondary dimension is frequently used though
		a dedicated type for this
		VArrayOfSmallVArray
*/
PB_SERIAL_TYPE_BASIC=0L
PB_SERIAL_TYPE_STRUCT=0x10000L
PB_SERIAL_TYPE_ARRAY=0x20000L

PBBasicType=inline(T){
	return {
		IS_PB_BUILTIN:1,
		PB_builtin_type:T,
	};
}

PBFloat=PBBasicType(float)
PBInt=PBBasicType(int)

inline PBValue(type_desc,iptr ptr)
	if readOptionalMember(type_desc,"IS_PB_BUILTIN",0):
		return __memory(type_desc.PB_builtin_type,ptr)
	else
		T=struct{
			d=__uninit()
			T=__uninit()
			operator[]=inline(a){
				return T.getSubscript(d,a)
			}
			set_operator[]=inline(a,value){
				return T.setSubscript(d,a,value)
			}
			__C_autocast=inline(){return __pointer(d)}
		}
		return T(){
			d:ptr,
			T:type_desc,
		}

inline set_PBValue(type_desc,iptr ptr,value)
	if readOptionalMember(type_desc,"IS_PB_BUILTIN",0):
		__memory(type_desc.PB_builtin_type,ptr)=value
	else if readOptionalMember(value,"IS_ARRAY",0):
		assert(value.n*sizeof(value[0])==PBSizeof(type_desc))
		__basic_api.memcpy(__pointer(ptr),__pointer(value.d),PBSizeof(type_desc))
	else
		//assert(typeof(type_desc)==typeof(value.T))
		assert(PBSizeof(type_desc)==PBSizeof(value.T))
		__basic_api.memcpy(__pointer(ptr),__pointer(value.d),PBSizeof(type_desc))

inline PBSizeof(type_desc)
	if readOptionalMember(type_desc,"IS_PB_BUILTIN",0):
		return sizeof(type_desc.PB_builtin_type)
	else
		return type_desc.size()

inline PBStruct()
	if (arguments.length&1):
		__error("PBStruct has to take an even number of args, not @1",arguments.length)
	else if !arguments.length:
		__error("an empty PBStruct does not make sense")
	n_members=(arguments.length>>1)
	T=struct{
		m_offsets=__uninit();
		m_types=__uninit();
		size=inline(){
			return m_offsets[n_members]
		}
		getSubscript=inline(iptr ptr,a){
			if typeof(a)!=string:
				__error("invalid subscript type @1",typeof(a))
			else
				auto ret=__uninit()
				for i in crange(n_members)
					if a==arguments[i*2+1]:
						ret=PBValue(m_types[i],ptr+m_offsets[i])
				return ret
		}
		setSubscript=inline(iptr ptr,a,value){
			if typeof(a)!=string:
				__error("invalid subscript type @1",typeof(a))
			else
				for i in crange(n_members)
					if a==arguments[i*2+1]:
						PBValue(m_types[i],ptr+m_offsets[i])=value
		}
	}
	auto ret=T()
	ret.m_offsets=__tuple(n_members+1);
	ret.m_types=__tuple(n_members);
	ret.m_offsets[0]=0L
	for i in crange(n_members)
		sz_i=PBSizeof(arguments[i*2])
		ret.m_offsets[i+1]=ret.m_offsets[i]+sz_i
		ret.m_types[i]=arguments[i*2]
	return ret

inline PBArray(t0,iptr n)
	T=struct{
		n=__uninit();
		m_t0=__uninit();
		m_szele=__uninit();
		size=inline(){
			return n*m_szele
		}
		getSubscript=inline(iptr ptr,a){
			if !__is_type("int",typeof(a)):
				__error("invalid subscript type @1",typeof(a))
			else
				assert(a>=0)
				assert(a<n)
				return PBValue(m_t0,ptr+a*m_szele)
		}
		setSubscript=inline(iptr ptr,a,value){
			if !__is_type("int",typeof(a)):
				__error("invalid subscript type @1",typeof(a))
			else
				assert(a>=0)
				assert(a<n)
				PBValue(m_t0,ptr+a*m_szele)=value
		}
		//serializeType=inline(iptr[] stype){
		//	//int format could work better
		//	nout0=stype.n
		//	stype.push(0L)
		//	stype.push(this.size())
		//	stype.push(PB_SERIAL_TYPE_ARRAY)
		//	stype.push(n)
		//	m_t0.serializeType(stype)
		//	stype[nout0]=stype.n-nout0
		//}
		//createUnserializer=inline(iptr[] memcpy_map, iptr ofs_tar, iptr ofs_src,string stype_src){
		//	//here we actually *WANT* errors in release mode
		//	assert(stype_src[0]=='[')
		//	if stype_src[0]!='[':
		//		//just zero out everything if the type doesn't match
		//		return
		//	prb=stype_src.indexOf(']')
		//	assert(prb>0)
		//	if !(prb>0):
		//		//just zero out everything if the type doesn't match
		//		return
		//	n_src=parseInt(stype_src[1:prb-1])
		//	if n_src!=this.n:
		//		return
		//	if readOptionalMember(m_t0,"IS_PB_BUILTIN",0):
		//		memcpy_map.push(ofs_tar)
		//		memcpy_map.push(ofs_src)
		//		memcpy_map.push(this.size())
		//	else
		//		nout0=memcpy_map.n
		//		m_t0.createUnserializer(memcpy_map,ofs_tar,ofs_src,stype_src)
		//		nout1=memcpy_map.n
		//		for i=1:n-1
		//			delta=m_szele*i
		//			for j=nout0:3:nout1-3
		//				memcpy_map.push(memcpy_map[j+0]+delta)
		//				memcpy_map.push(memcpy_map[j+1]+!?) //todo: the src type SIZE - just serialize it
		//				memcpy_map.push(memcpy_map[j+2])
		//}
	}
	return T(){
		n:n,
		m_t0:t0,
		m_szele:PBSizeof(t0),
	}

inline PBFromArray(type_desc,value)
	if !readOptionalMember(value,"IS_ARRAY",0):
		__error("PBBind has to take an array, not @1",typeof(value))
	assert(value.n*sizeof(value.T)==PBSizeof(type_desc))
	return PBValue(type_desc,value.d)

inline PBArrayFromArray(type_desc,value)
	n=value.n*sizeof(value.T)/PBSizeof(type_desc)
	assert(n*PBSizeof(type_desc)==value.n*sizeof(value.T))
	return PBValue(PBArray(type_desc,n),value.d)
