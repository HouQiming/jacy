import 'system.jc'
import 'leak-detection.jc'
import System.Console.*

//coulddo: type-weakening: const property names
//DUK_OPT_NO_JX
//DUK_OPT_NO_JC
module duktape
	duk_create_heap_default=__c_function(__pointer,"duk_create_heap_default","duktape.h", "c_files","duktape.c", "h_files","duk_config.h")
	duk_destroy_heap=__c_function(int,"duk_destroy_heap","duktape.h")
	duk_push_string=__c_function(__pointer,"duk_push_string","duktape.h")
	duk_push_lstring=__c_function(__pointer,"duk_push_lstring","duktape.h")
	duk_push_number=__c_function(int,"duk_push_number","duktape.h")
	duk_push_pointer=__c_function(int,"duk_push_pointer","duktape.h")
	duk_push_int=__c_function(int,"duk_push_int","duktape.h")
	duk_push_this=__c_function(int,"duk_push_this","duktape.h")
	duk_push_undefined=__c_function(int,"duk_push_undefined","duktape.h")
	duk_dup=__c_function(int,"duk_dup","duktape.h")
	duk_swap_top=__c_function(int,"duk_swap_top","duktape.h")
	duk_remove=__c_function(int,"duk_remove","duktape.h")
	duk_pop=__c_function(int,"duk_pop","duktape.h")
	duk_pop_2=__c_function(int,"duk_pop_2","duktape.h")
	duk_get_top=__c_function(int,"duk_get_top","duktape.h")
	duk_to_number=__c_function(double,"duk_to_number","duktape.h")
	duk_to_int32=__c_function(i32,"duk_to_int32","duktape.h")
	duk_to_uint32=__c_function(u32,"duk_to_uint32","duktape.h")
	duk_to_string=__c_function(__pointer,"duk_to_string","duktape.h")
	duk_to_lstring=__c_function(__pointer,"duk_to_lstring","duktape.h")
	duk_get_prop=__c_function(int,"duk_get_prop","duktape.h")
	duk_get_prop_index=__c_function(int,"duk_get_prop_index","duktape.h")
	duk_get_int=__c_function(int,"duk_get_int","duktape.h")
	duk_get_pointer=__c_function(__pointer,"duk_get_pointer","duktape.h")
	duk_get_length=__c_function(iptr,"duk_get_length","duktape.h")
	duk_get_prototype=__c_function(int,"duk_get_prototype","duktape.h")
	duk_get_buffer_data=__c_function(__pointer,"duk_get_buffer_data","duktape.h")
	duk_push_heap_stash=__c_function(int,"duk_push_heap_stash","duktape.h")
	duk_push_object=__c_function(int,"duk_push_object","duktape.h")
	duk_push_array=__c_function(int,"duk_push_array","duktape.h")
	duk_push_buffer=__c_function(int,"duk_push_buffer","duktape.h")
	duk_push_buffer_object=__c_function(int,"duk_push_buffer_object","duktape.h")
	duk_push_external_buffer=__c_function(int,"duk_push_external_buffer","duktape.h")
	duk_config_buffer=__c_function(int,"duk_config_buffer","duktape.h")
	duk_push_global_object=__c_function(int,"duk_push_global_object","duktape.h")
	duk_put_prop_string=__c_function(int,"duk_put_prop_string","duktape.h")
	duk_put_prop_index=__c_function(int,"duk_put_prop_index","duktape.h")
	duk_put_prop=__c_function(int,"duk_put_prop","duktape.h")
	//duk_set_magic=__c_function(int,"duk_set_magic","duktape.h")
	duk_is_object=__c_function(int,"duk_is_object","duktape.h")
	duk_is_function=__c_function(int,"duk_is_function","duktape.h")
	duk_is_buffer=__c_function(int,"duk_is_buffer","duktape.h")
	duk_is_undefined=__c_function(int,"duk_is_undefined","duktape.h")
	duk_is_null_or_undefined=__c_function(int,"duk_is_null_or_undefined","duktape.h")
	duk_has_prop=__c_function(int,"duk_has_prop","duktape.h")
	//duk_peval=__c_function(int,"duk_peval","duktape.h")
	duk_eval_raw=__c_function(int,"duk_eval_raw","duktape.h")
	duk_pcall=__c_function(int,"duk_pcall","duktape.h")
	duk_pcall_method=__c_function(int,"duk_pcall_method","duktape.h")
	duk_set_finalizer=__c_function(int,"duk_set_finalizer","duktape.h")
	duk_set_prototype=__c_function(int,"duk_set_prototype","duktape.h")
	duk_to_object=__c_function(int,"duk_to_object","duktape.h")
	//duk_to_pointer=__c_function(int,"duk_to_pointer","duktape.h")
	duk_to_primitive=__c_function(int,"duk_to_primitive","duktape.h")
	duk_error=__c_function(int,"duk_error","duktape.h")
	duk_push_error_object=__c_function(int,"duk_push_error_object","duktape.h")
	duk_push_error_object_raw=__c_function(int,"duk_push_error_object_raw","duktape.h")
	duk_is_error=__c_function(int,"duk_is_error","duktape.h")
	///////
	DUK_COMPILE_EVAL=(1 << 0)
	DUK_COMPILE_FUNCTION=(1 << 1)
	DUK_COMPILE_STRICT=(1 << 2)
	DUK_COMPILE_SAFE=(1 << 3)
	DUK_COMPILE_NORESULT=(1 << 4)
	DUK_COMPILE_NOSOURCE=(1 << 5)
	DUK_COMPILE_STRLEN=(1 << 6)
	///////
	//least wrapping - use the original api to get the args
	//the who-hold-the-reference problem
	//problem: we can't assign it willy-nilly, the RC doesn't work for funcobjs, most likely we just get a bunch of global API
	//use magic
	JSNativeCallback=function(JSContext):int
	JSNativeCallbackImpl=function():int
	auto js_call(__pointer vptr)
		ret=0
		obj=__cast(__variant,vptr)
		if obj:
			f=obj.as(JSNativeCallbackImpl)
			if f:
				ret=f()
		return ret
	auto js_release(__pointer vptr)
		//Writeln('js_release ',vptr)
		ret=__cast(__variant,vptr)
		LeakDetection.JSRelease(__cast(iptr,ret))
		__explicit_rc(ret,-1)
		return 0
	__C(int,"@global:
	typedef int(*s7_CB_duktape_fptr)(void*);

	static duk_ret_t s7_CB_duktape_call(duk_context *ctx){
		void* vptr=NULL;
		duk_push_current_function(ctx);
		duk_get_prop_index(ctx,-1,0);
		duk_to_primitive(ctx,-1,0);
		vptr=duk_get_pointer(ctx,-1);
		duk_pop_2(ctx);
		if(vptr){
			int ret=((s7_CB_duktape_fptr)@1)(vptr);
			if(ret<0){duk_throw(ctx);}
			return ret;
		}else{
			return 0;
		}
	}
	
	static duk_ret_t s7_CB_duktape_finalizer(duk_context *ctx){
		void* vptr=NULL;
		duk_get_prop_index(ctx,0,0);
		duk_to_primitive(ctx,-1,0);
		vptr=duk_get_pointer(ctx,-1);
		duk_pop(ctx);
		if(vptr){
			duk_push_pointer(ctx,NULL);
			duk_put_prop_index(ctx,0,0);
			((s7_CB_duktape_fptr)@2)(vptr);
		}
		return 0;
	}
	",js_call,js_release)
	__reach(js_call)
	__reach(js_release)
	class JSContext
		m_hctx=(inline(){
			if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
				__C(int,"@global:
				static void* s7_LD_duk_calloc(void* udata,size_t sz);
				static void s7_LD_duk_free(void* udata,void* ptrx);
				static void* s7_LD_duk_realloc(void* udata,void* ptrx,size_t sz);
				static void* s7_LD_duk_create_heap(){
					return (void*)duk_create_heap(s7_LD_duk_calloc,s7_LD_duk_realloc,s7_LD_duk_free,NULL,NULL);
				}
				")
				return __C(__pointer,"s7_LD_duk_create_heap()")
			else
				return duk_create_heap_default()
		})()
		m_ref_first_free=-1
		m_ref_count=1
		m_stash_array_position=1
		m_cached_prototypes=new JSObject[iptr]
		inline _ctx()
			return __C(__pointer,"(duk_context*)@1",m_hctx)
		auto __done__()
			duk_destroy_heap(_ctx())
		///////////
		//init the ref-holding stash
		auto _init_stash()
			duk_push_heap_stash(_ctx());
			//find out whether there is another JC module using the context
			duk_get_prop_index(_ctx(),-1,0)
			if duk_is_null_or_undefined(_ctx(),-1):
				m_stash_array_position=1
			else
				m_stash_array_position=duk_get_int(_ctx(),-1)+1
			duk_pop(_ctx());
			duk_push_int(_ctx(),m_stash_array_position)
			duk_put_prop_index(_ctx(),-2,0);//stash[0]=m_stash_array_position
			//////////////////////////////////////////
			//set-up stash[m_stash_array_position] as an array of ref-holders, ref 0 is always the global object
			duk_push_array(_ctx());
			duk_push_global_object(_ctx())
			duk_put_prop_index(_ctx(),-2,0);//array[0]=global
			duk_put_prop_index(_ctx(),-2,m_stash_array_position);//stash[m_stash_array_position]=array
			duk_pop(_ctx());
		//ref allocation / free
		inline _push_stash_array()
			duk_push_heap_stash(_ctx());
			duk_get_prop_index(_ctx(),-1,m_stash_array_position)
			duk_remove(_ctx(),-2)
		auto _alloc_refid()
			if m_ref_first_free>0:
				//fetch the next free list element
				ret=m_ref_first_free
				//[] -> [array]
				_push_stash_array()
				//[array] -> [next]
				duk_get_prop_index(_ctx(),-1,m_ref_first_free)
				duk_remove(_ctx(),-2)
				//pop
				m_ref_first_free=duk_get_int(_ctx(),-1)
				duk_pop(_ctx())
			else
				ret=m_ref_count++
			return ret
		auto _free_refid(int refid)
			_push_stash_array()
			duk_push_int(_ctx(),m_ref_first_free)
			duk_put_prop_index(_ctx(),-2,refid);
			duk_pop(_ctx())
			m_ref_first_free=refid
		auto _pop_object()
			if !duk_is_undefined(_ctx(),-1):
				duk_to_object(_ctx(),-1)
			refid=_alloc_refid()
			_push_stash_array()
			duk_swap_top(_ctx(),-2)
			duk_put_prop_index(_ctx(),-2,refid)
			//leaves the stash array in the stack
			return refid
		//auto _pop_function()
		//	if !duk_is_function(_ctx(),-1):
		//		duk_pop(_ctx())
		//		duk_push_undefined(_ctx())
		//	refid=_alloc_refid()
		//	_push_stash_array()
		//	duk_swap_top(_ctx(),-2)
		//	duk_put_prop_index(_ctx(),-2,refid)
		//	//leaves the stash array in the stack
		//	return refid
		auto _push_object(int refid)
			_push_stash_array()
			duk_get_prop_index(_ctx(),-1,refid);
			duk_remove(_ctx(),-2)
		inline _push_value(value)
			T=typeof(value)
			if T==string:
				if !value:
					duk_push_undefined(_ctx())
				else
					duk_push_lstring(_ctx(),value,value.n)
			else if __is_type("int",T)||__is_type("float",T)://&&T!=i64&&T!=u64
				duk_push_number(_ctx(),double(value))
			else if T==JSNativeCallback:
				//wrap it up in s7_CB_duktape_call
				__C(int,"duk_push_c_function(@1,s7_CB_duktape_call,DUK_VARARGS)",_ctx())
				//create the function object
				obj=variant(function(){return value(this);})
				__explicit_rc(obj,1)
				duk_push_pointer(_ctx(),__cast(__pointer,obj))
				duk_put_prop_index(_ctx(),-2,0);
				duk_push_undefined(_ctx())
				duk_set_prototype(_ctx(),-2)
				if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
					LeakDetection.RegisterRTTI(__Box(function():int))
					LeakDetection.JSAddref(__cast(iptr,obj))
				__C(int,"duk_push_c_function(@1,s7_CB_duktape_finalizer,1)",_ctx())
				duk_set_finalizer(_ctx(),-2)
			else if T==JSObject://||T==JSFunction:
				if !value:
					duk_push_undefined(_ctx())
				else
					if Platform.BUILD=="debug":
						if __cast(iptr,value.m_jsctx)!=__cast(iptr,this):
							__basic_api.spapReportError("cannot mix JS objects from different contexts")
					_push_object(value.m_handle)
			else if T==__pointer:
				duk_push_pointer(_ctx(),value)
			else if __has_member(value,"__JS_autocast"):
				if !value:
					duk_push_undefined(_ctx())
				else
					_push_value(value.__JS_autocast(this))
			else if __has_member(value,"__JS_prototype")
				////////////
				//make into object and set the prototype if it has one
				if !value:
					duk_push_undefined(_ctx())
				else
					if __has_member(value,"__this"):
						obj=value.__this
					else
						obj=variant(value)
					__explicit_rc(obj,1)
					//////////
					rtti=iptr(__get_rtti(obj))
					obj_proto=m_cached_prototypes[rtti]
					if !obj_proto:
						obj_proto=New()
						fn_proto=value.__JS_prototype
						fn_proto.Bind(typeof(value).NULL)(obj_proto)
						m_cached_prototypes[rtti]=obj_proto
						if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
							LeakDetection.RegisterRTTI(typeof(value))
					//System.Console.Writeln('constructed (with prototype) ',__type_name(typeof(value)),' ',
					//	formatNumber(__cast(iptr,obj),{align:8,base:16}))
					//////////
					duk_push_object(_ctx())
					duk_push_pointer(_ctx(),__cast(__pointer,obj))
					duk_put_prop_index(_ctx(),-2,0);
					_push_object(obj_proto.m_handle)
					duk_set_prototype(_ctx(),-2)
					////////////
					//set the finalizer
					if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
						LeakDetection.JSAddref(__cast(iptr,obj))
					__C(int,"duk_push_c_function(@1,s7_CB_duktape_finalizer,1)",_ctx())
					duk_set_finalizer(_ctx(),-2)
			else
				if !value:
					duk_push_undefined(_ctx())
				else
					obj=variant(value)
					if __is_type("struct",typeof(value))
						if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
							LeakDetection.RegisterRTTI(__Box(typeof(value)))
					else
						if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
							LeakDetection.RegisterRTTI(typeof(value))
					__explicit_rc(obj,1)
					//System.Console.Writeln('constructed (no prototype) ',__type_name(typeof(value)),' ',
					//	formatNumber(__cast(iptr,obj),{align:8,base:16}))
					//duk_push_pointer(_ctx(),__cast(__pointer,obj))
					//duk_to_object(_ctx(),-1)
					duk_push_object(_ctx())
					duk_push_pointer(_ctx(),__cast(__pointer,obj))
					duk_put_prop_index(_ctx(),-2,0);
					duk_push_undefined(_ctx())
					duk_set_prototype(_ctx(),-2)
					////////////
					//set the finalizer
					if Platform.BUILD=="debug"&&LeakDetection.isEnabled():
						LeakDetection.JSAddref(__cast(iptr,obj))
					__C(int,"duk_push_c_function(@1,s7_CB_duktape_finalizer,1)",_ctx())
					duk_set_finalizer(_ctx(),-2)
		inline _put_prop_and_pop(value)
			_push_value(value)
			duk_put_prop(_ctx(),-3)
			duk_pop(_ctx())
		inline _pop_c_string(count)
			if duk_is_null_or_undefined(_ctx(),-1):
				ret=NULL
			else
				ret=__C(__pointer,"(char*)@1",duk_to_string(_ctx(),-1))
			if count==1:
				duk_pop(_ctx())
			else
				duk_pop_2(_ctx())
			return ret
		inline _pop_pointer(count)
			if duk_is_null_or_undefined(_ctx(),-1):
				ret=NULL
			else
				sz=0L
				ret=duk_get_buffer_data(_ctx(),-1,&sz)
			if count==1:
				duk_pop(_ctx())
			else
				duk_pop_2(_ctx())
			return ret
		inline _pop_typed(T,count)
			if T==double:
				ret=duk_to_number(_ctx(),-1)
			else if T==i32:
				ret=duk_to_int32(_ctx(),-1)
			else if T==u32:
				ret=duk_to_uint32(_ctx(),-1)
			else if __is_type("int",T)||__is_type("float",T)://&&T!=i64&&T!=u64
				ret=T(duk_to_number(_ctx(),-1))
			else if T==string:
				if duk_is_null_or_undefined(_ctx(),-1):
					ret=string.NULL
				else
					lg=0L
					pstr=iptr(duk_to_lstring(_ctx(),-1,__C_pure(__pointer,"(duk_size_t*)@1",&lg)))
					ret=__ptrToString(pstr,lg)
			else if T==JSObject:
				if duk_is_null_or_undefined(_ctx(),-1):
					ret=JSObject.NULL
				else
					if Platform.BUILD=="debug":
						is_err=0
						if duk_is_error(_ctx(),-1):
							is_err=1
					refid=_pop_object()
					ret=JSObject(){"m_jsctx":this,"m_handle":refid}
					if Platform.BUILD=="debug":
						if is_err:
							System.Console.Writeln(ret["stack"].as(string))
				//else if T==JSFunction:
				//	refid=_pop_function()
				//	ret=JSFunction(){"m_jsctx":this,"m_handle":refid}
			else if T==__pointer:
				ret=duk_get_pointer(_ctx(),-1)
			else if readOptionalMember(T.NULL,"IS_ARRAY",0):
				//reinterpreted buffer
				//if duk_is_buffer(_ctx(),-1):
				sz=0L
				ptr=duk_get_buffer_data(_ctx(),-1,&sz)
				if ptr&&sz&&!(sz&(sizeof(T.NULL.T)-1)):
					ret=T()
					ret.__bind(1,iptr(ptr),iptr(uptr(sz)/uptr(sizeof(T.NULL.T))))
				else
					ret=T.NULL
				//else
				//	ret=T.NULL
			else// if __has_member(__zero(T),"__JS_prototype")
				if duk_is_null_or_undefined(_ctx(),-1):
					ret=__zero(T)
				else
					duk_get_prop_index(_ctx(),-1,0)
					duk_to_primitive(_ctx(),-1,0)
					vptr=duk_get_pointer(_ctx(),-1)
					if !vptr:
						ret=__zero(T)
					else
						ret=__cast(__variant,vptr).as(T)
					duk_pop(_ctx())
			if count==1:
				duk_pop(_ctx())
			else
				duk_pop_2(_ctx())
			return ret
		/////////
		inline GetGlobal()
			return new JSObject(){"m_jsctx":this}
		inline operator[](name)
			return GetGlobal()[name]
		inline set_operator[](name,value)
			GetGlobal()[name]=value
		inline debugGetStashArray()
			_push_stash_array()
			return _pop_typed(JSObject,1)
		auto NewArray()
			duk_push_array(_ctx())
			return _pop_typed(JSObject,1)
		auto New()
			duk_push_object(_ctx())
			return _pop_typed(JSObject,1)
		//auto NewFixedBuffer(iptr size)
		//	duk_push_buffer(_ctx(),size,0)
		//	return _pop_typed(JSObject,1)
		inline _setBufferType(T,size)
			if T==i8:
				flags=__C_pure(int,"DUK_BUFOBJ_INT8ARRAY")
			else if T==u8:
				flags=__C_pure(int,"DUK_BUFOBJ_UINT8ARRAY")
			else if T==i16:
				flags=__C_pure(int,"DUK_BUFOBJ_INT16ARRAY")
			else if T==u16:
				flags=__C_pure(int,"DUK_BUFOBJ_UINT16ARRAY")
			else if T==i32:
				flags=__C_pure(int,"DUK_BUFOBJ_INT32ARRAY")
			else if T==u32:
				flags=__C_pure(int,"DUK_BUFOBJ_UINT32ARRAY")
			else if T==f32:
				flags=__C_pure(int,"DUK_BUFOBJ_FLOAT32ARRAY")
			else if T==f64:
				flags=__C_pure(int,"DUK_BUFOBJ_FLOAT64ARRAY")
			else
				flags=0
				__error('invalid type for JS typed array: "@1"',T)
			duk_push_buffer_object(_ctx(),-1,0L,size*sizeof(T),flags)
		inline NewTypedArray(T,size)
			duk_push_buffer(_ctx(),size*sizeof(T),0)
			_setBufferType(T)
			return _pop_typed(JSObject,2)
		inline PushExternalArray(a0)
			__force_leak(a0)
			variant(a0)
			a=a0[0:]
			duk_push_external_buffer(_ctx())
			duk_config_buffer(_ctx(),-1,__pointer(a.d),a.n*sizeof(a.T))
			_setBufferType(a.T,a.n)
			_push_value(variant(a))
			duk_put_prop_string(_ctx(),-2,"__native_ref")
			return _pop_typed(JSObject,2)
		/////////
		auto GetThis()
			duk_push_this(_ctx())
			return _pop_typed(JSObject,1)
		inline GetNativeThis(T)
			js_this=GetThis()
			if !js_this:
				return __zero(T)
			else
				return js_this.as(T)
		inline GetParamCount()
			return duk_get_top(_ctx());
		inline Param(int id)
			return {
				as:inline(T){
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						if !duk_is_null_or_undefined(_ctx(),-1):
							return _pop_typed(T,1);
						else
							duk_pop(_ctx())
							return T.NULL
					else
						return T.NULL
				},
				or:inline(dflt){
					auto T=typeof(dflt)
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						if !duk_is_null_or_undefined(_ctx(),-1):
							return _pop_typed(T,1);
						else
							duk_pop(_ctx())
							return dflt
					else
						return dflt
				},
				getBufferPointer:inline(){
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						return _pop_pointer(1);
					else
						return NULL
				},
				asCString:inline(){
					if u32(id)<u32(duk_get_top(_ctx())):
						duk_dup(_ctx(),id)
						return _pop_c_string(1);
					else
						return NULL
				}
			}
		inline Return()
			n_args=arguments.length
			if n_args==1:
				_push_value(arguments[0])
				return 1
			else if n_args==0:
				return 0
			else
				__error("JSContext.Return can only take 0 or 1 arguments")
		inline ReturnError(string serr)
			s=new(serr)
			s.push(char(0))
			//duk_push_error_object(_ctx(),1,"%s",s)
			duk_push_error_object_raw(_ctx(),1,__FILE__,__LINE__,"%s",s)
			return -1
		inline VCall(T,n_args)
			duk_pcall(_ctx(),n_args)
			return _pop_typed(T,1)
		auto debugError(string serr)
			s=new(serr)
			s.push(char(0))
			duk_error(_ctx(),1,"%s",s)
			s.discard()
		/////////
		inline eval(T,string s)
			__explicit_rc(this,1)
			if arguments.length>2:
				sfile=arguments[2]
			else
				sfile="<eval>"
			duk_push_lstring(_ctx(),sfile,sfile.n)
			err=duk_eval_raw(_ctx(),s,s.n,DUK_COMPILE_EVAL|DUK_COMPILE_SAFE|DUK_COMPILE_NOSOURCE)
			if T!=JSObject&&err!=0:
				ret=__zero(T)
			else
				ret=_pop_typed(T,1)
			__explicit_rc(this,-1)
			return ret
		auto evalVoid(string s,string sfile)
			__explicit_rc(this,1)
			duk_push_lstring(_ctx(),sfile,sfile.n)
			err=duk_eval_raw(_ctx(),s,s.n,DUK_COMPILE_EVAL|DUK_COMPILE_SAFE|DUK_COMPILE_NOSOURCE)
			if err!=0:
				ret=_pop_typed(JSObject,1)
			else
				ret=JSObject.NULL
			__explicit_rc(this,-1)
			return ret
		inline debugEval(string scode,string fnamen)
			errobj=eval(JSObject,scode,fnamen)
			if errobj&&errobj.has("stack"):
				//todo: duk_is_error
				System.Console.Writeln(errobj["stack"].as(string))
				return 0
			else
				return 1
		auto debugRunFile(string fname)
			scode=new(System.IO.ReadAll(fname))
			if !scode:
				System.Console.Writeln("failed to load js file: '@1'".Replace(["@1",fname]))
				return 0
			fnamen=new(fname)
			fnamen.push(char(0))
			return debugEval(scode,fnamen)
		/////////
		if Platform.BUILD=="debug":
			//i8[iptr] m_is_function_dumped
			auto debugDumpHeap()
				//if !m_is_function_dumped:
				m_is_function_dumped=new i8[iptr]
				__C(int,"@global:
				static int s7_CB_duktape_is_our_object(duk_context *ctx){
					int ret=0;
					duk_get_finalizer(ctx,-1);
					ret=(void*)duk_get_c_function(ctx, -1)==(void*)s7_CB_duktape_finalizer;
					duk_pop(ctx);
					return ret;
				}
				")
				duk_enum=__c_function(int,"duk_enum","duktape.h")
				duk_next=__c_function(int,"duk_next","duktape.h")
				duk_get_heapptr=__c_function(__pointer,"duk_get_heapptr","duktape.h")
				duk_is_ecmascript_function=__c_function(int,"duk_is_ecmascript_function","duktape.h")
				duk_push_heapptr=__c_function(int,"duk_push_heapptr","duktape.h")
				duk_get_buffer=__c_function(__pointer,"duk_get_buffer","duktape.h")
				s_object_path=new string
				reached=new i8[iptr]
				//BFS
				Q=new iptr[]
				Q_paths=new string[]
				auto test()
					if !duk_is_object(_ctx(),-1):return
					obj_handle=iptr(duk_get_heapptr(_ctx(),-1))
					if reached[obj_handle]:return
					reached[obj_handle]=i8(1)
					Q.push(obj_handle)
					Q_paths.push(new(s_object_path))
				auto expand()
					if duk_is_function(_ctx(),-1):
						//don't enum into functions
						if duk_is_ecmascript_function(_ctx(),-1):
							obj_handle=iptr(duk_get_heapptr(_ctx(),-1))
							if !m_is_function_dumped[obj_handle]:
								m_is_function_dumped[obj_handle]=i8(1)
								///////////
								s_name0="fileName"
								duk_push_lstring(_ctx(),s_name0,s_name0.n)
								duk_get_prop(_ctx(),-2)
								lg=0L
								pstr=iptr(duk_to_lstring(_ctx(),-1,__C_pure(__pointer,"(duk_size_t*)@1",&lg)))
								s_name=new char[lg]
								__basic_api.memcpy(__pointer(s_name.d),__pointer(pstr),lg)
								duk_pop(_ctx())
								///////////
								//s_name0l="lineNumber"
								//duk_push_lstring(_ctx(),s_name0l,s_name0l.n)
								//duk_get_prop(_ctx(),-2)
								//lg=0L
								//pstr=iptr(duk_to_lstring(_ctx(),-1,&lg))
								//s_line=new char[lg]
								//__basic_api.memcpy(__pointer(s_line.d),__pointer(pstr),lg)
								//duk_pop(_ctx())
								//,':',s_line
								Writeln('fnc ',s_object_path,': JS function in ',s_name)
								//if iptr==i32:
								//	//dfs into the function
								//	hbuffer_data=__memory(iptr,obj_handle+10*sizeof(iptr))
								//	//Writeln(__memory(__pointer,obj_handle),' ',__memory(__pointer,hbuffer_data))
								//	duk_push_heapptr(_ctx(),__pointer(hbuffer_data))
								//	pout_size=[0L]
								//	pbuf=iptr(duk_get_buffer(_ctx(),-1,pout_size))
								//	buf_size=pout_size[0]
								//	duk_pop(_ctx())
								//	pfuncs=__memory(iptr,obj_handle+11*sizeof(iptr))
								//	//data_size=__memory(iptr,hbuffer_data+3*sizeof(iptr))
								//	n0=s_object_path.n
								//	s_object_path.push('.')
								//	while pbuf<pfuncs
								//		tval=__memory(i64,pbuf)
								//		pbuf+=8
								//		if u32(u64(tval)>>48)==0xfff8u:
								//			duk_push_heapptr(_ctx(),__pointer(iptr(tval)))
								//			dfs()
								//			duk_pop(_ctx())
								//		Writeln('>>> ',formatNumber(u64(tval),{align:16,base:16}))
								//	s_object_path.resize(n0)
								//dfs into the function
								s_name1="\xffLexenv"
								duk_push_lstring(_ctx(),s_name1,s_name1.n)
								duk_get_prop(_ctx(),-2)
								n0=s_object_path.n
								s_object_path.push('._Lexenv')
								test()
								s_object_path.resize(n0)
								duk_pop(_ctx())
								//////////
								s_name2="\xffVarenv"
								duk_push_lstring(_ctx(),s_name2,s_name2.n)
								duk_get_prop(_ctx(),-2)
								n0=s_object_path.n
								s_object_path.push('._Varenv')
								test()
								s_object_path.resize(n0)
								duk_pop(_ctx())
							return
						else
							return
					if !duk_is_object(_ctx(),-1):return
					is_our_object=__C(int,"s7_CB_duktape_is_our_object(@1)",_ctx())
					if is_our_object:
						duk_get_prop_index(_ctx(),-1,0)
						duk_to_primitive(_ctx(),-1,0)
						vptr=duk_get_pointer(_ctx(),-1)
						duk_pop(_ctx())
						if vptr:
							ret=__cast(__variant,vptr)
							auto rtti=iptr(__get_rtti(ret))
							rtti_info=LeakDetection.detail.g_rtti_map[rtti]
							if rtti_info.name:
								Writeln('obj ',s_object_path,': ',vptr,' ',rtti_info.name)
							else
								Writeln('obj ',s_object_path,': ',vptr,' unknown native object')
						else
							Writeln('err ',s_object_path,': discarded native object')
					else
						obj_handle=iptr(duk_get_heapptr(_ctx(),-1))
						Writeln('jso ',s_object_path,': ',__pointer(obj_handle))
						DUK_ENUM_INCLUDE_INTERNAL=2
						duk_enum(_ctx(),-1,DUK_ENUM_INCLUDE_INTERNAL)
						n0=s_object_path.n
						if n0:s_object_path.push('.')
						while duk_next(_ctx(),-1,1):
							duk_swap_top(_ctx(),-2)
							lg=0L
							pstr=iptr(duk_to_lstring(_ctx(),-1,__C_pure(__pointer,"(duk_size_t*)@1",&lg)))
							s_object_path.resize((n0?n0+1:n0)+lg)
							__basic_api.memcpy(__pointer(s_object_path.d+(n0?n0+1:n0)),__pointer(pstr),lg)
							duk_pop(_ctx())
							test()
							duk_pop(_ctx())
						s_object_path.resize(n0)
						duk_pop(_ctx())
				duk_push_global_object(_ctx())
				test()
				duk_pop(_ctx())
				s_object_path.push("$STASH$")
				duk_push_heap_stash(_ctx());
				test()
				duk_pop(_ctx())
				//
				phead=0L
				while phead<Q.n
					q_obj_handle=Q[phead]
					s_path=Q_paths[phead]
					s_object_path.resize(s_path.n)
					copy(s_object_path,s_path)
					////////////////
					duk_push_heapptr(_ctx(),__pointer(q_obj_handle));
					expand()
					duk_pop(_ctx())
					phead++
			auto debugWipeStash()
				duk_push_heap_stash(_ctx());
				duk_push_int(_ctx(),0)
				duk_put_prop_index(_ctx(),-2,m_stash_array_position);//stash[m_stash_array_position]=0
				duk_pop(_ctx());
		/////////
		_init_stash()
	///////
	inline _push_subscript(holder,name)
		T=typeof(name)
		if T==string:
			duk_push_lstring(holder._ctx(),name,name.n)
		else if __is_type("int",T):
			duk_push_int(holder._ctx(),int(name))
		else
			__error("invalid Javascript subscript type '@1': only int and string are allowed",T)
	if Platform.BUILD=="debug":
		class _IncompleteJSPropertyAccess_Checker
			m_completed=0
			auto __done__()
				if !m_completed:
					__basic_api.spapReportError("JS object property read must be completed with .as, .or, .Call. If you're expecting an object, use .as(JSObject)")
	struct _IncompleteJSPropertyAccess
		JSContext m_jsctx
		if Platform.BUILD=="debug":
			m_checker=_IncompleteJSPropertyAccess_Checker()
		inline _ctx()
			return m_jsctx._ctx()
		inline has(name)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			if duk_is_object(_ctx(),-1):
				_push_subscript(this,name)
				ret=duk_has_prop(_ctx(),-2)
			else
				ret=0
			duk_pop_2(_ctx())
			return ret
		inline operator[](name)
			//[object previous-subscript] -> [child current-subscript]
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			duk_remove(_ctx(),-2)
			_push_subscript(this,name)
			return this
		inline as(T)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			//[object previous-subscript] -> [object value] -> []
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			return m_jsctx._pop_typed(T,2)
		inline getBufferPointer()
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)
			return m_jsctx._pop_pointer(2)
		inline asCString()
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)
			return m_jsctx._pop_c_string(2)
		inline or(dflt)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			//[object previous-subscript] -> [object value] -> []
			T=typeof(dflt)
			if duk_is_object(_ctx(),-2):
				duk_dup(_ctx(),-1)
				if duk_has_prop(_ctx(),-3):
					duk_get_prop(_ctx(),-2)//for the *previous* subscript
					if !duk_is_null_or_undefined(_ctx(),-1):
						return m_jsctx._pop_typed(T,2)
			duk_pop_2(_ctx())
			return dflt
		inline set_operator[](name,value)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			duk_remove(_ctx(),-2)
			_push_subscript(this,name)
			m_jsctx._put_prop_and_pop(value)
		inline Call(T)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>0:
					m_jsctx._push_value(arguments0[i])
			duk_pcall(_ctx(),arguments0.length-1)
			return m_jsctx._pop_typed(T,2)
		inline PushAsFunction()
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			duk_swap_top(_ctx(),-2)
			duk_pop(_ctx())
		inline CallAsMethod(T,arg_this)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			duk_get_prop(_ctx(),-2)//for the *previous* subscript
			m_jsctx._push_value(arg_this)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,2)
		inline CallMethod(T,string fname)
			if Platform.BUILD=="debug":
				m_checker.m_completed=1
			return this.as(JSObject).CallMethod.call(arguments)
	///////
	//don't new this in external code
	class JSObject
		m_jsctx=JSContext.NULL
		m_handle=0
		inline _ctx()
			return m_jsctx._ctx()
		inline GetContext()
			return m_jsctx
		inline has(name)
			m_jsctx._push_object(m_handle)
			if duk_is_object(_ctx(),-1):
				_push_subscript(this,name)
				ret=duk_has_prop(_ctx(),-2)
			else
				ret=0
			duk_pop(_ctx())
			return ret
		inline length()
			m_jsctx._push_object(m_handle)
			ret=duk_get_length(_ctx(),-1)
			duk_pop(_ctx())
			return ret
		inline operator[](name)
			//[] -> [object subscript]
			if Platform.BUILD=="debug":
				if !m_jsctx:
					__basic_api.spapReportError("JSObject must not be created through new")
			m_jsctx._push_object(m_handle)
			_push_subscript(this,name)
			return _IncompleteJSPropertyAccess(){"m_jsctx":m_jsctx}
		inline set_operator[](name,value)
			m_jsctx._push_object(m_handle)
			_push_subscript(this,name)
			m_jsctx._put_prop_and_pop(value)
		inline as(T)
			m_jsctx._push_object(m_handle)
			return m_jsctx._pop_typed(T,1)
		inline getBufferPointer()
			m_jsctx._push_object(m_handle)
			return m_jsctx._pop_pointer(1)
		inline Call(T)
			m_jsctx._push_object(m_handle)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>0:
					m_jsctx._push_value(arguments0[i])
			duk_pcall(_ctx(),arguments0.length-1)
			return m_jsctx._pop_typed(T,1)
		inline PushAsFunction()
			m_jsctx._push_object(m_handle)
		inline CallAsMethod(T,arg_this)
			m_jsctx._push_object(m_handle)
			m_jsctx._push_value(arg_this)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,1)
		inline CallMethod(T,string fname)
			m_jsctx._push_object(m_handle)
			_push_subscript(this,fname)
			duk_get_prop(_ctx(),-2)
			duk_swap_top(_ctx(),-2)
			arguments0=arguments
			for i in crange(arguments0.length)
				if i>1:
					m_jsctx._push_value(arguments0[i])
			duk_pcall_method(_ctx(),arguments0.length-2)
			return m_jsctx._pop_typed(T,1)
		inline SetPrototype(JSObject proto)
			m_jsctx._push_object(m_handle)
			m_jsctx._push_object(proto.m_handle)
			duk_set_prototype(_ctx(),-2)
			duk_pop(_ctx())
		auto __done__()
			if m_handle:
				m_jsctx._free_refid(m_handle)
				m_jsctx=JSContext.NULL
		////////////////////////////////
		inline ExportProperty(self,name)
			sname=name
			T_class=typeof(self)
			T_property=typeof(__dot(self,name))
			prop=m_jsctx.New()
			prop["get"]=function(JSContext JS){
				js_this=JS.GetThis();
				if !js_this:return 0
				native_this=js_this.as(T_class)
				if !native_this:return 0
				return JS.Return(__dot(native_this,name))
			}
			prop["set"]=function(JSContext JS){
				js_this=JS.GetThis();
				if !js_this:return 0
				native_this=js_this.as(T_class)
				if !native_this:return 0
				__dot(native_this,name)=JS.Param(0).as(T_property)
				return 0
			}
			m_jsctx.GetGlobal()["Object"]["defineProperty"].Call(JSObject,this,sname,prop)
		inline ExportMethod(self,sname,fn)
			T_class=typeof(self)
			/*
			fn2 is mandatory: if we called .Bind on fn:
				- it forces the METHOD to be RTVAR, 
				- which makes an unnecessary member,
				- the access of which involves self,
				- which is NULL
			*/
			fn2=fn
			this[sname]=function(JSContext JS){
				native_this=JS.GetNativeThis(T_class)
				if !native_this:return 0
				return fn2.Bind(native_this)(JS)
			}
		inline ExportGetterSetter(self,sname,fgetter0,fsetter0)
			T_class=typeof(self)
			prop=m_jsctx.New()
			fgetter=fgetter0
			fsetter=fsetter0
			if fgetter:
				prop["get"]=function(JSContext JS){
					js_this=JS.GetThis();
					if !js_this:return 0
					native_this=js_this.as(T_class)
					if !native_this:return 0
					return fgetter.Bind(native_this)(JS)
				}
			if fsetter:
				prop["set"]=function(JSContext JS){
					js_this=JS.GetThis();
					if !js_this:return 0
					native_this=js_this.as(T_class)
					if !native_this:return 0
					return fsetter.Bind(native_this)(JS)
				}
			m_jsctx.GetGlobal()["Object"]["defineProperty"].Call(JSObject,this,sname,prop)
		
JSContext=duktape.JSContext
JSObject=duktape.JSObject
