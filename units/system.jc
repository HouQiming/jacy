//could use libuv for some I/O
module OS_API
	__generate_json("h_files","spaprt_portable.h")
	__generate_json("h_files","wrapper_defines.h")
	__generate_json("c_files","spaprt_portable.c")
	//unix stuff
	FILE_ATTRIBUTE_READONLY=0x00000001
	FILE_ATTRIBUTE_DIRECTORY=0x00000010
	if Platform.IS_UNIX:
		__generate_json("ldflags","-lm")
		if Platform.ARCH=="rasppi"||Platform.ARCH=="linux32"||Platform.ARCH=="linux64"||Platform.ARCH=="mac":
			__generate_json("cflags","-I/usr/include/SDL2")
			__generate_json("cflags","-I/usr/local/include/SDL2")
			__generate_json("ldflags","-lSDL2")
			__generate_json("ldflags","-lpthread")
			__generate_json("ldflags","-ldl")
		PROT_READ=0x1
		PROT_WRITE=0x2
		O_ACCMODE=3
		O_RDONLY=0
		O_WRONLY=1
		O_RDWR=2
		O_CREAT=64
		MAP_SHARED=0x01
		MAP_PRIVATE=0x02
		POLLIN=0x0001
		POLLPRI=0x0002
		POLLOUT=0x0004
		POLLERR=0x0008
		POLLHUP=0x0010
		POLLNVAL=0x0020
		//osal emulates these win flags...
		STD_INPUT_HANDLE=(0xfffffff6)
		STD_OUTPUT_HANDLE=(0xfffffff5)
		STD_ERROR_HANDLE=(0xfffffff4)
		///////////////
		_fopen=__c_function(__pointer,"fopen","stdio.h")
		pipe=__c_function(int,"pipe","stdio.h")
		read=__c_function(iptr,"read","stdio.h")
		write=__c_function(iptr,"write","stdio.h")
		realpath=__c_function(__pointer,"realpath","stdio.h")
		getenv=__c_function(__pointer,"getenv","stdio.h")
		setenv=__c_function(__pointer,"setenv","stdio.h")
		mmap=__c_function(__pointer,"mmap","sys/mman.h")
		munmap=__c_function(int,"munmap","sys/mman.h")
		open=__c_function(int,"open","fcntl.h")
		close=__c_function(int,"close","fcntl.h")
		/////////////////
		osal_GetUnixPathMax=__c_function(iptr,"osal_GetUnixPathMax","spaprt_portable.h")
		osal_PollPipe=__c_function(int,"osal_PollPipe","stdio.h")
		osal_GetFileSize=__c_function(iptr,"osal_GetFileSize","spaprt_portable.h")
		osal_GetFileSize64=__c_function(i64,"osal_GetFileSize64","spaprt_portable.h")
		osal_GetFileAttributes=__c_function(int,"osal_GetFileAttributes","spaprt_portable.h")
		osal_BeginFind=__c_function(__pointer,"osal_BeginFind","spaprt_portable.h")
		osal_EndFind=__c_function(int,"osal_EndFind","spaprt_portable.h")
		osal_FindNext=__c_function(int,"osal_FindNext","spaprt_portable.h")
		osal_GetStdHandle=__c_function(__pointer,"osal_GetStdHandle","spaprt_portable.h")
		osal_getStoragePath=__c_function(__pointer,"osal_getStoragePath","spaprt_portable.h")
		osal_errno=__c_function(int,"osal_errno","spaprt_portable.h")
		osal_CreateProcess=__c_function(int,"osal_CreateProcess","spaprt_portable.h")
		osal_GetExitCodeProcess=__c_function(int,"osal_GetExitCodeProcess","spaprt_portable.h")
		osal_TerminateProcess=__c_function(int,"osal_TerminateProcess","spaprt_portable.h")
		/////////////////
		SDL_GetPerformanceCounter=__c_function(i64,"SDL_GetPerformanceCounter","SDL.h")
		SDL_GetPerformanceFrequency=__c_function(i64,"SDL_GetPerformanceFrequency","SDL.h")
		SDL_GetBasePath=__c_function(__pointer,"SDL_GetBasePath","SDL.h")
		SDL_free=__c_function(int,"SDL_free","SDL.h")
		/////////////////
		rename=__c_function(int,"rename","stdio.h")
		remove=__c_function(int,"remove","stdio.h")
		mkdir=__c_function(int,"mkdir","sys/stat.h")
		chdir=__c_function(int,"chdir","unistd.h")
		getcwd=__c_function(int,"getcwd","unistd.h")
		sleep=__c_function(int,"sleep","time.h")
	time=__c_function(i64,"time","time.h")
	localtime=__c_function(__pointer,"localtime","time.h")
	//win consts
	if Platform.IS_WINDOWS:
		SecurityAnonymous=0
		SecurityIdentification=1
		SecurityImpersonation=2
		SecurityDelegation=3
		TokenPrimary=1
		TokenImpersonation=2
		TokenUser=1
		TokenGroups=2
		TokenPrivileges=3
		TokenOwner=4
		TokenPrimaryGroup=5
		TokenDefaultDacl=6
		TokenSource=7
		TokenType=8
		TokenImpersonationLevel=9
		TokenStatistics=10
		TokenRestrictedSids=11
		TokenSessionId=12
		TokenGroupsAndPrivileges=13
		TokenSessionReference=14
		TokenSandBoxInert=15
		TokenAuditPolicy=16
		TokenOrigin=17
		SidTypeUser=1
		SidTypeGroup=2
		SidTypeDomain=3
		SidTypeAlias=4
		SidTypeWellKnownGroup=5
		SidTypeDeletedAccount=6
		SidTypeInvalid=7
		SidTypeUnknown=8
		SidTypeComputer=9
		DriverType=1
		FileSystemType=2
		Win32ServiceOwnProcess=16
		Win32ServiceShareProcess=32
		AdapterType=4
		RecognizerType=8
		BootLoad=0
		SystemLoad=1
		AutoLoad=2
		DemandLoad=3
		DisableLoad=4
		IgnoreError=0
		NormalError=1
		SevereError=2
		CriticalError=3
		JobObjectBasicAccountingInformation=1
		JobObjectBasicLimitInformation=2
		JobObjectBasicProcessIdList=3
		JobObjectBasicUIRestrictions=4
		JobObjectSecurityLimitInformation=5
		JobObjectEndOfJobTimeInformation=6
		JobObjectAssociateCompletionPortInformation=7
		JobObjectBasicAndIoAccountingInformation=8
		JobObjectExtendedLimitInformation=9
		JobObjectJobSetInformation=10
		MaxJobObjectInfoClass=11
		LT_DONT_CARE=0
		LT_LOWEST_LATENCY=1
		PowerSystemUnspecified=0
		PowerSystemWorking=1
		PowerSystemSleeping1=2
		PowerSystemSleeping2=3
		PowerSystemSleeping3=4
		PowerSystemHibernate=5
		PowerSystemShutdown=6
		PowerSystemMaximum=7
		PowerActionNone=0
		PowerActionReserved=1
		PowerActionSleep=2
		PowerActionHibernate=3
		PowerActionShutdown=4
		PowerActionShutdownReset=5
		PowerActionShutdownOff=6
		PowerActionWarmEject=7
		PowerDeviceUnspecified=0
		PowerDeviceD0=1
		PowerDeviceD1=2
		PowerDeviceD2=3
		PowerDeviceD3=4
		PowerDeviceMaximum=5
		SystemPowerPolicyAc=0
		SystemPowerPolicyDc=1
		VerifySystemPolicyAc=2
		VerifySystemPolicyDc=3
		SystemPowerCapabilities=4
		SystemBatteryState=5
		SystemPowerStateHandler=6
		ProcessorStateHandler=7
		SystemPowerPolicyCurrent=8
		AdministratorPowerPolicy=9
		SystemReserveHiberFile=10
		ProcessorInformation=11
		SystemPowerInformation=12
		ProcessorStateHandler2=13
		LastWakeTime=14
		LastSleepTime=15
		SystemExecutionState=16
		SystemPowerStateNotifyHandler=17
		ProcessorPowerPolicyAc=18
		ProcessorPowerPolicyDc=19
		VerifyProcessorPowerPolicyAc=20
		VerifyProcessorPowerPolicyDc=21
		ProcessorPowerPolicyCurrent=22
		ExceptionContinueExecution=0
		ExceptionContinueSearch=1
		ExceptionNestedException=2
		ExceptionCollidedUnwind=3
		FindExInfoStandard=0
		FindExInfoMaxInfoLevel=1
		FindExSearchNameMatch=0
		FindExSearchLimitToDirectories=1
		FindExSearchLimitToDevices=2
		FindExSearchMaxSearchOp=3
		AclRevisionInformation=1
		AclSizeInformation=2
		GetFileExInfoStandard=0
		GetFileExMaxInfoLevel=1
		COMPARE_STRING=0x0001
		GEOCLASS_NATION=16
		GEOCLASS_REGION=14
		GEO_NATION=0x0001
		GEO_LATITUDE=0x0002
		GEO_LONGITUDE=0x0003
		GEO_ISO2=0x0004
		GEO_ISO3=0x0005
		GEO_RFC1766=0x0006
		GEO_LCID=0x0007
		GEO_FRIENDLYNAME=0x0008
		GEO_OFFICIALNAME=0x0009
		GEO_TIMEZONES=0x000a
		GEO_OFFICIALLANGUAGES=0x000a
		SC_STATUS_PROCESS_INFO=0
		SC_ENUM_PROCESS_INFO=0
		SC_ACTION_NONE=0
		SC_ACTION_RESTART=1
		SC_ACTION_REBOOT=2
		SC_ACTION_RUN_COMMAND=3
		BestEffortService=0
		ControlledLoadService=1
		PredictiveService=2
		GuaranteedDelayService=3
		GuaranteedService=4
		RNRSERVICE_REGISTER=0
		RNRSERVICE_DEREGISTER=1
		RNRSERVICE_DELETE=2
		COMP_EQUAL=0
		COMP_NOTLESS=1
		NSP_NOTIFY_IMMEDIATELY=0
		NSP_NOTIFY_HWND=1
		NSP_NOTIFY_EVENT=2
		NSP_NOTIFY_PORT=3
		NSP_NOTIFY_APC=4
		MAX_PATH= 260
		FALSE= 0
		TRUE= 1
		ERROR_SUCCESS= 0
		NO_ERROR= 0
		ERROR_INVALID_FUNCTION= 1
		ERROR_FILE_NOT_FOUND= 2
		ERROR_PATH_NOT_FOUND= 3
		ERROR_TOO_MANY_OPEN_FILES= 4
		ERROR_ACCESS_DENIED= 5
		ERROR_INVALID_HANDLE= 6
		ERROR_ARENA_TRASHED= 7
		ERROR_NOT_ENOUGH_MEMORY= 8
		ERROR_INVALID_BLOCK= 9
		ERROR_BAD_ENVIRONMENT= 10
		ERROR_BAD_FORMAT= 11
		ERROR_INVALID_ACCESS= 12
		ERROR_INVALID_DATA= 13
		ERROR_OUTOFMEMORY= 14
		ERROR_INVALID_DRIVE= 15
		ERROR_CURRENT_DIRECTORY= 16
		ERROR_NOT_SAME_DEVICE= 17
		ERROR_NO_MORE_FILES= 18
		ERROR_WRITE_PROTECT= 19
		ERROR_BAD_UNIT= 20
		ERROR_NOT_READY= 21
		ERROR_BAD_COMMAND= 22
		ERROR_CRC= 23
		ERROR_BAD_LENGTH= 24
		ERROR_SEEK= 25
		ERROR_NOT_DOS_DISK= 26
		ERROR_SECTOR_NOT_FOUND= 27
		ERROR_OUT_OF_PAPER= 28
		ERROR_WRITE_FAULT= 29
		ERROR_READ_FAULT= 30
		ERROR_GEN_FAILURE= 31
		ERROR_SHARING_VIOLATION= 32
		ERROR_LOCK_VIOLATION= 33
		ERROR_WRONG_DISK= 34
		ERROR_SHARING_BUFFER_EXCEEDED= 36
		ERROR_HANDLE_EOF= 38
		ERROR_HANDLE_DISK_FULL= 39
		ERROR_NOT_SUPPORTED= 50
		ERROR_REM_NOT_LIST= 51
		ERROR_DUP_NAME= 52
		ERROR_BAD_NETPATH= 53
		ERROR_NETWORK_BUSY= 54
		ERROR_DEV_NOT_EXIST= 55
		ERROR_TOO_MANY_CMDS= 56
		ERROR_ADAP_HDW_ERR= 57
		ERROR_BAD_NET_RESP= 58
		ERROR_UNEXP_NET_ERR= 59
		ERROR_BAD_REM_ADAP= 60
		ERROR_PRINTQ_FULL= 61
		ERROR_NO_SPOOL_SPACE= 62
		ERROR_PRINT_CANCELLED= 63
		ERROR_NETNAME_DELETED= 64
		ERROR_NETWORK_ACCESS_DENIED= 65
		ERROR_BAD_DEV_TYPE= 66
		ERROR_BAD_NET_NAME= 67
		ERROR_TOO_MANY_NAMES= 68
		ERROR_TOO_MANY_SESS= 69
		ERROR_SHARING_PAUSED= 70
		ERROR_REQ_NOT_ACCEP= 71
		ERROR_REDIR_PAUSED= 72
		ERROR_FILE_EXISTS= 80
		ERROR_CANNOT_MAKE= 82
		ERROR_FAIL_I24= 83
		ERROR_OUT_OF_STRUCTURES= 84
		ERROR_ALREADY_ASSIGNED= 85
		ERROR_INVALID_PASSWORD= 86
		ERROR_INVALID_PARAMETER= 87
		ERROR_NET_WRITE_FAULT= 88
		ERROR_NO_PROC_SLOTS= 89
		ERROR_TOO_MANY_SEMAPHORES= 100
		ERROR_EXCL_SEM_ALREADY_OWNED= 101
		ERROR_SEM_IS_SET= 102
		ERROR_TOO_MANY_SEM_REQUESTS= 103
		ERROR_INVALID_AT_INTERRUPT_TIME= 104
		ERROR_SEM_OWNER_DIED= 105
		ERROR_SEM_USER_LIMIT= 106
		ERROR_DISK_CHANGE= 107
		ERROR_DRIVE_LOCKED= 108
		ERROR_BROKEN_PIPE= 109
		ERROR_OPEN_FAILED= 110
		ERROR_BUFFER_OVERFLOW= 111
		ERROR_DISK_FULL= 112
		ERROR_NO_MORE_SEARCH_HANDLES= 113
		ERROR_INVALID_TARGET_HANDLE= 114
		ERROR_INVALID_CATEGORY= 117
		ERROR_INVALID_VERIFY_SWITCH= 118
		ERROR_BAD_DRIVER_LEVEL= 119
		ERROR_CALL_NOT_IMPLEMENTED= 120
		ERROR_SEM_TIMEOUT= 121
		ERROR_INSUFFICIENT_BUFFER= 122
		ERROR_INVALID_NAME= 123
		ERROR_INVALID_LEVEL= 124
		ERROR_NO_VOLUME_LABEL= 125
		ERROR_MOD_NOT_FOUND= 126
		ERROR_PROC_NOT_FOUND= 127
		ERROR_WAIT_NO_CHILDREN= 128
		ERROR_CHILD_NOT_COMPLETE= 129
		ERROR_DIRECT_ACCESS_HANDLE= 130
		ERROR_NEGATIVE_SEEK= 131
		ERROR_SEEK_ON_DEVICE= 132
		ERROR_IS_JOIN_TARGET= 133
		ERROR_IS_JOINED= 134
		ERROR_IS_SUBSTED= 135
		ERROR_NOT_JOINED= 136
		ERROR_NOT_SUBSTED= 137
		ERROR_JOIN_TO_JOIN= 138
		ERROR_SUBST_TO_SUBST= 139
		ERROR_JOIN_TO_SUBST= 140
		ERROR_SUBST_TO_JOIN= 141
		ERROR_BUSY_DRIVE= 142
		ERROR_SAME_DRIVE= 143
		ERROR_DIR_NOT_ROOT= 144
		ERROR_DIR_NOT_EMPTY= 145
		ERROR_IS_SUBST_PATH= 146
		ERROR_IS_JOIN_PATH= 147
		ERROR_PATH_BUSY= 148
		ERROR_IS_SUBST_TARGET= 149
		ERROR_SYSTEM_TRACE= 150
		ERROR_INVALID_EVENT_COUNT= 151
		ERROR_TOO_MANY_MUXWAITERS= 152
		ERROR_INVALID_LIST_FORMAT= 153
		ERROR_LABEL_TOO_LONG= 154
		ERROR_TOO_MANY_TCBS= 155
		ERROR_SIGNAL_REFUSED= 156
		ERROR_DISCARDED= 157
		ERROR_NOT_LOCKED= 158
		ERROR_BAD_THREADID_ADDR= 159
		ERROR_BAD_ARGUMENTS= 160
		ERROR_BAD_PATHNAME= 161
		ERROR_SIGNAL_PENDING= 162
		ERROR_MAX_THRDS_REACHED= 164
		ERROR_LOCK_FAILED= 167
		ERROR_BUSY= 170
		ERROR_CANCEL_VIOLATION= 173
		ERROR_ATOMIC_LOCKS_NOT_SUPPORTED= 174
		ERROR_INVALID_SEGMENT_NUMBER= 180
		ERROR_INVALID_ORDINAL= 182
		ERROR_ALREADY_EXISTS= 183
		ERROR_INVALID_FLAG_NUMBER= 186
		ERROR_SEM_NOT_FOUND= 187
		ERROR_INVALID_STARTING_CODESEG= 188
		ERROR_INVALID_STACKSEG= 189
		ERROR_INVALID_MODULETYPE= 190
		ERROR_INVALID_EXE_SIGNATURE= 191
		ERROR_EXE_MARKED_INVALID= 192
		ERROR_BAD_EXE_FORMAT= 193
		ERROR_ITERATED_DATA_EXCEEDS_64k= 194
		ERROR_INVALID_MINALLOCSIZE= 195
		ERROR_DYNLINK_FROM_INVALID_RING= 196
		ERROR_IOPL_NOT_ENABLED= 197
		ERROR_INVALID_SEGDPL= 198
		ERROR_AUTODATASEG_EXCEEDS_64k= 199
		ERROR_RING2SEG_MUST_BE_MOVABLE= 200
		ERROR_RELOC_CHAIN_XEEDS_SEGLIM= 201
		ERROR_INFLOOP_IN_RELOC_CHAIN= 202
		ERROR_ENVVAR_NOT_FOUND= 203
		ERROR_NO_SIGNAL_SENT= 205
		ERROR_FILENAME_EXCED_RANGE= 206
		ERROR_RING2_STACK_IN_USE= 207
		ERROR_META_EXPANSION_TOO_LONG= 208
		ERROR_INVALID_SIGNAL_NUMBER= 209
		ERROR_THREAD_1_INACTIVE= 210
		ERROR_LOCKED= 212
		ERROR_TOO_MANY_MODULES= 214
		ERROR_NESTING_NOT_ALLOWED= 215
		ERROR_BAD_PIPE= 230
		ERROR_PIPE_BUSY= 231
		ERROR_NO_DATA= 232
		ERROR_PIPE_NOT_CONNECTED= 233
		ERROR_MORE_DATA= 234
		ERROR_VC_DISCONNECTED= 240
		ERROR_INVALID_EA_NAME= 254
		ERROR_EA_LIST_INCONSISTENT= 255
		ERROR_NO_MORE_ITEMS= 259
		ERROR_CANNOT_COPY= 266
		ERROR_DIRECTORY= 267
		ERROR_EAS_DIDNT_FIT= 275
		ERROR_EA_FILE_CORRUPT= 276
		ERROR_EA_TABLE_FULL= 277
		ERROR_INVALID_EA_HANDLE= 278
		ERROR_EAS_NOT_SUPPORTED= 282
		ERROR_NOT_OWNER= 288
		ERROR_TOO_MANY_POSTS= 298
		ERROR_PARTIAL_COPY= 299
		ERROR_MR_MID_NOT_FOUND= 317
		ERROR_INVALID_ADDRESS= 487
		ERROR_ARITHMETIC_OVERFLOW= 534
		ERROR_PIPE_CONNECTED= 535
		ERROR_PIPE_LISTENING= 536
		ERROR_EA_ACCESS_DENIED= 994
		ERROR_OPERATION_ABORTED= 995
		ERROR_IO_INCOMPLETE= 996
		ERROR_IO_PENDING= 997
		ERROR_NOACCESS= 998
		ERROR_SWAPERROR= 999
		ERROR_STACK_OVERFLOW= 1001
		ERROR_INVALID_MESSAGE= 1002
		ERROR_CAN_NOT_COMPLETE= 1003
		ERROR_INVALID_FLAGS= 1004
		ERROR_UNRECOGNIZED_VOLUME= 1005
		ERROR_FILE_INVALID= 1006
		ERROR_FULLSCREEN_MODE= 1007
		ERROR_NO_TOKEN= 1008
		ERROR_BADDB= 1009
		ERROR_BADKEY= 1010
		ERROR_CANTOPEN= 1011
		ERROR_CANTREAD= 1012
		ERROR_CANTWRITE= 1013
		ERROR_REGISTRY_RECOVERED= 1014
		ERROR_REGISTRY_CORRUPT= 1015
		ERROR_REGISTRY_IO_FAILED= 1016
		ERROR_NOT_REGISTRY_FILE= 1017
		ERROR_KEY_DELETED= 1018
		ERROR_NO_LOG_SPACE= 1019
		ERROR_KEY_HAS_CHILDREN= 1020
		ERROR_CHILD_MUST_BE_VOLATILE= 1021
		ERROR_NOTIFY_ENUM_DIR= 1022
		ERROR_DEPENDENT_SERVICES_RUNNING= 1051
		ERROR_INVALID_SERVICE_CONTROL= 1052
		ERROR_SERVICE_REQUEST_TIMEOUT= 1053
		ERROR_SERVICE_NO_THREAD= 1054
		ERROR_SERVICE_DATABASE_LOCKED= 1055
		ERROR_SERVICE_ALREADY_RUNNING= 1056
		ERROR_INVALID_SERVICE_ACCOUNT= 1057
		ERROR_SERVICE_DISABLED= 1058
		ERROR_CIRCULAR_DEPENDENCY= 1059
		ERROR_SERVICE_DOES_NOT_EXIST= 1060
		ERROR_SERVICE_CANNOT_ACCEPT_CTRL= 1061
		ERROR_SERVICE_NOT_ACTIVE= 1062
		ERROR_FAILED_SERVICE_CONTROLLER_CONNECT= 1063
		ERROR_EXCEPTION_IN_SERVICE= 1064
		ERROR_DATABASE_DOES_NOT_EXIST= 1065
		ERROR_SERVICE_SPECIFIC_ERROR= 1066
		ERROR_PROCESS_ABORTED= 1067
		ERROR_SERVICE_DEPENDENCY_FAIL= 1068
		ERROR_SERVICE_LOGON_FAILED= 1069
		ERROR_SERVICE_START_HANG= 1070
		ERROR_INVALID_SERVICE_LOCK= 1071
		ERROR_SERVICE_MARKED_FOR_DELETE= 1072
		ERROR_SERVICE_EXISTS= 1073
		ERROR_ALREADY_RUNNING_LKG= 1074
		ERROR_SERVICE_DEPENDENCY_DELETED= 1075
		ERROR_BOOT_ALREADY_ACCEPTED= 1076
		ERROR_SERVICE_NEVER_STARTED= 1077
		ERROR_DUPLICATE_SERVICE_NAME= 1078
		ERROR_END_OF_MEDIA= 1100
		ERROR_FILEMARK_DETECTED= 1101
		ERROR_BEGINNING_OF_MEDIA= 1102
		ERROR_SETMARK_DETECTED= 1103
		ERROR_NO_DATA_DETECTED= 1104
		ERROR_PARTITION_FAILURE= 1105
		ERROR_INVALID_BLOCK_LENGTH= 1106
		ERROR_DEVICE_NOT_PARTITIONED= 1107
		ERROR_UNABLE_TO_LOCK_MEDIA= 1108
		ERROR_UNABLE_TO_UNLOAD_MEDIA= 1109
		ERROR_MEDIA_CHANGED= 1110
		ERROR_BUS_RESET= 1111
		ERROR_NO_MEDIA_IN_DRIVE= 1112
		ERROR_NO_UNICODE_TRANSLATION= 1113
		ERROR_DLL_INIT_FAILED= 1114
		ERROR_SHUTDOWN_IN_PROGRESS= 1115
		ERROR_NO_SHUTDOWN_IN_PROGRESS= 1116
		ERROR_IO_DEVICE= 1117
		ERROR_SERIAL_NO_DEVICE= 1118
		ERROR_IRQ_BUSY= 1119
		ERROR_MORE_WRITES= 1120
		ERROR_COUNTER_TIMEOUT= 1121
		ERROR_FLOPPY_ID_MARK_NOT_FOUND= 1122
		ERROR_FLOPPY_WRONG_CYLINDER= 1123
		ERROR_FLOPPY_UNKNOWN_ERROR= 1124
		ERROR_FLOPPY_BAD_REGISTERS= 1125
		ERROR_DISK_RECALIBRATE_FAILED= 1126
		ERROR_DISK_OPERATION_FAILED= 1127
		ERROR_DISK_RESET_FAILED= 1128
		ERROR_EOM_OVERFLOW= 1129
		ERROR_NOT_ENOUGH_SERVER_MEMORY= 1130
		ERROR_POSSIBLE_DEADLOCK= 1131
		ERROR_MAPPED_ALIGNMENT= 1132
		ERROR_SET_POWER_STATE_VETOED= 1140
		ERROR_SET_POWER_STATE_FAILED= 1141
		ERROR_TOO_MANY_LINKS= 1142
		ERROR_OLD_WIN_VERSION= 1150
		ERROR_APP_WRONG_OS= 1151
		ERROR_SINGLE_INSTANCE_APP= 1152
		ERROR_RMODE_APP= 1153
		ERROR_INVALID_DLL= 1154
		ERROR_NO_ASSOCIATION= 1155
		ERROR_DDE_FAIL= 1156
		ERROR_DLL_NOT_FOUND= 1157
		ERROR_BAD_USERNAME= 2202
		ERROR_NOT_CONNECTED= 2250
		ERROR_OPEN_FILES= 2401
		ERROR_ACTIVE_CONNECTIONS= 2402
		ERROR_DEVICE_IN_USE= 2404
		ERROR_BAD_DEVICE= 1200
		ERROR_CONNECTION_UNAVAIL= 1201
		ERROR_DEVICE_ALREADY_REMEMBERED= 1202
		ERROR_NO_NET_OR_BAD_PATH= 1203
		ERROR_BAD_PROVIDER= 1204
		ERROR_CANNOT_OPEN_PROFILE= 1205
		ERROR_BAD_PROFILE= 1206
		ERROR_NOT_CONTAINER= 1207
		ERROR_EXTENDED_ERROR= 1208
		ERROR_INVALID_GROUPNAME= 1209
		ERROR_INVALID_COMPUTERNAME= 1210
		ERROR_INVALID_EVENTNAME= 1211
		ERROR_INVALID_DOMAINNAME= 1212
		ERROR_INVALID_SERVICENAME= 1213
		ERROR_INVALID_NETNAME= 1214
		ERROR_INVALID_SHARENAME= 1215
		ERROR_INVALID_PASSWORDNAME= 1216
		ERROR_INVALID_MESSAGENAME= 1217
		ERROR_INVALID_MESSAGEDEST= 1218
		ERROR_SESSION_CREDENTIAL_CONFLICT= 1219
		ERROR_REMOTE_SESSION_LIMIT_EXCEEDED= 1220
		ERROR_DUP_DOMAINNAME= 1221
		ERROR_NO_NETWORK= 1222
		ERROR_CANCELLED= 1223
		ERROR_USER_MAPPED_FILE= 1224
		ERROR_CONNECTION_REFUSED= 1225
		ERROR_GRACEFUL_DISCONNECT= 1226
		ERROR_ADDRESS_ALREADY_ASSOCIATED= 1227
		ERROR_ADDRESS_NOT_ASSOCIATED= 1228
		ERROR_CONNECTION_INVALID= 1229
		ERROR_CONNECTION_ACTIVE= 1230
		ERROR_NETWORK_UNREACHABLE= 1231
		ERROR_HOST_UNREACHABLE= 1232
		ERROR_PROTOCOL_UNREACHABLE= 1233
		ERROR_PORT_UNREACHABLE= 1234
		ERROR_REQUEST_ABORTED= 1235
		ERROR_CONNECTION_ABORTED= 1236
		ERROR_RETRY= 1237
		ERROR_CONNECTION_COUNT_LIMIT= 1238
		ERROR_LOGIN_TIME_RESTRICTION= 1239
		ERROR_LOGIN_WKSTA_RESTRICTION= 1240
		ERROR_INCORRECT_ADDRESS= 1241
		ERROR_ALREADY_REGISTERED= 1242
		ERROR_SERVICE_NOT_FOUND= 1243
		ERROR_NOT_AUTHENTICATED= 1244
		ERROR_NOT_LOGGED_ON= 1245
		ERROR_CONTINUE= 1246
		ERROR_ALREADY_INITIALIZED= 1247
		ERROR_NO_MORE_DEVICES= 1248
		ERROR_NOT_ALL_ASSIGNED= 1300
		ERROR_SOME_NOT_MAPPED= 1301
		ERROR_NO_QUOTAS_FOR_ACCOUNT= 1302
		ERROR_LOCAL_USER_SESSION_KEY= 1303
		ERROR_NULL_LM_PASSWORD= 1304
		ERROR_UNKNOWN_REVISION= 1305
		ERROR_REVISION_MISMATCH= 1306
		ERROR_INVALID_OWNER= 1307
		ERROR_INVALID_PRIMARY_GROUP= 1308
		ERROR_NO_IMPERSONATION_TOKEN= 1309
		ERROR_CANT_DISABLE_MANDATORY= 1310
		ERROR_NO_LOGON_SERVERS= 1311
		ERROR_NO_SUCH_LOGON_SESSION= 1312
		ERROR_NO_SUCH_PRIVILEGE= 1313
		ERROR_PRIVILEGE_NOT_HELD= 1314
		ERROR_INVALID_ACCOUNT_NAME= 1315
		ERROR_USER_EXISTS= 1316
		ERROR_NO_SUCH_USER= 1317
		ERROR_GROUP_EXISTS= 1318
		ERROR_NO_SUCH_GROUP= 1319
		ERROR_MEMBER_IN_GROUP= 1320
		ERROR_MEMBER_NOT_IN_GROUP= 1321
		ERROR_LAST_ADMIN= 1322
		ERROR_WRONG_PASSWORD= 1323
		ERROR_ILL_FORMED_PASSWORD= 1324
		ERROR_PASSWORD_RESTRICTION= 1325
		ERROR_LOGON_FAILURE= 1326
		ERROR_ACCOUNT_RESTRICTION= 1327
		ERROR_INVALID_LOGON_HOURS= 1328
		ERROR_INVALID_WORKSTATION= 1329
		ERROR_PASSWORD_EXPIRED= 1330
		ERROR_ACCOUNT_DISABLED= 1331
		ERROR_NONE_MAPPED= 1332
		ERROR_TOO_MANY_LUIDS_REQUESTED= 1333
		ERROR_LUIDS_EXHAUSTED= 1334
		ERROR_INVALID_SUB_AUTHORITY= 1335
		ERROR_INVALID_ACL= 1336
		ERROR_INVALID_SID= 1337
		ERROR_INVALID_SECURITY_DESCR= 1338
		ERROR_BAD_INHERITANCE_ACL= 1340
		ERROR_SERVER_DISABLED= 1341
		ERROR_SERVER_NOT_DISABLED= 1342
		ERROR_INVALID_ID_AUTHORITY= 1343
		ERROR_ALLOTTED_SPACE_EXCEEDED= 1344
		ERROR_INVALID_GROUP_ATTRIBUTES= 1345
		ERROR_BAD_IMPERSONATION_LEVEL= 1346
		ERROR_CANT_OPEN_ANONYMOUS= 1347
		ERROR_BAD_VALIDATION_CLASS= 1348
		ERROR_BAD_TOKEN_TYPE= 1349
		ERROR_NO_SECURITY_ON_OBJECT= 1350
		ERROR_CANT_ACCESS_DOMAIN_INFO= 1351
		ERROR_INVALID_SERVER_STATE= 1352
		ERROR_INVALID_DOMAIN_STATE= 1353
		ERROR_INVALID_DOMAIN_ROLE= 1354
		ERROR_NO_SUCH_DOMAIN= 1355
		ERROR_DOMAIN_EXISTS= 1356
		ERROR_DOMAIN_LIMIT_EXCEEDED= 1357
		ERROR_INTERNAL_DB_CORRUPTION= 1358
		ERROR_INTERNAL_ERROR= 1359
		ERROR_GENERIC_NOT_MAPPED= 1360
		ERROR_BAD_DESCRIPTOR_FORMAT= 1361
		ERROR_NOT_LOGON_PROCESS= 1362
		ERROR_LOGON_SESSION_EXISTS= 1363
		ERROR_NO_SUCH_PACKAGE= 1364
		ERROR_BAD_LOGON_SESSION_STATE= 1365
		ERROR_LOGON_SESSION_COLLISION= 1366
		ERROR_INVALID_LOGON_TYPE= 1367
		ERROR_CANNOT_IMPERSONATE= 1368
		ERROR_RXACT_INVALID_STATE= 1369
		ERROR_RXACT_COMMIT_FAILURE= 1370
		ERROR_SPECIAL_ACCOUNT= 1371
		ERROR_SPECIAL_GROUP= 1372
		ERROR_SPECIAL_USER= 1373
		ERROR_MEMBERS_PRIMARY_GROUP= 1374
		ERROR_TOKEN_ALREADY_IN_USE= 1375
		ERROR_NO_SUCH_ALIAS= 1376
		ERROR_MEMBER_NOT_IN_ALIAS= 1377
		ERROR_MEMBER_IN_ALIAS= 1378
		ERROR_ALIAS_EXISTS= 1379
		ERROR_LOGON_NOT_GRANTED= 1380
		ERROR_TOO_MANY_SECRETS= 1381
		ERROR_SECRET_TOO_LONG= 1382
		ERROR_INTERNAL_DB_ERROR= 1383
		ERROR_TOO_MANY_CONTEXT_IDS= 1384
		ERROR_LOGON_TYPE_NOT_GRANTED= 1385
		ERROR_NT_CROSS_ENCRYPTION_REQUIRED= 1386
		ERROR_NO_SUCH_MEMBER= 1387
		ERROR_INVALID_MEMBER= 1388
		ERROR_TOO_MANY_SIDS= 1389
		ERROR_LM_CROSS_ENCRYPTION_REQUIRED= 1390
		ERROR_NO_INHERITANCE= 1391
		ERROR_FILE_CORRUPT= 1392
		ERROR_DISK_CORRUPT= 1393
		ERROR_NO_USER_SESSION_KEY= 1394
		ERROR_LICENSE_QUOTA_EXCEEDED= 1395
		ERROR_INVALID_WINDOW_HANDLE= 1400
		ERROR_INVALID_MENU_HANDLE= 1401
		ERROR_INVALID_CURSOR_HANDLE= 1402
		ERROR_INVALID_ACCEL_HANDLE= 1403
		ERROR_INVALID_HOOK_HANDLE= 1404
		ERROR_INVALID_DWP_HANDLE= 1405
		ERROR_TLW_WITH_WSCHILD= 1406
		ERROR_CANNOT_FIND_WND_CLASS= 1407
		ERROR_WINDOW_OF_OTHER_THREAD= 1408
		ERROR_HOTKEY_ALREADY_REGISTERED= 1409
		ERROR_CLASS_ALREADY_EXISTS= 1410
		ERROR_CLASS_DOES_NOT_EXIST= 1411
		ERROR_CLASS_HAS_WINDOWS= 1412
		ERROR_INVALID_INDEX= 1413
		ERROR_INVALID_ICON_HANDLE= 1414
		ERROR_PRIVATE_DIALOG_INDEX= 1415
		ERROR_LISTBOX_ID_NOT_FOUND= 1416
		ERROR_NO_WILDCARD_CHARACTERS= 1417
		ERROR_CLIPBOARD_NOT_OPEN= 1418
		ERROR_HOTKEY_NOT_REGISTERED= 1419
		ERROR_WINDOW_NOT_DIALOG= 1420
		ERROR_CONTROL_ID_NOT_FOUND= 1421
		ERROR_INVALID_COMBOBOX_MESSAGE= 1422
		ERROR_WINDOW_NOT_COMBOBOX= 1423
		ERROR_INVALID_EDIT_HEIGHT= 1424
		ERROR_DC_NOT_FOUND= 1425
		ERROR_INVALID_HOOK_FILTER= 1426
		ERROR_INVALID_FILTER_PROC= 1427
		ERROR_HOOK_NEEDS_HMOD= 1428
		ERROR_GLOBAL_ONLY_HOOK= 1429
		ERROR_JOURNAL_HOOK_SET= 1430
		ERROR_HOOK_NOT_INSTALLED= 1431
		ERROR_INVALID_LB_MESSAGE= 1432
		ERROR_SETCOUNT_ON_BAD_LB= 1433
		ERROR_LB_WITHOUT_TABSTOPS= 1434
		ERROR_DESTROY_OBJECT_OF_OTHER_THREAD= 1435
		ERROR_CHILD_WINDOW_MENU= 1436
		ERROR_NO_SYSTEM_MENU= 1437
		ERROR_INVALID_MSGBOX_STYLE= 1438
		ERROR_INVALID_SPI_VALUE= 1439
		ERROR_SCREEN_ALREADY_LOCKED= 1440
		ERROR_HWNDS_HAVE_DIFF_PARENT= 1441
		ERROR_NOT_CHILD_WINDOW= 1442
		ERROR_INVALID_GW_COMMAND= 1443
		ERROR_INVALID_THREAD_ID= 1444
		ERROR_NON_MDICHILD_WINDOW= 1445
		ERROR_POPUP_ALREADY_ACTIVE= 1446
		ERROR_NO_SCROLLBARS= 1447
		ERROR_INVALID_SCROLLBAR_RANGE= 1448
		ERROR_INVALID_SHOWWIN_COMMAND= 1449
		ERROR_NO_SYSTEM_RESOURCES= 1450
		ERROR_NONPAGED_SYSTEM_RESOURCES= 1451
		ERROR_PAGED_SYSTEM_RESOURCES= 1452
		ERROR_WORKING_SET_QUOTA= 1453
		ERROR_PAGEFILE_QUOTA= 1454
		ERROR_COMMITMENT_LIMIT= 1455
		ERROR_MENU_ITEM_NOT_FOUND= 1456
		ERROR_EVENTLOG_FILE_CORRUPT= 1500
		ERROR_EVENTLOG_CANT_START= 1501
		ERROR_LOG_FILE_FULL= 1502
		ERROR_EVENTLOG_FILE_CHANGED= 1503
		RPC_S_INVALID_STRING_BINDING= 1700
		RPC_S_WRONG_KIND_OF_BINDING= 1701
		RPC_S_INVALID_BINDING= 1702
		RPC_S_PROTSEQ_NOT_SUPPORTED= 1703
		RPC_S_INVALID_RPC_PROTSEQ= 1704
		RPC_S_INVALID_STRING_UUID= 1705
		RPC_S_INVALID_ENDPOINT_FORMAT= 1706
		RPC_S_INVALID_NET_ADDR= 1707
		RPC_S_NO_ENDPOINT_FOUND= 1708
		RPC_S_INVALID_TIMEOUT= 1709
		RPC_S_OBJECT_NOT_FOUND= 1710
		RPC_S_ALREADY_REGISTERED= 1711
		RPC_S_TYPE_ALREADY_REGISTERED= 1712
		RPC_S_ALREADY_LISTENING= 1713
		RPC_S_NO_PROTSEQS_REGISTERED= 1714
		RPC_S_NOT_LISTENING= 1715
		RPC_S_UNKNOWN_MGR_TYPE= 1716
		RPC_S_UNKNOWN_IF= 1717
		RPC_S_NO_BINDINGS= 1718
		RPC_S_NO_PROTSEQS= 1719
		RPC_S_CANT_CREATE_ENDPOINT= 1720
		RPC_S_OUT_OF_RESOURCES= 1721
		RPC_S_SERVER_UNAVAILABLE= 1722
		RPC_S_SERVER_TOO_BUSY= 1723
		RPC_S_INVALID_NETWORK_OPTIONS= 1724
		RPC_S_NO_CALL_ACTIVE= 1725
		RPC_S_CALL_FAILED= 1726
		RPC_S_CALL_FAILED_DNE= 1727
		RPC_S_PROTOCOL_ERROR= 1728
		RPC_S_UNSUPPORTED_TRANS_SYN= 1730
		RPC_S_UNSUPPORTED_TYPE= 1732
		RPC_S_INVALID_TAG= 1733
		RPC_S_INVALID_BOUND= 1734
		RPC_S_NO_ENTRY_NAME= 1735
		RPC_S_INVALID_NAME_SYNTAX= 1736
		RPC_S_UNSUPPORTED_NAME_SYNTAX= 1737
		RPC_S_UUID_NO_ADDRESS= 1739
		RPC_S_DUPLICATE_ENDPOINT= 1740
		RPC_S_UNKNOWN_AUTHN_TYPE= 1741
		RPC_S_MAX_CALLS_TOO_SMALL= 1742
		RPC_S_STRING_TOO_LONG= 1743
		RPC_S_PROTSEQ_NOT_FOUND= 1744
		RPC_S_PROCNUM_OUT_OF_RANGE= 1745
		RPC_S_BINDING_HAS_NO_AUTH= 1746
		RPC_S_UNKNOWN_AUTHN_SERVICE= 1747
		RPC_S_UNKNOWN_AUTHN_LEVEL= 1748
		RPC_S_INVALID_AUTH_IDENTITY= 1749
		RPC_S_UNKNOWN_AUTHZ_SERVICE= 1750
		EPT_S_INVALID_ENTRY= 1751
		EPT_S_CANT_PERFORM_OP= 1752
		EPT_S_NOT_REGISTERED= 1753
		RPC_S_NOTHING_TO_EXPORT= 1754
		RPC_S_INCOMPLETE_NAME= 1755
		RPC_S_INVALID_VERS_OPTION= 1756
		RPC_S_NO_MORE_MEMBERS= 1757
		RPC_S_NOT_ALL_OBJS_UNEXPORTED= 1758
		RPC_S_INTERFACE_NOT_FOUND= 1759
		RPC_S_ENTRY_ALREADY_EXISTS= 1760
		RPC_S_ENTRY_NOT_FOUND= 1761
		RPC_S_NAME_SERVICE_UNAVAILABLE= 1762
		RPC_S_INVALID_NAF_ID= 1763
		RPC_S_CANNOT_SUPPORT= 1764
		RPC_S_NO_CONTEXT_AVAILABLE= 1765
		RPC_S_INTERNAL_ERROR= 1766
		RPC_S_ZERO_DIVIDE= 1767
		RPC_S_ADDRESS_ERROR= 1768
		RPC_S_FP_DIV_ZERO= 1769
		RPC_S_FP_UNDERFLOW= 1770
		RPC_S_FP_OVERFLOW= 1771
		RPC_X_NO_MORE_ENTRIES= 1772
		RPC_X_SS_CHAR_TRANS_OPEN_FAIL= 1773
		RPC_X_SS_CHAR_TRANS_SHORT_FILE= 1774
		RPC_X_SS_IN_NULL_CONTEXT= 1775
		RPC_X_SS_CONTEXT_DAMAGED= 1777
		RPC_X_SS_HANDLES_MISMATCH= 1778
		RPC_X_SS_CANNOT_GET_CALL_HANDLE= 1779
		RPC_X_NULL_REF_POINTER= 1780
		RPC_X_ENUM_VALUE_OUT_OF_RANGE= 1781
		RPC_X_BYTE_COUNT_TOO_SMALL= 1782
		RPC_X_BAD_STUB_DATA= 1783
		ERROR_INVALID_USER_BUFFER= 1784
		ERROR_UNRECOGNIZED_MEDIA= 1785
		ERROR_NO_TRUST_LSA_SECRET= 1786
		ERROR_NO_TRUST_SAM_ACCOUNT= 1787
		ERROR_TRUSTED_DOMAIN_FAILURE= 1788
		ERROR_TRUSTED_RELATIONSHIP_FAILURE= 1789
		ERROR_TRUST_FAILURE= 1790
		RPC_S_CALL_IN_PROGRESS= 1791
		ERROR_NETLOGON_NOT_STARTED= 1792
		ERROR_ACCOUNT_EXPIRED= 1793
		ERROR_REDIRECTOR_HAS_OPEN_HANDLES= 1794
		ERROR_PRINTER_DRIVER_ALREADY_INSTALLED= 1795
		ERROR_UNKNOWN_PORT= 1796
		ERROR_UNKNOWN_PRINTER_DRIVER= 1797
		ERROR_UNKNOWN_PRINTPROCESSOR= 1798
		ERROR_INVALID_SEPARATOR_FILE= 1799
		ERROR_INVALID_PRIORITY= 1800
		ERROR_INVALID_PRINTER_NAME= 1801
		ERROR_PRINTER_ALREADY_EXISTS= 1802
		ERROR_INVALID_PRINTER_COMMAND= 1803
		ERROR_INVALID_DATATYPE= 1804
		ERROR_INVALID_ENVIRONMENT= 1805
		RPC_S_NO_MORE_BINDINGS= 1806
		ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT= 1807
		ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT= 1808
		ERROR_NOLOGON_SERVER_TRUST_ACCOUNT= 1809
		ERROR_DOMAIN_TRUST_INCONSISTENT= 1810
		ERROR_SERVER_HAS_OPEN_HANDLES= 1811
		ERROR_RESOURCE_DATA_NOT_FOUND= 1812
		ERROR_RESOURCE_TYPE_NOT_FOUND= 1813
		ERROR_RESOURCE_NAME_NOT_FOUND= 1814
		ERROR_RESOURCE_LANG_NOT_FOUND= 1815
		ERROR_NOT_ENOUGH_QUOTA= 1816
		RPC_S_NO_INTERFACES= 1817
		RPC_S_CALL_CANCELLED= 1818
		RPC_S_BINDING_INCOMPLETE= 1819
		RPC_S_COMM_FAILURE= 1820
		RPC_S_UNSUPPORTED_AUTHN_LEVEL= 1821
		RPC_S_NO_PRINC_NAME= 1822
		RPC_S_NOT_RPC_ERROR= 1823
		RPC_S_UUID_LOCAL_ONLY= 1824
		RPC_S_SEC_PKG_ERROR= 1825
		RPC_S_NOT_CANCELLED= 1826
		RPC_X_INVALID_ES_ACTION= 1827
		RPC_X_WRONG_ES_VERSION= 1828
		RPC_X_WRONG_STUB_VERSION= 1829
		RPC_S_GROUP_MEMBER_NOT_FOUND= 1898
		EPT_S_CANT_CREATE= 1899
		RPC_S_INVALID_OBJECT= 1900
		ERROR_INVALID_TIME= 1901
		ERROR_INVALID_FORM_NAME= 1902
		ERROR_INVALID_FORM_SIZE= 1903
		ERROR_ALREADY_WAITING= 1904
		ERROR_PRINTER_DELETED= 1905
		ERROR_INVALID_PRINTER_STATE= 1906
		ERROR_PASSWORD_MUST_CHANGE= 1907
		ERROR_DOMAIN_CONTROLLER_NOT_FOUND= 1908
		ERROR_ACCOUNT_LOCKED_OUT= 1909
		ERROR_NO_BROWSER_SERVERS_FOUND= 6118
		ERROR_INVALID_PIXEL_FORMAT= 2000
		ERROR_BAD_DRIVER= 2001
		ERROR_INVALID_WINDOW_STYLE= 2002
		ERROR_METAFILE_NOT_SUPPORTED= 2003
		ERROR_TRANSFORM_NOT_SUPPORTED= 2004
		ERROR_CLIPPING_NOT_SUPPORTED= 2005
		ERROR_UNKNOWN_PRINT_MONITOR= 3000
		ERROR_PRINTER_DRIVER_IN_USE= 3001
		ERROR_SPOOL_FILE_NOT_FOUND= 3002
		ERROR_SPL_NO_STARTDOC= 3003
		ERROR_SPL_NO_ADDJOB= 3004
		ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED= 3005
		ERROR_PRINT_MONITOR_ALREADY_INSTALLED= 3006
		ERROR_WINS_INTERNAL= 4000
		ERROR_CAN_NOT_DEL_LOCAL_WINS= 4001
		ERROR_STATIC_INIT= 4002
		ERROR_INC_BACKUP= 4003
		ERROR_FULL_BACKUP= 4004
		ERROR_REC_NON_EXISTENT= 4005
		ERROR_RPL_NOT_ALLOWED= 4006
		SEVERITY_SUCCESS= 0
		SEVERITY_ERROR= 1
		FACILITY_WINDOWS= 8
		FACILITY_STORAGE= 3
		FACILITY_RPC= 1
		FACILITY_WIN32= 7
		FACILITY_CONTROL= 10
		FACILITY_NULL= 0
		FACILITY_ITF= 4
		FACILITY_DISPATCH= 2
		FACILITY_NT_BIT= 0x10000000
		ANSI_NULL= '\0'
		ADDRESS_TAG_BIT= 0x80000000u
		APPLICATION_ERROR_MASK= 0x20000000
		ERROR_SEVERITY_SUCCESS= 0x00000000
		ERROR_SEVERITY_INFORMATIONAL= 0x40000000
		ERROR_SEVERITY_WARNING= 0x80000000
		ERROR_SEVERITY_ERROR= 0xC0000000
		COMPRESSION_FORMAT_NONE= (0x0000)
		COMPRESSION_FORMAT_DEFAULT= (0x0001)
		COMPRESSION_FORMAT_LZNT1= (0x0002)
		COMPRESSION_ENGINE_STANDARD= (0x0000)
		COMPRESSION_ENGINE_MAXIMUM= (0x0100)
		ACCESS_ALLOWED_ACE_TYPE= (0x0)
		ACCESS_DENIED_ACE_TYPE= (0x1)
		ANYSIZE_ARRAY= 1
		SYSTEM_AUDIT_ACE_TYPE= (0x2)
		SYSTEM_ALARM_ACE_TYPE= (0x3)
		OBJECT_INHERIT_ACE= 1
		CONTAINER_INHERIT_ACE= 2
		NO_PROPAGATE_INHERIT_ACE= 4
		INHERIT_ONLY_ACE= 8
		VALID_INHERIT_FLAGS= 16
		SUCCESSFUL_ACCESS_ACE_FLAG= 64
		FAILED_ACCESS_ACE_FLAG= 128
		DELETE= 0x00010000
		READ_CONTROL= 0x20000
		WRITE_DAC= 0x40000
		WRITE_OWNER= 0x80000
		SYNCHRONIZE= 0x100000
		STANDARD_RIGHTS_REQUIRED= 0xF0000
		STANDARD_RIGHTS_READ= 0x20000
		STANDARD_RIGHTS_WRITE= 0x20000
		STANDARD_RIGHTS_EXECUTE= 0x20000
		STANDARD_RIGHTS_ALL= 0x1F0000
		SPECIFIC_RIGHTS_ALL= 0xFFFF
		ACCESS_SYSTEM_SECURITY= 0x1000000
		MAXIMUM_ALLOWED= 0x2000000
		GENERIC_READ= 0x80000000
		GENERIC_WRITE= 0x40000000
		GENERIC_EXECUTE= 0x20000000
		GENERIC_ALL= 0x10000000
		FILE_READ_DATA= 0x00000001
		FILE_LIST_DIRECTORY= 0x00000001
		FILE_WRITE_DATA= 0x00000002
		FILE_ADD_FILE= 0x00000002
		FILE_APPEND_DATA= 0x00000004
		FILE_ADD_SUBDIRECTORY= 0x00000004
		FILE_CREATE_PIPE_INSTANCE= 0x00000004
		FILE_READ_EA= 0x00000008
		FILE_READ_PROPERTIES= 0x00000008
		FILE_WRITE_EA= 0x00000010
		FILE_WRITE_PROPERTIES= 0x00000010
		FILE_EXECUTE= 0x00000020
		FILE_TRAVERSE= 0x00000020
		FILE_DELETE_CHILD= 0x00000040
		FILE_READ_ATTRIBUTES= 0x00000080
		FILE_WRITE_ATTRIBUTES= 0x00000100
		FILE_ALL_ACCESS= (0xF0000 | 0x100000  | 0x1FF)
		FILE_GENERIC_READ= (0x20000 | 0x00000001 | 0x00000080 | 0x00000008 | 0x100000 )
		FILE_GENERIC_WRITE= (0x20000 | 0x00000002 | 0x00000100 | 0x00000010 | 0x00000004 | 0x100000 )
		FILE_GENERIC_EXECUTE= (0x20000 | 0x00000080 | 0x00000020 | 0x100000 )
		FILE_SHARE_READ= 0x00000001
		FILE_SHARE_WRITE= 0x00000002
		FILE_SHARE_DELETE= 0x00000004
		FILE_ATTRIBUTE_READONLY= 0x00000001
		FILE_ATTRIBUTE_HIDDEN= 0x00000002
		FILE_ATTRIBUTE_SYSTEM= 0x00000004
		FILE_ATTRIBUTE_DIRECTORY= 0x00000010
		FILE_ATTRIBUTE_ARCHIVE= 0x00000020
		FILE_ATTRIBUTE_DEVICE= 0x00000040
		FILE_ATTRIBUTE_NORMAL= 0x00000080
		FILE_ATTRIBUTE_TEMPORARY= 0x00000100
		FILE_ATTRIBUTE_SPARSE_FILE= 0x00000200
		FILE_ATTRIBUTE_REPARSE_POINT= 0x00000400
		FILE_ATTRIBUTE_COMPRESSED= 0x00000800
		FILE_ATTRIBUTE_OFFLINE= 0x00001000
		FILE_ATTRIBUTE_NOT_CONTENT_INDEXED= 0x00002000
		FILE_ATTRIBUTE_ENCRYPTED= 0x00004000
		FILE_NOTIFY_CHANGE_FILE_NAME= 0x00000001
		FILE_NOTIFY_CHANGE_DIR_NAME= 0x00000002
		FILE_NOTIFY_CHANGE_ATTRIBUTES= 0x00000004
		FILE_NOTIFY_CHANGE_SIZE= 0x00000008
		FILE_NOTIFY_CHANGE_LAST_WRITE= 0x00000010
		FILE_NOTIFY_CHANGE_LAST_ACCESS= 0x00000020
		FILE_NOTIFY_CHANGE_CREATION= 0x00000040
		FILE_NOTIFY_CHANGE_SECURITY= 0x00000100
		FILE_CASE_SENSITIVE_SEARCH= 0x00000001
		FILE_CASE_PRESERVED_NAMES= 0x00000002
		FILE_UNICODE_ON_DISK= 0x00000004
		FILE_PERSISTENT_ACLS= 0x00000008
		FILE_FILE_COMPRESSION= 0x00000010
		FILE_VOLUME_QUOTAS= 0x00000020
		FILE_SUPPORTS_SPARSE_FILES= 0x00000040
		FILE_SUPPORTS_REPARSE_POINTS= 0x00000080
		FILE_SUPPORTS_REMOTE_STORAGE= 0x00000100
		FILE_VOLUME_IS_COMPRESSED= 0x00008000
		FILE_SUPPORTS_OBJECT_IDS= 0x00010000
		FILE_SUPPORTS_ENCRYPTION= 0x00020000
		FILE_NAMED_STREAMS= 0x00040000
		IO_COMPLETION_MODIFY_STATE= 0x0002
		IO_COMPLETION_ALL_ACCESS= (0xF0000|0x100000 |0x3)
		DUPLICATE_CLOSE_SOURCE= 0x00000001
		DUPLICATE_SAME_ACCESS= 0x00000002
		PROCESS_TERMINATE= 1
		PROCESS_CREATE_THREAD= 2
		PROCESS_VM_OPERATION= 8
		PROCESS_VM_READ= 16
		PROCESS_VM_WRITE= 32
		PROCESS_DUP_HANDLE= 64
		PROCESS_CREATE_PROCESS= 128
		PROCESS_SET_QUOTA= 256
		PROCESS_SET_INFORMATION= 512
		PROCESS_QUERY_INFORMATION= 1024
		PROCESS_ALL_ACCESS= (0xF0000|0x100000 |0xFFF)
		THREAD_TERMINATE= 1
		THREAD_SUSPEND_RESUME= 2
		THREAD_GET_CONTEXT= 8
		THREAD_SET_CONTEXT= 16
		THREAD_SET_INFORMATION= 32
		THREAD_QUERY_INFORMATION= 64
		THREAD_SET_THREAD_TOKEN= 128
		THREAD_IMPERSONATE= 256
		THREAD_DIRECT_IMPERSONATION= 0x200
		THREAD_ALL_ACCESS= (0xF0000|0x100000 |0x3FF)
		EXCEPTION_NONCONTINUABLE= 1
		EXCEPTION_UNWINDING=2
		EXCEPTION_EXIT_UNWIND=4
		EXCEPTION_MAXIMUM_PARAMETERS= 15
		SECURITY_NULL_RID= 0
		SECURITY_WORLD_RID= (0x00000000 )
		SECURITY_LOCAL_RID= 0
		SECURITY_CREATOR_OWNER_RID= 0
		SECURITY_CREATOR_GROUP_RID= 1
		SECURITY_DIALUP_RID= 1
		SECURITY_NETWORK_RID= 2
		SECURITY_BATCH_RID= 3
		SECURITY_INTERACTIVE_RID= 4
		SECURITY_LOGON_IDS_RID= 5
		SECURITY_SERVICE_RID= 6
		SECURITY_LOCAL_SYSTEM_RID= 18
		SECURITY_BUILTIN_DOMAIN_RID= 32
		SECURITY_PRINCIPAL_SELF_RID= 10
		SID_REVISION= 1
		DOMAIN_USER_RID_ADMIN= 0x1F4
		DOMAIN_USER_RID_GUEST= 0x1F5
		DOMAIN_GROUP_RID_ADMINS= 0x200
		DOMAIN_GROUP_RID_USERS= 0x201
		DOMAIN_ALIAS_RID_ADMINS= 0x220
		DOMAIN_ALIAS_RID_USERS= 0x221
		DOMAIN_ALIAS_RID_GUESTS= 0x222
		DOMAIN_ALIAS_RID_POWER_USERS= 0x223
		DOMAIN_ALIAS_RID_ACCOUNT_OPS= 0x224
		DOMAIN_ALIAS_RID_SYSTEM_OPS= 0x225
		DOMAIN_ALIAS_RID_PRINT_OPS= 0x226
		DOMAIN_ALIAS_RID_BACKUP_OPS= 0x227
		DOMAIN_ALIAS_RID_REPLICATOR= 0x228
		SE_GROUP_MANDATORY= 1
		SE_GROUP_ENABLED_BY_DEFAULT= 2
		SE_GROUP_ENABLED= 4
		SE_GROUP_OWNER= 8
		SE_GROUP_USE_FOR_DENY_ONLY= 16
		SE_GROUP_LOGON_ID= -1073741824
		SE_GROUP_RESOURCE= 536870912
		LANG_NEUTRAL= 0x00
		LANG_ARABIC= 0x01
		LANG_BULGARIAN= 0x02
		LANG_CATALAN= 0x03
		LANG_CHINESE= 0x04
		LANG_CZECH= 0x05
		LANG_DANISH= 0x06
		LANG_GERMAN= 0x07
		LANG_GREEK= 0x08
		LANG_ENGLISH= 0x09
		LANG_SPANISH= 0x0a
		LANG_FINNISH= 0x0b
		LANG_FRENCH= 0x0c
		LANG_HEBREW= 0x0d
		LANG_HUNGARIAN= 0x0e
		LANG_ICELANDIC= 0x0f
		LANG_ITALIAN= 0x10
		LANG_JAPANESE= 0x11
		LANG_KOREAN= 0x12
		LANG_DUTCH= 0x13
		LANG_NORWEGIAN= 0x14
		LANG_POLISH= 0x15
		LANG_PORTUGUESE= 0x16
		LANG_ROMANIAN= 0x18
		LANG_RUSSIAN= 0x19
		LANG_CROATIAN= 0x1a
		LANG_SERBIAN= 0x1a
		LANG_SLOVAK= 0x1b
		LANG_ALBANIAN= 0x1c
		LANG_SWEDISH= 0x1d
		LANG_THAI= 0x1e
		LANG_TURKISH= 0x1f
		LANG_URDU= 0x20
		LANG_INDONESIAN= 0x21
		LANG_UKRAINIAN= 0x22
		LANG_BELARUSIAN= 0x23
		LANG_SLOVENIAN= 0x24
		LANG_ESTONIAN= 0x25
		LANG_LATVIAN= 0x26
		LANG_LITHUANIAN= 0x27
		LANG_FARSI= 0x29
		LANG_VIETNAMESE= 0x2a
		LANG_ARMENIAN= 0x2b
		LANG_AZERI= 0x2c
		LANG_BASQUE= 0x2d
		LANG_MACEDONIAN= 0x2f
		LANG_AFRIKAANS= 0x36
		LANG_GEORGIAN= 0x37
		LANG_FAEROESE= 0x38
		LANG_HINDI= 0x39
		LANG_MALAY= 0x3e
		LANG_KAZAK= 0x3f
		LANG_SWAHILI= 0x41
		LANG_UZBEK= 0x43
		LANG_TATAR= 0x44
		LANG_BENGALI= 0x45
		LANG_PUNJABI= 0x46
		LANG_GUJARATI= 0x47
		LANG_ORIYA= 0x48
		LANG_TAMIL= 0x49
		LANG_TELUGU= 0x4a
		LANG_KANNADA= 0x4b
		LANG_MALAYALAM= 0x4c
		LANG_ASSAMESE= 0x4d
		LANG_MARATHI= 0x4e
		LANG_SANSKRIT= 0x4f
		LANG_KONKANI= 0x57
		LANG_MANIPURI= 0x58
		LANG_SINDHI= 0x59
		//defination for language 0x60 censored by lawyers
		LANG_NEPALI= 0x61
		SUBLANG_NEUTRAL= 0x00
		SUBLANG_DEFAULT= 0x01
		SUBLANG_SYS_DEFAULT= 0x02
		SUBLANG_ARABIC_SAUDI_ARABIA= 0x01
		SUBLANG_ARABIC_IRAQ= 0x02
		SUBLANG_ARABIC_EGYPT= 0x03
		SUBLANG_ARABIC_LIBYA= 0x04
		SUBLANG_ARABIC_ALGERIA= 0x05
		SUBLANG_ARABIC_MOROCCO= 0x06
		SUBLANG_ARABIC_TUNISIA= 0x07
		SUBLANG_ARABIC_OMAN= 0x08
		SUBLANG_ARABIC_YEMEN= 0x09
		SUBLANG_ARABIC_SYRIA= 0x0a
		SUBLANG_ARABIC_JORDAN= 0x0b
		SUBLANG_ARABIC_LEBANON= 0x0c
		SUBLANG_ARABIC_KUWAIT= 0x0d
		SUBLANG_ARABIC_UAE= 0x0e
		SUBLANG_ARABIC_BAHRAIN= 0x0f
		SUBLANG_ARABIC_QATAR= 0x10
		SUBLANG_AZERI_CYRILLIC= 0x02
		SUBLANG_AZERI_LATIN= 0x01
		SUBLANG_CHINESE_TRADITIONAL= 0x01
		SUBLANG_CHINESE_SIMPLIFIED= 0x02
		SUBLANG_CHINESE_HONGKONG= 0x03
		SUBLANG_CHINESE_SINGAPORE= 0x04
		SUBLANG_CHINESE_MACAU= 0x05
		SUBLANG_DUTCH= 0x01
		SUBLANG_DUTCH_BELGIAN= 0x02
		SUBLANG_ENGLISH_US= 0x01
		SUBLANG_ENGLISH_UK= 0x02
		SUBLANG_ENGLISH_AUS= 0x03
		SUBLANG_ENGLISH_CAN= 0x04
		SUBLANG_ENGLISH_NZ= 0x05
		SUBLANG_ENGLISH_EIRE= 0x06
		SUBLANG_ENGLISH_SOUTH_AFRICA= 0x07
		SUBLANG_ENGLISH_JAMAICA= 0x08
		SUBLANG_ENGLISH_CARIBBEAN= 0x09
		SUBLANG_ENGLISH_BELIZE= 0x0a
		SUBLANG_ENGLISH_TRINIDAD= 0x0b
		SUBLANG_ENGLISH_PHILIPPINES= 0x0d
		SUBLANG_ENGLISH_ZIMBABWE= 0x0c
		SUBLANG_FRENCH= 0x01
		SUBLANG_FRENCH_BELGIAN= 0x02
		SUBLANG_FRENCH_CANADIAN= 0x03
		SUBLANG_FRENCH_SWISS= 0x04
		SUBLANG_FRENCH_LUXEMBOURG= 0x05
		SUBLANG_FRENCH_MONACO= 0x06
		SUBLANG_GERMAN= 0x01
		SUBLANG_GERMAN_SWISS= 0x02
		SUBLANG_GERMAN_AUSTRIAN= 0x03
		SUBLANG_GERMAN_LUXEMBOURG= 0x04
		SUBLANG_GERMAN_LIECHTENSTEIN= 0x05
		SUBLANG_ITALIAN= 0x01
		SUBLANG_ITALIAN_SWISS= 0x02
		//defination for language xxx_INDIA 0x02 censored by lawyers
		SUBLANG_KOREAN= 0x01
		SUBLANG_LITHUANIAN= 0x01
		SUBLANG_MALAY_MALAYSIA= 0x01
		SUBLANG_MALAY_BRUNEI_DARUSSALAM= 0x02
		SUBLANG_NEPALI_INDIA= 0x02
		SUBLANG_NORWEGIAN_BOKMAL= 0x01
		SUBLANG_NORWEGIAN_NYNORSK= 0x02
		SUBLANG_PORTUGUESE= 0x02
		SUBLANG_PORTUGUESE_BRAZILIAN= 0x01
		SUBLANG_SERBIAN_LATIN= 0x02
		SUBLANG_SERBIAN_CYRILLIC= 0x03
		SUBLANG_SPANISH= 0x01
		SUBLANG_SPANISH_MEXICAN= 0x02
		SUBLANG_SPANISH_MODERN= 0x03
		SUBLANG_SPANISH_GUATEMALA= 0x04
		SUBLANG_SPANISH_COSTA_RICA= 0x05
		SUBLANG_SPANISH_PANAMA= 0x06
		SUBLANG_SPANISH_DOMINICAN_REPUBLIC= 0x07
		SUBLANG_SPANISH_VENEZUELA= 0x08
		SUBLANG_SPANISH_COLOMBIA= 0x09
		SUBLANG_SPANISH_PERU= 0x0a
		SUBLANG_SPANISH_ARGENTINA= 0x0b
		SUBLANG_SPANISH_ECUADOR= 0x0c
		SUBLANG_SPANISH_CHILE= 0x0d
		SUBLANG_SPANISH_URUGUAY= 0x0e
		SUBLANG_SPANISH_PARAGUAY= 0x0f
		SUBLANG_SPANISH_BOLIVIA= 0x10
		SUBLANG_SPANISH_EL_SALVADOR= 0x11
		SUBLANG_SPANISH_HONDURAS= 0x12
		SUBLANG_SPANISH_NICARAGUA= 0x13
		SUBLANG_SPANISH_PUERTO_RICO= 0x14
		SUBLANG_SWEDISH= 0x01
		SUBLANG_SWEDISH_FINLAND= 0x02
		SUBLANG_URDU_PAKISTAN= 0x01
		SUBLANG_URDU_INDIA= 0x02
		SUBLANG_UZBEK_LATIN= 0x01
		SUBLANG_UZBEK_CYRILLIC= 0x02
		NLS_VALID_LOCALE_MASK= 1048575
		SORT_DEFAULT= 0
		SORT_JAPANESE_XJIS= 0
		SORT_JAPANESE_UNICODE= 1
		SORT_CHINESE_BIG5= 0
		SORT_CHINESE_PRCP= 0
		SORT_CHINESE_UNICODE= 1
		SORT_CHINESE_PRC= 2
		SORT_CHINESE_BOPOMOFO= 3
		SORT_KOREAN_KSC= 0
		SORT_KOREAN_UNICODE= 1
		SORT_GERMAN_PHONE_BOOK= 1
		SORT_HUNGARIAN_DEFAULT= 0
		SORT_HUNGARIAN_TECHNICAL= 1
		SORT_GEORGIAN_TRADITIONAL= 0
		SORT_GEORGIAN_MODERN= 1
		ACL_REVISION= 2
		ACL_REVISION_DS= 4
		ACL_REVISION1= 1
		ACL_REVISION2= 2
		ACL_REVISION3= 3
		ACL_REVISION4= 4
		MIN_ACL_REVISION= 2
		MAX_ACL_REVISION= 4
		MINCHAR= 0x80
		MAXCHAR= 0x7f
		MINSHORT= 0x8000
		MAXSHORT= 0x7fff
		MINLONG= 0x80000000
		MAXLONG= 0x7fffffff
		MAXBYTE= 0xff
		MAXWORD= 0xffff
		MAXDWORD= 0xffffffff
		PROCESSOR_INTEL_386= 386
		PROCESSOR_INTEL_486= 486
		PROCESSOR_INTEL_PENTIUM= 586
		PROCESSOR_MIPS_R4000= 4000
		PROCESSOR_ALPHA_21064= 21064
		PROCESSOR_ARCHITECTURE_INTEL= 0
		PROCESSOR_ARCHITECTURE_MIPS= 1
		PROCESSOR_ARCHITECTURE_ALPHA= 2
		PROCESSOR_ARCHITECTURE_PPC= 3
		PROCESSOR_ARCHITECTURE_UNKNOWN= 0xFFFF
		PF_FLOATING_POINT_PRECISION_ERRATA= 0
		PF_FLOATING_POINT_EMULATED= 1
		PF_COMPARE_EXCHANGE_DOUBLE= 2
		PF_MMX_INSTRUCTIONS_AVAILABLE= 3
		PF_PPC_MOVEMEM_64BIT_OK= 4
		PF_ALPHA_BYTE_INSTRUCTIONS= 5
		PF_XMMI_INSTRUCTIONS_AVAILABLE= 6
		PF_3DNOW_INSTRUCTIONS_AVAILABLE= 7
		PF_RDTSC_INSTRUCTION_AVAILABLE= 8
		PF_PAE_ENABLED= 9
		PAGE_READONLY= 0x0002
		PAGE_READWRITE= 0x0004
		PAGE_WRITECOPY= 0x0008
		FILE_ACTION_ADDED= 0x00000001
		FILE_ACTION_REMOVED= 0x00000002
		FILE_ACTION_MODIFIED= 0x00000003
		FILE_ACTION_RENAMED_OLD_NAME= 0x00000004
		FILE_ACTION_RENAMED_NEW_NAME= 0x00000005
		HEAP_NO_SERIALIZE= 1
		HEAP_GROWABLE= 2
		HEAP_GENERATE_EXCEPTIONS= 4
		HEAP_ZERO_MEMORY= 8
		HEAP_REALLOC_IN_PLACE_ONLY= 16
		HEAP_TAIL_CHECKING_ENABLED= 32
		HEAP_FREE_CHECKING_ENABLED= 64
		HEAP_DISABLE_COALESCE_ON_FREE= 128
		HEAP_CREATE_ALIGN_16= 0x0000
		HEAP_CREATE_ENABLE_TRACING= 0x20000
		HEAP_MAXIMUM_TAG= 0xFFF
		HEAP_PSEUDO_TAG_FLAG= 0x8000
		HEAP_TAG_SHIFT= 16
		KEY_QUERY_VALUE= 1
		KEY_SET_VALUE= 2
		KEY_CREATE_SUB_KEY= 4
		KEY_ENUMERATE_SUB_KEYS= 8
		KEY_NOTIFY= 16
		KEY_CREATE_LINK= 32
		KEY_WRITE= 0x20006
		KEY_EXECUTE= 0x20019
		KEY_READ= 0x20019
		KEY_ALL_ACCESS= 0xf003f
		REG_WHOLE_HIVE_VOLATILE= 1
		REG_REFRESH_HIVE= 2
		REG_NO_LAZY_FLUSH= 4
		REG_OPTION_RESERVED= 0
		REG_OPTION_NON_VOLATILE= 0
		REG_OPTION_VOLATILE= 1
		REG_OPTION_CREATE_LINK= 2
		REG_OPTION_BACKUP_RESTORE= 4
		REG_OPTION_OPEN_LINK= 8
		REG_LEGAL_OPTION= 15
		OWNER_SECURITY_INFORMATION= 1
		GROUP_SECURITY_INFORMATION= 2
		DACL_SECURITY_INFORMATION= 4
		SACL_SECURITY_INFORMATION= 8
		MAXIMUM_PROCESSORS= 32
		PAGE_EXECUTE= 0x0010
		PAGE_EXECUTE_READ= 0x0020
		PAGE_EXECUTE_READWRITE= 0x0040
		PAGE_GUARD= 0x0100
		PAGE_NOACCESS= 0x0001
		PAGE_NOCACHE= 0x0200
		MEM_COMMIT= 0x1000
		MEM_RESERVE= 0x2000
		MEM_DECOMMIT= 0x4000
		MEM_RELEASE= 0x8000
		MEM_FREE= 0x10000
		MEM_PRIVATE= 0x20000
		MEM_MAPPED= 0x40000
		MEM_RESET= 0x80000
		MEM_TOP_DOWN= 0x100000
		MEM_WRITE_WATCH= 0x200000
		MEM_PHYSICAL= 0x400000
		MEM_4MB_PAGES= 0x80000000
		MEM_IMAGE= 0x01000000
		SEC_FILE= 0x00800000
		SEC_IMAGE= 0x01000000
		SEC_VLM= 0x02000000
		SEC_RESERVE= 0x04000000
		SEC_COMMIT= 0x08000000
		SEC_NOCACHE= 0x10000000
		PAGE_EXECUTE_WRITECOPY= 0x0080
		SECTION_EXTEND_SIZE= 16
		SECTION_MAP_READ= 4
		SECTION_MAP_WRITE= 2
		SECTION_QUERY= 1
		SECTION_ALL_ACCESS= 0xf001f
		MESSAGE_RESOURCE_UNICODE= 1
		RTL_CRITSECT_TYPE= 0
		RTL_RESOURCE_TYPE= 1
		IMAGE_SIZEOF_FILE_HEADER= 20
		IMAGE_FILE_RELOCS_STRIPPED= 1
		IMAGE_FILE_EXECUTABLE_IMAGE= 2
		IMAGE_FILE_LINE_NUMS_STRIPPED= 4
		IMAGE_FILE_LOCAL_SYMS_STRIPPED= 8
		IMAGE_FILE_BYTES_REVERSED_LO= 128
		IMAGE_FILE_32BIT_MACHINE= 256
		IMAGE_FILE_DEBUG_STRIPPED= 512
		IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP= 1024
		IMAGE_FILE_NET_RUN_FROM_SWAP= 2048
		IMAGE_FILE_SYSTEM= 4096
		IMAGE_FILE_DLL= 8192
		IMAGE_FILE_UP_SYSTEM_ONLY= 16384
		IMAGE_FILE_BYTES_REVERSED_HI= 32768
		IMAGE_FILE_MACHINE_UNKNOWN= 0
		IMAGE_FILE_MACHINE_I386= 332
		IMAGE_FILE_MACHINE_R3000= 354
		IMAGE_FILE_MACHINE_R4000= 358
		IMAGE_FILE_MACHINE_R10000= 360
		IMAGE_FILE_MACHINE_ALPHA= 388
		IMAGE_FILE_MACHINE_POWERPC= 496
		IMAGE_DOS_SIGNATURE= 0x5A4D
		IMAGE_OS2_SIGNATURE= 0x454E
		IMAGE_OS2_SIGNATURE_LE= 0x454C
		IMAGE_VXD_SIGNATURE= 0x454C
		IMAGE_NT_SIGNATURE= 0x00004550
		IMAGE_NT_OPTIONAL_HDR_MAGIC= 0x10b
		IMAGE_ROM_OPTIONAL_HDR_MAGIC= 0x107
		IMAGE_SEPARATE_DEBUG_SIGNATURE= 0x4944
		IMAGE_NUMBEROF_DIRECTORY_ENTRIES= 16
		IMAGE_SIZEOF_ROM_OPTIONAL_HEADER= 56
		IMAGE_SIZEOF_STD_OPTIONAL_HEADER= 28
		IMAGE_SIZEOF_NT_OPTIONAL_HEADER= 224
		IMAGE_SIZEOF_SHORT_NAME= 8
		IMAGE_SIZEOF_SECTION_HEADER= 40
		IMAGE_SIZEOF_SYMBOL= 18
		IMAGE_SIZEOF_AUX_SYMBOL= 18
		IMAGE_SIZEOF_RELOCATION= 10
		IMAGE_SIZEOF_BASE_RELOCATION= 8
		IMAGE_SIZEOF_LINENUMBER= 6
		IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR= 60
		SIZEOF_RFPO_DATA= 16
		IMAGE_SUBSYSTEM_UNKNOWN= 0
		IMAGE_SUBSYSTEM_NATIVE= 1
		IMAGE_SUBSYSTEM_WINDOWS_GUI= 2
		IMAGE_SUBSYSTEM_WINDOWS_CUI= 3
		IMAGE_SUBSYSTEM_OS2_CUI= 5
		IMAGE_SUBSYSTEM_POSIX_CUI= 7
		IMAGE_DIRECTORY_ENTRY_EXPORT= 0
		IMAGE_DIRECTORY_ENTRY_IMPORT= 1
		IMAGE_DIRECTORY_ENTRY_RESOURCE= 2
		IMAGE_DIRECTORY_ENTRY_EXCEPTION= 3
		IMAGE_DIRECTORY_ENTRY_SECURITY= 4
		IMAGE_DIRECTORY_ENTRY_BASERELOC= 5
		IMAGE_DIRECTORY_ENTRY_DEBUG= 6
		IMAGE_DIRECTORY_ENTRY_COPYRIGHT= 7
		IMAGE_DIRECTORY_ENTRY_GLOBALPTR= 8
		IMAGE_DIRECTORY_ENTRY_TLS= 9
		IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG= 10
		IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT= 11
		IMAGE_DIRECTORY_ENTRY_IAT= 12
		IMAGE_SCN_TYPE_NO_PAD= 8
		IMAGE_SCN_CNT_CODE= 32
		IMAGE_SCN_CNT_INITIALIZED_DATA= 64
		IMAGE_SCN_CNT_UNINITIALIZED_DATA= 128
		IMAGE_SCN_LNK_OTHER= 256
		IMAGE_SCN_LNK_INFO= 512
		IMAGE_SCN_LNK_REMOVE= 2048
		IMAGE_SCN_LNK_COMDAT= 4096
		IMAGE_SCN_MEM_FARDATA= 0x8000
		IMAGE_SCN_MEM_PURGEABLE= 0x20000
		IMAGE_SCN_MEM_16BIT= 0x20000
		IMAGE_SCN_MEM_LOCKED= 0x40000
		IMAGE_SCN_MEM_PRELOAD= 0x80000
		IMAGE_SCN_ALIGN_1BYTES= 0x100000
		IMAGE_SCN_ALIGN_2BYTES= 0x200000
		IMAGE_SCN_ALIGN_4BYTES= 0x300000
		IMAGE_SCN_ALIGN_8BYTES= 0x400000
		IMAGE_SCN_ALIGN_16BYTES= 0x500000
		IMAGE_SCN_ALIGN_32BYTES= 0x600000
		IMAGE_SCN_ALIGN_64BYTES= 0x700000
		IMAGE_SCN_LNK_NRELOC_OVFL= 0x1000000
		IMAGE_SCN_MEM_DISCARDABLE= 0x2000000
		IMAGE_SCN_MEM_NOT_CACHED= 0x4000000
		IMAGE_SCN_MEM_NOT_PAGED= 0x8000000
		IMAGE_SCN_MEM_SHARED= 0x10000000
		IMAGE_SCN_MEM_EXECUTE= 0x20000000
		IMAGE_SCN_MEM_READ= 0x40000000
		IMAGE_SCN_MEM_WRITE= 0x80000000
		IMAGE_SYM_UNDEFINED= 0
		IMAGE_SYM_ABSOLUTE= (-1)
		IMAGE_SYM_DEBUG= (-2)
		IMAGE_SYM_TYPE_NULL= 0
		IMAGE_SYM_TYPE_VOID= 1
		IMAGE_SYM_TYPE_CHAR= 2
		IMAGE_SYM_TYPE_SHORT= 3
		IMAGE_SYM_TYPE_INT= 4
		IMAGE_SYM_TYPE_LONG= 5
		IMAGE_SYM_TYPE_FLOAT= 6
		IMAGE_SYM_TYPE_DOUBLE= 7
		IMAGE_SYM_TYPE_STRUCT= 8
		IMAGE_SYM_TYPE_UNION= 9
		IMAGE_SYM_TYPE_ENUM= 10
		IMAGE_SYM_TYPE_MOE= 11
		IMAGE_SYM_TYPE_BYTE= 12
		IMAGE_SYM_TYPE_WORD= 13
		IMAGE_SYM_TYPE_UINT= 14
		IMAGE_SYM_TYPE_DWORD= 15
		IMAGE_SYM_TYPE_PCODE= 32768
		IMAGE_SYM_DTYPE_NULL= 0
		IMAGE_SYM_DTYPE_POINTER= 1
		IMAGE_SYM_DTYPE_FUNCTION= 2
		IMAGE_SYM_DTYPE_ARRAY= 3
		IMAGE_SYM_CLASS_END_OF_FUNCTION= (-1)
		IMAGE_SYM_CLASS_NULL= 0
		IMAGE_SYM_CLASS_AUTOMATIC= 1
		IMAGE_SYM_CLASS_EXTERNAL= 2
		IMAGE_SYM_CLASS_STATIC= 3
		IMAGE_SYM_CLASS_REGISTER= 4
		IMAGE_SYM_CLASS_EXTERNAL_DEF= 5
		IMAGE_SYM_CLASS_LABEL= 6
		IMAGE_SYM_CLASS_UNDEFINED_LABEL= 7
		IMAGE_SYM_CLASS_MEMBER_OF_STRUCT= 8
		IMAGE_SYM_CLASS_ARGUMENT= 9
		IMAGE_SYM_CLASS_STRUCT_TAG= 10
		IMAGE_SYM_CLASS_MEMBER_OF_UNION= 11
		IMAGE_SYM_CLASS_UNION_TAG= 12
		IMAGE_SYM_CLASS_TYPE_DEFINITION= 13
		IMAGE_SYM_CLASS_UNDEFINED_STATIC= 14
		IMAGE_SYM_CLASS_ENUM_TAG= 15
		IMAGE_SYM_CLASS_MEMBER_OF_ENUM= 16
		IMAGE_SYM_CLASS_REGISTER_PARAM= 17
		IMAGE_SYM_CLASS_BIT_FIELD= 18
		IMAGE_SYM_CLASS_FAR_EXTERNAL= 68
		IMAGE_SYM_CLASS_BLOCK= 100
		IMAGE_SYM_CLASS_FUNCTION= 101
		IMAGE_SYM_CLASS_END_OF_STRUCT= 102
		IMAGE_SYM_CLASS_FILE= 103
		IMAGE_SYM_CLASS_SECTION= 104
		IMAGE_SYM_CLASS_WEAK_EXTERNAL= 105
		IMAGE_COMDAT_SELECT_NODUPLICATES= 1
		IMAGE_COMDAT_SELECT_ANY= 2
		IMAGE_COMDAT_SELECT_SAME_SIZE= 3
		IMAGE_COMDAT_SELECT_EXACT_MATCH= 4
		IMAGE_COMDAT_SELECT_ASSOCIATIVE= 5
		IMAGE_COMDAT_SELECT_LARGEST= 6
		IMAGE_COMDAT_SELECT_NEWEST= 7
		IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY= 1
		IMAGE_WEAK_EXTERN_SEARCH_LIBRARY= 2
		IMAGE_WEAK_EXTERN_SEARCH_ALIAS= 3
		IMAGE_REL_I386_ABSOLUTE= 0
		IMAGE_REL_I386_DIR16= 1
		IMAGE_REL_I386_REL16= 2
		IMAGE_REL_I386_DIR32= 6
		IMAGE_REL_I386_DIR32NB= 7
		IMAGE_REL_I386_SEG12= 9
		IMAGE_REL_I386_SECTION= 10
		IMAGE_REL_I386_SECREL= 11
		IMAGE_REL_I386_REL32= 20
		IMAGE_REL_MIPS_ABSOLUTE= 0
		IMAGE_REL_MIPS_REFHALF= 1
		IMAGE_REL_MIPS_REFWORD= 2
		IMAGE_REL_MIPS_JMPADDR= 3
		IMAGE_REL_MIPS_REFHI= 4
		IMAGE_REL_MIPS_REFLO= 5
		IMAGE_REL_MIPS_GPREL= 6
		IMAGE_REL_MIPS_LITERAL= 7
		IMAGE_REL_MIPS_SECTION= 10
		IMAGE_REL_MIPS_SECREL= 11
		IMAGE_REL_MIPS_SECRELLO= 12
		IMAGE_REL_MIPS_SECRELHI= 13
		IMAGE_REL_MIPS_REFWORDNB= 34
		IMAGE_REL_MIPS_PAIR= 35
		IMAGE_REL_ALPHA_ABSOLUTE= 0
		IMAGE_REL_ALPHA_REFLONG= 1
		IMAGE_REL_ALPHA_REFQUAD= 2
		IMAGE_REL_ALPHA_GPREL32= 3
		IMAGE_REL_ALPHA_LITERAL= 4
		IMAGE_REL_ALPHA_LITUSE= 5
		IMAGE_REL_ALPHA_GPDISP= 6
		IMAGE_REL_ALPHA_BRADDR= 7
		IMAGE_REL_ALPHA_HINT= 8
		IMAGE_REL_ALPHA_INLINE_REFLONG= 9
		IMAGE_REL_ALPHA_REFHI= 10
		IMAGE_REL_ALPHA_REFLO= 11
		IMAGE_REL_ALPHA_PAIR= 12
		IMAGE_REL_ALPHA_MATCH= 13
		IMAGE_REL_ALPHA_SECTION= 14
		IMAGE_REL_ALPHA_SECREL= 15
		IMAGE_REL_ALPHA_REFLONGNB= 16
		IMAGE_REL_ALPHA_SECRELLO= 17
		IMAGE_REL_ALPHA_SECRELHI= 18
		IMAGE_REL_PPC_ABSOLUTE= 0
		IMAGE_REL_PPC_ADDR64= 1
		IMAGE_REL_PPC_ADDR32= 2
		IMAGE_REL_PPC_ADDR24= 3
		IMAGE_REL_PPC_ADDR16= 4
		IMAGE_REL_PPC_ADDR14= 5
		IMAGE_REL_PPC_REL24= 6
		IMAGE_REL_PPC_REL14= 7
		IMAGE_REL_PPC_TOCREL16= 8
		IMAGE_REL_PPC_TOCREL14= 9
		IMAGE_REL_PPC_ADDR32NB= 10
		IMAGE_REL_PPC_SECREL= 11
		IMAGE_REL_PPC_SECTION= 12
		IMAGE_REL_PPC_IFGLUE= 13
		IMAGE_REL_PPC_IMGLUE= 14
		IMAGE_REL_PPC_SECREL16= 15
		IMAGE_REL_PPC_REFHI= 16
		IMAGE_REL_PPC_REFLO= 17
		IMAGE_REL_PPC_PAIR= 18
		IMAGE_REL_PPC_TYPEMASK= 255
		IMAGE_REL_PPC_NEG= 256
		IMAGE_REL_PPC_BRTAKEN= 512
		IMAGE_REL_PPC_BRNTAKEN= 1024
		IMAGE_REL_PPC_TOCDEFN= 2048
		IMAGE_REL_BASED_ABSOLUTE= 0
		IMAGE_REL_BASED_HIGH= 1
		IMAGE_REL_BASED_LOW= 2
		IMAGE_REL_BASED_HIGHLOW= 3
		IMAGE_REL_BASED_HIGHADJ= 4
		IMAGE_REL_BASED_MIPS_JMPADDR= 5
		IMAGE_ARCHIVE_START_SIZE= 8
		IMAGE_ARCHIVE_LINKER_MEMBER= "/               "
		IMAGE_ARCHIVE_LONGNAMES_MEMBER= "//              "
		IMAGE_ORDINAL_FLAG= 0x80000000
		IMAGE_RESOURCE_NAME_IS_STRING= 0x80000000
		IMAGE_RESOURCE_DATA_IS_DIRECTORY= 0x80000000
		IMAGE_DEBUG_TYPE_UNKNOWN= 0
		IMAGE_DEBUG_TYPE_COFF= 1
		IMAGE_DEBUG_TYPE_CODEVIEW= 2
		IMAGE_DEBUG_TYPE_FPO= 3
		IMAGE_DEBUG_TYPE_MISC= 4
		IMAGE_DEBUG_TYPE_EXCEPTION= 5
		IMAGE_DEBUG_TYPE_FIXUP= 6
		IMAGE_DEBUG_TYPE_OMAP_TO_SRC= 7
		IMAGE_DEBUG_TYPE_OMAP_FROM_SRC= 8
		FRAME_FPO= 0
		FRAME_TRAP= 1
		FRAME_TSS= 2
		FRAME_NONFPO= 3
		IMAGE_DEBUG_MISC_EXENAME= 1
		N_BTMASK= 0x000F
		N_TMASK= 0x0030
		N_TMASK1= 0x00C0
		N_TMASK2= 0x00F0
		N_BTSHFT= 4
		N_TSHIFT= 2
		IS_TEXT_UNICODE_ASCII16= 1
		IS_TEXT_UNICODE_REVERSE_ASCII16= 16
		IS_TEXT_UNICODE_STATISTICS= 2
		IS_TEXT_UNICODE_REVERSE_STATISTICS= 32
		IS_TEXT_UNICODE_CONTROLS= 4
		IS_TEXT_UNICODE_REVERSE_CONTROLS= 64
		IS_TEXT_UNICODE_SIGNATURE= 8
		IS_TEXT_UNICODE_REVERSE_SIGNATURE= 128
		IS_TEXT_UNICODE_ILLEGAL_CHARS= 256
		IS_TEXT_UNICODE_ODD_LENGTH= 512
		IS_TEXT_UNICODE_NULL_BYTES= 4096
		IS_TEXT_UNICODE_UNICODE_MASK= 15
		IS_TEXT_UNICODE_REVERSE_MASK= 240
		IS_TEXT_UNICODE_NOT_UNICODE_MASK= 3840
		IS_TEXT_UNICODE_NOT_ASCII_MASK= 61440
		SERVICE_KERNEL_DRIVER= 1
		SERVICE_FILE_SYSTEM_DRIVER= 2
		SERVICE_ADAPTER= 4
		SERVICE_RECOGNIZER_DRIVER= 8
		SERVICE_DRIVER= (1|2|8)
		SERVICE_WIN32_OWN_PROCESS= 16
		SERVICE_WIN32_SHARE_PROCESS= 32
		SERVICE_WIN32= (16|32)
		SERVICE_INTERACTIVE_PROCESS= 256
		SERVICE_TYPE_ALL= ((16|32)|4|(1|2|8)|256)
		SERVICE_BOOT_START= 0
		SERVICE_SYSTEM_START= 1
		SERVICE_AUTO_START= 2
		SERVICE_DEMAND_START= 3
		SERVICE_DISABLED= 4
		SERVICE_ERROR_IGNORE= 0
		SERVICE_ERROR_NORMAL= 1
		SERVICE_ERROR_SEVERE= 2
		SERVICE_ERROR_CRITICAL= 3
		SE_OWNER_DEFAULTED= 1
		SE_GROUP_DEFAULTED= 2
		SE_DACL_PRESENT= 4
		SE_DACL_DEFAULTED= 8
		SE_SACL_PRESENT= 16
		SE_SACL_DEFAULTED= 32
		SE_DACL_AUTO_INHERIT_REQ= 256
		SE_SACL_AUTO_INHERIT_REQ= 512
		SE_DACL_AUTO_INHERITED= 1024
		SE_SACL_AUTO_INHERITED= 2048
		SE_DACL_PROTECTED= 4096
		SE_SACL_PROTECTED= 8192
		SE_SELF_RELATIVE= 0x8000
		SECURITY_DESCRIPTOR_MIN_LENGTH= 20
		SECURITY_DESCRIPTOR_REVISION= 1
		SECURITY_DESCRIPTOR_REVISION1= 1
		SE_PRIVILEGE_ENABLED_BY_DEFAULT= 1
		SE_PRIVILEGE_ENABLED= 2
		SE_PRIVILEGE_USED_FOR_ACCESS= 0x80000000
		PRIVILEGE_SET_ALL_NECESSARY= 1
		SECURITY_DYNAMIC_TRACKING= 1
		SECURITY_STATIC_TRACKING= 0
		TOKEN_SOURCE_LENGTH= 8
		TOKEN_ADJUST_DEFAULT= (0x0080)
		TOKEN_ADJUST_GROUPS= (0x0040)
		TOKEN_ADJUST_PRIVILEGES= (0x0020)
		TOKEN_ALL_ACCESS= (0xF0000 | (0x0001) | (0x0002) | (0x0004) | (0x0008) | (0x0010) | (0x0020) | (0x0040) | (0x0080))
		TOKEN_ASSIGN_PRIMARY= (0x0001)
		TOKEN_DUPLICATE= (0x0002)
		TOKEN_EXECUTE= (0x20000)
		TOKEN_IMPERSONATE= (0x0004)
		TOKEN_QUERY= (0x0008)
		TOKEN_QUERY_SOURCE= (0x0010)
		TOKEN_READ= (0x20000 | (0x0008))
		TOKEN_WRITE= (0x20000 | (0x0020) | (0x0040) | (0x0080))
		DLL_PROCESS_DETACH= 0
		DLL_PROCESS_ATTACH= 1
		DLL_THREAD_ATTACH= 2
		DLL_THREAD_DETACH= 3
		DBG_CONTINUE= 0x10002
		DBG_TERMINATE_THREAD= 0x40010003
		DBG_TERMINATE_PROCESS= 0x40010004
		DBG_CONTROL_C= 0x40010005
		DBG_CONTROL_BREAK= 0x40010008
		DBG_EXCEPTION_NOT_HANDLED= 0x80010001
		TAPE_ABSOLUTE_POSITION= 0
		TAPE_LOGICAL_POSITION= 1
		TAPE_PSEUDO_LOGICAL_POSITION= 2
		TAPE_REWIND= 0
		TAPE_ABSOLUTE_BLOCK= 1
		TAPE_LOGICAL_BLOCK= 2
		TAPE_PSEUDO_LOGICAL_BLOCK= 3
		TAPE_SPACE_END_OF_DATA= 4
		TAPE_SPACE_RELATIVE_BLOCKS= 5
		TAPE_SPACE_FILEMARKS= 6
		TAPE_SPACE_SEQUENTIAL_FMKS= 7
		TAPE_SPACE_SETMARKS= 8
		TAPE_SPACE_SEQUENTIAL_SMKS= 9
		TAPE_DRIVE_FIXED= 1
		TAPE_DRIVE_SELECT= 2
		TAPE_DRIVE_INITIATOR= 4
		TAPE_DRIVE_ERASE_SHORT= 16
		TAPE_DRIVE_ERASE_LONG= 32
		TAPE_DRIVE_ERASE_BOP_ONLY= 64
		TAPE_DRIVE_ERASE_IMMEDIATE= 128
		TAPE_DRIVE_TAPE_CAPACITY= 256
		TAPE_DRIVE_TAPE_REMAINING= 512
		TAPE_DRIVE_FIXED_BLOCK= 1024
		TAPE_DRIVE_VARIABLE_BLOCK= 2048
		TAPE_DRIVE_WRITE_PROTECT= 4096
		TAPE_DRIVE_EOT_WZ_SIZE= 8192
		TAPE_DRIVE_ECC= 0x10000
		TAPE_DRIVE_COMPRESSION= 0x20000
		TAPE_DRIVE_PADDING= 0x40000
		TAPE_DRIVE_REPORT_SMKS= 0x80000
		TAPE_DRIVE_GET_ABSOLUTE_BLK= 0x100000
		TAPE_DRIVE_GET_LOGICAL_BLK= 0x200000
		TAPE_DRIVE_SET_EOT_WZ_SIZE= 0x400000
		TAPE_DRIVE_EJECT_MEDIA= 0x1000000
		TAPE_DRIVE_CLEAN_REQUESTS= 0x2000000
		TAPE_DRIVE_SET_CMP_BOP_ONLY= 0x4000000
		TAPE_DRIVE_RESERVED_BIT= 0x80000000
		TAPE_DRIVE_LOAD_UNLOAD= 0x80000001
		TAPE_DRIVE_TENSION= 0x80000002
		TAPE_DRIVE_LOCK_UNLOCK= 0x80000004
		TAPE_DRIVE_REWIND_IMMEDIATE= 0x80000008
		TAPE_DRIVE_SET_BLOCK_SIZE= 0x80000010
		TAPE_DRIVE_LOAD_UNLD_IMMED= 0x80000020
		TAPE_DRIVE_TENSION_IMMED= 0x80000040
		TAPE_DRIVE_LOCK_UNLK_IMMED= 0x80000080
		TAPE_DRIVE_SET_ECC= 0x80000100
		TAPE_DRIVE_SET_COMPRESSION= 0x80000200
		TAPE_DRIVE_SET_PADDING= 0x80000400
		TAPE_DRIVE_SET_REPORT_SMKS= 0x80000800
		TAPE_DRIVE_ABSOLUTE_BLK= 0x80001000
		TAPE_DRIVE_ABS_BLK_IMMED= 0x80002000
		TAPE_DRIVE_LOGICAL_BLK= 0x80004000
		TAPE_DRIVE_LOG_BLK_IMMED= 0x80008000
		TAPE_DRIVE_END_OF_DATA= 0x80010000
		TAPE_DRIVE_RELATIVE_BLKS= 0x80020000
		TAPE_DRIVE_FILEMARKS= 0x80040000
		TAPE_DRIVE_SEQUENTIAL_FMKS= 0x80080000
		TAPE_DRIVE_SETMARKS= 0x80100000
		TAPE_DRIVE_SEQUENTIAL_SMKS= 0x80200000
		TAPE_DRIVE_REVERSE_POSITION= 0x80400000
		TAPE_DRIVE_SPACE_IMMEDIATE= 0x80800000
		TAPE_DRIVE_WRITE_SETMARKS= 0x81000000
		TAPE_DRIVE_WRITE_FILEMARKS= 0x82000000
		TAPE_DRIVE_WRITE_SHORT_FMKS= 0x84000000
		TAPE_DRIVE_WRITE_LONG_FMKS= 0x88000000
		TAPE_DRIVE_WRITE_MARK_IMMED= 0x90000000
		TAPE_DRIVE_FORMAT= 0xA0000000
		TAPE_DRIVE_FORMAT_IMMEDIATE= 0xC0000000
		TAPE_DRIVE_HIGH_FEATURES= 0x80000000
		TAPE_FIXED_PARTITIONS= 0
		TAPE_INITIATOR_PARTITIONS= 2
		TAPE_SELECT_PARTITIONS= 1
		TAPE_FILEMARKS= 1
		TAPE_LONG_FILEMARKS= 3
		TAPE_SETMARKS= 0
		TAPE_SHORT_FILEMARKS= 2
		TAPE_ERASE_LONG= 1
		TAPE_ERASE_SHORT= 0
		TAPE_LOAD= 0
		TAPE_UNLOAD= 1
		TAPE_TENSION= 2
		TAPE_LOCK= 3
		TAPE_UNLOCK= 4
		TAPE_FORMAT= 5
		VER_PLATFORM_WIN32s= 0
		VER_PLATFORM_WIN32_WINDOWS= 1
		VER_PLATFORM_WIN32_NT= 2
		VER_NT_WORKSTATION= 1
		VER_NT_DOMAIN_CONTROLLER= 2
		VER_NT_SERVER= 3
		VER_SUITE_SMALLBUSINESS= 1
		VER_SUITE_ENTERPRISE= 2
		VER_SUITE_BACKOFFICE= 4
		VER_SUITE_TERMINAL= 16
		VER_SUITE_SMALLBUSINESS_RESTRICTED= 32
		VER_SUITE_DATACENTER= 128
		VER_SUITE_PERSONAL= 512
		TLS_MINIMUM_AVAILABLE= 64
		MAXIMUM_REPARSE_DATA_BUFFER_SIZE= 16384
		IO_REPARSE_TAG_RESERVED_ZERO= 0
		IO_REPARSE_TAG_RESERVED_ONE= 1
		IO_REPARSE_TAG_RESERVED_RANGE= 1
		IO_REPARSE_TAG_VALID_VALUES= 0xE000FFFF
		IO_REPARSE_TAG_SYMBOLIC_LINK= 0
		IO_REPARSE_TAG_MOUNT_POINT= 0xA0000003
		SIZE_OF_80387_REGISTERS= 80
		CONTEXT_i386= 0x10000
		CONTEXT_i486= 0x10000
		CONTEXT_CONTROL= (0x10000|0x00000001 )
		CONTEXT_INTEGER= (0x10000|0x00000002 )
		CONTEXT_SEGMENTS= (0x10000|0x00000004 )
		CONTEXT_FLOATING_POINT= (0x10000|0x00000008 )
		CONTEXT_DEBUG_REGISTERS= (0x10000|0x00000010 )
		CONTEXT_EXTENDED_REGISTERS= (0x10000|0x00000020 )
		CONTEXT_FULL= ((0x10000|0x00000001 )|(0x10000|0x00000002 )|(0x10000|0x00000004 ))
		MAXIMUM_SUPPORTED_EXTENSION= 512
		HMONITOR_DECLARED= 1
		FOREGROUND_BLUE= 1
		FOREGROUND_GREEN= 2
		FOREGROUND_RED= 4
		FOREGROUND_INTENSITY= 8
		BACKGROUND_BLUE= 16
		BACKGROUND_GREEN= 32
		BACKGROUND_RED= 64
		BACKGROUND_INTENSITY= 128
		CTRL_C_EVENT= 0
		CTRL_BREAK_EVENT= 1
		CTRL_CLOSE_EVENT= 2
		CTRL_LOGOFF_EVENT= 5
		CTRL_SHUTDOWN_EVENT= 6
		ENABLE_LINE_INPUT= 2
		ENABLE_ECHO_INPUT= 4
		ENABLE_PROCESSED_INPUT= 1
		ENABLE_WINDOW_INPUT= 8
		ENABLE_MOUSE_INPUT= 16
		ENABLE_PROCESSED_OUTPUT= 1
		ENABLE_WRAP_AT_EOL_OUTPUT= 2
		KEY_EVENT= 1
		MOUSE_EVENT= 2
		WINDOW_BUFFER_SIZE_EVENT= 4
		MENU_EVENT= 8
		FOCUS_EVENT= 16
		CAPSLOCK_ON= 128
		ENHANCED_KEY= 256
		RIGHT_ALT_PRESSED= 1
		LEFT_ALT_PRESSED= 2
		RIGHT_CTRL_PRESSED= 4
		LEFT_CTRL_PRESSED= 8
		SHIFT_PRESSED= 16
		NUMLOCK_ON= 32
		SCROLLLOCK_ON= 64
		FROM_LEFT_1ST_BUTTON_PRESSED= 1
		RIGHTMOST_BUTTON_PRESSED= 2
		FROM_LEFT_2ND_BUTTON_PRESSED= 4
		FROM_LEFT_3RD_BUTTON_PRESSED= 8
		FROM_LEFT_4TH_BUTTON_PRESSED= 16
		MOUSE_MOVED= 1
		DOUBLE_CLICK= 2
		MOUSE_WHEELED= 4
		SP_SERIALCOMM= 1
		PST_UNSPECIFIED= 0
		PST_RS232= 1
		PST_PARALLELPORT= 2
		PST_RS422= 3
		PST_RS423= 4
		PST_RS449= 5
		PST_MODEM= 6
		PST_FAX= 0x21
		PST_SCANNER= 0x22
		PST_NETWORK_BRIDGE= 0x100
		PST_LAT= 0x101
		PST_TCPIP_TELNET= 0x102
		PST_X25= 0x103
		BAUD_075= 1
		BAUD_110= 2
		BAUD_134_5= 4
		BAUD_150= 8
		BAUD_300= 16
		BAUD_600= 32
		BAUD_1200= 64
		BAUD_1800= 128
		BAUD_2400= 256
		BAUD_4800= 512
		BAUD_7200= 1024
		BAUD_9600= 2048
		BAUD_14400= 4096
		BAUD_19200= 8192
		BAUD_38400= 16384
		BAUD_56K= 32768
		BAUD_128K= 65536
		BAUD_115200= 131072
		BAUD_57600= 262144
		BAUD_USER= 0x10000000
		PCF_DTRDSR= 1
		PCF_RTSCTS= 2
		PCF_RLSD= 4
		PCF_PARITY_CHECK= 8
		PCF_XONXOFF= 16
		PCF_SETXCHAR= 32
		PCF_TOTALTIMEOUTS= 64
		PCF_INTTIMEOUTS= 128
		PCF_SPECIALCHARS= 256
		PCF_16BITMODE= 512
		SP_PARITY= 1
		SP_BAUD= 2
		SP_DATABITS= 4
		SP_STOPBITS= 8
		SP_HANDSHAKING= 16
		SP_PARITY_CHECK= 32
		SP_RLSD= 64
		DATABITS_5= 1
		DATABITS_6= 2
		DATABITS_7= 4
		DATABITS_8= 8
		DATABITS_16= 16
		DATABITS_16X= 32
		STOPBITS_10= 1
		STOPBITS_15= 2
		STOPBITS_20= 4
		PARITY_NONE= 256
		PARITY_ODD= 512
		PARITY_EVEN= 1024
		PARITY_MARK= 2048
		PARITY_SPACE= 4096
		EXCEPTION_DEBUG_EVENT= 1
		CREATE_THREAD_DEBUG_EVENT= 2
		CREATE_PROCESS_DEBUG_EVENT= 3
		EXIT_THREAD_DEBUG_EVENT= 4
		EXIT_PROCESS_DEBUG_EVENT= 5
		LOAD_DLL_DEBUG_EVENT= 6
		UNLOAD_DLL_DEBUG_EVENT= 7
		OUTPUT_DEBUG_STRING_EVENT= 8
		RIP_EVENT= 9
		FILE_BEGIN= 0
		FILE_CURRENT= 1
		FILE_END= 2
		OF_READ= 0
		OF_READWRITE= 2
		OF_WRITE= 1
		OF_SHARE_COMPAT= 0
		OF_SHARE_DENY_NONE= 64
		OF_SHARE_DENY_READ= 48
		OF_SHARE_DENY_WRITE= 32
		OF_SHARE_EXCLUSIVE= 16
		OF_CANCEL= 2048
		OF_CREATE= 4096
		OF_DELETE= 512
		OF_EXIST= 16384
		OF_PARSE= 256
		OF_PROMPT= 8192
		OF_REOPEN= 32768
		OF_VERIFY= 1024
		NMPWAIT_NOWAIT= 1
		NMPWAIT_USE_DEFAULT_WAIT= 0
		CE_BREAK= 16
		CE_DNS= 2048
		CE_FRAME= 8
		CE_IOE= 1024
		CE_MODE= 32768
		CE_OOP= 4096
		CE_OVERRUN= 2
		CE_PTO= 512
		CE_RXOVER= 1
		CE_RXPARITY= 4
		CE_TXFULL= 256
		PROGRESS_CONTINUE= 0
		PROGRESS_CANCEL= 1
		PROGRESS_STOP= 2
		PROGRESS_QUIET= 3
		CALLBACK_CHUNK_FINISHED= 0
		CALLBACK_STREAM_SWITCH= 1
		COPY_FILE_FAIL_IF_EXISTS= 1
		COPY_FILE_RESTARTABLE= 2
		OFS_MAXPATHNAME= 128
		FILE_MAP_ALL_ACCESS= 0xf001f
		FILE_MAP_READ= 4
		FILE_MAP_WRITE= 2
		FILE_MAP_COPY= 1
		MUTEX_ALL_ACCESS= 0x1f0001
		MUTEX_MODIFY_STATE= 1
		SEMAPHORE_ALL_ACCESS= 0x1f0003
		SEMAPHORE_MODIFY_STATE= 2
		EVENT_ALL_ACCESS= 0x1f0003
		EVENT_MODIFY_STATE= 2
		PIPE_ACCESS_DUPLEX= 3
		PIPE_ACCESS_INBOUND= 1
		PIPE_ACCESS_OUTBOUND= 2
		PIPE_TYPE_BYTE= 0
		PIPE_TYPE_MESSAGE= 4
		PIPE_READMODE_BYTE= 0
		PIPE_READMODE_MESSAGE= 2
		PIPE_WAIT= 0
		PIPE_NOWAIT= 1
		PIPE_CLIENT_END= 0
		PIPE_SERVER_END= 1
		PIPE_UNLIMITED_INSTANCES= 255
		CREATE_DEFAULT_ERROR_MODE= 0x04000000
		DEBUG_PROCESS= 0x00000001
		DEBUG_ONLY_THIS_PROCESS= 0x00000002
		CREATE_SUSPENDED= 0x00000004
		DETACHED_PROCESS= 0x00000008
		CREATE_NEW_CONSOLE= 0x00000010
		NORMAL_PRIORITY_CLASS= 0x00000020
		IDLE_PRIORITY_CLASS= 0x00000040
		HIGH_PRIORITY_CLASS= 0x00000080
		REALTIME_PRIORITY_CLASS= 0x00000100
		CREATE_NEW_PROCESS_GROUP= 0x00000200
		CREATE_UNICODE_ENVIRONMENT= 0x00000400
		CREATE_SEPARATE_WOW_VDM= 0x00000800
		CREATE_SHARED_WOW_VDM= 0x00001000
		CREATE_FORCEDOS= 0x00002000
		CREATE_NO_WINDOW= 0x08000000
		CREATE_BREAKAWAY_FROM_JOB=0x01000000
		CONSOLE_TEXTMODE_BUFFER= 1
		CREATE_NEW= 1
		CREATE_ALWAYS= 2
		OPEN_EXISTING= 3
		OPEN_ALWAYS= 4
		TRUNCATE_EXISTING= 5
		FILE_FLAG_WRITE_THROUGH= 0x80000000
		FILE_FLAG_OVERLAPPED= 1073741824
		FILE_FLAG_NO_BUFFERING= 536870912
		FILE_FLAG_RANDOM_ACCESS= 268435456
		FILE_FLAG_SEQUENTIAL_SCAN= 134217728
		FILE_FLAG_DELETE_ON_CLOSE= 67108864
		FILE_FLAG_BACKUP_SEMANTICS= 33554432
		FILE_FLAG_POSIX_SEMANTICS= 16777216
		FILE_FLAG_OPEN_REPARSE_POINT= 2097152
		FILE_FLAG_OPEN_NO_RECALL= 1048576
		CLRDTR= 6
		CLRRTS= 4
		SETDTR= 5
		SETRTS= 3
		SETXOFF= 1
		SETXON= 2
		SETBREAK= 8
		CLRBREAK= 9
		STILL_ACTIVE= 0x103
		FIND_FIRST_EX_CASE_SENSITIVE= 1
		SCS_32BIT_BINARY= 0
		SCS_DOS_BINARY= 1
		SCS_OS216_BINARY= 5
		SCS_PIF_BINARY= 3
		SCS_POSIX_BINARY= 4
		SCS_WOW_BINARY= 2
		MAX_COMPUTERNAME_LENGTH= 15
		HW_PROFILE_GUIDLEN= 39
		MAX_PROFILE_LEN= 80
		DOCKINFO_UNDOCKED= 1
		DOCKINFO_DOCKED= 2
		DOCKINFO_USER_SUPPLIED= 4
		DOCKINFO_USER_UNDOCKED= (4|1)
		DOCKINFO_USER_DOCKED= (4|2)
		DRIVE_REMOVABLE= 2
		DRIVE_FIXED= 3
		DRIVE_REMOTE= 4
		DRIVE_CDROM= 5
		DRIVE_RAMDISK= 6
		DRIVE_UNKNOWN= 0
		DRIVE_NO_ROOT_DIR= 1
		FILE_TYPE_UNKNOWN= 0
		FILE_TYPE_DISK= 1
		FILE_TYPE_CHAR= 2
		FILE_TYPE_PIPE= 3
		FILE_TYPE_REMOTE= 0x8000
		HANDLE_FLAG_INHERIT= 0x01
		HANDLE_FLAG_PROTECT_FROM_CLOSE= 0x02
		STD_INPUT_HANDLE=(0xfffffff6)
		STD_OUTPUT_HANDLE=(0xfffffff5)
		STD_ERROR_HANDLE=(0xfffffff4)
		GET_TAPE_MEDIA_INFORMATION= 0
		GET_TAPE_DRIVE_INFORMATION= 1
		SET_TAPE_MEDIA_INFORMATION= 0
		SET_TAPE_DRIVE_INFORMATION= 1
		THREAD_PRIORITY_ABOVE_NORMAL= 1
		THREAD_PRIORITY_BELOW_NORMAL= (-1)
		THREAD_PRIORITY_HIGHEST= 2
		THREAD_PRIORITY_IDLE= (-15)
		THREAD_PRIORITY_LOWEST= (-2)
		THREAD_PRIORITY_NORMAL= 0
		THREAD_PRIORITY_TIME_CRITICAL= 15
		THREAD_PRIORITY_ERROR_RETURN= 2147483647
		TIME_ZONE_ID_UNKNOWN= 0
		TIME_ZONE_ID_STANDARD= 1
		TIME_ZONE_ID_DAYLIGHT= 2
		TIME_ZONE_ID_INVALID= 0xFFFFFFFF
		FS_CASE_IS_PRESERVED= 2
		FS_CASE_SENSITIVE= 1
		FS_UNICODE_STORED_ON_DISK= 4
		FS_PERSISTENT_ACLS= 8
		FS_FILE_COMPRESSION= 16
		FS_VOL_IS_COMPRESSED= 32768
		GMEM_FIXED= 0
		GMEM_MOVEABLE= 2
		GMEM_MODIFY= 128
		GPTR= 64
		GHND= 66
		GMEM_DDESHARE= 8192
		GMEM_DISCARDABLE= 256
		GMEM_LOWER= 4096
		GMEM_NOCOMPACT= 16
		GMEM_NODISCARD= 32
		GMEM_NOT_BANKED= 4096
		GMEM_NOTIFY= 16384
		GMEM_SHARE= 8192
		GMEM_ZEROINIT= 64
		GMEM_DISCARDED= 16384
		GMEM_INVALID_HANDLE= 32768
		GMEM_LOCKCOUNT= 255
		STATUS_WAIT_0= 0
		STATUS_ABANDONED_WAIT_0= 0x80
		STATUS_USER_APC= 0xC0
		STATUS_TIMEOUT= 0x102
		STATUS_PENDING= 0x103
		STATUS_SEGMENT_NOTIFICATION= 0x40000005
		STATUS_GUARD_PAGE_VIOLATION= 0x80000001
		STATUS_DATATYPE_MISALIGNMENT= 0x80000002
		STATUS_BREAKPOINT= 0x80000003
		STATUS_SINGLE_STEP= 0x80000004
		STATUS_ACCESS_VIOLATION= 0xC0000005
		STATUS_IN_PAGE_ERROR= 0xC0000006
		STATUS_INVALID_HANDLE= 0xC0000008
		STATUS_NO_MEMORY= 0xC0000017
		STATUS_ILLEGAL_INSTRUCTION= 0xC000001D
		STATUS_NONCONTINUABLE_EXCEPTION= 0xC0000025
		STATUS_INVALID_DISPOSITION= 0xC0000026
		STATUS_ARRAY_BOUNDS_EXCEEDED= 0xC000008C
		STATUS_FLOAT_DENORMAL_OPERAND= 0xC000008D
		STATUS_FLOAT_DIVIDE_BY_ZERO= 0xC000008E
		STATUS_FLOAT_INEXACT_RESULT= 0xC000008F
		STATUS_FLOAT_INVALID_OPERATION= 0xC0000090
		STATUS_FLOAT_OVERFLOW= 0xC0000091
		STATUS_FLOAT_STACK_CHECK= 0xC0000092
		STATUS_FLOAT_UNDERFLOW= 0xC0000093
		STATUS_INTEGER_DIVIDE_BY_ZERO= 0xC0000094
		STATUS_INTEGER_OVERFLOW= 0xC0000095
		STATUS_PRIVILEGED_INSTRUCTION= 0xC0000096
		STATUS_STACK_OVERFLOW= 0xC00000FD
		STATUS_CONTROL_C_EXIT= 0xC000013A
		EXCEPTION_ACCESS_VIOLATION= 0xC0000005
		EXCEPTION_DATATYPE_MISALIGNMENT= 0x80000002
		EXCEPTION_BREAKPOINT= 0x80000003
		EXCEPTION_SINGLE_STEP= 0x80000004
		EXCEPTION_ARRAY_BOUNDS_EXCEEDED= 0xC000008C
		EXCEPTION_FLT_DENORMAL_OPERAND= 0xC000008D
		EXCEPTION_FLT_DIVIDE_BY_ZERO= 0xC000008E
		EXCEPTION_FLT_INEXACT_RESULT= 0xC000008F
		EXCEPTION_FLT_INVALID_OPERATION= 0xC0000090
		EXCEPTION_FLT_OVERFLOW= 0xC0000091
		EXCEPTION_FLT_STACK_CHECK= 0xC0000092
		EXCEPTION_FLT_UNDERFLOW= 0xC0000093
		EXCEPTION_INT_DIVIDE_BY_ZERO= 0xC0000094
		EXCEPTION_INT_OVERFLOW= 0xC0000095
		EXCEPTION_PRIV_INSTRUCTION= 0xC0000096
		EXCEPTION_IN_PAGE_ERROR= 0xC0000006
		EXCEPTION_ILLEGAL_INSTRUCTION= 0xC000001D
		EXCEPTION_NONCONTINUABLE_EXCEPTION= 0xC0000025
		EXCEPTION_STACK_OVERFLOW= 0xC00000FD
		EXCEPTION_INVALID_DISPOSITION= 0xC0000026
		EXCEPTION_GUARD_PAGE= 0x80000001
		EXCEPTION_INVALID_HANDLE= 0xC0000008
		CONTROL_C_EXIT= 0xC000013A
		PROCESS_HEAP_REGION= 1
		PROCESS_HEAP_UNCOMMITTED_RANGE= 2
		PROCESS_HEAP_ENTRY_BUSY= 4
		PROCESS_HEAP_ENTRY_MOVEABLE= 16
		PROCESS_HEAP_ENTRY_DDESHARE= 32
		DONT_RESOLVE_DLL_REFERENCES= 1
		LOAD_LIBRARY_AS_DATAFILE= 2
		LOAD_WITH_ALTERED_SEARCH_PATH= 8
		LMEM_FIXED= 0
		LMEM_MOVEABLE= 2
		LMEM_NONZEROLHND= 2
		LMEM_NONZEROLPTR= 0
		LMEM_DISCARDABLE= 3840
		LMEM_NOCOMPACT= 16
		LMEM_NODISCARD= 32
		LMEM_ZEROINIT= 64
		LMEM_DISCARDED= 16384
		LMEM_MODIFY= 128
		LMEM_INVALID_HANDLE= 32768
		LMEM_LOCKCOUNT= 255
		LPTR= 64
		LHND= 66
		NONZEROLHND= 2
		NONZEROLPTR= 0
		LOCKFILE_FAIL_IMMEDIATELY= 1
		LOCKFILE_EXCLUSIVE_LOCK= 2
		LOGON32_PROVIDER_DEFAULT= 0
		LOGON32_PROVIDER_WINNT35= 1
		LOGON32_LOGON_INTERACTIVE= 2
		LOGON32_LOGON_BATCH= 4
		LOGON32_LOGON_SERVICE= 5
		MOVEFILE_REPLACE_EXISTING= 1
		MOVEFILE_COPY_ALLOWED= 2
		MOVEFILE_DELAY_UNTIL_REBOOT= 4
		MOVEFILE_WRITE_THROUGH= 8
		MAXIMUM_WAIT_OBJECTS= 64
		MAXIMUM_SUSPEND_COUNT= 0x7F
		WAIT_OBJECT_0= 0
		WAIT_ABANDONED_0= 128
		WAIT_TIMEOUT= 258
		WAIT_IO_COMPLETION= 0xC0
		WAIT_ABANDONED= 128
		PURGE_TXABORT= 1
		PURGE_RXABORT= 2
		PURGE_TXCLEAR= 4
		PURGE_RXCLEAR= 8
		EVENTLOG_FORWARDS_READ= 4
		EVENTLOG_BACKWARDS_READ= 8
		EVENTLOG_SEEK_READ= 2
		EVENTLOG_SEQUENTIAL_READ= 1
		EVENTLOG_ERROR_TYPE= 1
		EVENTLOG_WARNING_TYPE= 2
		EVENTLOG_INFORMATION_TYPE= 4
		EVENTLOG_AUDIT_SUCCESS= 8
		EVENTLOG_AUDIT_FAILURE= 16
		FORMAT_MESSAGE_ALLOCATE_BUFFER= 256
		FORMAT_MESSAGE_IGNORE_INSERTS= 512
		FORMAT_MESSAGE_FROM_STRING= 1024
		FORMAT_MESSAGE_FROM_HMODULE= 2048
		FORMAT_MESSAGE_FROM_SYSTEM= 4096
		FORMAT_MESSAGE_ARGUMENT_ARRAY= 8192
		FORMAT_MESSAGE_MAX_WIDTH_MASK= 255
		EV_BREAK= 64
		EV_CTS= 8
		EV_DSR= 16
		EV_ERR= 128
		EV_EVENT1= 2048
		EV_EVENT2= 4096
		EV_PERR= 512
		EV_RING= 256
		EV_RLSD= 32
		EV_RX80FULL= 1024
		EV_RXCHAR= 1
		EV_RXFLAG= 2
		EV_TXEMPTY= 4
		SEM_FAILCRITICALERRORS= 0x0001
		SEM_NOALIGNMENTFAULTEXCEPT= 0x0004
		SEM_NOGPFAULTERRORBOX= 0x0002
		SEM_NOOPENFILEERRORBOX= 0x8000
		SLE_ERROR= 1
		SLE_MINORERROR= 2
		SLE_WARNING= 3
		SHUTDOWN_NORETRY= 1
		EXCEPTION_EXECUTE_HANDLER= 1
		EXCEPTION_CONTINUE_EXECUTION= (-1)
		EXCEPTION_CONTINUE_SEARCH= 0
		MAXINTATOM= 0xC000
		IGNORE= 0
		INFINITE= 0xFFFFFFFF
		NOPARITY= 0
		ODDPARITY= 1
		EVENPARITY= 2
		MARKPARITY= 3
		SPACEPARITY= 4
		ONESTOPBIT= 0
		ONE5STOPBITS= 1
		TWOSTOPBITS= 2
		CBR_110= 110
		CBR_300= 300
		CBR_600= 600
		CBR_1200= 1200
		CBR_2400= 2400
		CBR_4800= 4800
		CBR_9600= 9600
		CBR_14400= 14400
		CBR_19200= 19200
		CBR_38400= 38400
		CBR_56000= 56000
		CBR_57600= 57600
		CBR_115200= 115200
		CBR_128000= 128000
		CBR_256000= 256000
		BACKUP_INVALID= 0
		BACKUP_DATA= 1
		BACKUP_EA_DATA= 2
		BACKUP_SECURITY_DATA= 3
		BACKUP_ALTERNATE_DATA= 4
		BACKUP_LINK= 5
		BACKUP_PROPERTY_DATA= 6
		BACKUP_OBJECT_ID= 7
		BACKUP_REPARSE_DATA= 8
		BACKUP_SPARSE_BLOCK= 9
		STREAM_NORMAL_ATTRIBUTE= 0
		STREAM_MODIFIED_WHEN_READ= 1
		STREAM_CONTAINS_SECURITY= 2
		STREAM_CONTAINS_PROPERTIES= 4
		STARTF_USESHOWWINDOW= 1
		STARTF_USESIZE= 2
		STARTF_USEPOSITION= 4
		STARTF_USECOUNTCHARS= 8
		STARTF_USEFILLATTRIBUTE= 16
		STARTF_RUNFULLSCREEN= 32
		STARTF_FORCEONFEEDBACK= 64
		STARTF_FORCEOFFFEEDBACK= 128
		STARTF_USESTDHANDLES= 256
		STARTF_USEHOTKEY= 512
		TC_NORMAL= 0
		TC_HARDERR= 1
		TC_GP_TRAP= 2
		TC_SIGNAL= 3
		AC_LINE_OFFLINE= 0
		AC_LINE_ONLINE= 1
		AC_LINE_BACKUP_POWER= 2
		AC_LINE_UNKNOWN= 255
		BATTERY_FLAG_HIGH= 1
		BATTERY_FLAG_LOW= 2
		BATTERY_FLAG_CRITICAL= 4
		BATTERY_FLAG_CHARGING= 8
		BATTERY_FLAG_NO_BATTERY= 128
		BATTERY_FLAG_UNKNOWN= 255
		BATTERY_PERCENTAGE_UNKNOWN= 255
		BATTERY_LIFE_UNKNOWN= 0xFFFFFFFF
		DDD_RAW_TARGET_PATH= 1
		DDD_REMOVE_DEFINITION= 2
		DDD_EXACT_MATCH_ON_REMOVE= 4
		HINSTANCE_ERROR= 32
		MS_CTS_ON= 16
		MS_DSR_ON= 32
		MS_RING_ON= 64
		MS_RLSD_ON= 128
		PROFILE_USER= 0x10000000
		PROFILE_KERNEL= 0x20000000
		PROFILE_SERVER= 0x40000000
		DTR_CONTROL_DISABLE= 0
		DTR_CONTROL_ENABLE= 1
		DTR_CONTROL_HANDSHAKE= 2
		RTS_CONTROL_DISABLE= 0
		RTS_CONTROL_ENABLE= 1
		RTS_CONTROL_HANDSHAKE= 2
		RTS_CONTROL_TOGGLE= 3
		SECURITY_CONTEXT_TRACKING= 0x40000
		SECURITY_EFFECTIVE_ONLY= 0x80000
		SECURITY_SQOS_PRESENT= 0x100000
		SECURITY_VALID_SQOS_FLAGS= 0x1F0000
		INVALID_FILE_SIZE= 0xFFFFFFFF
		BI_RGB= 0
		BI_RLE8= 1
		BI_RLE4= 2
		BI_BITFIELDS= 3
		BI_JPEG= 4
		BI_PNG= 5
		LF_FACESIZE= 32
		LF_FULLFACESIZE= 64
		CA_NEGATIVE= 1
		CA_LOG_FILTER= 2
		ILLUMINANT_DEVICE_DEFAULT= 0
		ILLUMINANT_A= 1
		ILLUMINANT_B= 2
		ILLUMINANT_C= 3
		ILLUMINANT_D50= 4
		ILLUMINANT_D55= 5
		ILLUMINANT_D65= 6
		ILLUMINANT_D75= 7
		ILLUMINANT_F2= 8
		ILLUMINANT_MAX_INDEX= 8
		ILLUMINANT_TUNGSTEN= 1
		ILLUMINANT_DAYLIGHT= 3
		ILLUMINANT_FLUORESCENT= 8
		ILLUMINANT_NTSC= 3
		RGB_GAMMA_MIN= 2500
		RGB_GAMMA_MAX= 65000
		REFERENCE_WHITE_MIN= 6000
		REFERENCE_WHITE_MAX= 10000
		REFERENCE_BLACK_MIN= 0
		REFERENCE_BLACK_MAX= 4000
		COLOR_ADJ_MIN= (-100)
		COLOR_ADJ_MAX= 100
		CCHDEVICENAME= 32
		CCHFORMNAME= 32
		DI_COMPAT= 4
		DI_DEFAULTSIZE= 8
		DI_IMAGE= 2
		DI_MASK= 1
		DI_NORMAL= 3
		DI_APPBANDING= 1
		EMR_HEADER= 1
		EMR_POLYBEZIER= 2
		EMR_POLYGON= 3
		EMR_POLYLINE= 4
		EMR_POLYBEZIERTO= 5
		EMR_POLYLINETO= 6
		EMR_POLYPOLYLINE= 7
		EMR_POLYPOLYGON= 8
		EMR_SETWINDOWEXTEX= 9
		EMR_SETWINDOWORGEX= 10
		EMR_SETVIEWPORTEXTEX= 11
		EMR_SETVIEWPORTORGEX= 12
		EMR_SETBRUSHORGEX= 13
		EMR_EOF= 14
		EMR_SETPIXELV= 15
		EMR_SETMAPPERFLAGS= 16
		EMR_SETMAPMODE= 17
		EMR_SETBKMODE= 18
		EMR_SETPOLYFILLMODE= 19
		EMR_SETROP2= 20
		EMR_SETSTRETCHBLTMODE= 21
		EMR_SETTEXTALIGN= 22
		EMR_SETCOLORADJUSTMENT= 23
		EMR_SETTEXTCOLOR= 24
		EMR_SETBKCOLOR= 25
		EMR_OFFSETCLIPRGN= 26
		EMR_MOVETOEX= 27
		EMR_SETMETARGN= 28
		EMR_EXCLUDECLIPRECT= 29
		EMR_INTERSECTCLIPRECT= 30
		EMR_SCALEVIEWPORTEXTEX= 31
		EMR_SCALEWINDOWEXTEX= 32
		EMR_SAVEDC= 33
		EMR_RESTOREDC= 34
		EMR_SETWORLDTRANSFORM= 35
		EMR_MODIFYWORLDTRANSFORM= 36
		EMR_SELECTOBJECT= 37
		EMR_CREATEPEN= 38
		EMR_CREATEBRUSHINDIRECT= 39
		EMR_DELETEOBJECT= 40
		EMR_ANGLEARC= 41
		EMR_ELLIPSE= 42
		EMR_RECTANGLE= 43
		EMR_ROUNDRECT= 44
		EMR_ARC= 45
		EMR_CHORD= 46
		EMR_PIE= 47
		EMR_SELECTPALETTE= 48
		EMR_CREATEPALETTE= 49
		EMR_SETPALETTEENTRIES= 50
		EMR_RESIZEPALETTE= 51
		EMR_REALIZEPALETTE= 52
		EMR_EXTFLOODFILL= 53
		EMR_LINETO= 54
		EMR_ARCTO= 55
		EMR_POLYDRAW= 56
		EMR_SETARCDIRECTION= 57
		EMR_SETMITERLIMIT= 58
		EMR_BEGINPATH= 59
		EMR_ENDPATH= 60
		EMR_CLOSEFIGURE= 61
		EMR_FILLPATH= 62
		EMR_STROKEANDFILLPATH= 63
		EMR_STROKEPATH= 64
		EMR_FLATTENPATH= 65
		EMR_WIDENPATH= 66
		EMR_SELECTCLIPPATH= 67
		EMR_ABORTPATH= 68
		EMR_GDICOMMENT= 70
		EMR_FILLRGN= 71
		EMR_FRAMERGN= 72
		EMR_INVERTRGN= 73
		EMR_PAINTRGN= 74
		EMR_EXTSELECTCLIPRGN= 75
		EMR_BITBLT= 76
		EMR_STRETCHBLT= 77
		EMR_MASKBLT= 78
		EMR_PLGBLT= 79
		EMR_SETDIBITSTODEVICE= 80
		EMR_STRETCHDIBITS= 81
		EMR_EXTCREATEFONTINDIRECTW= 82
		EMR_EXTTEXTOUTA= 83
		EMR_EXTTEXTOUTW= 84
		EMR_POLYBEZIER16= 85
		EMR_POLYGON16= 86
		EMR_POLYLINE16= 87
		EMR_POLYBEZIERTO16= 88
		EMR_POLYLINETO16= 89
		EMR_POLYPOLYLINE16= 90
		EMR_POLYPOLYGON16= 91
		EMR_POLYDRAW16= 92
		EMR_CREATEMONOBRUSH= 93
		EMR_CREATEDIBPATTERNBRUSHPT= 94
		EMR_EXTCREATEPEN= 95
		EMR_POLYTEXTOUTA= 96
		EMR_POLYTEXTOUTW= 97
		EMR_SETICMMODE= 98
		EMR_CREATECOLORSPACE= 99
		EMR_SETCOLORSPACE= 100
		EMR_DELETECOLORSPACE= 101
		EMR_GLSRECORD= 102
		EMR_GLSBOUNDEDRECORD= 103
		EMR_PIXELFORMAT= 104
		ENHMETA_SIGNATURE= 1179469088
		EPS_SIGNATURE= 0x46535045
		META_SETBKCOLOR= 0x201
		META_SETBKMODE= 0x102
		META_SETMAPMODE= 0x103
		META_SETROP2= 0x104
		META_SETRELABS= 0x105
		META_SETPOLYFILLMODE= 0x106
		META_SETSTRETCHBLTMODE= 0x107
		META_SETTEXTCHAREXTRA= 0x108
		META_SETTEXTCOLOR= 0x209
		META_SETTEXTJUSTIFICATION= 0x20A
		META_SETWINDOWORG= 0x20B
		META_SETWINDOWEXT= 0x20C
		META_SETVIEWPORTORG= 0x20D
		META_SETVIEWPORTEXT= 0x20E
		META_OFFSETWINDOWORG= 0x20F
		META_SCALEWINDOWEXT= 0x410
		META_OFFSETVIEWPORTORG= 0x211
		META_SCALEVIEWPORTEXT= 0x412
		META_LINETO= 0x213
		META_MOVETO= 0x214
		META_EXCLUDECLIPRECT= 0x415
		META_INTERSECTCLIPRECT= 0x416
		META_ARC= 0x817
		META_ELLIPSE= 0x418
		META_FLOODFILL= 0x419
		META_PIE= 0x81A
		META_RECTANGLE= 0x41B
		META_ROUNDRECT= 0x61C
		META_PATBLT= 0x61D
		META_SAVEDC= 0x1E
		META_SETPIXEL= 0x41F
		META_OFFSETCLIPRGN= 0x220
		META_TEXTOUT= 0x521
		META_BITBLT= 0x922
		META_STRETCHBLT= 0xB23
		META_POLYGON= 0x324
		META_POLYLINE= 0x325
		META_ESCAPE= 0x626
		META_RESTOREDC= 0x127
		META_FILLREGION= 0x228
		META_FRAMEREGION= 0x429
		META_INVERTREGION= 0x12A
		META_PAINTREGION= 0x12B
		META_SELECTCLIPREGION= 0x12C
		META_SELECTOBJECT= 0x12D
		META_SETTEXTALIGN= 0x12E
		META_CHORD= 0x830
		META_SETMAPPERFLAGS= 0x231
		META_EXTTEXTOUT= 0xa32
		META_SETDIBTODEV= 0xd33
		META_SELECTPALETTE= 0x234
		META_REALIZEPALETTE= 0x35
		META_ANIMATEPALETTE= 0x436
		META_SETPALENTRIES= 0x37
		META_POLYPOLYGON= 0x538
		META_RESIZEPALETTE= 0x139
		META_DIBBITBLT= 0x940
		META_DIBSTRETCHBLT= 0xb41
		META_DIBCREATEPATTERNBRUSH= 0x142
		META_STRETCHDIB= 0xf43
		META_EXTFLOODFILL= 0x548
		META_DELETEOBJECT= 0x1f0
		META_CREATEPALETTE= 0xf7
		META_CREATEPATTERNBRUSH= 0x1F9
		META_CREATEPENINDIRECT= 0x2FA
		META_CREATEFONTINDIRECT= 0x2FB
		META_CREATEBRUSHINDIRECT= 0x2FC
		META_CREATEREGION= 0x6FF
		PT_MOVETO= 6
		PT_LINETO= 2
		PT_BEZIERTO= 4
		PT_CLOSEFIGURE= 1
		ELF_VENDOR_SIZE= 4
		ELF_VERSION= 0
		ELF_CULTURE_LATIN= 0
		PFD_TYPE_RGBA= 0
		PFD_TYPE_COLORINDEX= 1
		PFD_MAIN_PLANE= 0
		PFD_OVERLAY_PLANE= 1
		PFD_UNDERLAY_PLANE= (-1)
		PFD_DOUBLEBUFFER= 1
		PFD_STEREO= 2
		PFD_DRAW_TO_WINDOW= 4
		PFD_DRAW_TO_BITMAP= 8
		PFD_SUPPORT_GDI= 16
		PFD_SUPPORT_OPENGL= 32
		PFD_GENERIC_FORMAT= 64
		PFD_NEED_PALETTE= 128
		PFD_NEED_SYSTEM_PALETTE= 0x00000100
		PFD_SWAP_EXCHANGE= 0x00000200
		PFD_SWAP_COPY= 0x00000400
		PFD_GENERIC_ACCELERATED= 0x00001000
		PFD_DEPTH_DONTCARE= 0x20000000
		PFD_DOUBLEBUFFER_DONTCARE= 0x40000000
		PFD_STEREO_DONTCARE= 0x80000000
		SP_ERROR= (-1)
		SP_OUTOFDISK= (-4)
		SP_OUTOFMEMORY= (-5)
		SP_USERABORT= (-3)
		SP_APPABORT= (-2)
		BLACKNESS= 0x42
		NOTSRCERASE= 0x1100A6
		NOTSRCCOPY= 0x330008
		SRCERASE= 0x440328
		DSTINVERT= 0x550009
		PATINVERT= 0x5A0049
		SRCINVERT= 0x660046
		SRCAND= 0x8800C6
		MERGEPAINT= 0xBB0226
		MERGECOPY= 0xC000CA
		SRCCOPY= 0xCC0020
		SRCPAINT= 0xEE0086
		PATCOPY= 0xF00021
		PATPAINT= 0xFB0A09
		WHITENESS= 0xFF0062
		R2_BLACK= 1
		R2_COPYPEN= 13
		R2_MASKNOTPEN= 3
		R2_MASKPEN= 9
		R2_MASKPENNOT= 5
		R2_MERGENOTPEN= 12
		R2_MERGEPEN= 15
		R2_MERGEPENNOT= 14
		R2_NOP= 11
		R2_NOT= 6
		R2_NOTCOPYPEN= 4
		R2_NOTMASKPEN= 8
		R2_NOTMERGEPEN= 2
		R2_NOTXORPEN= 10
		R2_WHITE= 16
		R2_XORPEN= 7
		CM_OUT_OF_GAMUT= 255
		CM_IN_GAMUT= 0
		RGN_AND= 1
		RGN_COPY= 5
		RGN_DIFF= 4
		RGN_OR= 2
		RGN_XOR= 3
		NULLREGION= 1
		SIMPLEREGION= 2
		COMPLEXREGION= 3
		ERROR= 0
		CBM_INIT= 4
		DIB_PAL_COLORS= 1
		DIB_RGB_COLORS= 0
		FW_DONTCARE= 0
		FW_THIN= 100
		FW_EXTRALIGHT= 200
		FW_ULTRALIGHT= 200
		FW_LIGHT= 300
		FW_NORMAL= 400
		FW_REGULAR= 400
		FW_MEDIUM= 500
		FW_SEMIBOLD= 600
		FW_DEMIBOLD= 600
		FW_BOLD= 700
		FW_EXTRABOLD= 800
		FW_ULTRABOLD= 800
		FW_HEAVY= 900
		FW_BLACK= 900
		ANSI_CHARSET= 0
		DEFAULT_CHARSET= 1
		SYMBOL_CHARSET= 2
		SHIFTJIS_CHARSET= 128
		HANGEUL_CHARSET= 129
		HANGUL_CHARSET= 129
		GB2312_CHARSET= 134
		CHINESEBIG5_CHARSET= 136
		GREEK_CHARSET= 161
		TURKISH_CHARSET= 162
		HEBREW_CHARSET= 177
		ARABIC_CHARSET= 178
		BALTIC_CHARSET= 186
		RUSSIAN_CHARSET= 204
		THAI_CHARSET= 222
		EASTEUROPE_CHARSET= 238
		OEM_CHARSET= 255
		JOHAB_CHARSET= 130
		VIETNAMESE_CHARSET= 163
		MAC_CHARSET= 77
		OUT_DEFAULT_PRECIS= 0
		OUT_STRING_PRECIS= 1
		OUT_CHARACTER_PRECIS= 2
		OUT_STROKE_PRECIS= 3
		OUT_TT_PRECIS= 4
		OUT_DEVICE_PRECIS= 5
		OUT_RASTER_PRECIS= 6
		OUT_TT_ONLY_PRECIS= 7
		OUT_OUTLINE_PRECIS= 8
		CLIP_DEFAULT_PRECIS= 0
		CLIP_CHARACTER_PRECIS= 1
		CLIP_STROKE_PRECIS= 2
		CLIP_MASK= 15
		CLIP_LH_ANGLES= 16
		CLIP_TT_ALWAYS= 32
		CLIP_EMBEDDED= 128
		DEFAULT_QUALITY= 0
		DRAFT_QUALITY= 1
		PROOF_QUALITY= 2
		NONANTIALIASED_QUALITY= 3
		ANTIALIASED_QUALITY= 4
		DEFAULT_PITCH= 0
		FIXED_PITCH= 1
		VARIABLE_PITCH= 2
		MONO_FONT= 8
		FF_DECORATIVE= 80
		FF_DONTCARE= 0
		FF_MODERN= 48
		FF_ROMAN= 16
		FF_SCRIPT= 64
		FF_SWISS= 32
		PANOSE_COUNT= 10
		PAN_FAMILYTYPE_INDEX= 0
		PAN_SERIFSTYLE_INDEX= 1
		PAN_WEIGHT_INDEX= 2
		PAN_PROPORTION_INDEX= 3
		PAN_CONTRAST_INDEX= 4
		PAN_STROKEVARIATION_INDEX= 5
		PAN_ARMSTYLE_INDEX= 6
		PAN_LETTERFORM_INDEX= 7
		PAN_MIDLINE_INDEX= 8
		PAN_XHEIGHT_INDEX= 9
		PAN_CULTURE_LATIN= 0
		PAN_ANY= 0
		PAN_NO_FIT= 1
		PAN_FAMILY_TEXT_DISPLAY= 2
		PAN_FAMILY_SCRIPT= 3
		PAN_FAMILY_DECORATIVE= 4
		PAN_FAMILY_PICTORIAL= 5
		PAN_SERIF_COVE= 2
		PAN_SERIF_OBTUSE_COVE= 3
		PAN_SERIF_SQUARE_COVE= 4
		PAN_SERIF_OBTUSE_SQUARE_COVE= 5
		PAN_SERIF_SQUARE= 6
		PAN_SERIF_THIN= 7
		PAN_SERIF_BONE= 8
		PAN_SERIF_EXAGGERATED= 9
		PAN_SERIF_TRIANGLE= 10
		PAN_SERIF_NORMAL_SANS= 11
		PAN_SERIF_OBTUSE_SANS= 12
		PAN_SERIF_PERP_SANS= 13
		PAN_SERIF_FLARED= 14
		PAN_SERIF_ROUNDED= 15
		PAN_WEIGHT_VERY_LIGHT= 2
		PAN_WEIGHT_LIGHT= 3
		PAN_WEIGHT_THIN= 4
		PAN_WEIGHT_BOOK= 5
		PAN_WEIGHT_MEDIUM= 6
		PAN_WEIGHT_DEMI= 7
		PAN_WEIGHT_BOLD= 8
		PAN_WEIGHT_HEAVY= 9
		PAN_WEIGHT_BLACK= 10
		PAN_WEIGHT_NORD= 11
		PAN_PROP_OLD_STYLE= 2
		PAN_PROP_MODERN= 3
		PAN_PROP_EVEN_WIDTH= 4
		PAN_PROP_EXPANDED= 5
		PAN_PROP_CONDENSED= 6
		PAN_PROP_VERY_EXPANDED= 7
		PAN_PROP_VERY_CONDENSED= 8
		PAN_PROP_MONOSPACED= 9
		PAN_CONTRAST_NONE= 2
		PAN_CONTRAST_VERY_LOW= 3
		PAN_CONTRAST_LOW= 4
		PAN_CONTRAST_MEDIUM_LOW= 5
		PAN_CONTRAST_MEDIUM= 6
		PAN_CONTRAST_MEDIUM_HIGH= 7
		PAN_CONTRAST_HIGH= 8
		PAN_CONTRAST_VERY_HIGH= 9
		PAN_STROKE_GRADUAL_DIAG= 2
		PAN_STROKE_GRADUAL_TRAN= 3
		PAN_STROKE_GRADUAL_VERT= 4
		PAN_STROKE_GRADUAL_HORZ= 5
		PAN_STROKE_RAPID_VERT= 6
		PAN_STROKE_RAPID_HORZ= 7
		PAN_STROKE_INSTANT_VERT= 8
		PAN_STRAIGHT_ARMS_HORZ= 2
		PAN_STRAIGHT_ARMS_WEDGE= 3
		PAN_STRAIGHT_ARMS_VERT= 4
		PAN_STRAIGHT_ARMS_SINGLE_SERIF= 5
		PAN_STRAIGHT_ARMS_DOUBLE_SERIF= 6
		PAN_BENT_ARMS_HORZ= 7
		PAN_BENT_ARMS_WEDGE= 8
		PAN_BENT_ARMS_VERT= 9
		PAN_BENT_ARMS_SINGLE_SERIF= 10
		PAN_BENT_ARMS_DOUBLE_SERIF= 11
		PAN_LETT_NORMAL_CONTACT= 2
		PAN_LETT_NORMAL_WEIGHTED= 3
		PAN_LETT_NORMAL_BOXED= 4
		PAN_LETT_NORMAL_FLATTENED= 5
		PAN_LETT_NORMAL_ROUNDED= 6
		PAN_LETT_NORMAL_OFF_CENTER= 7
		PAN_LETT_NORMAL_SQUARE= 8
		PAN_LETT_OBLIQUE_CONTACT= 9
		PAN_LETT_OBLIQUE_WEIGHTED= 10
		PAN_LETT_OBLIQUE_BOXED= 11
		PAN_LETT_OBLIQUE_FLATTENED= 12
		PAN_LETT_OBLIQUE_ROUNDED= 13
		PAN_LETT_OBLIQUE_OFF_CENTER= 14
		PAN_LETT_OBLIQUE_SQUARE= 15
		PAN_MIDLINE_STANDARD_TRIMMED= 2
		PAN_MIDLINE_STANDARD_POINTED= 3
		PAN_MIDLINE_STANDARD_SERIFED= 4
		PAN_MIDLINE_HIGH_TRIMMED= 5
		PAN_MIDLINE_HIGH_POINTED= 6
		PAN_MIDLINE_HIGH_SERIFED= 7
		PAN_MIDLINE_CONSTANT_TRIMMED= 8
		PAN_MIDLINE_CONSTANT_POINTED= 9
		PAN_MIDLINE_CONSTANT_SERIFED= 10
		PAN_MIDLINE_LOW_TRIMMED= 11
		PAN_MIDLINE_LOW_POINTED= 12
		PAN_MIDLINE_LOW_SERIFED= 13
		PAN_XHEIGHT_CONSTANT_SMALL= 2
		PAN_XHEIGHT_CONSTANT_STD= 3
		PAN_XHEIGHT_CONSTANT_LARGE= 4
		PAN_XHEIGHT_DUCKING_SMALL= 5
		PAN_XHEIGHT_DUCKING_STD= 6
		PAN_XHEIGHT_DUCKING_LARGE= 7
		FS_LATIN1= 1
		FS_LATIN2= 2
		FS_CYRILLIC= 4
		FS_GREEK= 8
		FS_TURKISH= 16
		FS_HEBREW= 32
		FS_ARABIC= 64
		FS_BALTIC= 128
		FS_THAI= 0x10000
		FS_JISJAPAN= 0x20000
		FS_CHINESESIMP= 0x40000
		FS_WANSUNG= 0x80000
		FS_CHINESETRAD= 0x100000
		FS_JOHAB= 0x200000
		FS_SYMBOL= 0x80000000
		HS_BDIAGONAL= 3
		HS_CROSS= 4
		HS_DIAGCROSS= 5
		HS_FDIAGONAL= 2
		HS_HORIZONTAL= 0
		HS_VERTICAL= 1
		PS_GEOMETRIC= 65536
		PS_COSMETIC= 0
		PS_ALTERNATE= 8
		PS_SOLID= 0
		PS_DASH= 1
		PS_DOT= 2
		PS_DASHDOT= 3
		PS_DASHDOTDOT= 4
		PS_NULL= 5
		PS_USERSTYLE= 7
		PS_INSIDEFRAME= 6
		PS_ENDCAP_ROUND= 0
		PS_ENDCAP_SQUARE= 256
		PS_ENDCAP_FLAT= 512
		PS_JOIN_BEVEL= 4096
		PS_JOIN_MITER= 8192
		PS_JOIN_ROUND= 0
		PS_STYLE_MASK= 15
		PS_ENDCAP_MASK= 3840
		PS_TYPE_MASK= 983040
		ALTERNATE= 1
		WINDING= 2
		DC_BINNAMES= 12
		DC_BINS= 6
		DC_COPIES= 18
		DC_DRIVER= 11
		DC_DATATYPE_PRODUCED= 21
		DC_DUPLEX= 7
		DC_EMF_COMPLIANT= 20
		DC_ENUMRESOLUTIONS= 13
		DC_EXTRA= 9
		DC_FIELDS= 1
		DC_FILEDEPENDENCIES= 14
		DC_MAXEXTENT= 5
		DC_MINEXTENT= 4
		DC_ORIENTATION= 17
		DC_PAPERNAMES= 16
		DC_PAPERS= 2
		DC_PAPERSIZE= 3
		DC_SIZE= 8
		DC_TRUETYPE= 15
		DCTT_BITMAP= 1
		DCTT_DOWNLOAD= 2
		DCTT_SUBDEV= 4
		DCTT_DOWNLOAD_OUTLINE= 8
		DC_VERSION= 10
		DC_BINADJUST= 19
		DC_MANUFACTURER= 23
		DC_MODEL= 24
		DCBA_FACEUPNONE= 0
		DCBA_FACEUPCENTER= 1
		DCBA_FACEUPLEFT= 2
		DCBA_FACEUPRIGHT= 3
		DCBA_FACEDOWNNONE= 256
		DCBA_FACEDOWNCENTER= 257
		DCBA_FACEDOWNLEFT= 258
		DCBA_FACEDOWNRIGHT= 259
		FLOODFILLBORDER= 0
		FLOODFILLSURFACE= 1
		ETO_CLIPPED= 4
		ETO_GLYPH_INDEX= 16
		ETO_OPAQUE= 2
		ETO_RTLREADING= 128
		GDICOMMENT_WINDOWS_METAFILE= (-2147483647)
		GDICOMMENT_BEGINGROUP= 2
		GDICOMMENT_ENDGROUP= 3
		GDICOMMENT_MULTIFORMATS= 1073741828
		GDICOMMENT_IDENTIFIER= 1128875079
		AD_COUNTERCLOCKWISE= 1
		AD_CLOCKWISE= 2
		RDH_RECTANGLES= 1
		GCPCLASS_LATIN= 1
		GCPCLASS_HEBREW= 2
		GCPCLASS_ARABIC= 2
		GCPCLASS_NEUTRAL= 3
		GCPCLASS_LOCALNUMBER= 4
		GCPCLASS_LATINNUMBER= 5
		GCPCLASS_LATINNUMERICTERMINATOR= 6
		GCPCLASS_LATINNUMERICSEPARATOR= 7
		GCPCLASS_NUMERICSEPARATOR= 8
		GCPCLASS_PREBOUNDLTR= 128
		GCPCLASS_PREBOUNDRTL= 64
		GCPCLASS_POSTBOUNDLTR= 32
		GCPCLASS_POSTBOUNDRTL= 16
		GCPGLYPH_LINKBEFORE= 0x8000
		GCPGLYPH_LINKAFTER= 0x4000
		DCB_DISABLE= 8
		DCB_ENABLE= 4
		DCB_RESET= 1
		DCB_SET= 3
		DCB_ACCUMULATE= 2
		DCB_DIRTY= 2
		OBJ_BRUSH= 2
		OBJ_PEN= 1
		OBJ_PAL= 5
		OBJ_FONT= 6
		OBJ_BITMAP= 7
		OBJ_EXTPEN= 11
		OBJ_REGION= 8
		OBJ_DC= 3
		OBJ_MEMDC= 10
		OBJ_METAFILE= 9
		OBJ_METADC= 4
		OBJ_ENHMETAFILE= 13
		OBJ_ENHMETADC= 12
		DRIVERVERSION= 0
		TECHNOLOGY= 2
		DT_PLOTTER= 0
		DT_RASDISPLAY= 1
		DT_RASPRINTER= 2
		DT_RASCAMERA= 3
		DT_CHARSTREAM= 4
		DT_METAFILE= 5
		DT_DISPFILE= 6
		HORZSIZE= 4
		VERTSIZE= 6
		HORZRES= 8
		VERTRES= 10
		LOGPIXELSX= 88
		LOGPIXELSY= 90
		BITSPIXEL= 12
		PLANES= 14
		NUMBRUSHES= 16
		NUMPENS= 18
		NUMFONTS= 22
		NUMCOLORS= 24
		NUMMARKERS= 20
		ASPECTX= 40
		ASPECTY= 42
		ASPECTXY= 44
		PDEVICESIZE= 26
		CLIPCAPS= 36
		SIZEPALETTE= 104
		NUMRESERVED= 106
		COLORRES= 108
		PHYSICALWIDTH= 110
		PHYSICALHEIGHT= 111
		PHYSICALOFFSETX= 112
		PHYSICALOFFSETY= 113
		SCALINGFACTORX= 114
		SCALINGFACTORY= 115
		VREFRESH= 116
		DESKTOPHORZRES= 118
		DESKTOPVERTRES= 117
		BLTALIGNMENT= 119
		RASTERCAPS= 38
		RC_BANDING= 2
		RC_BITBLT= 1
		RC_BITMAP64= 8
		RC_DI_BITMAP= 128
		RC_DIBTODEV= 512
		RC_FLOODFILL= 4096
		RC_GDI20_OUTPUT= 16
		RC_PALETTE= 256
		RC_SCALING= 4
		RC_STRETCHBLT= 2048
		RC_STRETCHDIB= 8192
		RC_DEVBITS= 0x8000
		RC_OP_DX_OUTPUT= 0x4000
		CURVECAPS= 28
		CC_NONE= 0
		CC_CIRCLES= 1
		CC_PIE= 2
		CC_CHORD= 4
		CC_ELLIPSES= 8
		CC_WIDE= 16
		CC_STYLED= 32
		CC_WIDESTYLED= 64
		CC_INTERIORS= 128
		CC_ROUNDRECT= 256
		LINECAPS= 30
		LC_NONE= 0
		LC_POLYLINE= 2
		LC_MARKER= 4
		LC_POLYMARKER= 8
		LC_WIDE= 16
		LC_STYLED= 32
		LC_WIDESTYLED= 64
		LC_INTERIORS= 128
		POLYGONALCAPS= 32
		RC_BIGFONT= 1024
		RC_GDI20_STATE= 32
		RC_NONE= 0
		RC_SAVEBITMAP= 64
		PC_NONE= 0
		PC_POLYGON= 1
		PC_POLYPOLYGON= 256
		PC_PATHS= 512
		PC_RECTANGLE= 2
		PC_WINDPOLYGON= 4
		PC_SCANLINE= 8
		PC_TRAPEZOID= 4
		PC_WIDE= 16
		PC_STYLED= 32
		PC_WIDESTYLED= 64
		PC_INTERIORS= 128
		TEXTCAPS= 34
		TC_OP_CHARACTER= 1
		TC_OP_STROKE= 2
		TC_CP_STROKE= 4
		TC_CR_90= 8
		TC_CR_ANY= 16
		TC_SF_X_YINDEP= 32
		TC_SA_DOUBLE= 64
		TC_SA_INTEGER= 128
		TC_SA_CONTIN= 256
		TC_EA_DOUBLE= 512
		TC_IA_ABLE= 1024
		TC_UA_ABLE= 2048
		TC_SO_ABLE= 4096
		TC_RA_ABLE= 8192
		TC_VA_ABLE= 16384
		TC_RESERVED= 32768
		TC_SCROLLBLT= 65536
		GCP_DBCS= 1
		GCP_ERROR= 0x8000
		GCP_CLASSIN= 0x80000
		GCP_DIACRITIC= 256
		GCP_DISPLAYZWG= 0x400000
		GCP_GLYPHSHAPE= 16
		GCP_JUSTIFY= 0x10000
		GCP_JUSTIFYIN= 0x200000
		GCP_KASHIDA= 1024
		GCP_LIGATE= 32
		GCP_MAXEXTENT= 0x100000
		GCP_NEUTRALOVERRIDE= 0x2000000
		GCP_NUMERICOVERRIDE= 0x1000000
		GCP_NUMERICSLATIN= 0x4000000
		GCP_NUMERICSLOCAL= 0x8000000
		GCP_REORDER= 2
		GCP_SYMSWAPOFF= 0x800000
		GCP_USEKERNING= 8
		FLI_GLYPHS= 0x40000
		FLI_MASK= 0x103b
		GGO_METRICS= 0
		GGO_BITMAP= 1
		GGO_NATIVE= 2
		GGO_BEZIER= 3
		GGO_GRAY2_BITMAP= 4
		GGO_GRAY4_BITMAP= 5
		GGO_GRAY8_BITMAP= 6
		GGO_GLYPH_INDEX= 128
		GGO_UNHINTED= 256
		GM_COMPATIBLE= 1
		GM_ADVANCED= 2
		MM_ANISOTROPIC= 8
		MM_HIENGLISH= 5
		MM_HIMETRIC= 3
		MM_ISOTROPIC= 7
		MM_LOENGLISH= 4
		MM_LOMETRIC= 2
		MM_TEXT= 1
		MM_TWIPS= 6
		MM_MAX_FIXEDSCALE= 6
		ABSOLUTE= 1
		RELATIVE= 2
		PC_EXPLICIT= 2
		PC_NOCOLLAPSE= 4
		PC_RESERVED= 1
		CLR_NONE= 0xffffffff
		CLR_INVALID= 0xffffffff
		CLR_DEFAULT= 0xff000000
		TT_AVAILABLE= 1
		TT_ENABLED= 2
		BLACK_BRUSH= 4
		DKGRAY_BRUSH= 3
		GRAY_BRUSH= 2
		HOLLOW_BRUSH= 5
		LTGRAY_BRUSH= 1
		NULL_BRUSH= 5
		WHITE_BRUSH= 0
		BLACK_PEN= 7
		NULL_PEN= 8
		WHITE_PEN= 6
		ANSI_FIXED_FONT= 11
		ANSI_VAR_FONT= 12
		DEVICE_DEFAULT_FONT= 14
		DEFAULT_GUI_FONT= 17
		OEM_FIXED_FONT= 10
		SYSTEM_FONT= 13
		SYSTEM_FIXED_FONT= 16
		DEFAULT_PALETTE= 15
		SYSPAL_NOSTATIC= 2
		SYSPAL_STATIC= 1
		SYSPAL_ERROR= 0
		TA_BASELINE= 24
		TA_BOTTOM= 8
		TA_TOP= 0
		TA_CENTER= 6
		TA_LEFT= 0
		TA_RIGHT= 2
		TA_RTLREADING= 256
		TA_NOUPDATECP= 0
		TA_UPDATECP= 1
		TA_MASK= (24 +6 +1 +256)
		VTA_BASELINE= 24
		VTA_CENTER= 6
		VTA_LEFT= 8
		VTA_RIGHT= 0
		VTA_BOTTOM= 2
		VTA_TOP= 0
		MWT_IDENTITY= 1
		MWT_LEFTMULTIPLY= 2
		MWT_RIGHTMULTIPLY= 3
		OPAQUE= 2
		TRANSPARENT= 1
		BLACKONWHITE= 1
		WHITEONBLACK= 2
		COLORONCOLOR= 3
		HALFTONE= 4
		MAXSTRETCHBLTMODE= 4
		STRETCH_ANDSCANS= 1
		STRETCH_DELETESCANS= 3
		STRETCH_HALFTONE= 4
		STRETCH_ORSCANS= 2
		TCI_SRCCHARSET= 1
		TCI_SRCCODEPAGE= 2
		TCI_SRCFONTSIG= 3
		ICM_ON= 2
		ICM_OFF= 1
		ICM_QUERY= 3
		NEWFRAME= 1
		ABORTDOC= 2
		NEXTBAND= 3
		SETCOLORTABLE= 4
		GETCOLORTABLE= 5
		FLUSHOUTPUT= 6
		DRAFTMODE= 7
		QUERYESCSUPPORT= 8
		SETABORTPROC= 9
		STARTDOC= 10
		ENDDOC= 11
		GETPHYSPAGESIZE= 12
		GETPRINTINGOFFSET= 13
		GETSCALINGFACTOR= 14
		MFCOMMENT= 15
		GETPENWIDTH= 16
		SETCOPYCOUNT= 17
		SELECTPAPERSOURCE= 18
		DEVICEDATA= 19
		PASSTHROUGH= 19
		GETTECHNOLGY= 20
		GETTECHNOLOGY= 20
		SETLINECAP= 21
		SETLINEJOIN= 22
		SETMITERLIMIT= 23
		BANDINFO= 24
		DRAWPATTERNRECT= 25
		GETVECTORPENSIZE= 26
		GETVECTORBRUSHSIZE= 27
		ENABLEDUPLEX= 28
		GETSETPAPERBINS= 29
		GETSETPRINTORIENT= 30
		ENUMPAPERBINS= 31
		SETDIBSCALING= 32
		EPSPRINTING= 33
		ENUMPAPERMETRICS= 34
		GETSETPAPERMETRICS= 35
		POSTSCRIPT_DATA= 37
		POSTSCRIPT_IGNORE= 38
		MOUSETRAILS= 39
		GETDEVICEUNITS= 42
		GETEXTENDEDTEXTMETRICS= 256
		GETEXTENTTABLE= 257
		GETPAIRKERNTABLE= 258
		GETTRACKKERNTABLE= 259
		EXTTEXTOUT= 512
		GETFACENAME= 513
		DOWNLOADFACE= 514
		ENABLERELATIVEWIDTHS= 768
		ENABLEPAIRKERNING= 769
		SETKERNTRACK= 770
		SETALLJUSTVALUES= 771
		SETCHARSET= 772
		STRETCHBLT= 2048
		GETSETSCREENPARAMS= 3072
		QUERYDIBSUPPORT= 3073
		BEGIN_PATH= 4096
		CLIP_TO_PATH= 4097
		END_PATH= 4098
		EXT_DEVICE_CAPS= 4099
		RESTORE_CTM= 4100
		SAVE_CTM= 4101
		SET_ARC_DIRECTION= 4102
		SET_BACKGROUND_COLOR= 4103
		SET_POLY_MODE= 4104
		SET_SCREEN_ANGLE= 4105
		SET_SPREAD= 4106
		TRANSFORM_CTM= 4107
		SET_CLIP_BOX= 4108
		SET_BOUNDS= 4109
		SET_MIRROR_MODE= 4110
		OPENCHANNEL= 4110
		DOWNLOADHEADER= 4111
		CLOSECHANNEL= 4112
		POSTSCRIPT_PASSTHROUGH= 4115
		ENCAPSULATED_POSTSCRIPT= 4116
		QDI_SETDIBITS= 1
		QDI_GETDIBITS= 2
		QDI_DIBTOSCREEN= 4
		QDI_STRETCHDIB= 8
		SP_NOTREPORTED= 0x4000
		PR_JOBSTATUS= 0
		ASPECT_FILTERING= 1
		BS_SOLID= 0
		BS_NULL= 1
		BS_HOLLOW= 1
		BS_HATCHED= 2
		BS_PATTERN= 3
		BS_INDEXED= 4
		BS_DIBPATTERN= 5
		BS_DIBPATTERNPT= 6
		BS_PATTERN8X8= 7
		BS_DIBPATTERN8X8= 8
		LCS_CALIBRATED_RGB= 0
		LCS_DEVICE_RGB= 1
		LCS_DEVICE_CMYK= 2
		LCS_GM_BUSINESS= 1
		LCS_GM_GRAPHICS= 2
		LCS_GM_IMAGES= 4
		RASTER_FONTTYPE= 1
		DEVICE_FONTTYPE= 2
		TRUETYPE_FONTTYPE= 4
		DMORIENT_PORTRAIT= 1
		DMORIENT_LANDSCAPE= 2
		DMPAPER_FIRST= 1
		DMPAPER_LETTER= 1
		DMPAPER_LETTERSMALL= 2
		DMPAPER_TABLOID= 3
		DMPAPER_LEDGER= 4
		DMPAPER_LEGAL= 5
		DMPAPER_STATEMENT= 6
		DMPAPER_EXECUTIVE= 7
		DMPAPER_A3= 8
		DMPAPER_A4= 9
		DMPAPER_A4SMALL= 10
		DMPAPER_A5= 11
		DMPAPER_B4= 12
		DMPAPER_B5= 13
		DMPAPER_FOLIO= 14
		DMPAPER_QUARTO= 15
		DMPAPER_10X14= 16
		DMPAPER_11X17= 17
		DMPAPER_NOTE= 18
		DMPAPER_ENV_9= 19
		DMPAPER_ENV_10= 20
		DMPAPER_ENV_11= 21
		DMPAPER_ENV_12= 22
		DMPAPER_ENV_14= 23
		DMPAPER_CSHEET= 24
		DMPAPER_DSHEET= 25
		DMPAPER_ESHEET= 26
		DMPAPER_ENV_DL= 27
		DMPAPER_ENV_C5= 28
		DMPAPER_ENV_C3= 29
		DMPAPER_ENV_C4= 30
		DMPAPER_ENV_C6= 31
		DMPAPER_ENV_C65= 32
		DMPAPER_ENV_B4= 33
		DMPAPER_ENV_B5= 34
		DMPAPER_ENV_B6= 35
		DMPAPER_ENV_ITALY= 36
		DMPAPER_ENV_MONARCH= 37
		DMPAPER_ENV_PERSONAL= 38
		DMPAPER_FANFOLD_US= 39
		DMPAPER_FANFOLD_STD_GERMAN= 40
		DMPAPER_FANFOLD_LGL_GERMAN= 41
		DMPAPER_ISO_B4= 42
		DMPAPER_JAPANESE_POSTCARD= 43
		DMPAPER_9X11= 44
		DMPAPER_10X11= 45
		DMPAPER_15X11= 46
		DMPAPER_ENV_INVITE= 47
		DMPAPER_RESERVED_48= 48
		DMPAPER_RESERVED_49= 49
		DMPAPER_LETTER_EXTRA= 50
		DMPAPER_LEGAL_EXTRA= 51
		DMPAPER_TABLOID_EXTRA= 52
		DMPAPER_A4_EXTRA= 53
		DMPAPER_LETTER_TRANSVERSE= 54
		DMPAPER_A4_TRANSVERSE= 55
		DMPAPER_LETTER_EXTRA_TRANSVERSE= 56
		DMPAPER_A_PLUS= 57
		DMPAPER_B_PLUS= 58
		DMPAPER_LETTER_PLUS= 59
		DMPAPER_A4_PLUS= 60
		DMPAPER_A5_TRANSVERSE= 61
		DMPAPER_B5_TRANSVERSE= 62
		DMPAPER_A3_EXTRA= 63
		DMPAPER_A5_EXTRA= 64
		DMPAPER_B5_EXTRA= 65
		DMPAPER_A2= 66
		DMPAPER_A3_TRANSVERSE= 67
		DMPAPER_A3_EXTRA_TRANSVERSE= 68
		DMPAPER_LAST= 68
		DMPAPER_USER= 256
		DMBIN_FIRST= 1
		DMBIN_UPPER= 1
		DMBIN_ONLYONE= 1
		DMBIN_LOWER= 2
		DMBIN_MIDDLE= 3
		DMBIN_MANUAL= 4
		DMBIN_ENVELOPE= 5
		DMBIN_ENVMANUAL= 6
		DMBIN_AUTO= 7
		DMBIN_TRACTOR= 8
		DMBIN_SMALLFMT= 9
		DMBIN_LARGEFMT= 10
		DMBIN_LARGECAPACITY= 11
		DMBIN_CASSETTE= 14
		DMBIN_FORMSOURCE= 15
		DMBIN_LAST= 15
		DMBIN_USER= 256
		DMRES_DRAFT= (-1)
		DMRES_LOW= (-2)
		DMRES_MEDIUM= (-3)
		DMRES_HIGH= (-4)
		DMCOLOR_MONOCHROME= 1
		DMCOLOR_COLOR= 2
		DMDUP_SIMPLEX= 1
		DMDUP_VERTICAL= 2
		DMDUP_HORIZONTAL= 3
		DMTT_BITMAP= 1
		DMTT_DOWNLOAD= 2
		DMTT_SUBDEV= 3
		DMTT_DOWNLOAD_OUTLINE= 4
		DMCOLLATE_FALSE= 0
		DMCOLLATE_TRUE= 1
		DM_GRAYSCALE= 1
		DM_INTERLACED= 2
		DM_UPDATE= 1
		DM_COPY= 2
		DM_PROMPT= 4
		DM_MODIFY= 8
		DM_IN_BUFFER= 8
		DM_IN_PROMPT= 4
		DM_OUT_BUFFER= 2
		DM_OUT_DEFAULT= 1
		DM_ORIENTATION= 1
		DM_PAPERSIZE= 2
		DM_PAPERLENGTH= 4
		DM_PAPERWIDTH= 8
		DM_SCALE= 16
		DM_COPIES= 256
		DM_DEFAULTSOURCE= 512
		DM_PRINTQUALITY= 1024
		DM_COLOR= 2048
		DM_DUPLEX= 4096
		DM_YRESOLUTION= 8192
		DM_TTOPTION= 16384
		DM_COLLATE= 32768
		DM_FORMNAME= 65536
		DM_LOGPIXELS= 0x20000
		DM_BITSPERPEL= 0x40000
		DM_PELSWIDTH= 0x80000
		DM_PELSHEIGHT= 0x100000
		DM_DISPLAYFLAGS= 0x200000
		DM_DISPLAYFREQUENCY= 0x400000
		DM_ICMMETHOD= 0x800000
		DM_ICMINTENT= 0x1000000
		DM_MEDIATYPE= 0x2000000
		DM_DITHERTYPE= 0x4000000
		DMICMMETHOD_NONE= 1
		DMICMMETHOD_SYSTEM= 2
		DMICMMETHOD_DRIVER= 3
		DMICMMETHOD_DEVICE= 4
		DMICMMETHOD_USER= 256
		DMICM_SATURATE= 1
		DMICM_CONTRAST= 2
		DMICM_COLORMETRIC= 3
		DMICM_USER= 256
		DMMEDIA_STANDARD= 1
		DMMEDIA_TRANSPARENCY= 2
		DMMEDIA_GLOSSY= 3
		DMMEDIA_USER= 256
		DMDITHER_NONE= 1
		DMDITHER_COARSE= 2
		DMDITHER_FINE= 3
		DMDITHER_LINEART= 4
		DMDITHER_ERRORDIFFUSION= 5
		DMDITHER_RESERVED6= 6
		DMDITHER_RESERVED7= 7
		DMDITHER_RESERVED8= 8
		DMDITHER_RESERVED9= 9
		DMDITHER_GRAYSCALE= 10
		DMDITHER_USER= 256
		GDI_ERROR= 0xFFFFFFFF
		TMPF_FIXED_PITCH= 1
		TMPF_VECTOR= 2
		TMPF_TRUETYPE= 4
		TMPF_DEVICE= 8
		NTM_ITALIC= 1
		NTM_BOLD= 32
		NTM_REGULAR= 64
		TT_POLYGON_TYPE= 24
		TT_PRIM_LINE= 1
		TT_PRIM_QSPLINE= 2
		FONTMAPPER_MAX= 10
		ENHMETA_STOCK_OBJECT= 0x80000000
		WGL_FONT_LINES= 0
		WGL_FONT_POLYGONS= 1
		LPD_DOUBLEBUFFER= 1
		LPD_STEREO= 2
		LPD_SUPPORT_GDI= 16
		LPD_SUPPORT_OPENGL= 32
		LPD_SHARE_DEPTH= 64
		LPD_SHARE_STENCIL= 128
		LPD_SHARE_ACCUM= 256
		LPD_SWAP_EXCHANGE= 512
		LPD_SWAP_COPY= 1024
		LPD_TRANSPARENT= 4096
		LPD_TYPE_RGBA= 0
		LPD_TYPE_COLORINDEX= 1
		WGL_SWAP_MAIN_PLANE= 1
		WGL_SWAP_OVERLAY1= 2
		WGL_SWAP_OVERLAY2= 4
		WGL_SWAP_OVERLAY3= 8
		WGL_SWAP_OVERLAY4= 16
		WGL_SWAP_OVERLAY5= 32
		WGL_SWAP_OVERLAY6= 64
		WGL_SWAP_OVERLAY7= 128
		WGL_SWAP_OVERLAY8= 256
		WGL_SWAP_OVERLAY9= 512
		WGL_SWAP_OVERLAY10= 1024
		WGL_SWAP_OVERLAY11= 2048
		WGL_SWAP_OVERLAY12= 4096
		WGL_SWAP_OVERLAY13= 8192
		WGL_SWAP_OVERLAY14= 16384
		WGL_SWAP_OVERLAY15= 32768
		WGL_SWAP_UNDERLAY1= 65536
		WGL_SWAP_UNDERLAY2= 0x20000
		WGL_SWAP_UNDERLAY3= 0x40000
		WGL_SWAP_UNDERLAY4= 0x80000
		WGL_SWAP_UNDERLAY5= 0x100000
		WGL_SWAP_UNDERLAY6= 0x200000
		WGL_SWAP_UNDERLAY7= 0x400000
		WGL_SWAP_UNDERLAY8= 0x800000
		WGL_SWAP_UNDERLAY9= 0x1000000
		WGL_SWAP_UNDERLAY10= 0x2000000
		WGL_SWAP_UNDERLAY11= 0x4000000
		WGL_SWAP_UNDERLAY12= 0x8000000
		WGL_SWAP_UNDERLAY13= 0x10000000
		WGL_SWAP_UNDERLAY14= 0x20000000
		WGL_SWAP_UNDERLAY15= 0x40000000
		AC_SRC_OVER= 0x00
		AC_SRC_ALPHA=0x01
		AC_SRC_NO_PREMULT_ALPHA=0x01
		AC_SRC_NO_ALPHA=0x02
		AC_DST_NO_PREMULT_ALPHA=0x10
		AC_DST_NO_ALPHA=0x20
		LAYOUT_RTL= 1
		LAYOUT_BITMAPORIENTATIONPRESERVED= 8
		SYSRGN= 4
		FALT= 16
		FCONTROL= 8
		FNOINVERT= 2
		FSHIFT= 4
		FVIRTKEY= 1
		ATF_TIMEOUTON= 1
		ATF_ONOFFFEEDBACK= 2
		ATF_AVAILABLE= 4
		WH_MIN= (-1)
		WH_MSGFILTER= (-1)
		WH_JOURNALRECORD= 0
		WH_JOURNALPLAYBACK= 1
		WH_KEYBOARD= 2
		WH_GETMESSAGE= 3
		WH_CALLWNDPROC= 4
		WH_CBT= 5
		WH_SYSMSGFILTER= 6
		WH_MOUSE= 7
		WH_HARDWARE= 8
		WH_DEBUG= 9
		WH_SHELL= 10
		WH_FOREGROUNDIDLE= 11
		WH_CALLWNDPROCRET= 12
		WH_KEYBOARD_LL= 13
		WH_MOUSE_LL= 14
		WH_MAX= 14
		WH_MINHOOK= (-1)
		WH_MAXHOOK= 14
		HC_ACTION= 0
		HC_GETNEXT= 1
		HC_SKIP= 2
		HC_NOREMOVE= 3
		HC_NOREM= 3
		HC_SYSMODALON= 4
		HC_SYSMODALOFF= 5
		HCBT_MOVESIZE= 0
		HCBT_MINMAX= 1
		HCBT_QS= 2
		HCBT_CREATEWND= 3
		HCBT_DESTROYWND= 4
		HCBT_ACTIVATE= 5
		HCBT_CLICKSKIPPED= 6
		HCBT_KEYSKIPPED= 7
		HCBT_SYSCOMMAND= 8
		HCBT_SETFOCUS= 9
		CF_TEXT= 1
		CF_BITMAP= 2
		CF_METAFILEPICT= 3
		CF_SYLK= 4
		CF_DIF= 5
		CF_TIFF= 6
		CF_OEMTEXT= 7
		CF_DIB= 8
		CF_PALETTE= 9
		CF_PENDATA= 10
		CF_RIFF= 11
		CF_WAVE= 12
		CF_UNICODETEXT= 13
		CF_ENHMETAFILE= 14
		CF_HDROP= 15
		CF_LOCALE= 16
		CF_MAX= 17
		CF_OWNERDISPLAY= 128
		CF_DSPTEXT= 129
		CF_DSPBITMAP= 130
		CF_DSPMETAFILEPICT= 131
		CF_DSPENHMETAFILE= 142
		CF_PRIVATEFIRST= 512
		CF_PRIVATELAST= 767
		CF_GDIOBJFIRST= 768
		CF_GDIOBJLAST= 1023
		HKL_NEXT= 1
		HKL_PREV= 0
		KLF_ACTIVATE= 1
		KLF_SUBSTITUTE_OK= 2
		KLF_UNLOADPREVIOUS= 4
		KLF_REORDER= 8
		KLF_REPLACELANG= 16
		KLF_NOTELLSHELL= 128
		KLF_SETFORPROCESS= 256
		KL_NAMELENGTH= 9
		MF_ENABLED= 0
		MF_GRAYED= 1
		MF_DISABLED= 2
		MF_BITMAP= 4
		MF_CHECKED= 8
		MF_MENUBARBREAK= 32
		MF_MENUBREAK= 64
		MF_OWNERDRAW= 256
		MF_POPUP= 16
		MF_SEPARATOR= 0x800
		MF_STRING= 0
		MF_UNCHECKED= 0
		MF_DEFAULT= 4096
		MF_SYSMENU= 0x2000
		MF_HELP= 0x4000
		MF_END= 128
		MF_RIGHTJUSTIFY= 0x4000
		MF_MOUSESELECT= 0x8000
		MF_INSERT= 0
		MF_CHANGE= 128
		MF_APPEND= 256
		MF_DELETE= 512
		MF_REMOVE= 4096
		MF_USECHECKBITMAPS= 512
		MF_UNHILITE= 0
		MF_HILITE= 128
		BSF_IGNORECURRENTTASK= 0x00000002
		BSF_QUERY= 0x00000001
		BSF_FLUSHDISK= 0x00000004
		BSF_NOHANG= 0x00000008
		BSF_POSTMESSAGE= 0x00000010
		BSF_FORCEIFHUNG= 0x00000020
		BSF_NOTIMEOUTIFNOTHUNG= 0x00000040
		BSM_ALLCOMPONENTS= 0
		BSM_APPLICATIONS= 8
		BSM_ALLDESKTOPS= 16
		BSM_INSTALLABLEDRIVERS= 4
		BSM_NETDRIVER= 2
		BSM_VXDS= 1
		BROADCAST_QUERY_DENY= 1112363332
		CDS_UPDATEREGISTRY= 1
		CDS_TEST= 2
		CDS_FULLSCREEN= 4
		CDS_GLOBAL= 8
		CDS_SET_PRIMARY= 16
		CDS_RESET= 0x40000000
		CDS_SETRECT= 0x20000000
		CDS_NORESET= 0x10000000
		DISP_CHANGE_SUCCESSFUL= 0
		DISP_CHANGE_RESTART= 1
		DISP_CHANGE_BADFLAGS= (-4)
		DISP_CHANGE_BADPARAM= (-5)
		DISP_CHANGE_FAILED= (-1)
		DISP_CHANGE_BADMODE= (-2)
		DISP_CHANGE_NOTUPDATED= (-3)
		BST_CHECKED= 1
		BST_INDETERMINATE= 2
		BST_UNCHECKED= 0
		BST_FOCUS= 8
		BST_PUSHED= 4
		MF_BYCOMMAND= 0
		MF_BYPOSITION= 1024
		CWP_ALL= 0
		CWP_SKIPINVISIBLE= 1
		CWP_SKIPDISABLED= 2
		CWP_SKIPTRANSPARENT= 4
		IMAGE_BITMAP= 0
		IMAGE_ICON= 1
		IMAGE_CURSOR= 2
		IMAGE_ENHMETAFILE= 3
		DF_ALLOWOTHERACCOUNTHOOK= 1
		DESKTOP_CREATEMENU= 4
		DESKTOP_CREATEWINDOW= 2
		DESKTOP_ENUMERATE= 64
		DESKTOP_HOOKCONTROL= 8
		DESKTOP_JOURNALPLAYBACK= 32
		DESKTOP_JOURNALRECORD= 16
		DESKTOP_READOBJECTS= 1
		DESKTOP_SWITCHDESKTOP= 256
		DESKTOP_WRITEOBJECTS= 128
		CW_USEDEFAULT= 0x80000000
		WS_BORDER= 0x800000
		WS_CAPTION= 0xc00000
		WS_CHILD= 0x40000000
		WS_CHILDWINDOW= 0x40000000
		WS_CLIPCHILDREN= 0x2000000
		WS_CLIPSIBLINGS= 0x4000000
		WS_DISABLED= 0x8000000
		WS_DLGFRAME= 0x400000
		WS_GROUP= 0x20000
		WS_HSCROLL= 0x100000
		WS_ICONIC= 0x20000000
		WS_MAXIMIZE= 0x1000000
		WS_MAXIMIZEBOX= 0x10000
		WS_MINIMIZE= 0x20000000
		WS_MINIMIZEBOX= 0x20000
		WS_OVERLAPPED= 0
		WS_OVERLAPPEDWINDOW= 0xcf0000
		WS_POPUP= 0x80000000
		WS_POPUPWINDOW= 0x80880000
		WS_SIZEBOX= 0x40000
		WS_SYSMENU= 0x80000
		WS_TABSTOP= 0x10000
		WS_THICKFRAME= 0x40000
		WS_TILED= 0
		WS_TILEDWINDOW= 0xcf0000
		WS_VISIBLE= 0x10000000
		WS_VSCROLL= 0x200000
		MDIS_ALLCHILDSTYLES= 1
		BS_3STATE= 5
		BS_AUTO3STATE= 6
		BS_AUTOCHECKBOX= 3
		BS_AUTORADIOBUTTON= 9
		BS_BITMAP= 128
		BS_BOTTOM= 0x800
		BS_CENTER= 0x300
		BS_CHECKBOX= 2
		BS_DEFPUSHBUTTON= 1
		BS_GROUPBOX= 7
		BS_ICON= 64
		BS_LEFT= 256
		BS_LEFTTEXT= 32
		BS_MULTILINE= 0x2000
		BS_NOTIFY= 0x4000
		BS_OWNERDRAW= 0xb
		BS_PUSHBUTTON= 0
		BS_PUSHLIKE= 4096
		BS_RADIOBUTTON= 4
		BS_RIGHT= 512
		BS_RIGHTBUTTON= 32
		BS_TEXT= 0
		BS_TOP= 0x400
		BS_USERBUTTON= 8
		BS_VCENTER= 0xc00
		BS_FLAT= 0x8000
		CBS_AUTOHSCROLL= 64
		CBS_DISABLENOSCROLL= 0x800
		CBS_DROPDOWN= 2
		CBS_DROPDOWNLIST= 3
		CBS_HASSTRINGS= 512
		CBS_LOWERCASE= 0x4000
		CBS_NOINTEGRALHEIGHT= 0x400
		CBS_OEMCONVERT= 128
		CBS_OWNERDRAWFIXED= 16
		CBS_OWNERDRAWVARIABLE= 32
		CBS_SIMPLE= 1
		CBS_SORT= 256
		CBS_UPPERCASE= 0x2000
		ES_AUTOHSCROLL= 128
		ES_AUTOVSCROLL= 64
		ES_CENTER= 1
		ES_LEFT= 0
		ES_LOWERCASE= 16
		ES_MULTILINE= 4
		ES_NOHIDESEL= 256
		ES_NUMBER= 0x2000
		ES_OEMCONVERT= 0x400
		ES_PASSWORD= 32
		ES_READONLY= 0x800
		ES_RIGHT= 2
		ES_UPPERCASE= 8
		ES_WANTRETURN= 4096
		LBS_DISABLENOSCROLL= 4096
		LBS_EXTENDEDSEL= 0x800
		LBS_HASSTRINGS= 64
		LBS_MULTICOLUMN= 512
		LBS_MULTIPLESEL= 8
		LBS_NODATA= 0x2000
		LBS_NOINTEGRALHEIGHT= 256
		LBS_NOREDRAW= 4
		LBS_NOSEL= 0x4000
		LBS_NOTIFY= 1
		LBS_OWNERDRAWFIXED= 16
		LBS_OWNERDRAWVARIABLE= 32
		LBS_SORT= 2
		LBS_STANDARD= 0xa00003
		LBS_USETABSTOPS= 128
		LBS_WANTKEYBOARDINPUT= 0x400
		SBS_BOTTOMALIGN= 4
		SBS_HORZ= 0
		SBS_LEFTALIGN= 2
		SBS_RIGHTALIGN= 4
		SBS_SIZEBOX= 8
		SBS_SIZEBOXBOTTOMRIGHTALIGN= 4
		SBS_SIZEBOXTOPLEFTALIGN= 2
		SBS_SIZEGRIP= 16
		SBS_TOPALIGN= 2
		SBS_VERT= 1
		SS_BITMAP= 14
		SS_BLACKFRAME= 7
		SS_BLACKRECT= 4
		SS_CENTER= 1
		SS_CENTERIMAGE= 512
		SS_ENHMETAFILE= 15
		SS_ETCHEDFRAME= 18
		SS_ETCHEDHORZ= 16
		SS_ETCHEDVERT= 17
		SS_GRAYFRAME= 8
		SS_GRAYRECT= 5
		SS_ICON= 3
		SS_LEFT= 0
		SS_LEFTNOWORDWRAP= 0xc
		SS_NOPREFIX= 128
		SS_NOTIFY= 256
		SS_OWNERDRAW= 0xd
		SS_REALSIZEIMAGE= 0x800
		SS_RIGHT= 2
		SS_RIGHTJUST= 0x400
		SS_SIMPLE= 11
		SS_SUNKEN= 4096
		SS_WHITEFRAME= 9
		SS_WHITERECT= 6
		SS_USERITEM= 10
		SS_TYPEMASK= 0x0000001F
		SS_ENDELLIPSIS= 0x00004000
		SS_PATHELLIPSIS= 0x00008000
		SS_WORDELLIPSIS= 0x0000C000
		SS_ELLIPSISMASK= 0x0000C000
		DS_3DLOOK= 4
		DS_ABSALIGN= 1
		DS_CENTER= 0x800
		DS_CENTERMOUSE= 4096
		DS_CONTEXTHELP= 0x2000
		DS_CONTROL= 0x400
		DS_FIXEDSYS= 8
		DS_LOCALEDIT= 32
		DS_MODALFRAME= 128
		DS_NOFAILCREATE= 16
		DS_NOIDLEMSG= 256
		DS_SETFONT= 64
		DS_SETFOREGROUND= 512
		DS_SYSMODAL= 2
		WS_EX_ACCEPTFILES= 16
		WS_EX_APPWINDOW= 0x40000
		WS_EX_CLIENTEDGE= 512
		WS_EX_COMPOSITED= 0x2000000
		WS_EX_CONTEXTHELP= 0x400
		WS_EX_CONTROLPARENT= 0x10000
		WS_EX_DLGMODALFRAME= 1
		WS_EX_LAYERED= 0x80000
		WS_EX_LAYOUTRTL= 0x400000
		WS_EX_LEFT= 0
		WS_EX_LEFTSCROLLBAR= 0x4000
		WS_EX_LTRREADING= 0
		WS_EX_MDICHILD= 64
		WS_EX_NOACTIVATE= 0x8000000
		WS_EX_NOINHERITLAYOUT= 0x100000
		WS_EX_NOPARENTNOTIFY= 4
		WS_EX_OVERLAPPEDWINDOW= 0x300
		WS_EX_PALETTEWINDOW= 0x188
		WS_EX_RIGHT= 0x1000
		WS_EX_RIGHTSCROLLBAR= 0
		WS_EX_RTLREADING= 0x2000
		WS_EX_STATICEDGE= 0x20000
		WS_EX_TOOLWINDOW= 128
		WS_EX_TOPMOST= 8
		WS_EX_TRANSPARENT= 32
		WS_EX_WINDOWEDGE= 256
		WINSTA_ACCESSCLIPBOARD= 4
		WINSTA_ACCESSGLOBALATOMS= 32
		WINSTA_CREATEDESKTOP= 8
		WINSTA_ENUMDESKTOPS= 1
		WINSTA_ENUMERATE= 256
		WINSTA_EXITWINDOWS= 64
		WINSTA_READATTRIBUTES= 2
		WINSTA_READSCREEN= 512
		WINSTA_WRITEATTRIBUTES= 16
		DDL_READWRITE= 0
		DDL_READONLY= 1
		DDL_HIDDEN= 2
		DDL_SYSTEM= 4
		DDL_DIRECTORY= 16
		DDL_ARCHIVE= 32
		DDL_POSTMSGS= 8192
		DDL_DRIVES= 16384
		DDL_EXCLUSIVE= 32768
		DC_ACTIVE= 0x00000001
		DC_SMALLCAP= 0x00000002
		DC_ICON= 0x00000004
		DC_TEXT= 0x00000008
		DC_INBUTTON= 0x00000010
		BDR_RAISEDOUTER= 1
		BDR_SUNKENOUTER= 2
		BDR_RAISEDINNER= 4
		BDR_SUNKENINNER= 8
		BDR_OUTER= 3
		BDR_INNER= 0xc
		BDR_RAISED= 5
		BDR_SUNKEN= 10
		EDGE_RAISED= (1|4)
		EDGE_SUNKEN= (2|8)
		EDGE_ETCHED= (2|4)
		EDGE_BUMP= (1|8)
		BF_LEFT= 1
		BF_TOP= 2
		BF_RIGHT= 4
		BF_BOTTOM= 8
		BF_TOPLEFT= (2|1)
		BF_TOPRIGHT= (2|4)
		BF_BOTTOMLEFT= (8|1)
		BF_BOTTOMRIGHT= (8|4)
		BF_RECT= (1|2|4|8)
		BF_DIAGONAL= 16
		BF_DIAGONAL_ENDTOPRIGHT= (16|2|4)
		BF_DIAGONAL_ENDTOPLEFT= (16|2|1)
		BF_DIAGONAL_ENDBOTTOMLEFT= (16|8|1)
		BF_DIAGONAL_ENDBOTTOMRIGHT= (16|8|4)
		BF_MIDDLE= 0x800
		BF_SOFT= 0x1000
		BF_ADJUST= 0x2000
		BF_FLAT= 0x4000
		BF_MONO= 0x8000
		DFC_CAPTION= 1
		DFC_MENU= 2
		DFC_SCROLL= 3
		DFC_BUTTON= 4
		DFCS_CAPTIONCLOSE= 0
		DFCS_CAPTIONMIN= 1
		DFCS_CAPTIONMAX= 2
		DFCS_CAPTIONRESTORE= 3
		DFCS_CAPTIONHELP= 4
		DFCS_MENUARROW= 0
		DFCS_MENUCHECK= 1
		DFCS_MENUBULLET= 2
		DFCS_MENUARROWRIGHT= 4
		DFCS_SCROLLUP= 0
		DFCS_SCROLLDOWN= 1
		DFCS_SCROLLLEFT= 2
		DFCS_SCROLLRIGHT= 3
		DFCS_SCROLLCOMBOBOX= 5
		DFCS_SCROLLSIZEGRIP= 8
		DFCS_SCROLLSIZEGRIPRIGHT= 16
		DFCS_BUTTONCHECK= 0
		DFCS_BUTTONRADIOIMAGE= 1
		DFCS_BUTTONRADIOMASK= 2
		DFCS_BUTTONRADIO= 4
		DFCS_BUTTON3STATE= 8
		DFCS_BUTTONPUSH= 16
		DFCS_INACTIVE= 256
		DFCS_PUSHED= 512
		DFCS_CHECKED= 1024
		DFCS_ADJUSTRECT= 0x2000
		DFCS_FLAT= 0x4000
		DFCS_MONO= 0x8000
		DST_COMPLEX= 0
		DST_TEXT= 1
		DST_PREFIXTEXT= 2
		DST_ICON= 3
		DST_BITMAP= 4
		DSS_NORMAL= 0
		DSS_UNION= 16
		DSS_DISABLED= 32
		DSS_MONO= 128
		DSS_RIGHT= 0x8000
		DT_BOTTOM= 8
		DT_CALCRECT= 1024
		DT_CENTER= 1
		DT_EDITCONTROL= 8192
		DT_END_ELLIPSIS= 32768
		DT_PATH_ELLIPSIS= 16384
		DT_WORD_ELLIPSIS= 0x40000
		DT_EXPANDTABS= 64
		DT_EXTERNALLEADING= 512
		DT_LEFT= 0
		DT_MODIFYSTRING= 65536
		DT_NOCLIP= 256
		DT_NOPREFIX= 2048
		DT_RIGHT= 2
		DT_RTLREADING= 131072
		DT_SINGLELINE= 32
		DT_TABSTOP= 128
		DT_TOP= 0
		DT_VCENTER= 4
		DT_WORDBREAK= 16
		DT_INTERNAL= 4096
		WB_ISDELIMITER= 2
		WB_LEFT= 0
		WB_RIGHT= 1
		SB_HORZ= 0
		SB_VERT= 1
		SB_CTL= 2
		SB_BOTH= 3
		ESB_DISABLE_BOTH= 3
		ESB_DISABLE_DOWN= 2
		ESB_DISABLE_LEFT= 1
		ESB_DISABLE_LTUP= 1
		ESB_DISABLE_RIGHT= 2
		ESB_DISABLE_RTDN= 2
		ESB_DISABLE_UP= 1
		ESB_ENABLE_BOTH= 0
		SB_LINEUP= 0
		SB_LINEDOWN= 1
		SB_LINELEFT= 0
		SB_LINERIGHT= 1
		SB_PAGEUP= 2
		SB_PAGEDOWN= 3
		SB_PAGELEFT= 2
		SB_PAGERIGHT= 3
		SB_THUMBPOSITION= 4
		SB_THUMBTRACK= 5
		SB_ENDSCROLL= 8
		SB_LEFT= 6
		SB_RIGHT= 7
		SB_BOTTOM= 7
		SB_TOP= 6
		DIFFERENCE= 11
		EWX_FORCE= 4
		EWX_LOGOFF= 0
		EWX_POWEROFF= 8
		EWX_REBOOT= 2
		EWX_SHUTDOWN= 1
		CS_BYTEALIGNCLIENT= 4096
		CS_BYTEALIGNWINDOW= 8192
		CS_KEYCVTWINDOW= 4
		CS_NOKEYCVT= 256
		CS_CLASSDC= 64
		CS_DBLCLKS= 8
		CS_GLOBALCLASS= 16384
		CS_HREDRAW= 2
		CS_NOCLOSE= 512
		CS_OWNDC= 32
		CS_PARENTDC= 128
		CS_SAVEBITS= 2048
		CS_VREDRAW= 1
		CS_IME= 0x10000
		GCW_ATOM= (-32)
		GCL_CBCLSEXTRA= (-20)
		GCL_CBWNDEXTRA= (-18)
		GCL_HBRBACKGROUND= (-10)
		GCL_HCURSOR= (-12)
		GCL_HICON= (-14)
		GCL_HICONSM= (-34)
		GCL_HMODULE= (-16)
		GCL_MENUNAME= (-8)
		GCL_STYLE= (-26)
		GCL_WNDPROC= (-24)
		MIIM_STATE= 1
		MIIM_ID= 2
		MIIM_SUBMENU= 4
		MIIM_CHECKMARKS= 8
		MIIM_TYPE= 16
		MIIM_DATA= 32
		MIIM_STRING= 64
		MIIM_BITMAP= 128
		MIIM_FTYPE= 256
		MFT_BITMAP= 4
		MFT_MENUBARBREAK= 32
		MFT_MENUBREAK= 64
		MFT_OWNERDRAW= 256
		MFT_RADIOCHECK= 512
		MFT_RIGHTJUSTIFY= 0x4000
		MFT_SEPARATOR= 0x800
		MFT_RIGHTORDER= 0x2000
		MFT_STRING= 0
		MFS_CHECKED= 8
		MFS_DEFAULT= 4096
		MFS_DISABLED= 3
		MFS_ENABLED= 0
		MFS_GRAYED= 3
		MFS_HILITE= 128
		MFS_UNCHECKED= 0
		MFS_UNHILITE= 0
		GW_HWNDNEXT= 2
		GW_HWNDPREV= 3
		GW_CHILD= 5
		GW_HWNDFIRST= 0
		GW_HWNDLAST= 1
		GW_OWNER= 4
		SW_HIDE= 0
		SW_NORMAL= 1
		SW_SHOWNORMAL= 1
		SW_SHOWMINIMIZED= 2
		SW_MAXIMIZE= 3
		SW_SHOWMAXIMIZED= 3
		SW_SHOWNOACTIVATE= 4
		SW_SHOW= 5
		SW_MINIMIZE= 6
		SW_SHOWMINNOACTIVE= 7
		SW_SHOWNA= 8
		SW_RESTORE= 9
		SW_SHOWDEFAULT= 10
		SW_FORCEMINIMIZE= 11
		SW_MAX= 11
		MB_USERICON= 128
		MB_ICONASTERISK= 64
		MB_ICONEXCLAMATION= 0x30
		MB_ICONWARNING= 0x30
		MB_ICONERROR= 16
		MB_ICONHAND= 16
		MB_ICONQUESTION= 32
		MB_OK= 0
		MB_ABORTRETRYIGNORE= 2
		MB_APPLMODAL= 0
		MB_DEFAULT_DESKTOP_ONLY= 0x20000
		MB_HELP= 0x4000
		MB_RIGHT= 0x80000
		MB_RTLREADING= 0x100000
		MB_TOPMOST= 0x40000
		MB_DEFBUTTON1= 0
		MB_DEFBUTTON2= 256
		MB_DEFBUTTON3= 512
		MB_DEFBUTTON4= 0x300
		MB_ICONINFORMATION= 64
		MB_ICONSTOP= 16
		MB_OKCANCEL= 1
		MB_RETRYCANCEL= 5
		MB_SERVICE_NOTIFICATION= 0x00200000
		MB_SERVICE_NOTIFICATION_NT3X= 0x00040000
		MB_SETFOREGROUND= 0x10000
		MB_SYSTEMMODAL= 4096
		MB_TASKMODAL= 0x2000
		MB_YESNO= 4
		MB_YESNOCANCEL= 3
		MB_ICONMASK= 240
		MB_DEFMASK= 3840
		MB_MODEMASK= 0x00003000
		MB_MISCMASK= 0x0000C000
		MB_NOFOCUS= 0x00008000
		MB_TYPEMASK= 15
		IDABORT= 3
		IDCANCEL= 2
		IDCLOSE= 8
		IDHELP= 9
		IDIGNORE= 5
		IDNO= 7
		IDOK= 1
		IDRETRY= 4
		IDYES= 6
		GWL_EXSTYLE= (-20)
		GWL_STYLE= (-16)
		GWL_WNDPROC= (-4)
		GWLP_WNDPROC= (-4)
		GWL_HINSTANCE= (-6)
		GWLP_HINSTANCE= (-6)
		GWL_HWNDPARENT= (-8)
		GWLP_HWNDPARENT= (-8)
		GWL_ID= (-12)
		GWLP_ID= (-12)
		GWL_USERDATA= (-21)
		GWLP_USERDATA= (-21)
		DWL_DLGPROC= 4
		DWLP_DLGPROC= 4
		DWL_MSGRESULT= 0
		DWLP_MSGRESULT= 0
		DWL_USER= 8
		DWLP_USER= 8
		QS_ALLEVENTS= 191
		QS_ALLINPUT= 255
		QS_HOTKEY= 128
		QS_INPUT= 7
		QS_KEY= 1
		QS_MOUSE= 6
		QS_MOUSEBUTTON= 4
		QS_MOUSEMOVE= 2
		QS_PAINT= 32
		QS_POSTMESSAGE= 8
		QS_SENDMESSAGE= 64
		QS_TIMER= 16
		COLOR_3DDKSHADOW= 21
		COLOR_3DFACE= 15
		COLOR_3DHILIGHT= 20
		COLOR_3DHIGHLIGHT= 20
		COLOR_3DLIGHT= 22
		COLOR_BTNHILIGHT= 20
		COLOR_3DSHADOW= 16
		COLOR_ACTIVEBORDER= 10
		COLOR_ACTIVECAPTION= 2
		COLOR_APPWORKSPACE= 12
		COLOR_BACKGROUND= 1
		COLOR_DESKTOP= 1
		COLOR_BTNFACE= 15
		COLOR_BTNHIGHLIGHT= 20
		COLOR_BTNSHADOW= 16
		COLOR_BTNTEXT= 18
		COLOR_CAPTIONTEXT= 9
		COLOR_GRAYTEXT= 17
		COLOR_HIGHLIGHT= 13
		COLOR_HIGHLIGHTTEXT= 14
		COLOR_INACTIVEBORDER= 11
		COLOR_INACTIVECAPTION= 3
		COLOR_INACTIVECAPTIONTEXT= 19
		COLOR_INFOBK= 24
		COLOR_INFOTEXT= 23
		COLOR_MENU= 4
		COLOR_MENUTEXT= 7
		COLOR_SCROLLBAR= 0
		COLOR_WINDOW= 5
		COLOR_WINDOWFRAME= 6
		COLOR_WINDOWTEXT= 8
		CTLCOLOR_MSGBOX= 0
		CTLCOLOR_EDIT= 1
		CTLCOLOR_LISTBOX= 2
		CTLCOLOR_BTN= 3
		CTLCOLOR_DLG= 4
		CTLCOLOR_SCROLLBAR= 5
		CTLCOLOR_STATIC= 6
		CTLCOLOR_MAX= 7
		SM_CXSCREEN= 0
		SM_CYSCREEN= 1
		SM_CXVSCROLL= 2
		SM_CYHSCROLL= 3
		SM_CYCAPTION= 4
		SM_CXBORDER= 5
		SM_CYBORDER= 6
		SM_CXDLGFRAME= 7
		SM_CXFIXEDFRAME= 7
		SM_CYDLGFRAME= 8
		SM_CYFIXEDFRAME= 8
		SM_CYVTHUMB= 9
		SM_CXHTHUMB= 10
		SM_CXICON= 11
		SM_CYICON= 12
		SM_CXCURSOR= 13
		SM_CYCURSOR= 14
		SM_CYMENU= 15
		SM_CXFULLSCREEN= 16
		SM_CYFULLSCREEN= 17
		SM_CYKANJIWINDOW= 18
		SM_MOUSEPRESENT= 19
		SM_CYVSCROLL= 20
		SM_CXHSCROLL= 21
		SM_DEBUG= 22
		SM_SWAPBUTTON= 23
		SM_RESERVED1= 24
		SM_RESERVED2= 25
		SM_RESERVED3= 26
		SM_RESERVED4= 27
		SM_CXMIN= 28
		SM_CYMIN= 29
		SM_CXSIZE= 30
		SM_CYSIZE= 31
		SM_CXSIZEFRAME= 32
		SM_CXFRAME= 32
		SM_CYSIZEFRAME= 33
		SM_CYFRAME= 33
		SM_CXMINTRACK= 34
		SM_CYMINTRACK= 35
		SM_CXDOUBLECLK= 36
		SM_CYDOUBLECLK= 37
		SM_CXICONSPACING= 38
		SM_CYICONSPACING= 39
		SM_MENUDROPALIGNMENT= 40
		SM_PENWINDOWS= 41
		SM_DBCSENABLED= 42
		SM_CMOUSEBUTTONS= 43
		SM_SECURE= 44
		SM_CXEDGE= 45
		SM_CYEDGE= 46
		SM_CXMINSPACING= 47
		SM_CYMINSPACING= 48
		SM_CXSMICON= 49
		SM_CYSMICON= 50
		SM_CYSMCAPTION= 51
		SM_CXSMSIZE= 52
		SM_CYSMSIZE= 53
		SM_CXMENUSIZE= 54
		SM_CYMENUSIZE= 55
		SM_ARRANGE= 56
		SM_CXMINIMIZED= 57
		SM_CYMINIMIZED= 58
		SM_CXMAXTRACK= 59
		SM_CYMAXTRACK= 60
		SM_CXMAXIMIZED= 61
		SM_CYMAXIMIZED= 62
		SM_NETWORK= 63
		LR_DEFAULTSIZE= 64
		SM_CLEANBOOT= 67
		SM_CXDRAG= 68
		SM_CYDRAG= 69
		SM_SHOWSOUNDS= 70
		SM_CXMENUCHECK= 71
		SM_CYMENUCHECK= 72
		SM_SLOWMACHINE= 73
		SM_MIDEASTENABLED= 74
		SM_MOUSEWHEELPRESENT= 75
		SM_XVIRTUALSCREEN= 76
		SM_YVIRTUALSCREEN= 77
		SM_CXVIRTUALSCREEN= 78
		SM_CYVIRTUALSCREEN= 79
		SM_CMONITORS= 80
		SM_SAMEDISPLAYFORMAT= 81
		SM_CMETRICS= 88
		ARW_BOTTOMLEFT= 0
		ARW_BOTTOMRIGHT= 1
		ARW_HIDE= 8
		ARW_TOPLEFT= 2
		ARW_TOPRIGHT= 3
		ARW_DOWN= 4
		ARW_LEFT= 0
		ARW_RIGHT= 0
		ARW_UP= 4
		UOI_FLAGS= 1
		UOI_NAME= 2
		UOI_TYPE= 3
		UOI_USER_SID= 4
		LR_DEFAULTCOLOR= 0
		LR_MONOCHROME= 1
		LR_COLOR= 2
		LR_COPYRETURNORG= 4
		LR_COPYDELETEORG= 8
		LR_LOADFROMFILE= 16
		LR_LOADTRANSPARENT= 32
		LR_LOADREALSIZE= 128
		LR_LOADMAP3DCOLORS= 4096
		LR_CREATEDIBSECTION= 8192
		LR_COPYFROMRESOURCE= 0x4000
		LR_SHARED= 32768
		KEYEVENTF_EXTENDEDKEY= 0x00000001
		KEYEVENTF_KEYUP= 00000002
		OBM_BTNCORNERS= 32758
		OBM_BTSIZE= 32761
		OBM_CHECK= 32760
		OBM_CHECKBOXES= 32759
		OBM_CLOSE= 32754
		OBM_COMBO= 32738
		OBM_DNARROW= 32752
		OBM_DNARROWD= 32742
		OBM_DNARROWI= 32736
		OBM_LFARROW= 32750
		OBM_LFARROWI= 32734
		OBM_LFARROWD= 32740
		OBM_MNARROW= 32739
		OBM_OLD_CLOSE= 32767
		OBM_OLD_DNARROW= 32764
		OBM_OLD_LFARROW= 32762
		OBM_OLD_REDUCE= 32757
		OBM_OLD_RESTORE= 32755
		OBM_OLD_RGARROW= 32763
		OBM_OLD_UPARROW= 32765
		OBM_OLD_ZOOM= 32756
		OBM_REDUCE= 32749
		OBM_REDUCED= 32746
		OBM_RESTORE= 32747
		OBM_RESTORED= 32744
		OBM_RGARROW= 32751
		OBM_RGARROWD= 32741
		OBM_RGARROWI= 32735
		OBM_SIZE= 32766
		OBM_UPARROW= 32753
		OBM_UPARROWD= 32743
		OBM_UPARROWI= 32737
		OBM_ZOOM= 32748
		OBM_ZOOMD= 32745
		OCR_NORMAL= 32512
		OCR_IBEAM= 32513
		OCR_WAIT= 32514
		OCR_CROSS= 32515
		OCR_UP= 32516
		OCR_SIZE= 32640
		OCR_ICON= 32641
		OCR_SIZENWSE= 32642
		OCR_SIZENESW= 32643
		OCR_SIZEWE= 32644
		OCR_SIZENS= 32645
		OCR_SIZEALL= 32646
		OCR_NO= 32648
		OCR_APPSTARTING= 32650
		OIC_SAMPLE= 32512
		OIC_HAND= 32513
		OIC_QUES= 32514
		OIC_BANG= 32515
		OIC_NOTE= 32516
		OIC_WINLOGO= 32517
		OIC_WARNING= 32515
		OIC_ERROR= 32513
		OIC_INFORMATION= 32516
		HELPINFO_MENUITEM= 2
		HELPINFO_WINDOW= 1
		MSGF_DIALOGBOX= 0
		MSGF_MESSAGEBOX= 1
		MSGF_MENU= 2
		MSGF_MOVE= 3
		MSGF_SIZE= 4
		MSGF_SCROLLBAR= 5
		MSGF_NEXTWINDOW= 6
		MSGF_MAINLOOP= 8
		MSGF_USER= 4096
		MOUSEEVENTF_MOVE= 1
		MOUSEEVENTF_LEFTDOWN= 2
		MOUSEEVENTF_LEFTUP= 4
		MOUSEEVENTF_RIGHTDOWN= 8
		MOUSEEVENTF_RIGHTUP= 16
		MOUSEEVENTF_MIDDLEDOWN= 32
		MOUSEEVENTF_MIDDLEUP= 64
		MOUSEEVENTF_WHEEL= 0x0800
		MOUSEEVENTF_ABSOLUTE= 32768
		PM_NOREMOVE= 0
		PM_REMOVE= 1
		PM_NOYIELD= 2
		RDW_ERASE= 4
		RDW_FRAME= 1024
		RDW_INTERNALPAINT= 2
		RDW_INVALIDATE= 1
		RDW_NOERASE= 32
		RDW_NOFRAME= 2048
		RDW_NOINTERNALPAINT= 16
		RDW_VALIDATE= 8
		RDW_ERASENOW= 512
		RDW_UPDATENOW= 256
		RDW_ALLCHILDREN= 128
		RDW_NOCHILDREN= 64
		SMTO_ABORTIFHUNG= 2
		SMTO_BLOCK= 1
		SMTO_NORMAL= 0
		SIF_ALL= 23
		SIF_PAGE= 2
		SIF_POS= 4
		SIF_RANGE= 1
		SIF_DISABLENOSCROLL= 8
		SIF_TRACKPOS= 16
		SWP_DRAWFRAME= 32
		SWP_FRAMECHANGED= 32
		SWP_HIDEWINDOW= 128
		SWP_NOACTIVATE= 16
		SWP_NOCOPYBITS= 256
		SWP_NOMOVE= 2
		SWP_NOSIZE= 1
		SWP_NOREDRAW= 8
		SWP_NOZORDER= 4
		SWP_SHOWWINDOW= 64
		SWP_NOOWNERZORDER= 512
		SWP_NOREPOSITION= 512
		SWP_NOSENDCHANGING= 1024
		SWP_DEFERERASE= 8192
		SWP_ASYNCWINDOWPOS= 16384
		HSHELL_ACTIVATESHELLWINDOW= 3
		HSHELL_GETMINRECT= 5
		HSHELL_LANGUAGE= 8
		HSHELL_REDRAW= 6
		HSHELL_TASKMAN= 7
		HSHELL_WINDOWACTIVATED= 4
		HSHELL_WINDOWCREATED= 1
		HSHELL_WINDOWDESTROYED= 2
		SPI_GETACCESSTIMEOUT= 60
		SPI_GETANIMATION= 72
		SPI_GETBEEP= 1
		SPI_GETBORDER= 5
		SPI_GETDEFAULTINPUTLANG= 89
		SPI_GETDRAGFULLWINDOWS= 38
		SPI_GETFASTTASKSWITCH= 35
		SPI_GETFILTERKEYS= 50
		SPI_GETFONTSMOOTHING= 74
		SPI_GETGRIDGRANULARITY= 18
		SPI_GETHIGHCONTRAST= 66
		SPI_GETICONMETRICS= 45
		SPI_GETICONTITLELOGFONT= 31
		SPI_GETICONTITLEWRAP= 25
		SPI_GETKEYBOARDDELAY= 22
		SPI_GETKEYBOARDPREF= 68
		SPI_GETKEYBOARDSPEED= 10
		SPI_GETLOWPOWERACTIVE= 83
		SPI_GETLOWPOWERTIMEOUT= 79
		SPI_GETMENUDROPALIGNMENT= 27
		SPI_GETMINIMIZEDMETRICS= 43
		SPI_GETMOUSE= 3
		SPI_GETMOUSEKEYS= 54
		SPI_GETMOUSETRAILS= 94
		SPI_GETNONCLIENTMETRICS= 41
		SPI_GETPOWEROFFACTIVE= 84
		SPI_GETPOWEROFFTIMEOUT= 80
		SPI_GETSCREENREADER= 70
		SPI_GETSCREENSAVEACTIVE= 16
		SPI_GETSCREENSAVETIMEOUT= 14
		SPI_GETSERIALKEYS= 62
		SPI_GETSHOWSOUNDS= 56
		SPI_GETSOUNDSENTRY= 64
		SPI_GETSTICKYKEYS= 58
		SPI_GETTOGGLEKEYS= 52
		SPI_GETWINDOWSEXTENSION= 92
		SPI_GETWORKAREA= 48
		SPI_ICONHORIZONTALSPACING= 13
		SPI_ICONVERTICALSPACING= 24
		SPI_LANGDRIVER= 12
		SPI_SCREENSAVERRUNNING= 97
		SPI_SETACCESSTIMEOUT= 61
		SPI_SETANIMATION= 73
		SPI_SETBEEP= 2
		SPI_SETBORDER= 6
		SPI_SETDEFAULTINPUTLANG= 90
		SPI_SETDESKPATTERN= 21
		SPI_SETDESKWALLPAPER= 20
		SPI_SETDOUBLECLICKTIME= 32
		SPI_SETDOUBLECLKHEIGHT= 30
		SPI_SETDOUBLECLKWIDTH= 29
		SPI_SETDRAGFULLWINDOWS= 37
		SPI_SETDRAGHEIGHT= 77
		SPI_SETDRAGWIDTH= 76
		SPI_SETFASTTASKSWITCH= 36
		SPI_SETFILTERKEYS= 51
		SPI_SETFONTSMOOTHING= 75
		SPI_SETGRIDGRANULARITY= 19
		SPI_SETHANDHELD= 78
		SPI_SETHIGHCONTRAST= 67
		SPI_SETICONMETRICS= 46
		SPI_SETICONTITLELOGFONT= 34
		SPI_SETICONTITLEWRAP= 26
		SPI_SETKEYBOARDDELAY= 23
		SPI_SETKEYBOARDPREF= 69
		SPI_SETKEYBOARDSPEED= 11
		SPI_SETLANGTOGGLE= 91
		SPI_SETLOWPOWERACTIVE= 85
		SPI_SETLOWPOWERTIMEOUT= 81
		SPI_SETMENUDROPALIGNMENT= 28
		SPI_SETMINIMIZEDMETRICS= 44
		SPI_SETMOUSE= 4
		SPI_SETMOUSEBUTTONSWAP= 33
		SPI_SETMOUSEKEYS= 55
		SPI_SETMOUSETRAILS= 93
		SPI_SETNONCLIENTMETRICS= 42
		SPI_SETPENWINDOWS= 49
		SPI_SETPOWEROFFACTIVE= 86
		SPI_SETPOWEROFFTIMEOUT= 82
		SPI_SETSCREENREADER= 71
		SPI_SETSCREENSAVEACTIVE= 17
		SPI_SETSCREENSAVERRUNNING= 97
		SPI_SETSCREENSAVETIMEOUT= 15
		SPI_SETSERIALKEYS= 63
		SPI_SETSHOWSOUNDS= 57
		SPI_SETSOUNDSENTRY= 65
		SPI_SETSTICKYKEYS= 59
		SPI_SETTOGGLEKEYS= 53
		SPI_SETWORKAREA= 47
		SPIF_UPDATEINIFILE= 1
		SPIF_SENDWININICHANGE= 2
		SPIF_SENDCHANGE= 2
		WM_APP= 32768
		WM_ACTIVATE= 6
		WM_ACTIVATEAPP= 28
		WM_AFXFIRST= 864
		WM_AFXLAST= 895
		WM_ASKCBFORMATNAME= 780
		WM_CANCELJOURNAL= 75
		WM_CANCELMODE= 31
		WM_CAPTURECHANGED= 533
		WM_CHANGECBCHAIN= 781
		WM_CHAR= 258
		WM_CHARTOITEM= 47
		WM_CHILDACTIVATE= 34
		WM_CLEAR= 771
		WM_CLOSE= 16
		WM_COMMAND= 273
		WM_COMMNOTIFY= 68
		WM_COMPACTING= 65
		WM_COMPAREITEM= 57
		WM_CONTEXTMENU= 123
		WM_COPY= 769
		WM_COPYDATA= 74
		WM_CREATE= 1
		WM_CTLCOLORBTN= 309
		WM_CTLCOLORDLG= 310
		WM_CTLCOLOREDIT= 307
		WM_CTLCOLORLISTBOX= 308
		WM_CTLCOLORMSGBOX= 306
		WM_CTLCOLORSCROLLBAR= 311
		WM_CTLCOLORSTATIC= 312
		WM_CUT= 768
		WM_DEADCHAR= 259
		WM_DELETEITEM= 45
		WM_DESTROY= 2
		WM_DESTROYCLIPBOARD= 775
		WM_DEVICECHANGE= 537
		WM_DEVMODECHANGE= 27
		WM_DISPLAYCHANGE= 126
		WM_DRAWCLIPBOARD= 776
		WM_DRAWITEM= 43
		WM_DROPFILES= 563
		WM_ENABLE= 10
		WM_ENDSESSION= 22
		WM_ENTERIDLE= 289
		WM_ENTERMENULOOP= 529
		WM_ENTERSIZEMOVE= 561
		WM_ERASEBKGND= 20
		WM_EXITMENULOOP= 530
		WM_EXITSIZEMOVE= 562
		WM_FONTCHANGE= 29
		WM_GETDLGCODE= 135
		WM_GETFONT= 49
		WM_GETHOTKEY= 51
		WM_GETICON= 127
		WM_GETMINMAXINFO= 36
		WM_GETTEXT= 13
		WM_GETTEXTLENGTH= 14
		WM_HANDHELDFIRST= 856
		WM_HANDHELDLAST= 863
		WM_HELP= 83
		WM_HOTKEY= 786
		WM_HSCROLL= 276
		WM_HSCROLLCLIPBOARD= 782
		WM_ICONERASEBKGND= 39
		WM_INITDIALOG= 272
		WM_INITMENU= 278
		WM_INITMENUPOPUP= 279
		WM_INPUTLANGCHANGE= 81
		WM_INPUTLANGCHANGEREQUEST= 80
		WM_KEYDOWN= 256
		WM_KEYUP= 257
		WM_KILLFOCUS= 8
		WM_MDIACTIVATE= 546
		WM_MDICASCADE= 551
		WM_MDICREATE= 544
		WM_MDIDESTROY= 545
		WM_MDIGETACTIVE= 553
		WM_MDIICONARRANGE= 552
		WM_MDIMAXIMIZE= 549
		WM_MDINEXT= 548
		WM_MDIREFRESHMENU= 564
		WM_MDIRESTORE= 547
		WM_MDISETMENU= 560
		WM_MDITILE= 550
		WM_MEASUREITEM= 44
		WM_MENUCHAR= 288
		WM_MENUSELECT= 287
		WM_NEXTMENU= 531
		WM_MOVE= 3
		WM_MOVING= 534
		WM_NCACTIVATE= 134
		WM_NCCALCSIZE= 131
		WM_NCCREATE= 129
		WM_NCDESTROY= 130
		WM_NCHITTEST= 132
		WM_NCLBUTTONDBLCLK= 163
		WM_NCLBUTTONDOWN= 161
		WM_NCLBUTTONUP= 162
		WM_NCMBUTTONDBLCLK= 169
		WM_NCMBUTTONDOWN= 167
		WM_NCMBUTTONUP= 168
		WM_NCMOUSEMOVE= 160
		WM_NCPAINT= 133
		WM_NCRBUTTONDBLCLK= 166
		WM_NCRBUTTONDOWN= 164
		WM_NCRBUTTONUP= 165
		WM_NEXTDLGCTL= 40
		WM_NOTIFY= 78
		WM_NOTIFYFORMAT= 85
		WM_NULL= 0
		WM_PAINT= 15
		WM_PAINTCLIPBOARD= 777
		WM_PAINTICON= 38
		WM_PALETTECHANGED= 785
		WM_PALETTEISCHANGING= 784
		WM_PARENTNOTIFY= 528
		WM_PASTE= 770
		WM_PENWINFIRST= 896
		WM_PENWINLAST= 911
		WM_POWER= 72
		WM_POWERBROADCAST= 536
		WM_PRINT= 791
		WM_PRINTCLIENT= 792
		WM_QUERYDRAGICON= 55
		WM_QUERYENDSESSION= 17
		WM_QUERYNEWPALETTE= 783
		WM_QUERYOPEN= 19
		WM_QUEUESYNC= 35
		WM_QUIT= 18
		WM_RENDERALLFORMATS= 774
		WM_RENDERFORMAT= 773
		WM_SETCURSOR= 32
		WM_SETFOCUS= 7
		WM_SETFONT= 48
		WM_SETHOTKEY= 50
		WM_SETICON= 128
		WM_SETREDRAW= 11
		WM_SETTEXT= 12
		WM_SETTINGCHANGE= 26
		WM_SHOWWINDOW= 24
		WM_SIZE= 5
		WM_SIZECLIPBOARD= 779
		WM_SIZING= 532
		WM_SPOOLERSTATUS= 42
		WM_STYLECHANGED= 125
		WM_STYLECHANGING= 124
		WM_SYSCHAR= 262
		WM_SYSCOLORCHANGE= 21
		WM_SYSCOMMAND= 274
		WM_SYSDEADCHAR= 263
		WM_SYSKEYDOWN= 260
		WM_SYSKEYUP= 261
		WM_TCARD= 82
		WM_TIMECHANGE= 30
		WM_TIMER= 275
		WM_UNDO= 772
		WM_USER= 1024
		WM_USERCHANGED= 84
		WM_VKEYTOITEM= 46
		WM_VSCROLL= 277
		WM_VSCROLLCLIPBOARD= 778
		WM_WINDOWPOSCHANGED= 71
		WM_WINDOWPOSCHANGING= 70
		WM_WININICHANGE= 26
		WM_KEYFIRST= 256
		WM_KEYLAST= 264
		WM_SYNCPAINT= 136
		WM_MOUSEACTIVATE= 33
		WM_MOUSEMOVE= 512
		WM_LBUTTONDOWN= 513
		WM_LBUTTONUP= 514
		WM_LBUTTONDBLCLK= 515
		WM_RBUTTONDOWN= 516
		WM_RBUTTONUP= 517
		WM_RBUTTONDBLCLK= 518
		WM_MBUTTONDOWN= 519
		WM_MBUTTONUP= 520
		WM_MBUTTONDBLCLK= 521
		WM_MOUSEWHEEL= 522
		WM_MOUSEFIRST= 512
		WM_MOUSELAST= 522
		WM_MOUSEHOVER= 0x2A1
		WM_MOUSELEAVE= 0x2A3
		WHEEL_DELTA= 120
		BM_CLICK= 245
		BM_GETCHECK= 240
		BM_GETIMAGE= 246
		BM_GETSTATE= 242
		BM_SETCHECK= 241
		BM_SETIMAGE= 247
		BM_SETSTATE= 243
		BM_SETSTYLE= 244
		BN_CLICKED= 0
		BN_DBLCLK= 5
		BN_DISABLE= 4
		BN_DOUBLECLICKED= 5
		BN_HILITE= 2
		BN_KILLFOCUS= 7
		BN_PAINT= 1
		BN_PUSHED= 2
		BN_SETFOCUS= 6
		BN_UNHILITE= 3
		BN_UNPUSHED= 3
		CB_ADDSTRING= 323
		CB_DELETESTRING= 324
		CB_DIR= 325
		CB_FINDSTRING= 332
		CB_FINDSTRINGEXACT= 344
		CB_GETCOUNT= 326
		CB_GETCURSEL= 327
		CB_GETDROPPEDCONTROLRECT= 338
		CB_GETDROPPEDSTATE= 343
		CB_GETDROPPEDWIDTH= 351
		CB_GETEDITSEL= 320
		CB_GETEXTENDEDUI= 342
		CB_GETHORIZONTALEXTENT= 349
		CB_GETITEMDATA= 336
		CB_GETITEMHEIGHT= 340
		CB_GETLBTEXT= 328
		CB_GETLBTEXTLEN= 329
		CB_GETLOCALE= 346
		CB_GETTOPINDEX= 347
		CB_INITSTORAGE= 353
		CB_INSERTSTRING= 330
		CB_LIMITTEXT= 321
		CB_RESETCONTENT= 331
		CB_SELECTSTRING= 333
		CB_SETCURSEL= 334
		CB_SETDROPPEDWIDTH= 352
		CB_SETEDITSEL= 322
		CB_SETEXTENDEDUI= 341
		CB_SETHORIZONTALEXTENT= 350
		CB_SETITEMDATA= 337
		CB_SETITEMHEIGHT= 339
		CB_SETLOCALE= 345
		CB_SETTOPINDEX= 348
		CB_SHOWDROPDOWN= 335
		CBN_CLOSEUP= 8
		CBN_DBLCLK= 2
		CBN_DROPDOWN= 7
		CBN_EDITCHANGE= 5
		CBN_EDITUPDATE= 6
		CBN_ERRSPACE= (-1)
		CBN_KILLFOCUS= 4
		CBN_SELCHANGE= 1
		CBN_SELENDCANCEL= 10
		CBN_SELENDOK= 9
		CBN_SETFOCUS= 3
		EM_CANUNDO= 198
		EM_CHARFROMPOS= 215
		EM_EMPTYUNDOBUFFER= 205
		EM_FMTLINES= 200
		EM_GETFIRSTVISIBLELINE= 206
		EM_GETHANDLE= 189
		EM_GETLIMITTEXT= 213
		EM_GETLINE= 196
		EM_GETLINECOUNT= 186
		EM_GETMARGINS= 212
		EM_GETMODIFY= 184
		EM_GETPASSWORDCHAR= 210
		EM_GETRECT= 178
		EM_GETSEL= 176
		EM_GETTHUMB= 190
		EM_GETWORDBREAKPROC= 209
		EM_LIMITTEXT= 197
		EM_LINEFROMCHAR= 201
		EM_LINEINDEX= 187
		EM_LINELENGTH= 193
		EM_LINESCROLL= 182
		EM_POSFROMCHAR= 214
		EM_REPLACESEL= 194
		EM_SCROLL= 181
		EM_SCROLLCARET= 183
		EM_SETHANDLE= 188
		EM_SETLIMITTEXT= 197
		EM_SETMARGINS= 211
		EM_SETMODIFY= 185
		EM_SETPASSWORDCHAR= 204
		EM_SETREADONLY= 207
		EM_SETRECT= 179
		EM_SETRECTNP= 180
		EM_SETSEL= 177
		EM_SETTABSTOPS= 203
		EM_SETWORDBREAKPROC= 208
		EM_UNDO= 199
		EN_CHANGE= 768
		EN_ERRSPACE= 1280
		EN_HSCROLL= 1537
		EN_KILLFOCUS= 512
		EN_MAXTEXT= 1281
		EN_SETFOCUS= 256
		EN_UPDATE= 1024
		EN_VSCROLL= 1538
		LB_ADDFILE= 406
		LB_ADDSTRING= 384
		LB_DELETESTRING= 386
		LB_DIR= 397
		LB_FINDSTRING= 399
		LB_FINDSTRINGEXACT= 418
		LB_GETANCHORINDEX= 413
		LB_GETCARETINDEX= 415
		LB_GETCOUNT= 395
		LB_GETCURSEL= 392
		LB_GETHORIZONTALEXTENT= 403
		LB_GETITEMDATA= 409
		LB_GETITEMHEIGHT= 417
		LB_GETITEMRECT= 408
		LB_GETLOCALE= 422
		LB_GETSEL= 391
		LB_GETSELCOUNT= 400
		LB_GETSELITEMS= 401
		LB_GETTEXT= 393
		LB_GETTEXTLEN= 394
		LB_GETTOPINDEX= 398
		LB_INITSTORAGE= 424
		LB_INSERTSTRING= 385
		LB_ITEMFROMPOINT= 425
		LB_RESETCONTENT= 388
		LB_SELECTSTRING= 396
		LB_SELITEMRANGE= 411
		LB_SELITEMRANGEEX= 387
		LB_SETANCHORINDEX= 412
		LB_SETCARETINDEX= 414
		LB_SETCOLUMNWIDTH= 405
		LB_SETCOUNT= 423
		LB_SETCURSEL= 390
		LB_SETHORIZONTALEXTENT= 404
		LB_SETITEMDATA= 410
		LB_SETITEMHEIGHT= 416
		LB_SETLOCALE= 421
		LB_SETSEL= 389
		LB_SETTABSTOPS= 402
		LB_SETTOPINDEX= 407
		LBN_DBLCLK= 2
		LBN_ERRSPACE= (-2)
		LBN_KILLFOCUS= 5
		LBN_SELCANCEL= 3
		LBN_SELCHANGE= 1
		LBN_SETFOCUS= 4
		SBM_ENABLE_ARROWS= 228
		SBM_GETPOS= 225
		SBM_GETRANGE= 227
		SBM_GETSCROLLINFO= 234
		SBM_SETPOS= 224
		SBM_SETRANGE= 226
		SBM_SETRANGEREDRAW= 230
		SBM_SETSCROLLINFO= 233
		STM_GETICON= 369
		STM_GETIMAGE= 371
		STM_SETICON= 368
		STM_SETIMAGE= 370
		STN_CLICKED= 0
		STN_DBLCLK= 1
		STN_DISABLE= 3
		STN_ENABLE= 2
		DM_GETDEFID= 1024
		DM_SETDEFID= (1024 +1)
		DM_REPOSITION= (1024 +2)
		PSM_PAGEINFO= (1024 +100)
		PSM_SHEETINFO= (1024 +101)
		PSI_SETACTIVE= 1
		PSI_KILLACTIVE= 2
		PSI_APPLY= 3
		PSI_RESET= 4
		PSI_HASHELP= 5
		PSI_HELP= 6
		PSI_CHANGED= 1
		PSI_GUISTART= 2
		PSI_REBOOT= 3
		PSI_GETSIBLINGS= 4
		DCX_WINDOW= 1
		DCX_CACHE= 2
		DCX_PARENTCLIP= 32
		DCX_CLIPSIBLINGS= 16
		DCX_CLIPCHILDREN= 8
		DCX_NORESETATTRS= 4
		DCX_LOCKWINDOWUPDATE= 0x400
		DCX_EXCLUDERGN= 64
		DCX_INTERSECTRGN= 128
		DCX_VALIDATE= 0x200000
		GMDI_GOINTOPOPUPS= 2
		GMDI_USEDISABLED= 1
		FKF_AVAILABLE= 2
		FKF_CLICKON= 64
		FKF_FILTERKEYSON= 1
		FKF_HOTKEYACTIVE= 4
		FKF_HOTKEYSOUND= 16
		FKF_CONFIRMHOTKEY= 8
		FKF_INDICATOR= 32
		HCF_HIGHCONTRASTON= 1
		HCF_AVAILABLE= 2
		HCF_HOTKEYACTIVE= 4
		HCF_CONFIRMHOTKEY= 8
		HCF_HOTKEYSOUND= 16
		HCF_INDICATOR= 32
		HCF_HOTKEYAVAILABLE= 64
		MKF_AVAILABLE= 2
		MKF_CONFIRMHOTKEY= 8
		MKF_HOTKEYACTIVE= 4
		MKF_HOTKEYSOUND= 16
		MKF_INDICATOR= 32
		MKF_MOUSEKEYSON= 1
		MKF_MODIFIERS= 64
		MKF_REPLACENUMBERS= 128
		SERKF_ACTIVE= 8
		SERKF_AVAILABLE= 2
		SERKF_INDICATOR= 4
		SERKF_SERIALKEYSON= 1
		SSF_AVAILABLE= 2
		SSF_SOUNDSENTRYON= 1
		SSTF_BORDER= 2
		SSTF_CHARS= 1
		SSTF_DISPLAY= 3
		SSTF_NONE= 0
		SSGF_DISPLAY= 3
		SSGF_NONE= 0
		SSWF_CUSTOM= 4
		SSWF_DISPLAY= 3
		SSWF_NONE= 0
		SSWF_TITLE= 1
		SSWF_WINDOW= 2
		SKF_AUDIBLEFEEDBACK= 64
		SKF_AVAILABLE= 2
		SKF_CONFIRMHOTKEY= 8
		SKF_HOTKEYACTIVE= 4
		SKF_HOTKEYSOUND= 16
		SKF_INDICATOR= 32
		SKF_STICKYKEYSON= 1
		SKF_TRISTATE= 128
		SKF_TWOKEYSOFF= 256
		TKF_AVAILABLE= 2
		TKF_CONFIRMHOTKEY= 8
		TKF_HOTKEYACTIVE= 4
		TKF_HOTKEYSOUND= 16
		TKF_TOGGLEKEYSON= 1
		MDITILE_SKIPDISABLED= 2
		MDITILE_HORIZONTAL= 1
		MDITILE_VERTICAL= 0
		VK_LBUTTON= 1
		VK_RBUTTON= 2
		VK_CANCEL= 3
		VK_MBUTTON= 4
		VK_BACK= 8
		VK_TAB= 9
		VK_CLEAR= 12
		VK_RETURN= 13
		VK_KANA= 0x15
		VK_SHIFT= 16
		VK_CONTROL= 17
		VK_MENU= 18
		VK_PAUSE= 19
		VK_CAPITAL= 20
		VK_ESCAPE= 0x1B
		VK_SPACE= 32
		VK_PRIOR= 33
		VK_NEXT= 34
		VK_END= 35
		VK_HOME= 36
		VK_LEFT= 37
		VK_UP= 38
		VK_RIGHT= 39
		VK_DOWN= 40
		VK_SELECT= 41
		VK_PRINT= 42
		VK_EXECUTE= 43
		VK_SNAPSHOT= 44
		VK_INSERT= 45
		VK_DELETE= 46
		VK_HELP= 47
		VK_LWIN= 0x5B
		VK_RWIN= 0x5C
		VK_APPS= 0x5D
		VK_NUMPAD0= 0x60
		VK_NUMPAD1= 0x61
		VK_NUMPAD2= 0x62
		VK_NUMPAD3= 0x63
		VK_NUMPAD4= 0x64
		VK_NUMPAD5= 0x65
		VK_NUMPAD6= 0x66
		VK_NUMPAD7= 0x67
		VK_NUMPAD8= 0x68
		VK_NUMPAD9= 0x69
		VK_MULTIPLY= 0x6A
		VK_ADD= 0x6B
		VK_SEPARATOR= 0x6C
		VK_SUBTRACT= 0x6D
		VK_DECIMAL= 0x6E
		VK_DIVIDE= 0x6F
		VK_F1= 0x70
		VK_F2= 0x71
		VK_F3= 0x72
		VK_F4= 0x73
		VK_F5= 0x74
		VK_F6= 0x75
		VK_F7= 0x76
		VK_F8= 0x77
		VK_F9= 0x78
		VK_F10= 0x79
		VK_F11= 0x7A
		VK_F12= 0x7B
		VK_F13= 0x7C
		VK_F14= 0x7D
		VK_F15= 0x7E
		VK_F16= 0x7F
		VK_F17= 0x80
		VK_F18= 0x81
		VK_F19= 0x82
		VK_F20= 0x83
		VK_F21= 0x84
		VK_F22= 0x85
		VK_F23= 0x86
		VK_F24= 0x87
		VK_NUMLOCK= 0x90
		VK_SCROLL= 0x91
		VK_LSHIFT= 0xA0
		VK_RSHIFT= 0xA1
		VK_LCONTROL= 0xA2
		VK_RCONTROL= 0xA3
		VK_LMENU= 0xA4
		VK_RMENU= 0xA5
		VK_PROCESSKEY= 0xE5
		VK_ATTN= 0xF6
		VK_CRSEL= 0xF7
		VK_EXSEL= 0xF8
		VK_EREOF= 0xF9
		VK_PLAY= 0xFA
		VK_ZOOM= 0xFB
		VK_NONAME= 0xFC
		VK_PA1= 0xFD
		VK_OEM_CLEAR= 0xFE
		TME_HOVER= 1
		TME_LEAVE= 2
		TME_QUERY= 0x40000000
		TME_CANCEL= 0x80000000
		HOVER_DEFAULT= 0xFFFFFFFF
		MK_LBUTTON= 1
		MK_RBUTTON= 2
		MK_SHIFT= 4
		MK_CONTROL= 8
		MK_MBUTTON= 16
		TPM_CENTERALIGN= 4
		TPM_LEFTALIGN= 0
		TPM_RIGHTALIGN= 8
		TPM_LEFTBUTTON= 0
		TPM_RIGHTBUTTON= 2
		TPM_HORIZONTAL= 0
		TPM_VERTICAL= 64
		TPM_TOPALIGN= 0
		TPM_VCENTERALIGN= 16
		TPM_BOTTOMALIGN= 32
		TPM_NONOTIFY= 128
		TPM_RETURNCMD= 256
		HELP_COMMAND= 0x102
		HELP_CONTENTS= 3
		HELP_CONTEXT= 1
		HELP_CONTEXTPOPUP= 8
		HELP_FORCEFILE= 9
		HELP_HELPONHELP= 4
		HELP_INDEX= 3
		HELP_KEY= 0x101
		HELP_MULTIKEY= 0x201
		HELP_PARTIALKEY= 0x105
		HELP_QUIT= 2
		HELP_SETCONTENTS= 5
		HELP_SETINDEX= 5
		HELP_CONTEXTMENU= 0xa
		HELP_FINDER= 0xb
		HELP_WM_HELP= 0xc
		HELP_TCARD= 0x8000
		HELP_TCARD_DATA= 16
		HELP_TCARD_OTHER_CALLER= 0x11
		IDH_NO_HELP= 28440
		IDH_MISSING_CONTEXT= 28441
		IDH_GENERIC_HELP_BUTTON= 28442
		IDH_OK= 28443
		IDH_CANCEL= 28444
		IDH_HELP= 28445
		LB_CTLCODE= 0
		LB_OKAY= 0
		LB_ERR= (-1)
		LB_ERRSPACE= (-2)
		CB_OKAY= 0
		CB_ERR= (-1)
		CB_ERRSPACE= (-2)
		HIDE_WINDOW= 0
		SHOW_OPENWINDOW= 1
		SHOW_ICONWINDOW= 2
		SHOW_FULLSCREEN= 3
		SHOW_OPENNOACTIVATE= 4
		SW_PARENTCLOSING= 1
		SW_OTHERZOOM= 2
		SW_PARENTOPENING= 3
		SW_OTHERUNZOOM= 4
		KF_EXTENDED= 256
		KF_DLGMODE= 2048
		KF_MENUMODE= 4096
		KF_ALTDOWN= 8192
		KF_REPEAT= 16384
		KF_UP= 32768
		WSF_VISIBLE= 1
		PWR_OK= 1
		PWR_FAIL= (-1)
		PWR_SUSPENDREQUEST= 1
		PWR_SUSPENDRESUME= 2
		PWR_CRITICALRESUME= 3
		NFR_ANSI= 1
		NFR_UNICODE= 2
		NF_QUERY= 3
		NF_REQUERY= 4
		MENULOOP_WINDOW= 0
		MENULOOP_POPUP= 1
		WMSZ_LEFT= 1
		WMSZ_RIGHT= 2
		WMSZ_TOP= 3
		WMSZ_TOPLEFT= 4
		WMSZ_TOPRIGHT= 5
		WMSZ_BOTTOM= 6
		WMSZ_BOTTOMLEFT= 7
		WMSZ_BOTTOMRIGHT= 8
		HTERROR= (-2)
		HTTRANSPARENT= (-1)
		HTNOWHERE= 0
		HTCLIENT= 1
		HTCAPTION= 2
		HTSYSMENU= 3
		HTGROWBOX= 4
		HTSIZE= 4
		HTMENU= 5
		HTHSCROLL= 6
		HTVSCROLL= 7
		HTMINBUTTON= 8
		HTMAXBUTTON= 9
		HTREDUCE= 8
		HTZOOM= 9
		HTLEFT= 10
		HTSIZEFIRST= 10
		HTRIGHT= 11
		HTTOP= 12
		HTTOPLEFT= 13
		HTTOPRIGHT= 14
		HTBOTTOM= 15
		HTBOTTOMLEFT= 16
		HTBOTTOMRIGHT= 17
		HTSIZELAST= 17
		HTBORDER= 18
		HTOBJECT= 19
		HTCLOSE= 20
		HTHELP= 21
		MA_ACTIVATE= 1
		MA_ACTIVATEANDEAT= 2
		MA_NOACTIVATE= 3
		MA_NOACTIVATEANDEAT= 4
		SIZE_RESTORED= 0
		SIZE_MINIMIZED= 1
		SIZE_MAXIMIZED= 2
		SIZE_MAXSHOW= 3
		SIZE_MAXHIDE= 4
		SIZENORMAL= 0
		SIZEICONIC= 1
		SIZEFULLSCREEN= 2
		SIZEZOOMSHOW= 3
		SIZEZOOMHIDE= 4
		WVR_ALIGNTOP= 16
		WVR_ALIGNLEFT= 32
		WVR_ALIGNBOTTOM= 64
		WVR_ALIGNRIGHT= 128
		WVR_HREDRAW= 256
		WVR_VREDRAW= 512
		WVR_REDRAW= (256|512)
		WVR_VALIDRECTS= 1024
		PRF_CHECKVISIBLE= 1
		PRF_NONCLIENT= 2
		PRF_CLIENT= 4
		PRF_ERASEBKGND= 8
		PRF_CHILDREN= 16
		PRF_OWNED= 32
		IDANI_OPEN= 1
		IDANI_CLOSE= 2
		IDANI_CAPTION= 3
		WPF_RESTORETOMAXIMIZED= 2
		WPF_SETMINPOSITION= 1
		ODT_MENU= 1
		ODT_LISTBOX= 2
		ODT_COMBOBOX= 3
		ODT_BUTTON= 4
		ODT_STATIC= 5
		ODA_DRAWENTIRE= 1
		ODA_SELECT= 2
		ODA_FOCUS= 4
		ODS_SELECTED= 1
		ODS_GRAYED= 2
		ODS_DISABLED= 4
		ODS_CHECKED= 8
		ODS_FOCUS= 16
		ODS_DEFAULT= 32
		ODS_COMBOBOXEDIT= 4096
		IDHOT_SNAPWINDOW= (-1)
		IDHOT_SNAPDESKTOP= (-2)
		DBWF_LPARAMPOINTER= 0x8000
		DLGWINDOWEXTRA= 30
		MNC_IGNORE= 0
		MNC_CLOSE= 1
		MNC_EXECUTE= 2
		MNC_SELECT= 3
		DOF_EXECUTABLE= 0x8001
		DOF_DOCUMENT= 0x8002
		DOF_DIRECTORY= 0x8003
		DOF_MULTIPLE= 0x8004
		DOF_PROGMAN= 1
		DOF_SHELLDATA= 2
		DO_DROPFILE= 0x454C4946
		DO_PRINTFILE= 0x544E5250
		SW_SCROLLCHILDREN= 1
		SW_INVALIDATE= 2
		SW_ERASE= 4
		SC_SIZE= 0xF000
		SC_MOVE= 0xF010
		SC_MINIMIZE= 0xF020
		SC_ICON= 0xf020
		SC_MAXIMIZE= 0xF030
		SC_ZOOM= 0xF030
		SC_NEXTWINDOW= 0xF040
		SC_PREVWINDOW= 0xF050
		SC_CLOSE= 0xF060
		SC_VSCROLL= 0xF070
		SC_HSCROLL= 0xF080
		SC_MOUSEMENU= 0xF090
		SC_KEYMENU= 0xF100
		SC_ARRANGE= 0xF110
		SC_RESTORE= 0xF120
		SC_TASKLIST= 0xF130
		SC_SCREENSAVE= 0xF140
		SC_HOTKEY= 0xF150
		SC_DEFAULT= 0xF160
		SC_MONITORPOWER= 0xF170
		SC_CONTEXTHELP= 0xF180
		SC_SEPARATOR= 0xF00F
		EC_LEFTMARGIN= 1
		EC_RIGHTMARGIN= 2
		EC_USEFONTINFO= 0xffff
		DC_HASDEFID= 0x534B
		DLGC_WANTARROWS= 1
		DLGC_WANTTAB= 2
		DLGC_WANTALLKEYS= 4
		DLGC_WANTMESSAGE= 4
		DLGC_HASSETSEL= 8
		DLGC_DEFPUSHBUTTON= 16
		DLGC_UNDEFPUSHBUTTON= 32
		DLGC_RADIOBUTTON= 64
		DLGC_WANTCHARS= 128
		DLGC_STATIC= 256
		DLGC_BUTTON= 0x2000
		WA_INACTIVE= 0
		WA_ACTIVE= 1
		WA_CLICKACTIVE= 2
		ICON_SMALL= 0
		ICON_BIG= 1
		MOD_ALT= 1
		MOD_CONTROL= 2
		MOD_SHIFT= 4
		MOD_WIN= 8
		MOD_IGNORE_ALL_MODIFIER= 1024
		MOD_ON_KEYUP= 2048
		MOD_RIGHT= 16384
		MOD_LEFT= 32768
		LLKHF_ALTDOWN= (8192 >> 8)
		CCHILDREN_SCROLLBAR= 5
		CCHILDREN_TITLEBAR= 5
		MAX_LEADBYTES= 12
		MAX_DEFAULTCHAR= 2
		LOCALE_NOUSEROVERRIDE= 0x80000000
		LOCALE_USE_CP_ACP= 0x40000000
		LOCALE_ILANGUAGE= 1
		LOCALE_SLANGUAGE= 2
		LOCALE_SENGLANGUAGE= 0x1001
		LOCALE_SABBREVLANGNAME= 3
		LOCALE_SNATIVELANGNAME= 4
		LOCALE_ICOUNTRY= 5
		LOCALE_SCOUNTRY= 6
		LOCALE_SENGCOUNTRY= 0x1002
		LOCALE_SABBREVCTRYNAME= 7
		LOCALE_SNATIVECTRYNAME= 8
		LOCALE_IDEFAULTLANGUAGE= 9
		LOCALE_IDEFAULTCOUNTRY= 10
		LOCALE_IDEFAULTCODEPAGE= 11
		LOCALE_IDEFAULTANSICODEPAGE= 0x1004
		LOCALE_SLIST= 12
		LOCALE_IMEASURE= 13
		LOCALE_SDECIMAL= 14
		LOCALE_STHOUSAND= 15
		LOCALE_SGROUPING= 16
		LOCALE_IDIGITS= 17
		LOCALE_ILZERO= 18
		LOCALE_INEGNUMBER= 0x1010
		LOCALE_SNATIVEDIGITS= 19
		LOCALE_SCURRENCY= 20
		LOCALE_SINTLSYMBOL= 21
		LOCALE_SMONDECIMALSEP= 22
		LOCALE_SMONTHOUSANDSEP= 23
		LOCALE_SMONGROUPING= 24
		LOCALE_ICURRDIGITS= 25
		LOCALE_IINTLCURRDIGITS= 26
		LOCALE_ICURRENCY= 27
		LOCALE_INEGCURR= 28
		LOCALE_SDATE= 29
		LOCALE_STIME= 30
		LOCALE_SSHORTDATE= 31
		LOCALE_SLONGDATE= 32
		LOCALE_STIMEFORMAT= 0x1003
		LOCALE_IDATE= 33
		LOCALE_ILDATE= 34
		LOCALE_ITIME= 35
		LOCALE_ITIMEMARKPOSN= 0x1005
		LOCALE_ICENTURY= 36
		LOCALE_ITLZERO= 37
		LOCALE_IDAYLZERO= 38
		LOCALE_IMONLZERO= 39
		LOCALE_S1159= 40
		LOCALE_S2359= 41
		LOCALE_ICALENDARTYPE= 0x1009
		LOCALE_IOPTIONALCALENDAR= 0x100B
		LOCALE_IFIRSTDAYOFWEEK= 0x100C
		LOCALE_IFIRSTWEEKOFYEAR= 0x100D
		LOCALE_SDAYNAME1= 42
		LOCALE_SDAYNAME2= 43
		LOCALE_SDAYNAME3= 44
		LOCALE_SDAYNAME4= 45
		LOCALE_SDAYNAME5= 46
		LOCALE_SDAYNAME6= 47
		LOCALE_SDAYNAME7= 48
		LOCALE_SABBREVDAYNAME1= 49
		LOCALE_SABBREVDAYNAME2= 50
		LOCALE_SABBREVDAYNAME3= 51
		LOCALE_SABBREVDAYNAME4= 52
		LOCALE_SABBREVDAYNAME5= 53
		LOCALE_SABBREVDAYNAME6= 54
		LOCALE_SABBREVDAYNAME7= 55
		LOCALE_SMONTHNAME1= 56
		LOCALE_SMONTHNAME2= 57
		LOCALE_SMONTHNAME3= 58
		LOCALE_SMONTHNAME4= 59
		LOCALE_SMONTHNAME5= 60
		LOCALE_SMONTHNAME6= 61
		LOCALE_SMONTHNAME7= 62
		LOCALE_SMONTHNAME8= 63
		LOCALE_SMONTHNAME9= 64
		LOCALE_SMONTHNAME10= 65
		LOCALE_SMONTHNAME11= 66
		LOCALE_SMONTHNAME12= 67
		LOCALE_SMONTHNAME13= 0x100E
		LOCALE_SABBREVMONTHNAME1= 68
		LOCALE_SABBREVMONTHNAME2= 69
		LOCALE_SABBREVMONTHNAME3= 70
		LOCALE_SABBREVMONTHNAME4= 71
		LOCALE_SABBREVMONTHNAME5= 72
		LOCALE_SABBREVMONTHNAME6= 73
		LOCALE_SABBREVMONTHNAME7= 74
		LOCALE_SABBREVMONTHNAME8= 75
		LOCALE_SABBREVMONTHNAME9= 76
		LOCALE_SABBREVMONTHNAME10= 77
		LOCALE_SABBREVMONTHNAME11= 78
		LOCALE_SABBREVMONTHNAME12= 79
		LOCALE_SABBREVMONTHNAME13= 0x100F
		LOCALE_SPOSITIVESIGN= 80
		LOCALE_SNEGATIVESIGN= 81
		LOCALE_IPOSSIGNPOSN= 82
		LOCALE_INEGSIGNPOSN= 83
		LOCALE_IPOSSYMPRECEDES= 84
		LOCALE_IPOSSEPBYSPACE= 85
		LOCALE_INEGSYMPRECEDES= 86
		LOCALE_INEGSEPBYSPACE= 87
		LOCALE_FONTSIGNATURE= 88
		LOCALE_SISO639LANGNAME= 89
		LOCALE_SISO3166CTRYNAME= 90
		LOCALE_SYSTEM_DEFAULT= 0x800
		LOCALE_USER_DEFAULT= 0x400
		NORM_IGNORECASE= 1
		NORM_IGNOREKANATYPE= 65536
		NORM_IGNORENONSPACE= 2
		NORM_IGNORESYMBOLS= 4
		NORM_IGNOREWIDTH= 131072
		SORT_STRINGSORT= 4096
		LCMAP_LOWERCASE= 0x00000100
		LCMAP_UPPERCASE= 0x00000200
		LCMAP_SORTKEY= 0x00000400
		LCMAP_BYTEREV= 0x00000800
		LCMAP_HIRAGANA= 0x00100000
		LCMAP_KATAKANA= 0x00200000
		LCMAP_HALFWIDTH= 0x00400000
		LCMAP_FULLWIDTH= 0x00800000
		LCMAP_LINGUISTIC_CASING= 0x01000000
		LCMAP_SIMPLIFIED_CHINESE= 0x02000000
		LCMAP_TRADITIONAL_CHINESE= 0x04000000
		ENUM_ALL_CALENDARS= (-1)
		DATE_SHORTDATE= 1
		DATE_LONGDATE= 2
		DATE_USE_ALT_CALENDAR= 4
		CP_INSTALLED= 1
		CP_SUPPORTED= 2
		LCID_INSTALLED= 1
		LCID_SUPPORTED= 2
		LCID_ALTERNATE_SORTS= 4
		MAP_FOLDCZONE= 16
		MAP_FOLDDIGITS= 128
		MAP_PRECOMPOSED= 32
		MAP_COMPOSITE= 64
		CP_ACP= 0
		CP_OEMCP= 1
		CP_MACCP= 2
		CP_THREAD_ACP= 3
		CP_SYMBOL= 42
		CP_UTF7= 65000
		CP_UTF8= 65001
		CT_CTYPE1= 1
		CT_CTYPE2= 2
		CT_CTYPE3= 4
		C1_UPPER= 1
		C1_LOWER= 2
		C1_DIGIT= 4
		C1_SPACE= 8
		C1_PUNCT= 16
		C1_CNTRL= 32
		C1_BLANK= 64
		C1_XDIGIT= 128
		C1_ALPHA= 256
		C2_LEFTTORIGHT= 1
		C2_RIGHTTOLEFT= 2
		C2_EUROPENUMBER= 3
		C2_EUROPESEPARATOR= 4
		C2_EUROPETERMINATOR= 5
		C2_ARABICNUMBER= 6
		C2_COMMONSEPARATOR= 7
		C2_BLOCKSEPARATOR= 8
		C2_SEGMENTSEPARATOR= 9
		C2_WHITESPACE= 10
		C2_OTHERNEUTRAL= 11
		C2_NOTAPPLICABLE= 0
		C3_NONSPACING= 1
		C3_DIACRITIC= 2
		C3_VOWELMARK= 4
		C3_SYMBOL= 8
		C3_KATAKANA= 16
		C3_HIRAGANA= 32
		C3_HALFWIDTH= 64
		C3_FULLWIDTH= 128
		C3_IDEOGRAPH= 256
		C3_KASHIDA= 512
		C3_LEXICAL= 1024
		C3_ALPHA= 32768
		C3_NOTAPPLICABLE= 0
		TIME_NOMINUTESORSECONDS= 1
		TIME_NOSECONDS= 2
		TIME_NOTIMEMARKER= 4
		TIME_FORCE24HOURFORMAT= 8
		MB_PRECOMPOSED= 1
		MB_COMPOSITE= 2
		MB_ERR_INVALID_CHARS= 8
		MB_USEGLYPHCHARS= 4
		WC_COMPOSITECHECK= 512
		WC_DISCARDNS= 16
		WC_SEPCHARS= 32
		WC_DEFAULTCHAR= 64
		CTRY_DEFAULT= 0
		CTRY_ALBANIA= 355
		CTRY_ALGERIA= 213
		CTRY_ARGENTINA= 54
		CTRY_ARMENIA= 374
		CTRY_AUSTRALIA= 61
		CTRY_AUSTRIA= 43
		CTRY_AZERBAIJAN= 994
		CTRY_BAHRAIN= 973
		CTRY_BELARUS= 375
		CTRY_BELGIUM= 32
		CTRY_BELIZE= 501
		CTRY_BOLIVIA= 591
		CTRY_BRAZIL= 55
		CTRY_BRUNEI_DARUSSALAM= 673
		CTRY_BULGARIA= 359
		CTRY_CANADA= 2
		CTRY_CARIBBEAN= 1
		CTRY_CHILE= 56
		CTRY_COLOMBIA= 57
		CTRY_COSTA_RICA= 506
		CTRY_CROATIA= 385
		CTRY_CZECH= 420
		CTRY_DENMARK= 45
		CTRY_DOMINICAN_REPUBLIC= 1
		CTRY_ECUADOR= 593
		CTRY_EGYPT= 20
		CTRY_EL_SALVADOR= 503
		CTRY_ESTONIA= 372
		CTRY_FAEROE_ISLANDS= 298
		CTRY_FINLAND= 358
		CTRY_FRANCE= 33
		CTRY_GEORGIA= 995
		CTRY_GERMANY= 49
		CTRY_GREECE= 30
		CTRY_GUATEMALA= 502
		CTRY_HONDURAS= 504
		CTRY_HONG_KONG= 852
		CTRY_HUNGARY= 36
		CTRY_ICELAND= 354
		CTRY_INDIA= 91
		CTRY_INDONESIA= 62
		CTRY_IRAN= 981
		CTRY_IRAQ= 964
		CTRY_IRELAND= 353
		CTRY_ISRAEL= 972
		CTRY_ITALY= 39
		CTRY_JAMAICA= 1
		CTRY_JAPAN= 81
		CTRY_JORDAN= 962
		CTRY_KAZAKSTAN= 7
		CTRY_KENYA= 254
		CTRY_KUWAIT= 965
		CTRY_LATVIA= 371
		CTRY_LEBANON= 961
		CTRY_LIBYA= 218
		CTRY_LIECHTENSTEIN= 41
		CTRY_LITHUANIA= 370
		CTRY_LUXEMBOURG= 352
		CTRY_MACAU= 853
		CTRY_MACEDONIA= 389
		CTRY_MALAYSIA= 60
		CTRY_MEXICO= 52
		CTRY_MONACO= 33
		CTRY_MOROCCO= 212
		CTRY_NETHERLANDS= 31
		CTRY_NEW_ZEALAND= 64
		CTRY_NICARAGUA= 505
		CTRY_NORWAY= 47
		CTRY_OMAN= 968
		CTRY_PAKISTAN= 92
		CTRY_PANAMA= 507
		CTRY_PARAGUAY= 595
		CTRY_PERU= 51
		CTRY_PHILIPPINES= 63
		CTRY_POLAND= 48
		CTRY_PORTUGAL= 351
		CTRY_PRCHINA= 86
		CTRY_PUERTO_RICO= 1
		CTRY_QATAR= 974
		CTRY_ROMANIA= 40
		CTRY_RUSSIA= 7
		CTRY_SAUDI_ARABIA= 966
		CTRY_SERBIA= 381
		CTRY_SINGAPORE= 65
		CTRY_SLOVAK= 421
		CTRY_SLOVENIA= 386
		CTRY_SOUTH_AFRICA= 27
		CTRY_SOUTH_KOREA= 82
		CTRY_SPAIN= 34
		CTRY_SWEDEN= 46
		CTRY_SWITZERLAND= 41
		CTRY_SYRIA= 963
		CTRY_TAIWAN= 886
		CTRY_TATARSTAN= 7
		CTRY_THAILAND= 66
		CTRY_TRINIDAD_Y_TOBAGO= 1
		CTRY_TUNISIA= 216
		CTRY_TURKEY= 90
		CTRY_UAE= 971
		CTRY_UKRAINE= 380
		CTRY_UNITED_KINGDOM= 44
		CTRY_UNITED_STATES= 1
		CTRY_URUGUAY= 598
		CTRY_UZBEKISTAN= 7
		CTRY_VENEZUELA= 58
		CTRY_VIET_NAM= 84
		CTRY_YEMEN= 967
		CTRY_ZIMBABWE= 263
		CAL_ICALINTVALUE= 1
		CAL_SCALNAME= 2
		CAL_IYEAROFFSETRANGE= 3
		CAL_SERASTRING= 4
		CAL_SSHORTDATE= 5
		CAL_SLONGDATE= 6
		CAL_SDAYNAME1= 7
		CAL_SDAYNAME2= 8
		CAL_SDAYNAME3= 9
		CAL_SDAYNAME4= 10
		CAL_SDAYNAME5= 11
		CAL_SDAYNAME6= 12
		CAL_SDAYNAME7= 13
		CAL_SABBREVDAYNAME1= 14
		CAL_SABBREVDAYNAME2= 15
		CAL_SABBREVDAYNAME3= 16
		CAL_SABBREVDAYNAME4= 17
		CAL_SABBREVDAYNAME5= 18
		CAL_SABBREVDAYNAME6= 19
		CAL_SABBREVDAYNAME7= 20
		CAL_SMONTHNAME1= 21
		CAL_SMONTHNAME2= 22
		CAL_SMONTHNAME3= 23
		CAL_SMONTHNAME4= 24
		CAL_SMONTHNAME5= 25
		CAL_SMONTHNAME6= 26
		CAL_SMONTHNAME7= 27
		CAL_SMONTHNAME8= 28
		CAL_SMONTHNAME9= 29
		CAL_SMONTHNAME10= 30
		CAL_SMONTHNAME11= 31
		CAL_SMONTHNAME12= 32
		CAL_SMONTHNAME13= 33
		CAL_SABBREVMONTHNAME1= 34
		CAL_SABBREVMONTHNAME2= 35
		CAL_SABBREVMONTHNAME3= 36
		CAL_SABBREVMONTHNAME4= 37
		CAL_SABBREVMONTHNAME5= 38
		CAL_SABBREVMONTHNAME6= 39
		CAL_SABBREVMONTHNAME7= 40
		CAL_SABBREVMONTHNAME8= 41
		CAL_SABBREVMONTHNAME9= 42
		CAL_SABBREVMONTHNAME10= 43
		CAL_SABBREVMONTHNAME11= 44
		CAL_SABBREVMONTHNAME12= 45
		CAL_SABBREVMONTHNAME13= 46
		CAL_GREGORIAN= 1
		CAL_GREGORIAN_US= 2
		CAL_JAPAN= 3
		CAL_TAIWAN= 4
		CAL_KOREA= 5
		CAL_HIJRI= 6
		CAL_THAI= 7
		CAL_HEBREW= 8
		CAL_GREGORIAN_ME_FRENCH= 9
		CAL_GREGORIAN_ARABIC= 10
		CAL_GREGORIAN_XLIT_ENGLISH= 11
		CAL_GREGORIAN_XLIT_FRENCH= 12
		CSTR_LESS_THAN= 1
		CSTR_EQUAL= 2
		CSTR_GREATER_THAN= 3
		LGRPID_INSTALLED= 1
		LGRPID_SUPPORTED= 2
		LGRPID_WESTERN_EUROPE= 1
		LGRPID_CENTRAL_EUROPE= 2
		LGRPID_BALTIC= 3
		LGRPID_GREEK= 4
		LGRPID_CYRILLIC= 5
		LGRPID_TURKISH= 6
		LGRPID_JAPANESE= 7
		LGRPID_KOREAN= 8
		LGRPID_TRADITIONAL_CHINESE= 9
		LGRPID_SIMPLIFIED_CHINESE= 10
		LGRPID_THAI= 11
		LGRPID_HEBREW= 12
		LGRPID_ARABIC= 13
		LGRPID_VIETNAMESE= 14
		LGRPID_INDIC= 15
		LGRPID_GEORGIAN= 16
		LGRPID_ARMENIAN= 17
		VS_VERSION_INFO= 1
		VS_USER_DEFINED= 100
		VS_FFI_SIGNATURE= 0xFEEF04BD
		VS_FFI_STRUCVERSION= 0x10000
		VS_FFI_FILEFLAGSMASK= 0x3F
		VS_FF_DEBUG= 1
		VS_FF_PRERELEASE= 2
		VS_FF_PATCHED= 4
		VS_FF_PRIVATEBUILD= 8
		VS_FF_INFOINFERRED= 16
		VS_FF_SPECIALBUILD= 32
		VOS_UNKNOWN= 0
		VOS_DOS= 0x10000
		VOS_OS216= 0x20000
		VOS_OS232= 0x30000
		VOS_NT= 0x40000
		VOS__BASE= 0
		VOS__WINDOWS16= 1
		VOS__PM16= 2
		VOS__PM32= 3
		VOS__WINDOWS32= 4
		VOS_DOS_WINDOWS16= 0x10001
		VOS_DOS_WINDOWS32= 0x10004
		VOS_OS216_PM16= 0x20002
		VOS_OS232_PM32= 0x30003
		VOS_NT_WINDOWS32= 0x40004
		VFT_UNKNOWN= 0
		VFT_APP= 1
		VFT_DLL= 2
		VFT_DRV= 3
		VFT_FONT= 4
		VFT_VXD= 5
		VFT_STATIC_LIB= 7
		VFT2_UNKNOWN= 0
		VFT2_DRV_PRINTER= 1
		VFT2_DRV_KEYBOARD= 2
		VFT2_DRV_LANGUAGE= 3
		VFT2_DRV_DISPLAY= 4
		VFT2_DRV_MOUSE= 5
		VFT2_DRV_NETWORK= 6
		VFT2_DRV_SYSTEM= 7
		VFT2_DRV_INSTALLABLE= 8
		VFT2_DRV_SOUND= 9
		VFT2_DRV_COMM= 10
		VFT2_DRV_INPUTMETHOD= 11
		VFT2_FONT_RASTER= 1
		VFT2_FONT_VECTOR= 2
		VFT2_FONT_TRUETYPE= 3
		VFFF_ISSHAREDFILE= 1
		VFF_CURNEDEST= 1
		VFF_FILEINUSE= 2
		VFF_BUFFTOOSMALL= 4
		VIFF_FORCEINSTALL= 1
		VIFF_DONTDELETEOLD= 2
		VIF_TEMPFILE= 1
		VIF_MISMATCH= 2
		VIF_SRCOLD= 4
		VIF_DIFFLANG= 8
		VIF_DIFFCODEPG= 16
		VIF_DIFFTYPE= 32
		VIF_WRITEPROT= 64
		VIF_FILEINUSE= 128
		VIF_OUTOFSPACE= 256
		VIF_ACCESSVIOLATION= 512
		VIF_SHARINGVIOLATION= 1024
		VIF_CANNOTCREATE= 2048
		VIF_CANNOTDELETE= 4096
		VIF_CANNOTRENAME= 8192
		VIF_CANNOTDELETECUR= 16384
		VIF_OUTOFMEMORY= 32768
		VIF_CANNOTREADSRC= 65536
		VIF_CANNOTREADDST= 0x20000
		VIF_BUFFTOOSMALL= 0x40000
		WNNC_NET_MSNET= 0x00010000
		WNNC_NET_LANMAN= 0x00020000
		WNNC_NET_NETWARE= 0x00030000
		WNNC_NET_VINES= 0x00040000
		WNNC_NET_10NET= 0x00050000
		WNNC_NET_LOCUS= 0x00060000
		WNNC_NET_SUN_PC_NFS= 0x00070000
		WNNC_NET_LANSTEP= 0x00080000
		WNNC_NET_9TILES= 0x00090000
		WNNC_NET_LANTASTIC= 0x000A0000
		WNNC_NET_AS400= 0x000B0000
		WNNC_NET_FTP_NFS= 0x000C0000
		WNNC_NET_PATHWORKS= 0x000D0000
		WNNC_NET_LIFENET= 0x000E0000
		WNNC_NET_POWERLAN= 0x000F0000
		WNNC_NET_BWNFS= 0x00100000
		WNNC_NET_COGENT= 0x00110000
		WNNC_NET_FARALLON= 0x00120000
		WNNC_NET_APPLETALK= 0x00130000
		WNNC_NET_INTERGRAPH= 0x00140000
		WNNC_NET_SYMFONET= 0x00150000
		WNNC_NET_CLEARCASE= 0x00160000
		WNNC_NET_FRONTIER= 0x00170000
		WNNC_NET_BMC= 0x00180000
		WNNC_NET_DCE= 0x00190000
		WNNC_NET_AVID= 0x001A0000
		WNNC_NET_DOCUSPACE= 0x001B0000
		WNNC_NET_MANGOSOFT= 0x001C0000
		WNNC_NET_SERNET= 0x001D0000
		WNNC_NET_DECORB= 0x00200000
		WNNC_NET_PROTSTOR= 0x00210000
		WNNC_NET_FJ_REDIR= 0x00220000
		WNNC_NET_DISTINCT= 0x00230000
		WNNC_NET_TWINS= 0x00240000
		WNNC_NET_RDR2SAMPLE= 0x00250000
		WNNC_NET_CSC= 0x00260000
		WNNC_NET_3IN1= 0x00270000
		WNNC_NET_EXTENDNET= 0x00290000
		WNNC_NET_OBJECT_DIRE= 0x00300000
		WNNC_NET_MASFAX= 0x00310000
		WNNC_NET_HOB_NFS= 0x00320000
		WNNC_NET_SHIVA= 0x00330000
		WNNC_NET_IBMAL= 0x00340000
		WNNC_CRED_MANAGER= 0xFFFF0000
		RESOURCE_CONNECTED= 1
		RESOURCE_GLOBALNET= 2
		RESOURCE_REMEMBERED= 3
		RESOURCE_RECENT= 4
		RESOURCE_CONTEXT= 5
		RESOURCETYPE_ANY= 0
		RESOURCETYPE_DISK= 1
		RESOURCETYPE_PRINT= 2
		RESOURCETYPE_RESERVED= 8
		RESOURCETYPE_UNKNOWN= 0xFFFFFFFF
		RESOURCEUSAGE_CONNECTABLE= 0x00000001
		RESOURCEUSAGE_CONTAINER= 0x00000002
		RESOURCEUSAGE_NOLOCALDEVICE= 0x00000004
		RESOURCEUSAGE_SIBLING= 0x00000008
		RESOURCEUSAGE_ATTACHED= 0x00000010
		RESOURCEUSAGE_ALL= (0x00000001 | 0x00000002 | 0x00000010)
		RESOURCEUSAGE_RESERVED= 0x80000000
		RESOURCEDISPLAYTYPE_GENERIC= 0
		RESOURCEDISPLAYTYPE_DOMAIN= 1
		RESOURCEDISPLAYTYPE_SERVER= 2
		RESOURCEDISPLAYTYPE_SHARE= 3
		RESOURCEDISPLAYTYPE_FILE= 4
		RESOURCEDISPLAYTYPE_GROUP= 5
		RESOURCEDISPLAYTYPE_NETWORK= 6
		RESOURCEDISPLAYTYPE_ROOT= 7
		RESOURCEDISPLAYTYPE_SHAREADMIN= 8
		RESOURCEDISPLAYTYPE_DIRECTORY= 9
		RESOURCEDISPLAYTYPE_TREE= 10
		NETPROPERTY_PERSISTENT= 1
		CONNECT_UPDATE_PROFILE= 1
		CONNECT_UPDATE_RECENT= 2
		CONNECT_TEMPORARY= 4
		CONNECT_INTERACTIVE= 8
		CONNECT_PROMPT= 16
		CONNECT_NEED_DRIVE= 32
		CONNECT_REFCOUNT= 64
		CONNECT_REDIRECT= 128
		CONNECT_LOCALDRIVE= 256
		CONNECT_CURRENT_MEDIA= 512
		CONNDLG_RO_PATH= 1
		CONNDLG_CONN_POINT= 2
		CONNDLG_USE_MRU= 4
		CONNDLG_HIDE_BOX= 8
		CONNDLG_PERSIST= 16
		CONNDLG_NOT_PERSIST= 32
		DISC_UPDATE_PROFILE= 1
		DISC_NO_FORCE= 64
		WNFMT_MULTILINE= 1
		WNFMT_ABBREVIATED= 2
		WNFMT_INENUM= 16
		WNFMT_CONNECTION= 32
		WN_SUCCESS= 0
		WN_NO_ERROR= 0
		WN_NOT_SUPPORTED= 50
		WN_CANCEL= 1223
		WN_RETRY= 1237
		WN_NET_ERROR= 59
		WN_MORE_DATA= 234
		WN_BAD_POINTER= 487
		WN_BAD_VALUE= 87
		WN_BAD_USER= 2202
		WN_BAD_PASSWORD= 86
		WN_ACCESS_DENIED= 5
		WN_FUNCTION_BUSY= 170
		WN_WINDOWS_ERROR= 59
		WN_OUT_OF_MEMORY= 8
		WN_NO_NETWORK= 1222
		WN_EXTENDED_ERROR= 1208
		WN_BAD_LEVEL= 124
		WN_BAD_HANDLE= 6
		WN_NOT_INITIALIZING= 1247
		WN_NO_MORE_DEVICES= 1248
		WN_NOT_CONNECTED= 2250
		WN_OPEN_FILES= 2401
		WN_DEVICE_IN_USE= 2404
		WN_BAD_NETNAME= 67
		WN_BAD_LOCALNAME= 1200
		WN_ALREADY_CONNECTED= 85
		WN_DEVICE_ERROR= 31
		WN_CONNECTION_CLOSED= 1201
		WN_NO_NET_OR_BAD_PATH= 1203
		WN_BAD_PROVIDER= 1204
		WN_CANNOT_OPEN_PROFILE= 1205
		WN_BAD_PROFILE= 1206
		WN_BAD_DEV_TYPE= 66
		WN_DEVICE_ALREADY_REMEMBERED= 1202
		WN_NO_MORE_ENTRIES= 259
		WN_NOT_CONTAINER= 1207
		WN_NOT_AUTHENTICATED= 1244
		WN_NOT_LOGGED_ON= 1245
		WN_NOT_VALIDATED= 1311
		UNIVERSAL_NAME_INFO_LEVEL= 1
		REMOTE_NAME_INFO_LEVEL= 2
		NETINFO_DLL16= 1
		NETINFO_DISKRED= 4
		NETINFO_PRINTERRED= 8
		RP_LOGON= 1
		RP_INIFILE= 2
		PP_DISPLAYERRORS= 1
		WNCON_FORNETCARD= 1
		WNCON_NOTROUTED= 2
		WNCON_SLOWLINK= 4
		WNCON_DYNAMIC= 8
		REG_CREATED_NEW_KEY= 1
		REG_OPENED_EXISTING_KEY= 2
		REG_NONE= 0
		REG_SZ= 1
		REG_EXPAND_SZ= 2
		REG_BINARY= 3
		REG_DWORD= 4
		REG_DWORD_BIG_ENDIAN= 5
		REG_DWORD_LITTLE_ENDIAN= 4
		REG_LINK= 6
		REG_MULTI_SZ= 7
		REG_RESOURCE_LIST= 8
		REG_FULL_RESOURCE_DESCRIPTOR= 9
		REG_RESOURCE_REQUIREMENTS_LIST= 10
		REG_NOTIFY_CHANGE_NAME= 1
		REG_NOTIFY_CHANGE_ATTRIBUTES= 2
		REG_NOTIFY_CHANGE_LAST_SET= 4
		REG_NOTIFY_CHANGE_SECURITY= 8
		SC_GROUP_IDENTIFIERA= '+'
		SC_MANAGER_ALL_ACCESS= 0xf003f
		SC_MANAGER_CONNECT= 1
		SC_MANAGER_CREATE_SERVICE= 2
		SC_MANAGER_ENUMERATE_SERVICE= 4
		SC_MANAGER_LOCK= 8
		SC_MANAGER_QUERY_LOCK_STATUS= 16
		SC_MANAGER_MODIFY_BOOT_CONFIG= 32
		SERVICE_NO_CHANGE= 0xffffffff
		SERVICE_STOPPED= 1
		SERVICE_START_PENDING= 2
		SERVICE_STOP_PENDING= 3
		SERVICE_RUNNING= 4
		SERVICE_CONTINUE_PENDING= 5
		SERVICE_PAUSE_PENDING= 6
		SERVICE_PAUSED= 7
		SERVICE_ACCEPT_STOP= 1
		SERVICE_ACCEPT_PAUSE_CONTINUE= 2
		SERVICE_ACCEPT_SHUTDOWN= 4
		SERVICE_ACCEPT_PARAMCHANGE= 8
		SERVICE_ACCEPT_NETBINDCHANGE= 16
		SERVICE_ACCEPT_HARDWAREPROFILECHANGE= 32
		SERVICE_ACCEPT_POWEREVENT= 64
		SERVICE_ACCEPT_SESSIONCHANGE= 128
		SERVICE_CONTROL_STOP= 1
		SERVICE_CONTROL_PAUSE= 2
		SERVICE_CONTROL_CONTINUE= 3
		SERVICE_CONTROL_INTERROGATE= 4
		SERVICE_CONTROL_SHUTDOWN= 5
		SERVICE_CONTROL_PARAMCHANGE= 6
		SERVICE_CONTROL_NETBINDADD= 7
		SERVICE_CONTROL_NETBINDREMOVE= 8
		SERVICE_CONTROL_NETBINDENABLE= 9
		SERVICE_CONTROL_NETBINDDISABLE= 10
		SERVICE_CONTROL_DEVICEEVENT= 11
		SERVICE_CONTROL_HARDWAREPROFILECHANGE= 12
		SERVICE_CONTROL_POWEREVENT= 13
		SERVICE_CONTROL_SESSIONCHANGE= 14
		SERVICE_ACTIVE= 1
		SERVICE_INACTIVE= 2
		SERVICE_STATE_ALL= 3
		SERVICE_QUERY_CONFIG= 1
		SERVICE_CHANGE_CONFIG= 2
		SERVICE_QUERY_STATUS= 4
		SERVICE_ENUMERATE_DEPENDENTS= 8
		SERVICE_START= 16
		SERVICE_STOP= 32
		SERVICE_PAUSE_CONTINUE= 64
		SERVICE_INTERROGATE= 128
		SERVICE_USER_DEFINED_CONTROL= 256
		SERVICE_ALL_ACCESS= (0xF0000|1|2|4|8|16|32|64|128|256)
		SERVICE_RUNS_IN_SYSTEM_PROCESS= 1
		SERVICE_CONFIG_DESCRIPTION= 1
		SERVICE_CONFIG_FAILURE_ACTIONS= 2
		SC_GROUP_IDENTIFIER= '+'
		LBSELCHSTRINGA="commdlg_LBSelChangedNotify"
		SHAREVISTRINGA="commdlg_ShareViolation"
		FILEOKSTRINGA="commdlg_FileNameOK"
		COLOROKSTRINGA="commdlg_ColorOK"
		SETRGBSTRINGA="commdlg_SetRGBColor"
		HELPMSGSTRINGA="commdlg_help"
		FINDMSGSTRINGA="commdlg_FindReplace"
		CDN_FIRST=-601u
		CDN_LAST=-699u
		CDN_INITDONE=CDN_FIRST
		CDN_SELCHANGE=(CDN_FIRST-1u)
		CDN_FOLDERCHANGE=(CDN_FIRST-2u)
		CDN_SHAREVIOLATION=(CDN_FIRST-3u)
		CDN_HELP=(CDN_FIRST-4u)
		CDN_FILEOK=(CDN_FIRST-5u)
		CDN_TYPECHANGE=(CDN_FIRST-6u)
		CDM_FIRST=(WM_USER+100)
		CDM_LAST=(WM_USER+200)
		CDM_GETSPEC=CDM_FIRST
		CDM_GETFILEPATH=(CDM_FIRST+1)
		CDM_GETFOLDERPATH=(CDM_FIRST+2)
		CDM_GETFOLDERIDLIST=(CDM_FIRST+3)
		CDM_SETCONTROLTEXT=(CDM_FIRST+4)
		CDM_HIDECONTROL=(CDM_FIRST+5)
		CDM_SETDEFEXT=(CDM_FIRST+6)
		CC_RGBINIT=1
		CC_FULLOPEN=2
		CC_PREVENTFULLOPEN=4
		CC_SHOWHELP=8
		CC_ENABLEHOOK=16
		CC_ENABLETEMPLATE=32
		CC_ENABLETEMPLATEHANDLE=64
		CC_SOLIDCOLOR=128
		CC_ANYCOLOR=256
		CF_SCREENFONTS=1
		CF_PRINTERFONTS=2
		CF_BOTH=3
		CF_SHOWHELP=4
		CF_ENABLEHOOK=8
		CF_ENABLETEMPLATE=16
		CF_ENABLETEMPLATEHANDLE=32
		CF_INITTOLOGFONTSTRUCT=64
		CF_USESTYLE=128
		CF_EFFECTS=256
		CF_APPLY=512
		CF_ANSIONLY=1024
		CF_SCRIPTSONLY=CF_ANSIONLY
		CF_NOVECTORFONTS=2048
		CF_NOOEMFONTS=2048
		CF_NOSIMULATIONS=4096
		CF_LIMITSIZE=8192
		CF_FIXEDPITCHONLY=16384
		CF_WYSIWYG=32768
		CF_FORCEFONTEXIST=65536
		CF_SCALABLEONLY=131072
		CF_TTONLY=262144
		CF_NOFACESEL=524288
		CF_NOSTYLESEL=1048576
		CF_NOSIZESEL=2097152
		CF_SELECTSCRIPT=4194304
		CF_NOSCRIPTSEL=8388608
		CF_NOVERTFONTS=0x1000000
		SIMULATED_FONTTYPE=0x8000
		PRINTER_FONTTYPE=0x4000
		SCREEN_FONTTYPE=0x2000
		BOLD_FONTTYPE=0x100
		ITALIC_FONTTYPE=0x0200
		REGULAR_FONTTYPE=0x0400
		WM_CHOOSEFONT_GETLOGFONT=(WM_USER+1)
		WM_CHOOSEFONT_SETLOGFONT=(WM_USER+101)
		WM_CHOOSEFONT_SETFLAGS=(WM_USER+102)
		OFN_ALLOWMULTISELECT=512
		OFN_CREATEPROMPT=0x2000
		OFN_ENABLEHOOK=32
		OFN_ENABLESIZING=0x800000
		OFN_ENABLETEMPLATE=64
		OFN_ENABLETEMPLATEHANDLE=128
		OFN_EXPLORER=0x80000
		OFN_EXTENSIONDIFFERENT=0x400
		OFN_FILEMUSTEXIST=0x1000
		OFN_HIDEREADONLY=4
		OFN_LONGNAMES=0x200000
		OFN_NOCHANGEDIR=8
		OFN_NODEREFERENCELINKS=0x100000
		OFN_NOLONGNAMES=0x40000
		OFN_NONETWORKBUTTON=0x20000
		OFN_NOREADONLYRETURN=0x8000
		OFN_NOTESTFILECREATE=0x10000
		OFN_NOVALIDATE=256
		OFN_OVERWRITEPROMPT=2
		OFN_PATHMUSTEXIST=0x800
		OFN_READONLY=1
		OFN_SHAREAWARE=0x4000
		OFN_SHOWHELP=16
		OFN_SHAREFALLTHROUGH=2
		OFN_SHARENOWARN=1
		OFN_SHAREWARN=0
		OFN_DONTADDTORECENT=0x02000000
		FR_DIALOGTERM=64
		FR_DOWN=1
		FR_ENABLEHOOK=256
		FR_ENABLETEMPLATE=512
		FR_ENABLETEMPLATEHANDLE=0x2000
		FR_FINDNEXT=8
		FR_HIDEUPDOWN=0x4000
		FR_HIDEMATCHCASE=0x8000
		FR_HIDEWHOLEWORD=0x10000
		FR_MATCHALEFHAMZA=0x80000000
		FR_MATCHCASE=4
		FR_MATCHDIAC=0x20000000
		FR_MATCHKASHIDA=0x40000000
		FR_NOMATCHCASE=0x800
		FR_NOUPDOWN=0x400
		FR_NOWHOLEWORD=4096
		FR_REPLACE=16
		FR_REPLACEALL=32
		FR_SHOWHELP=128
		FR_WHOLEWORD=2
		PD_ALLPAGES=0
		PD_SELECTION=1
		PD_PAGENUMS=2
		PD_NOSELECTION=4
		PD_NOPAGENUMS=8
		PD_COLLATE=16
		PD_PRINTTOFILE=32
		PD_PRINTSETUP=64
		PD_NOWARNING=128
		PD_RETURNDC=256
		PD_RETURNIC=512
		PD_RETURNDEFAULT=1024
		PD_SHOWHELP=2048
		PD_ENABLEPRINTHOOK=4096
		PD_ENABLESETUPHOOK=8192
		PD_ENABLEPRINTTEMPLATE=16384
		PD_ENABLESETUPTEMPLATE=32768
		PD_ENABLEPRINTTEMPLATEHANDLE=65536
		PD_ENABLESETUPTEMPLATEHANDLE=0x20000
		PD_USEDEVMODECOPIES=0x40000
		PD_USEDEVMODECOPIESANDCOLLATE=0x40000
		PD_DISABLEPRINTTOFILE=0x80000
		PD_HIDEPRINTTOFILE=0x100000
		PD_NONETWORKBUTTON=0x200000
		PSD_DEFAULTMINMARGINS=0
		PSD_INWININIINTLMEASURE=0
		PSD_MINMARGINS=1
		PSD_MARGINS=2
		PSD_INTHOUSANDTHSOFINCHES=4
		PSD_INHUNDREDTHSOFMILLIMETERS=8
		PSD_DISABLEMARGINS=16
		PSD_DISABLEPRINTER=32
		PSD_NOWARNING=128
		PSD_DISABLEORIENTATION=256
		PSD_DISABLEPAPER=512
		PSD_RETURNDEFAULT=1024
		PSD_SHOWHELP=2048
		PSD_ENABLEPAGESETUPHOOK=8192
		PSD_ENABLEPAGESETUPTEMPLATE=0x8000
		PSD_ENABLEPAGESETUPTEMPLATEHANDLE=0x20000
		PSD_ENABLEPAGEPAINTHOOK=0x40000
		PSD_DISABLEPAGEPAINTING=0x80000
		WM_PSD_PAGESETUPDLG=WM_USER
		WM_PSD_FULLPAGERECT=(WM_USER+1)
		WM_PSD_MINMARGINRECT=(WM_USER+2)
		WM_PSD_MARGINRECT=(WM_USER+3)
		WM_PSD_GREEKTEXTRECT=(WM_USER+4)
		WM_PSD_ENVSTAMPRECT=(WM_USER+5)
		WM_PSD_YAFULLPAGERECT=(WM_USER+6)
		CD_LBSELNOITEMS=(-1)
		CD_LBSELCHANGE=0
		CD_LBSELSUB=1
		CD_LBSELADD=2
		DN_DEFAULTPRN=1
		LWA_COLORKEY=0x01
		LWA_ALPHA=0x02
		ULW_COLORKEY=0x01
		ULW_ALPHA=0x02
		ULW_OPAQUE=0x04
	//win functions
	if Platform.IS_WINDOWS:
		INVALID_HANDLE_VALUE=__pointer(-1)
		_wfopen=__c_function(__pointer,"_wfopen","stdio.h")
		CreateNamedPipeW=__c_function(__pointer,"CreateNamedPipeW","windows.h")
		CreateFileW=__c_function(__pointer,"CreateFileW","windows.h")
		CreateFileMappingW=__c_function(__pointer,"CreateFileMappingW","windows.h")
		CloseHandle=__c_function(__pointer,"CloseHandle","windows.h")
		MapViewOfFile=__c_function(__pointer,"MapViewOfFile","windows.h")
		UnmapViewOfFile=__c_function(int,"UnmapViewOfFile","windows.h")
		GetFileSizeEx=__c_function(int,"GetFileSizeEx","windows.h")
		WideCharToMultiByte=__c_function(int,"WideCharToMultiByte","windows.h")
		SetConsoleCP=__c_function(int,"SetConsoleCP","windows.h")
		FindFirstFileW=__c_function(__pointer,"FindFirstFileW","windows.h")
		FindNextFileW=__c_function(int,"FindNextFileW","windows.h")
		FindClose=__c_function(int,"FindClose","windows.h")
		//wstrlen_s=__c_function(iptr,"wstrlen_s","string.h")
		GetCurrentDirectoryW=__c_function(int,"GetCurrentDirectoryW","windows.h")
		SetCurrentDirectoryW=__c_function(int,"SetCurrentDirectoryW","windows.h")
		GetFileAttributesW=__c_function(int,"GetFileAttributesW","windows.h")
		DeleteFileW=__c_function(int,"DeleteFileW","windows.h")
		MoveFileW=__c_function(int,"MoveFileW","windows.h")
		CopyFileW=__c_function(int,"CopyFileW","windows.h")
		CreateDirectoryW=__c_function(int,"CreateDirectoryW","windows.h")
		GetModuleHandleW=__c_function(__pointer,"GetModuleHandleW","windows.h")
		GetModuleFileNameW=__c_function(int,"GetModuleFileNameW","windows.h")
		QueryPerformanceCounter=__c_function(int,"QueryPerformanceCounter","windows.h")
		QueryPerformanceFrequency=__c_function(int,"QueryPerformanceFrequency","windows.h")
		ExpandEnvironmentStringsW=__c_function(int,"ExpandEnvironmentStringsW","windows.h")
		SetEnvironmentVariableW=__c_function(int,"SetEnvironmentVariableW","windows.h")
		sleep=__c_function(int,"Sleep","windows.h")
		GetFullPathNameW=__c_function(int,"GetFullPathNameW","windows.h")
		GetTempPathW=__c_function(int,"GetTempPathW","windows.h")
		PeekNamedPipe=__c_function(int,"PeekNamedPipe","windows.h")
		WriteFile=__c_function(int,"WriteFile","windows.h")
		ReadFile=__c_function(int,"ReadFile","windows.h")
		FlushFileBuffers=__c_function(int,"FlushFileBuffers","windows.h")
		GetExitCodeProcess=__c_function(int,"GetExitCodeProcess","windows.h")
		WaitForSingleObject=__c_function(int,"WaitForSingleObject","windows.h")
		TerminateJobObject=__c_function(int,"TerminateJobObject","windows.h")
		TerminateProcess=__c_function(int,"TerminateProcess","windows.h")
		OpenProcess=__c_function(__pointer,"OpenProcess","windows.h")
		DuplicateHandle=__c_function(int,"DuplicateHandle","windows.h")
		GetCurrentProcess=__c_function(__pointer,"GetCurrentProcess","windows.h")
		GetCurrentProcessId=__c_function(int,"GetCurrentProcessId","windows.h")
		GetStartupInfoW=__c_function(int,"GetStartupInfoW","windows.h")
		GetStdHandle=__c_function(__pointer,"GetStdHandle","windows.h")
		CreateProcessW=__c_function(int,"CreateProcessW","windows.h")
		CreateJobObjectW=__c_function(__pointer,"CreateJobObjectW","windows.h")
		AssignProcessToJobObject=__c_function(int,"AssignProcessToJobObject","windows.h")
		ResumeThread=__c_function(int,"ResumeThread","windows.h")

	fread=__c_function(int,"fread","stdio.h")
	fwrite=__c_function(int,"fwrite","stdio.h")
	if iptr==i64:
		if Platform.IS_WINDOWS:
			fseek=__c_function(int,"_fseeki64","stdio.h")
			ftell=__c_function(iptr,"_ftelli64","stdio.h")
		else if Platform.IS_APPLE:
			fseek=__c_function(int,"fseek","stdio.h")
			ftell=__c_function(iptr,"ftell","stdio.h")
		else
			fseek=__c_function(int,"fseeko","stdio.h")
			ftell=__c_function(iptr,"ftello","stdio.h")
	else
		fseek=__c_function(int,"fseek","stdio.h")
		ftell=__c_function(iptr,"ftell","stdio.h")
	fflush=__c_function(int,"fflush","stdio.h")
	feof=__c_function(int,"feof","stdio.h")
	fclose=__c_function(int,"fclose","stdio.h")
	////////////////
	printf=__c_function(int,"printf","stdio.h")
	strlen=__c_function(int,"strlen","string.h")
	osal_WriteLog=__c_function(int,"osal_WriteLog","spaprt_portable.h", "c_files","spaprt_portable.c")
	osal_GetCommandLine=__c_function(int,"osal_GetCommandLine","spaprt_portable.h", "c_files","spaprt_portable.c")
	//////////////////
	spapBlockYielding=__c_function(int,"spapBlockYielding","spaprt_portable.h", "c_files","spaprt_portable.c")
	spapUnblockYielding=__c_function(int,"spapUnblockYielding","spaprt_portable.h", "c_files","spaprt_portable.c")

module detail
	inline pcharToString(__pointer p0)
		p=__C(__pointer,"(void*)(@1)",p0)
		return __ptrToString(p,System.OS_API.strlen(p))
	inline pwcharToString(__pointer p,lg_max)
		//lg=System.OS_API.wstrlen_s(__C(__pointer,"(short*)@1",p),lg_max)
		lg=0
		for i=0:lg_max-1
			if !__memory(i16,iptr(p)+i*sizeof(i16)):
				lg=i
				break
		ret=new i16[lg]
		__basic_api.memcpy(ret,p,lg*2)
		return ret
	inline toNativeString(string s)
		if Platform.IS_UNIX:
			sn=new(s);sn.push(i8(0))
		else
			sn=Algorithm.Utf8ToUnicode(s);sn.push(i16(0))
		return sn
	///////////////////////////
	REGEX_STR=0
	REGEX_CSET=1
	REGEX_SPL=2
	REGEX_SPL2=3
	REGEX_NIL=4
	REGEX_MATCH=5
	REGEX_CHAR=256
	//REGEX_SAVE: ~id
	////////
	//all chars are str
	//special ops begin with 0 and one of RB_...
	RB_SPL=0
	RB_JMP=1
	RB_CSET=2
	RB_SAVE=3
	RB_MATCH=4
	//kmp-style limited overlap nfa? trie? not very general, nor is the gain too significant. worth thinking a bit though
	class RegexOp
		int op
		__variant ob//string/u32[]/RegexOp
		RegexOp x
		int ofs
	//todo: parse errors, 2ndary error return 
	auto parseRegex(string s0)
		feed=s0.d;feed2=s0.d+s0.n;slotid=0
		auto atom(iptr feed2)
			if feed!=feed2:
				ch=__memory(i8,feed)
			else
				ch=char(0)
			mk=new u32[8]
			RegexOp ret
			switch ch{
			default:
				//literal / \
				//use cset in XML
				ret=new RegexOp
				ret.op=REGEX_CHAR+int(u8(ch))
				if feed!=feed2:feed++
				break
			case '\\'
				if feed!=feed2-1:feed++
				ch=__memory(i8,feed)
				is_postfix=0
				switch ch{
				case 't':{ch='\t';break}
				case 'n':{ch='\n';break}
				case 'r':{ch='\r';break}
				case 'b':{ch='\b';break}
				case 'x','u':
					chu=0
					for j=0:(ch=='u'?3:1)
						if feed!=feed2:
							feed++
							chj=__memory(i8,feed)
						else
							chj='0'
						si=((chj-'0')&0x1f)
						if si>=0x10:si-=7
						chu=(chu<<4)+(si&0xf)
					if chu==0:
						//0 should be made a string, not a char
						ret=new RegexOp()
						ret.op=REGEX_STR
						ret.ob=variant([char(0)])
						if feed!=feed2:feed++
						is_postfix=1
						break
					else if ch=='x'||chu<128:
						//ASCII chars can use the char mode
						ch=char(chu)
					else
						//UTF8ify
						ret=new RegexOp
						ret.op=REGEX_STR
						s=new string
						if chu>=2048:
							s.push(char(((chu>>12)&0xf)+0xe0))
							s.push(char(0x80+((chu>>6)&63)))
							s.push(char(0x80+(chu&63)))
						else if chu>=128:
							s.push(char((chu>>6)+0xc0))
							s.push(char(0x80+(chu&63)))
						else
							s.push(char(chu))
						ret.ob=variant(s)
						if feed!=feed2:feed++
						is_postfix=1
						break
					break
				}
				if is_postfix:
					break
				//it's still a literal
				ret=new RegexOp
				ret.op=REGEX_CHAR+int(u8(ch))
				if feed!=feed2:feed++
				break;
			case '[','.','\0':
				if ch=='.':
					for j in crange(8)
						mk[j]=-1
					mk[0]&=~(1u<<int('\n'))
					//if feed!=feed2-1:
					feed++
				else if ch=='\0':
					mk[0]=-2
					for j in crange(7)
						mk[j+1]=-1
				else
					feed++
					isneg=0u
					if feed!=feed2&&__memory(i8,feed)=='^':
						isneg=-1u
						feed++
					for j in crange(8)
						mk[j]=0
					ch_interval=-1
					while feed!=feed2&&__memory(i8,feed)!=']':
						chi=int(u8(__memory(i8,feed)))
						if chi=='\\'&&feed+1!=feed2:
							feed++
							chi=int(u8(__memory(i8,feed)))
							switch chi{
							case 'w':
								mk[1]|=u32((1<<10)-1)<<16
								mk[2]|=u32((2<<26)-2)
								mk[3]|=u32((2<<26)-2)
								chi=int('_')
								break
							case 's':
								chi=int(' ');mk[chi>>5]|=(1u<<(chi&31))
								chi=int('\t');mk[chi>>5]|=(1u<<(chi&31))
								chi=int('\n');mk[chi>>5]|=(1u<<(chi&31))
								chi=int('\r');//mk[chi>>5]|=(1u<<(chi&31))
								break
							case 't':{chi=int('\t');break}
							case 'n':{chi=int('\n');break}
							case 'r':{chi=int('\r');break}
							case 'b':{chi=int('\b');break}
							case 'x':
								chu=0
								for j=0:1
									if feed!=feed2:
										feed++
										chj=__memory(i8,feed)
									else
										chj='0'
									si=((chj-'0')&0x1f)
									if si>=0x10:si-=7
									chu=(chu<<4)+(si&0xf)
								chi=chu
								break
							}
						if ch_interval>=0:
							for j=ch_interval:chi
								mk[j>>5]|=(1u<<(j&31))
							ch_interval=-1
						else if iptr(feed2)-iptr(feed)>=3&&__memory(i8,feed+1L)=='-'&&__memory(i8,feed+2L)!=']':
							ch_interval=chi
							//ch2=int(u8(feed[2]))
							//for j=chi:ch2
							//	mk[j>>5]|=(1u<<(j&31))
							//feed+=2
							feed++
						else
							mk[chi>>5]|=(1u<<(chi&31))
						if feed!=feed2:feed++
					for j in crange(8)
						mk[j]^=isneg
					if feed!=feed2:feed++
				ret=new RegexOp
				ret.op=REGEX_CSET//REGEX_CHAR+0
				mka=new u32[8]
				for j in crange(8)
					mka[j]=mk[j]
				ret.ob=variant(mka)
				break
			case '(':
				feed++
				if feed!=feed2&&__memory(i8,feed)==')':
					feed++
					ret=new RegexOp(){op:REGEX_NIL}
					break
				ret=expr(feed2,1)
				if feed!=feed2&&__memory(i8,feed)==')':
					feed++
				//todo: specialized save: ()0, ()1 or sth?
				save0=new RegexOp(){op:~slotid}
				slotid++
				save0.x=ret
				ret_tail=ret
				while ret_tail.x:
					ret_tail=ret_tail.x
				save1=new RegexOp(){op:~slotid}
				slotid++
				ret_tail.x=save1
				ret=save0
				break
			case '"':
				ret=new RegexOp
				ret.op=REGEX_STR
				s=new string
				feed++
				while feed!=feed2&&__memory(i8,feed)!='"':
					ch=__memory(i8,feed)
					if ch=='\\':
						if feed!=feed2-1:feed++
						ch=__memory(i8,feed)
					s.push(ch)
					feed++
				if feed!=feed2:feed++
				ret.ob=variant(s)
				break
			}
			ret_tail=ret
			while ret_tail.x:
				ret_tail=ret_tail.x
			for(;;)
				if feed!=feed2:
					ch=__memory(i8,feed)
				else
					ch=char(0)
				//SPL: prioritize ob over x
				//SPL2: prioritize x over ob
				switch ch{
				default:
					return ret
				case '*':
					spl=new RegexOp(){op:REGEX_SPL,ob:variant(ret)}
					if feed!=feed2-1&&__memory(i8,feed+1L)=='?':
						spl.op=REGEX_SPL2
					ret_tail.x=spl
					ret=spl;ret_tail=spl
					break
				case '+':
					spl=new RegexOp(){op:REGEX_SPL,ob:variant(ret)}
					if feed!=feed2-1&&__memory(i8,feed+1L)=='?':
						spl.op=REGEX_SPL2
					ret_tail.x=spl;ret_tail=spl
					break
				case '?':
					spl=new RegexOp(){op:REGEX_SPL,ob:variant(ret)}
					nil=new RegexOp(){op:REGEX_NIL}
					spl.x=nil
					ret_tail.x=nil
					ret=spl;ret_tail=nil
					break
				}
				feed++
		auto expr(iptr feed2,int supportor)
			a=atom(feed2)
			a_tail=a
			while a_tail.x:
				a_tail=a_tail.x
			isor=0
			while feed!=feed2&&__memory(i8,feed)!=')':
				if __memory(i8,feed)=='|':
					if !supportor:break
					//or
					feed++
					isor=1
				else
					assert(!isor)
					if isor:break
				if isor:
					b=expr(feed2,0)
				else
					b=atom(feed2)
				b_tail=b
				while b_tail.x:
					b_tail=b_tail.x
				if isor:
					spl=new RegexOp(){op:REGEX_SPL2,ob:variant(a)}
					spl.x=b
					nil=new RegexOp(){op:REGEX_NIL}
					a_tail.x=nil
					b_tail.x=nil
					a=spl;a_tail=nil
				else
					a_tail.x=b
					a_tail=b_tail
			return a
		return expr(feed2,1)
	//class RegexState
	//	int pc
	//	int[] sv
	class RegexNfaState
		int[] pc
		iptr[] sv
	////////////////////
	inline has(u32[] ok,int c)
		return ((ok[c>>5]>>(c&31))&1u);
	inline charset(string e)
		ok=new u32[8]
		inv=0
		s=0
		if e[0]=='^':
			inv=1;s++
		for(;s<e.n;s++)
			if s+2<=e.n&&e[s+1]=='-':
				for(i=u32(u8(e[s]));i<=u32(u8(e[s+2]));i++)
					ok[i>>5]|=(1u<<int(i&31u));
				s+=2
			else
				chu=u32(u8(e[s]))
				ok[chu>>5]|=(1u<<int(chu&31u));
		if inv:
			for i=0:7
				ok[i]=~ok[i]
		return ok

module IO
	import System.OS_API.*
	import System.detail.*
	SEEK_SET=0
	SEEK_CUR=1
	SEEK_END=2
	OPEN_READ=1
	OPEN_WRITE=2
	OPEN_COPY_ON_WRITE=4
	ENUM_FILE=1
	ENUM_DIR=2
	ENUM_RECURSIVE=4
	ENUM_DOT=8
	/**
	 * \brief Map a file into the process address space
	 *
	 * This function maps an entire file into the process address space.
	 * @param fn is the file name, in UTF-8 encoding
	 * @param mode is the access mode mask, which can take a combination of the following values
	 * Value | Meaning
	 * ----- | -------
	 * OPEN_READ | Enables read access
	 * OPEN_WRITE | Enables write access
	 * @return A string referring to the mapped memory region. If the function fails, it returns NULL.
	 * @note The returned string *cannot be resized*. The file remains open until the returned string is discarded.
	 * @see ReadAll(), which is implemented using MapFile()
	*/
	g_dtor_unmap=0
	auto MapFile(string fn,int mode)
		isrw=!!(mode&OPEN_WRITE)
		if Platform.IS_UNIX:
			fnz=clone(fn)
			fnz.push('\0')
			fd=open(fnz,isrw?O_RDWR:O_RDONLY)
			if fd==-1:return string.NULL
			sz=osal_GetFileSize(fd)
			p=mmap(NULL,sz,isrw?(PROT_READ|PROT_WRITE):PROT_READ,(mode&OPEN_COPY_ON_WRITE)?MAP_PRIVATE:MAP_SHARED,fd,0)
			close(fd)
			if !p:
				return string.NULL
			if !g_dtor_unmap:
				g_dtor_unmap=__registerArrayBinder(function(iptr p,iptr sz){munmap(__pointer(p),sz);return 1})
			ret=char[0]
			ret.__bind(g_dtor_unmap,iptr(p),iptr(sz))
			return ret
		else
			//isrw=0
			//for i=0:mode.n-1
			//	if mode[i]=='w'||mode[i]=='W':isrw=1
			fnu=toNativeString(fn.Replace(["/","\\"]))
			hf=CreateFileW(fnu,
				isrw?GENERIC_READ|GENERIC_WRITE:GENERIC_READ,
				FILE_SHARE_READ|FILE_SHARE_WRITE,
				NULL,
				OPEN_EXISTING,
				FILE_ATTRIBUTE_NORMAL,
				NULL)
			if !hf||hf==INVALID_HANDLE_VALUE:return char[].NULL
			sz=0LL
			GetFileSizeEx(hf,__pointer(&sz))
			hm=CreateFileMappingW(
				hf,NULL,
				(mode&OPEN_COPY_ON_WRITE)?PAGE_WRITECOPY:(isrw?PAGE_READWRITE:PAGE_READONLY),0,0,NULL)
			if !hm:
				hm=CreateFileMappingW(
					hf,NULL,
					(mode&OPEN_COPY_ON_WRITE)?PAGE_EXECUTE_WRITECOPY:(isrw?PAGE_EXECUTE_READWRITE:PAGE_READONLY),0,0,NULL)
			//Console.Writeln(fn,' ',mode)
			CloseHandle(hf)
			if !hm||hm==INVALID_HANDLE_VALUE:return char[].NULL
			p=MapViewOfFile(hm,(mode&OPEN_COPY_ON_WRITE)?FILE_MAP_COPY:((mode&OPEN_WRITE)?FILE_MAP_ALL_ACCESS:FILE_MAP_READ),0,0,0)
			//Console.Writeln(p)
			CloseHandle(hm)
			if !p:return char[].NULL
			//Console.Writeln(fn,' ',p,' ',(char*)p)
			if !g_dtor_unmap:
				g_dtor_unmap=__registerArrayBinder(function(iptr p,iptr sz){UnmapViewOfFile(__pointer(p));return 1})
			ret=char[0]
			ret.__bind(g_dtor_unmap,iptr(p),iptr(sz))
			return ret
	/**
	 * \brief Read the entire content of a file into a string
	 *
	 * This function maps the entire content of a file. Note that despite having "text" in its name, this function completely disregards all encoding and CRLF conventions, thus safe for binary files. It's the users responsibility to convert the encoding properly when necessary.
	 * @param fn is the file name, in UTF-8 encoding
	 * @return A string containing the entire file content. If the function fails, it returns NULL.
	 * @note The returned string refers to a read-only file mapping. It can't be resized or overwritten.
	 * @see MapFile()
	*/
	inline ReadAll(string fn)
		return MapFile(fn,OPEN_READ)
	ReadAllText=ReadAll
	/**
	 * \brief The class representing a file
	*/
	class CFile
		m_hf=0L
		auto __done__()
			Close()
		auto Close()
			if m_hf:
				fclose(_gethf())
				m_hf=0L
		inline _gethf()
			return __C(__pointer,"(FILE*)@1",m_hf)
		/**
		 * \brief Read a file
		 *
		 * @param sz is the number of bytes to read
		 * @return A string containing the bytes actually read
		*/
		inline Read(iptr sz)
			ret=new char[sz]
			n=fread(ret,1,sz,_gethf())
			ret.resize(n)
			return ret
		/**
		 * \brief Write a file
		 *
		 * @param s is the content to write
		 * @return An integer representing the number of bytes written
		*/
		auto Write(string s)
			BLOCK_SIZE=iptr(128<<20)
			ret_all=0L
			for i=0:BLOCK_SIZE:s.n-1
				sz=min(s.n-i,BLOCK_SIZE)
				ret=fwrite(__pointer(iptr(s.d)+i),1,sz,_gethf())
				ret_all+=ret
				if ret!=sz:break
			return ret_all
		/**
		 * \brief Set the file pointer to an absolute location
		 *
		 * @param p is the new file pointer location, in bytes.
		 * @return A non-zero value if the function succeeds, zero if it fails.
		*/
		inline Seek(iptr p)
			return !fseek(_gethf(),p,SEEK_SET)
		/**
		 * \brief Get the file pointer
		 *
		 * @return The current file pointer location, in bytes
		*/
		inline Position()
			return ftell(_gethf())
		/**
		 * \brief Move the file pointer by a relative amount
		 *
		 * @param p is the number of bytes to move. p can be negative.
		 * @return A non-zero value if the function succeeds, zero if it fails.
		*/
		inline Move(iptr p)
			return !fseek(_gethf(),p,SEEK_CUR)
		/**
		 * \brief Set the file pointer to a location relative to the end of file
		 *
		 * @param p is the number of bytes to move back from the end of file.
		 * @return A non-zero value if the function succeeds, zero if it fails.
		*/
		inline SeekFromEnd(iptr p)
			return !fseek(_gethf(),p,SEEK_END)
		inline Flush()
			fflush(_gethf())
	/**
	 * \brief Open a file
	 *
	 * This function opens a file using the C Runtime and returns a file object.
	 * @param fn is the file name, in UTF-8 encoding
	 * @param mode is the access mode mask, which can take a combination of the following values:
	 * Value | Meaning
	 * ----- | -------
	 * OPEN_READ | Enables read access
	 * OPEN_WRITE | Enables write access
	 * @return An IFile interface that can be used to access the file. If the function fails, it returns NULL.
	 * @see CrtFile
	 * @see CreateFile
	*/
	auto fopen(string fn,int mode)
		if mode&OPEN_READ:
			if mode&OPEN_WRITE:
				smode="r+"
			else
				smode="r"
		else
			if mode&OPEN_WRITE:
				smode="w"
			else
				smode="r"
		if Platform.IS_WINDOWS:
			fnu=toNativeString(fn.Replace(["/","\\"]))
			smodeu=Algorithm.Utf8ToUnicode(smode);smodeu.push(i16('b'));smodeu.push(i16(0))
			hf=_wfopen(fnu,smodeu)
		else
			hf=System.OS_API._fopen(toNativeString(fn),toNativeString(smode))
		if hf:
			return CFile(){m_hf:iptr(hf)}
		else
			return CFile.NULL
	/**
	 * \brief Open an existing file
	 *
	 * This function opens an existing file for read using the C Runtime and returns a file object.
	 * @param fn is the file name, in UTF-8 encoding
	 * @return A CFile interface that can be used to access the file. If the function fails, it returns NULL.
	 * @see CrtFile
	 * @see OpenFile
	*/
	inline OpenFile(string fn)
		if arguments.length>1:
			return fopen(fn,arguments[1])
		else
			return fopen(fn,OPEN_READ)
	/**
	 * \brief Create a new file
	 *
	 * This function creates a new file using the C Runtime and returns a file object.
	 * @param fn is the file name, in UTF-8 encoding
	 * @return A CFile interface that can be used to access the file
	 * @see CrtFile
	 * @see OpenFile
	*/
	inline CreateFile(string fn)
		return fopen(fn,OPEN_WRITE)
	struct TFileInfo
		created_time=u64(0)
		last_modified_time=u64(0)
		size=u64(0)
		attr=0
		inline latest_time()
			return max(created_time,last_modified_time)
		inline is_dir()
			return attr&FILE_ATTRIBUTE_DIRECTORY
	/**
	 * \brief Search for files at your own pace.
	 *
	 * Create a context that searches for a file or directory matching a specific name (possibly with wildcards) in a directory or recursively in a directory and all its subdirectories.
	 * @param fn is the path and the file name to be searched, in UTF-8 encoding. The file name can include wild cards like '*' and '?'
	 * @param flags is a bitmask specifying search options, which is a combination of the following values:
	 * Value | Meaning
	 * ----- | -------
	 * ENUM_FILE | Search for files
	 * ENUM_DIR | Search for directories
	 * ENUM_RECURSIVE | Enable recursive search
	 * ENUM_DOT | Include ".." in the search result
	 * If flags is zero, it defaults to ENUM_FILE.
	 * @return This function returns another function that returns (file name, TFileInfo) when called.
	 * When there's no more files, it returns a string.NULL for the file name
	*/
	auto CreateEnumFileContext(string fn,int flags)
		is_rec=!!(flags&ENUM_RECURSIVE)
		has_dir=!!(flags&ENUM_DIR)
		has_dd=(has_dir&&(flags&ENUM_DOT))
		has_file=(!has_dir||(flags&ENUM_FILE))
		s2=System.Env.ExpandEnvironmentStrings(fn).Replace(["\\","/"])
		pslash=s2.LastIndexOf('/')
		if pslash<0:
			path=new string("./")
			name=s2
		else
			path=s2[0:pslash]
			name=s2[pslash+1:]
		if Platform.IS_WINDOWS:
			path=path.Replace(["/","\\"])
		has_dir+=has_dd
		paths=new string[]
		paths.push(path)
		if Platform.IS_UNIX:
			fnbuf=new char[1024]
			handle=NULL
			return function(){
				fibuf0=__C(__pointer,"@decl:OSAL_TFileInfo @1={0}")
				fnret=string.NULL
				firet=TFileInfo()
				for(;;)
					if !handle||!osal_FindNext(handle, fnbuf,__C(__pointer,"((OSAL_TFileInfo*)@1)",fibuf0)):
						if paths.n:
							path=paths.pop()
						else
							break
						fname=path+name
						fname.push(char(0))
						if handle:
							osal_EndFind(handle)
						handle=osal_BeginFind(fname)
						continue
					fibuf=TFileInfo(){
						created_time:__C(u64,"((OSAL_TFileInfo*)@1)->created_time",fibuf0),
						last_modified_time:__C(u64,"((OSAL_TFileInfo*)@1)->last_modified_time",fibuf0),
						size:__C(u64,"((OSAL_TFileInfo*)@1)->size",fibuf0),
						attr:__C(int,"((OSAL_TFileInfo*)@1)->attr",fibuf0),
					}
					pzero=fnbuf.IndexOf(char(0))
					if pzero<0:pzero=fnbuf.n
					iname=new(fnbuf[0:pzero-1])
					doit=0
					if !fibuf.is_dir():
						if has_file:
							doit=1
					else
						if (iname.EndsWith("/.")||iname==".")||(iname.EndsWith("/..")||iname==".."&&has_dir!=2):
							continue
						if has_dir:
							doit=1
						if is_rec:
							paths.push(iname+"/")
					if doit:
						fnret=iname
						firet=fibuf
						break
				return (fnret,firet)
			}
		else
			handle=NULL
			return function(){
				fd=__C(__pointer,"@decl:WIN32_FIND_DATAW @1={0}")
				fnret=string.NULL
				firet=TFileInfo()
				for(;;)
					if handle==INVALID_HANDLE_VALUE||!handle||!FindNextFileW(handle,fd):
						if paths.n:
							path=paths.pop()
						else
							break
						fname=path+name
						fnameu=toNativeString(fname.Replace(["/","\\"]))
						if handle!=INVALID_HANDLE_VALUE&&handle:
							FindClose(handle)
						handle=FindFirstFileW(fnameu,__C(__pointer,"(WIN32_FIND_DATAW*)@1",fd))
						if handle==INVALID_HANDLE_VALUE||!handle:
							continue
					fdname=pwcharToString(__C(__pointer,"(void*)((WIN32_FIND_DATAW*)@1)->cFileName",fd),1024)
					iname=path+Algorithm.UnicodeToUtf8(fdname)
					doit=0
					if !(__C(int,"((WIN32_FIND_DATAW*)@1)->dwFileAttributes",fd)&FILE_ATTRIBUTE_DIRECTORY):
						if has_file:
							doit=1
					else
						if fdname.n>0&&fdname[0]==i16('.'):
							if fdname.n==1||fdname[1]==i16('.')&&fdname.n==2&&has_dir!=2:
								if !FindNextFileW(handle,fd):break
								continue
						if has_dir:
							doit=1
						if is_rec:
							paths.push(iname+"\\")
					if doit:
						fi=TFileInfo(){
							attr:__C(int,"(int)((WIN32_FIND_DATAW*)@1)->dwFileAttributes",fd),
							created_time:__C(u64,"*(unsigned long long*)&((WIN32_FIND_DATAW*)@1)->ftCreationTime",fd)/10000000ULL-11644473600ULL,
							last_modified_time:__C(u64,"*(unsigned long long*)&((WIN32_FIND_DATAW*)@1)->ftLastWriteTime",fd)/10000000ULL-11644473600ULL,
							size:(u64(u32(__C(int,"(int)((WIN32_FIND_DATAW*)@1)->nFileSizeHigh",fd)))<<32)+u64(u32(__C(int,"(int)((WIN32_FIND_DATAW*)@1)->nFileSizeLow",fd)))
						}
						fnret=iname.Replace(["\\","/"])
						firet=fi
						break
				return (fnret,firet)
			}
	/**
	 * \brief Search for files.
	 *
	 * Searches for a file or directory matching a specific name (possibly with wildcards) in a directory or recursively in a directory and all its subdirectories
	 * @param fn is the path and the file name to be searched, in UTF-8 encoding. The file name can include wild cards like '*' and '?'
	 * @param flags is a bitmask specifying search options, which is a combination of the following values:
	 * Value | Meaning
	 * ----- | -------
	 * ENUM_FILE | Search for files
	 * ENUM_DIR | Search for directories
	 * ENUM_RECURSIVE | Enable recursive search
	 * ENUM_DOT | Include ".." in the search result
	 * If flags is zero, it defaults to ENUM_FILE.
	 * @return This function is an enumerator and it can only be used in foreach. For example:
	 *
	 *     foreach file_name,file_info in IO.EnumFiles("c:\*.txt",IO.ENUM_FILE|IO.ENUM_RECURSIVE)
	 *         Console.Writeln(file_name,' ',file_info.size)
	 *
	 * The function returns two values to the foreach loop body. The first value is a string representing file name. The second value is a TFileInfo structure containing the other file information.
	 * @see TFileInfo
	*/
	inline EnumFiles(string fn,int flags)
		ffindnext=CreateEnumFileContext(fn,flags)
		return {forEach:inline(fbody){
			for(;;)
				(fn,fi)=ffindnext()
				if fn:
					fbody(fn,fi)
				else
					break
		}}
	/**
	 * \brief Query the current directory.
	 *
	 * @return A string representing the current directory. If the function fails, it returns NULL.
	 * @see SetCurrentDirectory
	*/
	auto CurrentDirectory()
		if Platform.IS_UNIX:
			buf=new char[1024]
			getcwd(buf,1023)
			for i=0:buf.n-1
				if !buf[i]:
					buf.resize(i)
					break
			return buf
		else
			buf=new i16[264]
			if !GetCurrentDirectoryW(260,buf):return string.NULL
			for i=0:buf.n-1
				if !buf[i]:
					buf.resize(i)
					break
			return Algorithm.UnicodeToUtf8(buf)
	/**
	 * \brief Set the current directory.
	 *
	 * @param dir is a string representing the new current directory.
	 * @return A non-zero value if the function succeeds, zero if it fails.
	 * @see CurrentDirectory
	*/
	auto SetCurrentDirectory(string dir)
		if Platform.IS_UNIX:
			su=toNativeString(dir)
			return chdir(su)==0
		else
			su=toNativeString(dir.Replace(["/","\\"]))
			return SetCurrentDirectoryW(su)
	/**
	 * \brief Check whether a file exists
	 *
	 * @param fn is the file name, in UTF-8 encoding.
	 * @return A non-zero value if the file exists, zero if it doesn't or if it's a directory.
	 * @see DirExists
	*/
	auto FileExists(string fn)
		if Platform.IS_UNIX:
			fnz=new(fn)
			fnz.push(char(0))
			ret=(osal_GetFileAttributes(fnz)!=-1)
			return ret
		else
			su=toNativeString(fn.Replace(["/","\\"]))
			ret=(GetFileAttributesW(su)!=-1)
			return ret
	/**
	 * \brief Check whether a directory exists
	 *
	 * @param dir is the directory name.
	 * @return A non-zero value if the directory exists, zero if it doesn't or if it's an ordinary file.
	 * @see FileExists
	*/
	auto DirExists(string dir)
		if Platform.IS_UNIX:
			fnz=new(dir)
			fnz.push(char(0))
			attr=(osal_GetFileAttributes(fnz)!=-1)
			return attr!=-1&&(attr&FILE_ATTRIBUTE_DIRECTORY)
		else
			su=toNativeString(dir.Replace(["/","\\"]))
			attr=GetFileAttributesW(su)
			return attr!=-1&&(attr&FILE_ATTRIBUTE_DIRECTORY)
	/**
	 * \brief Get the size of a file, in bytes
	 *
	 * @param fn is the file name, in UTF-8 encoding.
	 * @return The file size, or -1LL if the function fails.
	 * @see EnumFiles, FileExists
	*/
	auto GetFileSize(string fn)
		if Platform.IS_UNIX:
			fnz=clone(fn)
			fnz.push('\0')
			fd=open(fnz,O_RDONLY)
			if fd==-1:return -1LL
			sz=osal_GetFileSize64(fd)
			close(fd)
			return sz
		else
			fnu=toNativeString(fn.Replace(["/","\\"]))
			hf=CreateFileW(fnu,
				GENERIC_READ,
				FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE,
				NULL,
				OPEN_EXISTING,
				FILE_ATTRIBUTE_NORMAL,
				NULL)
			if hf&&hf!=INVALID_HANDLE_VALUE:
				sz=-1LL
				GetFileSizeEx(hf,__C(__pointer,"(LARGE_INTEGER*)@1",&sz))
				CloseHandle(hf)
				if sz!=-1LL:return sz
		return -1LL
	/**
	 * \brief Delete a file
	 *
	 * @param fn is the file name, in UTF-8 encoding.
	 * @return A non-zero value if the function succeeds, zero if it fails.
	 * @see MoveFile, CopyFile
	*/
	auto DeleteFile(string fn)
		if Platform.IS_UNIX:
			s=new(fn);s.push(char(0))
			return remove(s)==0
		else
			su=toNativeString(fn.Replace(["/","\\"]))
			return DeleteFileW(su)
	/**
	 * \brief Move or rename a file
	 *
	 * @param src is the source file name, in UTF-8 encoding.
	 * @param tar is the target file name, in UTF-8 encoding.
	 * @return A non-zero value if the function succeeds, zero if it fails.
	 * @see DeleteFile, CopyFile
	*/
	auto MoveFile(string src,string tar)
		if Platform.IS_UNIX:
			srcs=new(src);srcs.push(char(0))
			tars=new(tar);tars.push(char(0))
			return rename(srcs,tars)==0
		else
			srcu=toNativeString(src.Replace(["/","\\"]))
			taru=toNativeString(tar.Replace(["/","\\"]))
			return MoveFileW(srcu,taru)
	/**
	 * \brief Copy a file
	 *
	 * @param src is the source file name, in UTF-8 encoding.
	 * @param tar is the target file name, in UTF-8 encoding.
	 * @return A non-zero value if the function succeeds, zero if it fails.
	 * @note If tar refers to an existing file, it will be overwritten.
	 * @see DeleteFile, CopyFile
	*/
	auto CopyFile(string src,string tar)
		if Platform.IS_UNIX:
			COPY_BUFFER=1048576
			fi=OpenFile(src)
			if !fi:return 0
			fo=CreateFile(tar)
			if !fo:return 0
			for(;;)
				s=fi.Read(fi)
				if !s.n:break
				if fo.Write(s)<s.n:return 0
			return 1
		else
			srcu=toNativeString(src.Replace(["/","\\"]))
			taru=toNativeString(tar.Replace(["/","\\"]))
			return CopyFileW(__pointer(srcu.d),__pointer(taru.d),0)
	/**
	 * \brief Create a directory.
	 *
	 * @param dir is a string representing the new current directory.
	 * @return A non-zero value if the function succeeds, zero if it fails.
	*/
	auto CreateDirectory(string dir)
		if Platform.IS_UNIX:
			sdir=new(dir);sdir.push(char(0))
			return mkdir(sdir,509)==0
		else
			su=toNativeString(dir.Replace(["/","\\"]))
			return CreateDirectoryW(__pointer(su.d),NULL)
	__stderr=CFile.NULL
	auto stderr()
		if !__stderr:
			__stderr=CFile(){m_hf:iptr(__C_pure(__pointer,'stderr'))}
		return __stderr
	__stdout=CFile.NULL
	auto stdout()
		if !__stdout:
			__stdout=CFile(){m_hf:iptr(__C_pure(__pointer,'stdout'))}
		return __stdout
		
module Algorithm
	import System.detail.*
	//////////////////////
	//>begin_private
	g_mt=u32[].NULL
	g_mti=0
	//>end_private
	//! \brief A compiled regular expression
	class Regex
		//>begin_private
		//coulddo: length 0 matches?
		bcode=new u8[]
		nsave=0
		dfaified=0//means "have tried to dfaify"
		int[] g_cst
		int cset_size
		int2[] dfa
		int[] svcalls
		int max_nsaves
		//int[] accs
		auto CreateInitialState(int sv)
			ret=new RegexNfaState
			ret.pc=new int[1]
			ret.pc[0]=0
			if sv:
				ret.sv=new iptr[this.nsave]
			return ret
		auto stepForward(const REAL_RUN,int[] pcpos,int[] pcpos2,int pstd,RegexNfaState sts,int ch0,iptr pos)
			auto acc=0
			auto bcode=this.bcode
			auto nsave=this.nsave
			if REAL_RUN:
				pcs_ret=new int[sts.pc.n]
				pcs_ret.n=0
				if sts.sv:
					svs_ret=new iptr[sts.sv.n]
					svs_ret.n=0
			else
				st2=this.CreateInitialState(0)
				st2.pc.resize(0)
				st2.sv=new iptr[]
				sz_drysave=1+((this.nsave+31)>>5)
				cur_saves=new iptr[sz_drysave]
				svs2=new iptr[]
				accst=iptr[].NULL
			//bksts_n=sts.pc.n
			pcs=sts.pc
			pcs2=new int[]
			if REAL_RUN:
				svs=sts.sv
				if svs:
					svs2=new iptr[]
			pcs2_ptr=0L
			for(I=0;I<pcs.n||pcs2_ptr<pcs2.n;)
				//Console.Writeln(pcs.n,' ',svs?svs.n:0,' ',nsave)
				ched=0
				if REAL_RUN:
					is_svs2=0
				if pcs2_ptr<pcs2.n:
					pc=pcs2[pcs2_ptr]
					ched=(pc&1)
					pc>>=1
					if REAL_RUN:
						if svs2:
							psvs=svs2.d+pcs2_ptr*nsave
						is_svs2=1
					else
						//base id + saved-ness flag
						slice=svs2[pcs2_ptr*sz_drysave:pcs2_ptr*sz_drysave+sz_drysave-1]
						copy(cur_saves,slice)
						slice.discard()
					pcs2_ptr++
				else
					if pcs2_ptr:
						pcs2_ptr=0
						pcs2.n=0
						if REAL_RUN:
							if svs2:svs2.n=0
						else
							svs2.n=0
					pc=pcs[I]
					if REAL_RUN:
						if svs:
							psvs=svs.d+I*nsave
					else
						for j=1:cur_saves.n-1
							cur_saves[j]=0
						cur_saves[0]=I
					I++
				//if I>=bksts_n:
				if pc<0:continue
				for(;;)
					ch=int(bcode[pc]);pc++
					if ch==0:
						ch=int(bcode[pc]);pc++
						pcx=(pc+3)&-4
						switch ch{
						default:
							assert(0)
							break
						case RB_SPL:
							if pcpos2[pc-ched]<pstd:
								pcpos2[pc-ched]=pstd
								pc=pcx+4
								pc2=pc+__memory(int,bcode.d+pcx)
								//if pcpos[pc]<pstd-1:
								//deadloop happens for (.*)+
								//need another array to remove that: higher bits of pcpos? no
								//explore high priority pc2 first
								//if pcs2.n<=pcs2_ptr:pcs2.push()
								//pcs2[pcs2_ptr]=pc*2+ched
								pcs2.push(pc*2+ched)
								if REAL_RUN:
									if svs:
										//_copy(svs,svs.n-nsave,I*nsave, nsave)
										//__builtin.memcpy(svs2.d+pcs2_ptr*nsave,psvs,nsave*sizeof(iptr))
										if is_svs2:
											svs2.resize(svs2.n+nsave)
											psvs=svs2.d+pcs2_ptr*nsave
											__basic_api.memcpy(__pointer(svs2.d+svs2.n-nsave),__pointer(psvs),nsave*sizeof(iptr))
										else
											svs2.push(psvs,nsave)
								else
									//record save mapping
									svs2.push(cur_saves)
								pc=pc2
								continue
							break
						case RB_JMP:
							pc=pcx+4
							pc+=__memory(int,bcode.d+pcx)
							continue
						case RB_CSET:
							if ched:
								//we already had ch, record pc
								pc-=2
								if pcpos[pc]<pstd:
									if REAL_RUN:
										//pcs[pst2]=pc
										//if pst2!=I&&svs:
										//	_copy(svs,pst2*nsave,I*nsave, nsave)
										pcs_ret.push(pc)
										if svs:
											svs_ret.push(psvs,nsave)
										//assert(pst2<=I)
										//pst2++
									else
										st2.pc.push(pc)
										st2.sv.push(cur_saves)
									pcpos[pc]=pstd
								break
							pc=pcx+32
							if (__memory(u32,bcode.d+pcx+(ch0>>5)*4))&(1u<<(ch0&31)):
								ched=1
								continue
							break
						case RB_SAVE:
							pc=pcx+4
							if REAL_RUN:
								if svs:
									assert(__memory(int,bcode.d+pcx)<nsave)
									__memory(iptr,psvs+__memory(int,bcode.d+pcx)*sizeof(iptr))=pos+ched
							else
								//record the save
								if ched:
									svid=__memory(int,bcode.d+pcx)
									assert(svid<nsave&&svid>=0)
									cur_saves[1+(svid>>5)]|=1L<<(svid&31)
							continue
						case RB_MATCH:
							if pcpos[bcode.n]<pstd&&ched:
								//accept
								acc=1
								if REAL_RUN:
									pcs_ret.push(-1)
									if svs:
										svs_ret.push(psvs,nsave)
									//pcs[pst2]=-1
									//if pst2!=I&&svs:
									//	_copy(svs,pst2*nsave,I*nsave, nsave)
									//assert(pst2<=I)
									//pst2++
								else
									if !accst:
										accst=new(cur_saves)
										//accst[0]|=0x40000000
								pcpos[bcode.n]=pstd
							break
						}
					else
						if ched:
							//record pc when we have matched a ch
							pc--
							if pcpos[pc]<pstd:
								if REAL_RUN:
									pcs_ret.push(pc)
									if svs:
										svs_ret.push(psvs,nsave)
									//pcs[pst2]=pc
									//if pst2!=I&&svs:
									//	_copy(svs,pst2*nsave,I*nsave, nsave)
									//assert(pst2<=I)
									//pst2++
								else
									st2.pc.push(pc)
									st2.sv.push(cur_saves)
								pcpos[pc]=pstd
						else if ch==ch0:
							ched=1
							continue
					break
			if REAL_RUN:
				//pcs.resize(pst2)
				//if svs:svs.resize(pst2*nsave)
				sts.pc=pcs_ret
				sts.sv=svs_ret
				return acc
			else
				if accst:
					st2.pc.push(-1)
					st2.sv.push(accst)
				//sts.pc.resize(bksts_n)
				//if sts.sv:sts.sv.resize(bksts_n*nsave)
				return st2
		auto dfaify()
			dfaified=1
			//RegexState[] stepForward(int[] pcpos,int pstd,RegexState[] sts,int ch0,int pos)
			repre=new u8[cset_size]
			for i=255:-1:0
				repre[g_cst[i]]=i
			sts=CreateInitialState(0)
			stmap=new int[int[]]
			maxid=1
			stmap[sts.pc]=maxid
			pcpos=new int[bcode.n+1]
			pcpos2=new int[bcode.n+1]
			pstd=0
			tran=new int2[]
			//accs=new int[]
			auto svcalls=new int[]
			stss=new RegexNfaState[]
			stss.push(sts)
			budget=1024+bcode.n*cset_size
			szsave=1+((nsave+31)>>5)
			auto max_nsaves=0
			for(id0=0;id0<maxid;id0++)
				sts=stss[id0]
				//Console._write(id0+1)
				//for j=0:sts.pc.n-1
				//	Console._write(' ',sts.pc[j])
				//Console.Writeln()
				if tran.n<maxid*cset_size:
					tran.resize(maxid*cset_size)
				//pc0=sts.pc
				foreach ch,I in repre
					pstd++
					//sts.pc=new(pc0)
					st2=stepForward(0,pcpos,pcpos2,pstd,sts,int(ch),0)
					save_calls=st2.sv
					st2.sv=NULL
					acc_delta=0
					if st2.pc.n:
						//st2.pc.Sort(function(a,b){return (uint)a<(uint)b})
						if st2.pc.n&&st2.pc.back()<0:
							//acc=-st2.pc.back()
							st2.pc.pop()
							acc_delta=0x3fffffff
						id2=stmap[st2.pc]
						if !id2:
							maxid++
							stmap[st2.pc]=maxid
							stss.push(st2)
							//accs.resize(maxid)
							//accs[maxid-1]=acc
							id2=maxid
					else
						id2=0
					//Console.Writeln(id0,' ',ch,' ',I,' ',id2,' ',acc,' ',cset_size)
					//compress and add terminator
					assert(save_calls.n%szsave==0)
					psvcalls=int(svcalls.n)
					max_nsaves=max(max_nsaves,int(save_calls.n/szsave))
					svcalls.push(int(save_calls.n/szsave+acc_delta))
					svcalls.resize(psvcalls+1+save_calls.n)
					for i=0:save_calls.n-1
						svcalls[psvcalls+1+i]=int(save_calls[i])
					tran[id0*cset_size+I]=int2(id2,psvcalls)
				if maxid>budget:
					//give up
					return
			if tran.n<maxid*cset_size:
				tran.resize(maxid*cset_size)
			for i=0:tran.n-1
				tran[i].x--//=(tran[i]-1)*cset_size
			dfa=tran
			this.svcalls=svcalls
			this.max_nsaves=max_nsaves
			//Console.Writeln('dfa: ',tran.n/cset_size,' states, ',svcalls.n,' saveops')
			//for i=0:accs.n-1
			//	accs[i]--
			//for i=0:maxid-1
			//	Console.Writeln(i,' ',accs[i])
			//	for j=0:cset_size-1
			//		Console._write(repre[j],':',tran[i*cset_size+j],'  ')
			//	Console.Writeln()
			//Console.Writeln()
			//.accs=accs
		auto InitRaw(RegexOp op0)
			//fromop
			rops=new RegexOp[]
			auto dfs(RegexOp a)
				if !a||a.ofs<0:return
				if a.op==REGEX_SPL2:
					a.op=REGEX_SPL
					tmp=a.x
					a.x=a.ob.as(RegexOp)
					a.ob=variant(tmp)
				if a.op==REGEX_SPL:
					while a.ob&&(a.ob.as(RegexOp)).op==REGEX_NIL:
						a.ob=variant((a.ob.as(RegexOp)).x)
				while a.x&&a.x.op==REGEX_NIL:
					a.x=a.x.x
				a.ofs=-1
				rops.push(a)
				dfs(a.x)
				if a.op==REGEX_SPL:
					if !a.ob:
						//add a virtual dead node to avoid crashing
						rop_dead=new RegexOp(){op:REGEX_CSET,ob:variant(new u32[8])}
						a.ob=variant(rop_dead)
					dfs(a.ob.as(RegexOp))
			//nil can only be merge points and shouldn't be head
			assert(op0.op!=REGEX_NIL)
			dfs(op0)
			auto bcode=this.bcode
			bcode.clear()
			slots=new int[]
			jofs=new int[rops.n]
			auto g_cst=new int[256]
			csetid=1
			/*
			foreach op,I in rops
				Console.Write(op,': ')
				//op.op,' ',op.x,' ',op.ob
				if op.op>=REGEX_CHAR:
					Console.Write("CHAR '",char(op.op-REGEX_CHAR),"'")
				else if op.op<0:
					Console.Write("SAVE sv",~op.op)
				else
					switch op.op{
					default:
						assert(0)
						break
					case REGEX_STR:
						ops=(string)op.ob
						Console.Write('STR "',ops,'"')
						break
					case REGEX_CSET:
						Console.Write('CSET')
						break
					case REGEX_SPL:
						//generate a dangling spl
						Console.Write('SPL ',op.ob)
						break
					case REGEX_MATCH:
						Console.Write('MATCH')
						break
					}
				Console.Writeln(' --> ',op.x)
			*/
			foreach op,I in rops
				n0=bcode.n
				op.ofs=int(n0)
				what=op.op
				//__builtin.printf("%d %d\n",I,what)
				if what>=REGEX_CHAR:
					//0 case never happens here
					ch=what-REGEX_CHAR
					bcode.push(u8(ch))
					g_cst[ch]=csetid++
				else if what<0:
					//save
					//leave slot id there
					bcode.push(u8(0))
					bcode.push(u8(RB_SAVE))
					n0x=(bcode.n+3)&-4
					slots.push(int(n0x))
					bcode.resize(n0x+4)
					__memory(int,bcode.d+n0x)=~what
				else
					switch what{
					default:
						assert(0)
						break
					case REGEX_STR:
						ops=op.ob.as(string)
						for i=0:ops.n-1
							auto ch=ops[i]
							bcode.push(u8(ch))
							if !ch:
								bcode.push(u8(RB_CSET))
								n0x=(bcode.n+3)&-4
								bcode.resize(n0x+32)
								__basic_api.memset(__pointer(bcode.d+n0x),32,0)
								bcode[n0x]=u8(1)
							g_cst[int(u8(ch))]=csetid++
						break
					case REGEX_CSET:
						bcode.push(u8(0))
						bcode.push(u8(RB_CSET))
						n0x=(bcode.n+3)&-4
						bcode.resize(n0x+32)
						__basic_api.memcpy(__pointer(bcode.d+n0x),__pointer(op.ob.as(u32[]).d),32)
						ob=op.ob.as(u32[])
						for chi=0:255
							if ob[chi>>5]&(1u<<(chi&31)):
								g_cst[chi]+=csetid
						csetid+=csetid
						if csetid>=1024:
							//unique/compact
							idmap=new int[csetid]
							csetid=0
							for chi=0:255
								setid=g_cst[chi]
								if idmap[setid]==0:
									idmap[setid]=++csetid
								g_cst[chi]=idmap[setid]-1
						break
					case REGEX_SPL:
						//generate a dangling spl
						bcode.push(u8(0))
						bcode.push(u8(RB_SPL))
						n0x=(bcode.n+3)&-4
						bcode.resize(n0x+4)
						break
					case REGEX_MATCH:
						bcode.push(u8(0))
						bcode.push(u8(RB_MATCH))
						//n0x=(bcode.n+3)&-4
						//bcode.resize(n0x)
						break
					}
				if what!=REGEX_MATCH&&(I==rops.n-1||I<rops.n-1&&iptr(op.x)!=iptr(rops[I+1]))&&op.x:
					//generate a dangling jmp
					bcode.push(u8(0))
					bcode.push(u8(RB_JMP))
					n0x=(bcode.n+3)&-4
					jofs[I]=int(n0x)
					bcode.resize(n0x+4)
					//leave it be for now
				else
					jofs[I]=-1
			foreach op,I in rops
				n0=op.ofs
				if op.op==REGEX_SPL:
					//fill spl target
					op2=op.ob.as(RegexOp)
					n0+=2
					n0x=(n0+3)&-4
					__memory(i32,bcode.d+n0x)=op2.ofs-(n0x+4)
				if jofs[I]>=0:
					//fill jmp target
					__memory(i32,bcode.d+jofs[I])=op.x.ofs-(jofs[I]+4)
			auto nsave=-1
			foreach ps in slots
				nsave=max(nsave,__memory(i32,bcode.d+ps))
			nsave++
			this.nsave=nsave
			idmap=new int[csetid]
			csetid=0
			for chi=0:255
				setid=g_cst[chi]
				if idmap[setid]==0:
					idmap[setid]=++csetid
				g_cst[chi]=idmap[setid]-1
			this.g_cst=g_cst
			cset_size=csetid
			//get rid of op: break references
			foreach op in rops
				op.x=RegexOp.NULL;op.ob=__variant.NULL
		//>end_private
		__init__=inline(arg){
			if typeof(arg)==string:
				op0=parseRegex(arg)
			else
				op0=arg
			//append returning tail
			a_tail=op0
			while a_tail.x:
				a_tail=a_tail.x
			a_tail.x=new RegexOp(){op:REGEX_MATCH}
			InitRaw(op0)
		}
		//>begin_private
		PARSE_SHORT=0
		PARSE_LONG=1
		PARSE_EXACT=2
		PARSE_SEARCH=3
		auto ParsePrefix(string s,const mode,const IS_EX)
			if !dfaified:
				dfaify()
			best=-1L;bac=-1
			if dfa:
				tran=dfa
				auto svcalls=this.svcalls
				if IS_EX:
					bstsv=iptr[].NULL
					if mode==PARSE_SEARCH:
						cursv=iptr[].NULL
					auto nsave=this.nsave
					szsave=1+((nsave+31)>>5)
					sv=new iptr[max_nsaves*nsave]
					sv_next=new iptr[max_nsaves*nsave]
				//Console.Writeln(s)
				st=0
				foreach ch,I in s
					cid=g_cst[int(u8(ch))]
					tr=tran[st*cset_size+cid]
					st=tr.x
					psvcalls=tr.y
					nsvmap=svcalls[psvcalls++]
					acc=(nsvmap&0x40000000)
					nsvmap&=0x3fffffff
					if IS_EX:
						for svid=0:nsvmap-1
							srcid=svcalls[psvcalls]
							svidbase=svid*nsave
							copy(sv_next[svidbase:],sv[srcid*nsave:srcid*nsave+nsave-1])
							for j=0:nsave-1
								if svcalls[psvcalls+1+(j>>5)]&(1<<(j&31)):
									sv_next[svidbase+j]=I+1
							psvcalls+=szsave
						swap_tmp=sv
						sv=sv_next
						sv_next=swap_tmp
					else
						psvcalls+=nsvmap
					if mode==PARSE_SEARCH:
						if best>=0L:
							if !acc:break
						if acc:
							curbest=I
							curbac=1
							if IS_EX:
								//sv_next -- we should use the ORIGINAL
								if !cursv:
									cursv=new iptr[nsave]
								srcid=svcalls[psvcalls]
								copy(cursv,sv_next[srcid*nsave:srcid*nsave+nsave-1])
								for j=0:nsave-1
									if svcalls[psvcalls+1+(j>>5)]&(1<<(j&31)):
										cursv[j]=I+1
								if best>=0L&&bstsv[2]!=cursv[2]:
									//we're past the 1st match already
									break
							best=curbest
							bac=curbac
							if !bstsv:
								bstsv=new(cursv)
							else
								copy(bstsv,cursv)
					else
						if acc:
							best=I
							bac=1
							if IS_EX:
								//sv_next -- we should use the ORIGINAL
								if !bstsv:
									bstsv=new iptr[nsave]
								srcid=svcalls[psvcalls]
								copy(bstsv,sv_next[srcid*nsave:srcid*nsave+nsave-1])
								for j=0:nsave-1
									if svcalls[psvcalls+1+(j>>5)]&(1<<(j&31)):
										bstsv[j]=I+1
							if mode==PARSE_SHORT:
								break
					if st<0:break
			else
				pcpos=new int[bcode.n+1]
				pcpos2=new int[bcode.n+1]
				pstd=0
				sts=CreateInitialState(IS_EX)
				bstsv=iptr[].NULL
				foreach ch,I in s
					//Console._write(ch,' ',I,':')
					//foreach stx in sts.pc
					//	Console._write(' ',stx)
					//Console.Writeln()
					pstd++
					stepForward(1,pcpos,pcpos2,pstd,sts,int(u8(ch)),I)
					if !sts.pc.n:break
					is_brk=0
					foreach pc,J in sts.pc
						if pc<0:
							best=I
							bac=-pc
							if IS_EX:
								bstsv=new(sts.sv[J*nsave:(J+1)*nsave-1])
							if mode==PARSE_SHORT:
								is_brk=1
								break
					if is_brk:break
			if IS_EX:
				if mode==PARSE_EXACT:
					if best!=s.n-1:
						bstsv=NULL
				if !bstsv:
					if IS_EX==2:
						return iptr[].NULL
					else
						return string[].NULL
				else
					nsave=(nsave>>1)
					if IS_EX==2:
						ret=new iptr[(nsave+1)*2]
						ret[0]=0;ret[1]=best+1;
						for i=0:nsave-1
							ret[i*2+2]=bstsv[i*2]
							ret[i*2+3]=bstsv[i*2+1]
					else
						ret=new string[nsave+1]
						ret[0]=s[0:best]
						for i=0:nsave-1
							ret[i+1]=s[bstsv[i*2]:bstsv[i*2+1]-1]
					return ret
			if IS_EX:
				if IS_EX==2:
					return iptr[].NULL
				else
					return string[].NULL
			else if mode==PARSE_EXACT:
				if best==s.n-1:
					return 1
				else
					return 0
			else
				return s[0:best]
		//>end_private
		//! \brief Return the longest prefix of a string that matches the regex
		auto LongestPrefix(string s)
			return ParsePrefix(s,PARSE_LONG,0)
		//! \brief Return the shortest prefix of a string that matches the regex
		auto ShortestPrefix(string s)
			return ParsePrefix(s,PARSE_SHORT,0)
		//! \brief Return whether the string matches the regex
		auto Match(string s)
			return ParsePrefix(s,PARSE_EXACT,0)
		//! \brief Find the longest matching prefix in a string and returns \link regexmatch a list of substring matches \endlink
		auto LongestPrefixEx(string s)
			return ParsePrefix(s,PARSE_LONG,1)
		//! \brief Find the shortest matching prefix in a string and returns \link regexmatch a list of substring matches \endlink
		auto ShortestPrefixEx(string s)
			return ParsePrefix(s,PARSE_SHORT,1)
		//! \brief Match the regex against a string and returns \link regexmatch a list of substring matches \endlink
		auto MatchEx(string s)
			return ParsePrefix(s,PARSE_EXACT,1)
		auto MatchExi(string s)
			return ParsePrefix(s,PARSE_EXACT,2)
		///////////////
		//! \brief Create an incremental matcher from the compiled regular expression
		auto Matcher()
			if !dfaified:
				dfaify()
			sc=new RegexIncrementalMatcher
			sc.ex=this
			sc.pcpos=new int[this.bcode.n+1]
			sc.pcpos2=new int[this.bcode.n+1]
			sc.Clear()
			return sc
		//todo: tokenizing enumerator
	/*! \brief An incremental matcher for a regular expression
	
	The incremental matcher matches the regex against a virtual string by \link Algorithm.RegexIncrementalMatcher.Add adding characters \endlink incrementally.
	*/
	class RegexIncrementalMatcher
		//>begin_private
		Regex ex
		int[] pcpos
		int[] pcpos2
		/////////
		RegexNfaState sts
		pstd=0
		/////////
		int stdfa
		iptr[] svdfa,svdfa_next
		/////////
		best=-1L
		I=0L
		iptr[] bstsv
		iptr[] bmatch
		//>end_private
		//! \brief Reset the incremental matcher by clearing the virtual string.
		auto Clear()
			this.pcpos=new int[this.ex.bcode.n+1]
			this.pcpos2=new int[this.ex.bcode.n+1]
			this.pstd=0
			this.best=-2
			this.bstsv=iptr[].NULL
			this.bmatch=iptr[].NULL
			this.I=0
			if this.ex.dfa:
				this.stdfa=0
				this.svdfa=new iptr[this.ex.max_nsaves*this.ex.nsave]
				this.svdfa_next=new iptr[this.ex.max_nsaves*this.ex.nsave]
			else
				this.sts=this.ex.CreateInitialState(1)
			//Console.Writeln('-----------')
		//! \brief Add a character to the virtual string
		auto Add(char ch)
			tran=this.ex.dfa
			if tran:
				if this.stdfa<0:return
				svcalls=this.ex.svcalls
				cid=this.ex.g_cst[int(u8(ch))]
				nsave=this.ex.nsave
				st=this.stdfa
				tr=tran[st*this.ex.cset_size+cid]
				st=tr.x
				this.stdfa=st
				/////////
				sv=this.svdfa
				sv_next=this.svdfa_next
				///
				psvcalls=tr.y
				nsvmap=svcalls[psvcalls++]
				acc=(nsvmap&0x40000000)
				nsvmap&=0x3fffffff
				szsave=1+((nsave+31)>>5)
				for svid=0:nsvmap-1
					srcid=svcalls[psvcalls]
					svidbase=svid*nsave
					copy(sv_next[svidbase:],sv[srcid*nsave:srcid*nsave+nsave-1])
					for j=0:nsave-1
						if svcalls[psvcalls+1+(j>>5)]&(1<<(j&31)):
							sv_next[svidbase+j]=this.I+1
					psvcalls+=szsave
				if acc:
					this.best=this.I
					if !this.bstsv:
						this.bstsv=new iptr[nsave]
					srcid=svcalls[psvcalls]
					//here sv is the original, which is fine
					copy(this.bstsv,sv[srcid*nsave:srcid*nsave+nsave-1])
					for j=0:nsave-1
						if svcalls[psvcalls+1+(j>>5)]&(1<<(j&31)):
							this.bstsv[j]=this.I+1
					this.bmatch=iptr[].NULL
				this.svdfa=sv_next
				this.svdfa_next=sv
				this.I++
			else
				if !this.sts.pc.n:return
				this.pstd++
				if this.ex.stepForward(1,this.pcpos,this.pcpos2,this.pstd,this.sts,int(u8(ch)),this.I):
					nsave=this.ex.nsave
					stssv=this.sts.sv
					foreach pc,J in this.sts.pc
						if pc<0:
							this.best=this.I
							this.bstsv=new(stssv[J*nsave:(J+1)*nsave-1])
							this.bmatch=NULL
							break
				this.I++
				//Console.Write('>>>ADD ',ch)
				//for i=0:.sts.pc.n-1
				//	Console.Write(' ',.sts.pc[i])
				//Console.Writeln()
		//! \brief Test whether the current virtual string matches the regex
		//>property
		inline is_matching(){return this.best==this.I-1}
		/*! \brief Obtain \link regexmatch a list of substring matches \endlink
		
		@return An integer array with an even number of elements. Every pair of integer represents a substring match as a byte offset range in the virtual string. 
		@note The function returns the longest prefix match. If there is no match, the function returns NULL
		*/
		auto GetMatch()
			if !this.bstsv:return iptr[].NULL
			if this.bmatch:return this.bmatch
			best=this.best
			bstsv=this.bstsv
			nsave=(this.ex.nsave>>1)
			ret=new iptr[(nsave+1)*2]
			ret[0]=0;ret[1]=best+1;
			for i=0:nsave-1
				ret[i*2+2]=bstsv[i*2]
				ret[i*2+3]=bstsv[i*2+1]
			this.bmatch=ret
			return ret
	//! \brief An abstract type representing an uncompiled regular expression
	RegexOp=detail.RegexOp
	//typedef Regex RegEx
	//! \brief Parse a regular expression string
	auto ParseRegex(string s)
		return detail.parseRegex(s)
	//! \brief Produce a regular expression that matches a string exactly
	auto RegexString(string s)
		ret=new RegexOp
		ret.op=REGEX_STR
		ret.ob=variant(s)
		return ret
	////! \brief Produce a regular expression that matches a charset exactly
	//RegexOp RegexCharset(string s)
	//	//todo: unicode charseting...
	//! \brief Concatenate two regular expressions
	(RegexOp+RegexOp)=function(RegexOp a,RegexOp b){
		a_tail=a
		while a_tail.x:
			a_tail=a_tail.x
		b_tail=b
		while b_tail.x:
			b_tail=b_tail.x
		a_tail.x=b
		a_tail=b_tail
		return a
	}
	//! \brief Compute the "or" of two regular expressions
	(RegexOp|RegexOp)=function(RegexOp a,RegexOp b){
		a_tail=a
		while a_tail.x:
			a_tail=a_tail.x
		b_tail=b
		while b_tail.x:
			b_tail=b_tail.x
		spl=new RegexOp(){op:REGEX_SPL,ob:variant(a)}
		spl.x=b
		nil=new RegexOp(){op:REGEX_NIL}
		a_tail.x=nil
		b_tail.x=nil
		a=spl;a_tail=nil
		return a
	}
	//>begin_private
	auto regex_dfs(const DO_SPL2,RegexOp[] rops,RegexOp a)
		if !a||a.ofs<0:return
		//Console.Writeln('entry ',gcRefCntValue(rops),' ',rops.nBound,' ',rops,' ',a)
		if DO_SPL2:
			if a.op==REGEX_SPL2:
				a.op=REGEX_SPL
				tmp=a.x
				a.x=a.ob.as(RegexOp)
				a.ob=variant(tmp)
		if a.op==REGEX_SPL:
			while a.ob&&(a.ob.as(RegexOp)).op==REGEX_NIL:
				a.ob=variant((a.ob.as(RegexOp)).x)
		//we can't NULL it: key to | failure
		while a.x&&a.x.op==REGEX_NIL&&a.x.x:
			a.x=a.x.x
		a.ofs=-1
		//Console.Writeln('dfs ',gcRefCntValue(rops),' ',rops.nBound,' ',gcRefCntValue(a))
		rops.push(a)
		//Console.Writeln('add ',gcRefCntValue(rops),' ',rops.nBound,' ',gcRefCntValue(a))
		regex_dfs(DO_SPL2,rops,a.x)
		if a.op==REGEX_SPL||a.op==REGEX_SPL2:
			regex_dfs(DO_SPL2,rops,a.ob.as(RegexOp))
	//>end_private
	//! \brief Create a bracket-enclosed version of a regular expression, so that the substring matching it would be \link regexmatch ultimately returned during a match \endlink.
	auto RegexBracket(RegexOp ret)
		rops=new RegexOp[]
		regex_dfs(0,rops,ret)
		slotid=-1
		foreach a in rops
			a.ofs=0
			if a.op<0:
				if slotid<~a.op:
					slotid=~a.op
		slotid++
		save0=new RegexOp(){op:~slotid}
		slotid++
		save0.x=ret
		ret_tail=ret
		while ret_tail.x:
			ret_tail=ret_tail.x
		save1=new RegexOp(){op:~slotid}
		slotid++
		ret_tail.x=save1
		ret=save0
		return ret
	//! \brief Create the reverse of a regular expression
	auto RegexReverse(RegexOp ret)
		a_tail=ret
		while a_tail.x:
			a_tail=a_tail.x
		a_tail.x=new RegexOp(){op:REGEX_MATCH}
		rops=new RegexOp[]
		regex_dfs(0,rops,ret)
		//mirror each node first
		ropmir=new RegexOp[rops.n]
		headid=-1
		foreach a,I in rops
			a.ofs=int(I)
			b=new(a)
			if b.op==REGEX_STR:
				//reverse
				s=b.ob.as(string)
				s2=new string
				for i=s.n-1:-1:0
					s2.push(s[i])
				b.ob=variant(s2)
			else if b.op==REGEX_MATCH:
				b.op=REGEX_NIL
				headid=int(I)
			else if b.op==REGEX_SPL||b.op==REGEX_SPL2:
				b.op=REGEX_NIL
				b.ob=__variant.NULL
			else if b.op<0:
				b.op^=1//swap save
			b.x=NULL
			ropmir[I]=b
		if headid<0:return Regex.NULL
		//reverse connectivity
		auto connect(int p,int q)
			b0=ropmir[p]
			b1=ropmir[q]
			if !b0.x:
				b0.x=b1
				return
			if b0.op==REGEX_NIL:
				b0.op=REGEX_SPL
				b0.ob=variant(b0.x)
				b0.x=b1
				return
			rspl=new RegexOp(){op:REGEX_SPL,ob:variant(b0.x)}
			b0.x=rspl
			rspl.x=b1
		foreach a,I in rops
			if a.op==REGEX_SPL:
				ax=a.ob.as(RegexOp)
				if ax:connect(ax.ofs,a.ofs)
		foreach a,I in rops
			ax=a.x
			if ax:connect(ax.ofs,a.ofs)
		foreach a,I in rops
			if a.op==REGEX_SPL2:
				ax=a.ob.as(RegexOp)
				if ax:connect(ax.ofs,a.ofs)
		//restore a
		foreach a in rops
			a.ofs=0
		a_tail.x=NULL
		ropmir[0].x=new RegexOp(){op:REGEX_MATCH}
		op0=ropmir[headid]
		while op0.x&&op0.op==REGEX_NIL:
			op0=op0.x
		foreach b in ropmir
			b.ofs=0
		rret=new Regex
		rret.InitRaw(op0)
		return rret
	//! \brief Create a case insensitive version of a regular expression
	auto RegexMakeCaseInsensitive(RegexOp ret)
		//Console.Writeln(__LINE__,' ','ret: ',ret,' ',gcRefCntValue(ret),' ',ret.op)
		rops=new RegexOp[]
		inline cseti(int ch)
			mk=new u32[8]
			for j in crange(8)
				mk[j]=0
			chi=ch^0x20
			mk[ch>>5]|=(1u<<(ch&31))
			if u32(ch-'a')<26u||u32(ch-'A')<26u:
				mk[chi>>5]|=(1u<<(chi&31))
			return mk
		regex_dfs(1,rops,ret)
		//Console.Writeln(__LINE__,' ','ret: ',ret,' ',gcRefCntValue(ret),' ',ret.op)
		foreach a in rops
			a.ofs=0
			if a.op==REGEX_STR:
				ax0=a.x
				b=RegexOp.NULL
				s=a.ob.as(string)
				inline addNode(RegexOp a2)
					if !b:
						a.ob=a2.ob
						a.op=a2.op
						b=a
					else
						b.x=a2
						b=a2
				plast=0
				foreach ch,I in s
					if u32(ch-'a')<26u||u32(ch-'A')<26u:
						if I-1>=plast:
							s2=new(s[plast:I-1])
							addNode(new RegexOp(){op:REGEX_STR,ob:variant(s2)})
						addNode(new RegexOp(){op:REGEX_CSET,ob:variant(cseti(int(ch)))})
						plast=int(I+1)
				if plast<s.n:
					s2=new(s[plast:s.n-1])
					addNode(new RegexOp(){op:REGEX_STR,ob:variant(s2)})
				if !b:b=a//empty string
				b.x=ax0
			else if a.op==REGEX_CSET:
				mk=a.ob.as(u32[])
				mk23=(mk[2]|mk[3])&u32((2<<26)-2)
				mk[2]|=mk23
				mk[3]|=mk23
			else if a.op>=REGEX_CHAR:
				ch=a.op-REGEX_CHAR
				if u32(ch-'a')<26u||u32(ch-'A')<26u:
					a.ob=variant(cseti(a.op-REGEX_CHAR))
					a.op=REGEX_CSET
		//Console.Writeln(__LINE__,' ','ret: ',ret,' ',gcRefCntValue(ret),' ',ret.op)
		return ret
	/* initializes mt[N] with a seed */
	//! \brief Manually initialize the random number generator using a 32-bit seed or a (potentially stronger) array seed
	InitRandom=function(u32 s){
		N=624
		g_mt=u32[N]
		mt=g_mt
		mt[0]=s;
		for (mti=1; mti<N; mti++)
			mt[mti] = (1812433253u * (mt[mti-1] ^ (mt[mti-1] >> 30)) + u32(mti));
	}
	InitRandomWithArray=function(u32[] init_key){
		N=624
		g_mt=u32[N]
		mt=g_mt
		key_length=init_key.n
		InitRandom(19650218u);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--)
			mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525u)) + init_key[j] + u32(j); /* non linear */
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		for (k=N-1; k; k--)
			mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941u)) - u32(i); /* non linear */
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		mt[0] = 0x80000000u; /* MSB is 1; assuring non-zero initial array */
	}
	//>begin_private
	auto _random_raw()
		//A C-program for MT19937, with initialization improved 2002/1/26.
		//Coded by Takuji Nishimura and Makoto Matsumoto.
		//Before using, initialize the state by using init_genrand(seed)
		//or init_by_array(init_key, key_length).
		//Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
		//All rights reserved.
		//Redistribution and use in source and binary forms, with or without
		//modification, are permitted provided that the following conditions
		//are met:
		//1. Redistributions of source code must retain the above copyright
		//notice, this list of conditions and the following disclaimer.
		//2. Redistributions in binary form must reproduce the above copyright
		//notice, this list of conditions and the following disclaimer in the
		//documentation and/or other materials provided with the distribution.
		//3. The names of its contributors may not be used to endorse or promote
		//products derived from this software without specific prior written
		//permission.
		//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		//"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		//LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		//A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
		//CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
		//EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
		//PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
		//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
		//LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		//NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
		//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		//Any feedback is very welcome.
		//http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
		//email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
		/* Period parameters */
		N=624
		M=397
		MATRIX_A=0x9908b0dfu
		UPPER_MASK=0x80000000u
		LOWER_MASK=0x7fffffffu
		mt=g_mt
		mti=g_mti
		/* generates a random number on [0,0xffffffff]-interval */
		mag01=[0x0u, MATRIX_A]
		/* mag01[x] = x * MATRIX_A  for x=0,1 */
		if (mti >= -1) /* generate N words at one time */
			if (mti == 0)   /* if init_genrand() has not been called, */
				InitRandom(5489u); /* a default initial seed is used */
				mt=g_mt
			for (kk=0;kk<N-M;kk++)
				y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1u];
			for (;kk<N-1;kk++)
				y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1u];
			y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1u];
			mti = -N-1;
		y = mt[mti+(N+1)];
		g_mti=mti+1
		/* Tempering */
		y ^= (y >> 11);
		y ^= (y << 7) & 0x9d2c5680u;
		y ^= (y << 15) & 0xefc60000u;
		y ^= (y >> 18);
		return y;
	//>end_private
	/*! \brief Generate a uniformly distributed random number using 
	<A HREF="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">MT-19937</A>
	
	@param T is the desired result type.
	@return A random number of type T
	@note The following is a list of all supported types and the corresponding entropy and numerical range:
	Type | Entropy in bits | Minimal value (inclusive) | Maximal value (inclusive)
	---- | --------------- | ------------- | -------------
	uint | 32 | 0u | 0xFFFFFFFFu
	int | 31 | 0 | 0x7FFFFFFF
	u64 | 64 | 0LLu | 0xFFFFFFFFFFFFFFFFLLu
	i64 | 63 | 0LL | 0x7FFFFFFFFFFFFFFFLL
	float | 23 | 0.0 | \f$\frac{2^{23}-1}{2^{23}}=0.99999988079071044921875\f$
	double | 52 | 0.0 | \f$\frac{2^{52}-1}{2^{52}}\approx 0.99999999999999977795539507496869\f$
	*/
	inline __longlong_as_double(i64 a)
		slot=a
		return __memory(f64,&slot)
	inline __double_as_longlong(f64 a)
		slot=a
		return __memory(i64,&slot)
	inline __int_as_float(i32 a)
		slot=a
		return __memory(f32,&slot)
	inline __float_as_int(f32 a)
		slot=a
		return __memory(i32,&slot)
	auto Random(const T)
		if T==u32:
			return _random_raw()
		else if T==i32:
			return i32(_random_raw()>>1)
		else if T==u64:
			a=_random_raw()
			b=_random_raw()
			return (u64(b)<<32)+u64(a)
		else if T==i64:
			a=_random_raw()
			b=_random_raw()
			return i64((u64(b)<<31)^u64(a))
		else if T==f32:
			//starc compiler can't handle *(f32*)&a reading
			a=_random_raw()>>9
			a|=0x3f800000u
			b=0.f
			__memory(u32,&b)=a
			return b-1.f
		else if T==f64:
			a=_random_raw()>>6
			b=_random_raw()>>6
			c=((u64(a)<<26)+u64(b))+0x3FF0000000000000LLu
			return __longlong_as_double(i64(c))-1.0
		else
			__error("System.Algorithm.Random() doesn't support type '@1', only 32/64 bit integers and floating point types are supported",T)
	auto RandomIptr(iptr exclusive_upper_bound)
		assert(exclusive_upper_bound>0L)
		delta=uptr(exclusive_upper_bound)
		mask=delta
		mask|=mask>>1
		mask|=mask>>2
		mask|=mask>>4
		mask|=mask>>8
		mask|=mask>>16
		if sizeof(iptr)>4:
			mask|=mask>>32
		for(;;)
			v=Random(uptr)&mask
			if v<uptr(exclusive_upper_bound):
				return iptr(v)
	////////////
	//>begin_private
	auto __SHA1(iptr data,iptr n_param)
		inline rotlFixed(int a,int b){return int((u32(a)<<b)+(u32(a)>>(32-b)))}
		inline reverse(int a)
			u=u32(a)
			u=((u&0x00ff00ffu)<<8)+((u>>8)&0x00ff00ffu)
			return rotlFixed(int(u),16)
		// start of Steve Reid's code
		n=n_param
		W=int[16]
		auto SHA_Transform_512bit(int[] state, iptr data)
			auto a = state[0];
			auto b = state[1];
			auto c = state[2];
			auto d = state[3];
			auto e = state[4];
			bbb = reverse(__memory(i32,data+0*sizeof(i32)));W[0]=bbb;e+=(d^(b&(c^d)))+bbb+0x5A827999+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = reverse(__memory(i32,data+1*sizeof(i32)));W[1]=bbb;d+=(c^(a&(b^c)))+bbb+0x5A827999+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = reverse(__memory(i32,data+2*sizeof(i32)));W[2]=bbb;c+=(b^(e&(a^b)))+bbb+0x5A827999+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = reverse(__memory(i32,data+3*sizeof(i32)));W[3]=bbb;b+=(a^(d&(e^a)))+bbb+0x5A827999+rotlFixed(c,5);d=rotlFixed(d,30);;
			bbb = reverse(__memory(i32,data+4*sizeof(i32)));W[4]=bbb;a+=(e^(c&(d^e)))+bbb+0x5A827999+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = reverse(__memory(i32,data+5*sizeof(i32)));W[5]=bbb;e+=(d^(b&(c^d)))+bbb+0x5A827999+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = reverse(__memory(i32,data+6*sizeof(i32)));W[6]=bbb;d+=(c^(a&(b^c)))+bbb+0x5A827999+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = reverse(__memory(i32,data+7*sizeof(i32)));W[7]=bbb;c+=(b^(e&(a^b)))+bbb+0x5A827999+rotlFixed(d,5);e=rotlFixed(e,30);;
			bbb = reverse(__memory(i32,data+8*sizeof(i32)));W[8]=bbb;b+=(a^(d&(e^a)))+bbb+0x5A827999+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = reverse(__memory(i32,data+9*sizeof(i32)));W[9]=bbb;a+=(e^(c&(d^e)))+bbb+0x5A827999+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = reverse(__memory(i32,data+10*sizeof(i32)));W[10]=bbb;e+=(d^(b&(c^d)))+bbb+0x5A827999+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = reverse(__memory(i32,data+11*sizeof(i32)));W[11]=bbb;d+=(c^(a&(b^c)))+bbb+0x5A827999+rotlFixed(e,5);a=rotlFixed(a,30);;
			bbb = reverse(__memory(i32,data+12*sizeof(i32)));W[12]=bbb;c+=(b^(e&(a^b)))+bbb+0x5A827999+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = reverse(__memory(i32,data+13*sizeof(i32)));W[13]=bbb;b+=(a^(d&(e^a)))+bbb+0x5A827999+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = reverse(__memory(i32,data+14*sizeof(i32)));W[14]=bbb;a+=(e^(c&(d^e)))+bbb+0x5A827999+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = reverse(__memory(i32,data+15*sizeof(i32)));W[15]=bbb;e+=(d^(b&(c^d)))+bbb+0x5A827999+rotlFixed(a,5);b=rotlFixed(b,30);;
			bbb = rotlFixed(W[(16 +13)&15]^W[(16 +8)&15]^W[(16 +2)&15]^W[16&15],1);W[16&15]=bbb;d+=(c^(a&(b^c)))+bbb+0x5A827999+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(17 +13)&15]^W[(17 +8)&15]^W[(17 +2)&15]^W[17&15],1);W[17&15]=bbb;c+=(b^(e&(a^b)))+bbb+0x5A827999+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(18 +13)&15]^W[(18 +8)&15]^W[(18 +2)&15]^W[18&15],1);W[18&15]=bbb;b+=(a^(d&(e^a)))+bbb+0x5A827999+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(19 +13)&15]^W[(19 +8)&15]^W[(19 +2)&15]^W[19&15],1);W[19&15]=bbb;a+=(e^(c&(d^e)))+bbb+0x5A827999+rotlFixed(b,5);c=rotlFixed(c,30);
			bbb = rotlFixed(W[(20 +13)&15]^W[(20 +8)&15]^W[(20 +2)&15]^W[20&15],1);W[20&15]=bbb;e+=(b^c^d)+bbb+0x6ED9EBA1+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(21 +13)&15]^W[(21 +8)&15]^W[(21 +2)&15]^W[21&15],1);W[21&15]=bbb;d+=(a^b^c)+bbb+0x6ED9EBA1+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(22 +13)&15]^W[(22 +8)&15]^W[(22 +2)&15]^W[22&15],1);W[22&15]=bbb;c+=(e^a^b)+bbb+0x6ED9EBA1+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(23 +13)&15]^W[(23 +8)&15]^W[(23 +2)&15]^W[23&15],1);W[23&15]=bbb;b+=(d^e^a)+bbb+0x6ED9EBA1+rotlFixed(c,5);d=rotlFixed(d,30);
			bbb = rotlFixed(W[(24 +13)&15]^W[(24 +8)&15]^W[(24 +2)&15]^W[24&15],1);W[24&15]=bbb;a+=(c^d^e)+bbb+0x6ED9EBA1+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(25 +13)&15]^W[(25 +8)&15]^W[(25 +2)&15]^W[25&15],1);W[25&15]=bbb;e+=(b^c^d)+bbb+0x6ED9EBA1+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(26 +13)&15]^W[(26 +8)&15]^W[(26 +2)&15]^W[26&15],1);W[26&15]=bbb;d+=(a^b^c)+bbb+0x6ED9EBA1+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(27 +13)&15]^W[(27 +8)&15]^W[(27 +2)&15]^W[27&15],1);W[27&15]=bbb;c+=(e^a^b)+bbb+0x6ED9EBA1+rotlFixed(d,5);e=rotlFixed(e,30);
			bbb = rotlFixed(W[(28 +13)&15]^W[(28 +8)&15]^W[(28 +2)&15]^W[28&15],1);W[28&15]=bbb;b+=(d^e^a)+bbb+0x6ED9EBA1+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(29 +13)&15]^W[(29 +8)&15]^W[(29 +2)&15]^W[29&15],1);W[29&15]=bbb;a+=(c^d^e)+bbb+0x6ED9EBA1+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(30 +13)&15]^W[(30 +8)&15]^W[(30 +2)&15]^W[30&15],1);W[30&15]=bbb;e+=(b^c^d)+bbb+0x6ED9EBA1+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(31 +13)&15]^W[(31 +8)&15]^W[(31 +2)&15]^W[31&15],1);W[31&15]=bbb;d+=(a^b^c)+bbb+0x6ED9EBA1+rotlFixed(e,5);a=rotlFixed(a,30);
			bbb = rotlFixed(W[(32 +13)&15]^W[(32 +8)&15]^W[(32 +2)&15]^W[32&15],1);W[32&15]=bbb;c+=(e^a^b)+bbb+0x6ED9EBA1+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(33 +13)&15]^W[(33 +8)&15]^W[(33 +2)&15]^W[33&15],1);W[33&15]=bbb;b+=(d^e^a)+bbb+0x6ED9EBA1+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(34 +13)&15]^W[(34 +8)&15]^W[(34 +2)&15]^W[34&15],1);W[34&15]=bbb;a+=(c^d^e)+bbb+0x6ED9EBA1+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(35 +13)&15]^W[(35 +8)&15]^W[(35 +2)&15]^W[35&15],1);W[35&15]=bbb;e+=(b^c^d)+bbb+0x6ED9EBA1+rotlFixed(a,5);b=rotlFixed(b,30);
			bbb = rotlFixed(W[(36 +13)&15]^W[(36 +8)&15]^W[(36 +2)&15]^W[36&15],1);W[36&15]=bbb;d+=(a^b^c)+bbb+0x6ED9EBA1+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(37 +13)&15]^W[(37 +8)&15]^W[(37 +2)&15]^W[37&15],1);W[37&15]=bbb;c+=(e^a^b)+bbb+0x6ED9EBA1+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(38 +13)&15]^W[(38 +8)&15]^W[(38 +2)&15]^W[38&15],1);W[38&15]=bbb;b+=(d^e^a)+bbb+0x6ED9EBA1+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(39 +13)&15]^W[(39 +8)&15]^W[(39 +2)&15]^W[39&15],1);W[39&15]=bbb;a+=(c^d^e)+bbb+0x6ED9EBA1+rotlFixed(b,5);c=rotlFixed(c,30);
			bbb = rotlFixed(W[(40 +13)&15]^W[(40 +8)&15]^W[(40 +2)&15]^W[40&15],1);W[40&15]=bbb;e+=((b&c)|(d&(b|c)))+bbb+0x8F1BBCDC+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(41 +13)&15]^W[(41 +8)&15]^W[(41 +2)&15]^W[41&15],1);W[41&15]=bbb;d+=((a&b)|(c&(a|b)))+bbb+0x8F1BBCDC+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(42 +13)&15]^W[(42 +8)&15]^W[(42 +2)&15]^W[42&15],1);W[42&15]=bbb;c+=((e&a)|(b&(e|a)))+bbb+0x8F1BBCDC+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(43 +13)&15]^W[(43 +8)&15]^W[(43 +2)&15]^W[43&15],1);W[43&15]=bbb;b+=((d&e)|(a&(d|e)))+bbb+0x8F1BBCDC+rotlFixed(c,5);d=rotlFixed(d,30);
			bbb = rotlFixed(W[(44 +13)&15]^W[(44 +8)&15]^W[(44 +2)&15]^W[44&15],1);W[44&15]=bbb;a+=((c&d)|(e&(c|d)))+bbb+0x8F1BBCDC+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(45 +13)&15]^W[(45 +8)&15]^W[(45 +2)&15]^W[45&15],1);W[45&15]=bbb;e+=((b&c)|(d&(b|c)))+bbb+0x8F1BBCDC+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(46 +13)&15]^W[(46 +8)&15]^W[(46 +2)&15]^W[46&15],1);W[46&15]=bbb;d+=((a&b)|(c&(a|b)))+bbb+0x8F1BBCDC+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(47 +13)&15]^W[(47 +8)&15]^W[(47 +2)&15]^W[47&15],1);W[47&15]=bbb;c+=((e&a)|(b&(e|a)))+bbb+0x8F1BBCDC+rotlFixed(d,5);e=rotlFixed(e,30);
			bbb = rotlFixed(W[(48 +13)&15]^W[(48 +8)&15]^W[(48 +2)&15]^W[48&15],1);W[48&15]=bbb;b+=((d&e)|(a&(d|e)))+bbb+0x8F1BBCDC+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(49 +13)&15]^W[(49 +8)&15]^W[(49 +2)&15]^W[49&15],1);W[49&15]=bbb;a+=((c&d)|(e&(c|d)))+bbb+0x8F1BBCDC+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(50 +13)&15]^W[(50 +8)&15]^W[(50 +2)&15]^W[50&15],1);W[50&15]=bbb;e+=((b&c)|(d&(b|c)))+bbb+0x8F1BBCDC+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(51 +13)&15]^W[(51 +8)&15]^W[(51 +2)&15]^W[51&15],1);W[51&15]=bbb;d+=((a&b)|(c&(a|b)))+bbb+0x8F1BBCDC+rotlFixed(e,5);a=rotlFixed(a,30);
			bbb = rotlFixed(W[(52 +13)&15]^W[(52 +8)&15]^W[(52 +2)&15]^W[52&15],1);W[52&15]=bbb;c+=((e&a)|(b&(e|a)))+bbb+0x8F1BBCDC+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(53 +13)&15]^W[(53 +8)&15]^W[(53 +2)&15]^W[53&15],1);W[53&15]=bbb;b+=((d&e)|(a&(d|e)))+bbb+0x8F1BBCDC+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(54 +13)&15]^W[(54 +8)&15]^W[(54 +2)&15]^W[54&15],1);W[54&15]=bbb;a+=((c&d)|(e&(c|d)))+bbb+0x8F1BBCDC+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(55 +13)&15]^W[(55 +8)&15]^W[(55 +2)&15]^W[55&15],1);W[55&15]=bbb;e+=((b&c)|(d&(b|c)))+bbb+0x8F1BBCDC+rotlFixed(a,5);b=rotlFixed(b,30);
			bbb = rotlFixed(W[(56 +13)&15]^W[(56 +8)&15]^W[(56 +2)&15]^W[56&15],1);W[56&15]=bbb;d+=((a&b)|(c&(a|b)))+bbb+0x8F1BBCDC+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(57 +13)&15]^W[(57 +8)&15]^W[(57 +2)&15]^W[57&15],1);W[57&15]=bbb;c+=((e&a)|(b&(e|a)))+bbb+0x8F1BBCDC+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(58 +13)&15]^W[(58 +8)&15]^W[(58 +2)&15]^W[58&15],1);W[58&15]=bbb;b+=((d&e)|(a&(d|e)))+bbb+0x8F1BBCDC+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(59 +13)&15]^W[(59 +8)&15]^W[(59 +2)&15]^W[59&15],1);W[59&15]=bbb;a+=((c&d)|(e&(c|d)))+bbb+0x8F1BBCDC+rotlFixed(b,5);c=rotlFixed(c,30);
			bbb = rotlFixed(W[(60 +13)&15]^W[(60 +8)&15]^W[(60 +2)&15]^W[60&15],1);W[60&15]=bbb;e+=(b^c^d)+bbb+0xCA62C1D6+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(61 +13)&15]^W[(61 +8)&15]^W[(61 +2)&15]^W[61&15],1);W[61&15]=bbb;d+=(a^b^c)+bbb+0xCA62C1D6+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(62 +13)&15]^W[(62 +8)&15]^W[(62 +2)&15]^W[62&15],1);W[62&15]=bbb;c+=(e^a^b)+bbb+0xCA62C1D6+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(63 +13)&15]^W[(63 +8)&15]^W[(63 +2)&15]^W[63&15],1);W[63&15]=bbb;b+=(d^e^a)+bbb+0xCA62C1D6+rotlFixed(c,5);d=rotlFixed(d,30);
			bbb = rotlFixed(W[(64 +13)&15]^W[(64 +8)&15]^W[(64 +2)&15]^W[64&15],1);W[64&15]=bbb;a+=(c^d^e)+bbb+0xCA62C1D6+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(65 +13)&15]^W[(65 +8)&15]^W[(65 +2)&15]^W[65&15],1);W[65&15]=bbb;e+=(b^c^d)+bbb+0xCA62C1D6+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(66 +13)&15]^W[(66 +8)&15]^W[(66 +2)&15]^W[66&15],1);W[66&15]=bbb;d+=(a^b^c)+bbb+0xCA62C1D6+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(67 +13)&15]^W[(67 +8)&15]^W[(67 +2)&15]^W[67&15],1);W[67&15]=bbb;c+=(e^a^b)+bbb+0xCA62C1D6+rotlFixed(d,5);e=rotlFixed(e,30);
			bbb = rotlFixed(W[(68 +13)&15]^W[(68 +8)&15]^W[(68 +2)&15]^W[68&15],1);W[68&15]=bbb;b+=(d^e^a)+bbb+0xCA62C1D6+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(69 +13)&15]^W[(69 +8)&15]^W[(69 +2)&15]^W[69&15],1);W[69&15]=bbb;a+=(c^d^e)+bbb+0xCA62C1D6+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(70 +13)&15]^W[(70 +8)&15]^W[(70 +2)&15]^W[70&15],1);W[70&15]=bbb;e+=(b^c^d)+bbb+0xCA62C1D6+rotlFixed(a,5);b=rotlFixed(b,30);; bbb = rotlFixed(W[(71 +13)&15]^W[(71 +8)&15]^W[(71 +2)&15]^W[71&15],1);W[71&15]=bbb;d+=(a^b^c)+bbb+0xCA62C1D6+rotlFixed(e,5);a=rotlFixed(a,30);
			bbb = rotlFixed(W[(72 +13)&15]^W[(72 +8)&15]^W[(72 +2)&15]^W[72&15],1);W[72&15]=bbb;c+=(e^a^b)+bbb+0xCA62C1D6+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(73 +13)&15]^W[(73 +8)&15]^W[(73 +2)&15]^W[73&15],1);W[73&15]=bbb;b+=(d^e^a)+bbb+0xCA62C1D6+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(74 +13)&15]^W[(74 +8)&15]^W[(74 +2)&15]^W[74&15],1);W[74&15]=bbb;a+=(c^d^e)+bbb+0xCA62C1D6+rotlFixed(b,5);c=rotlFixed(c,30);; bbb = rotlFixed(W[(75 +13)&15]^W[(75 +8)&15]^W[(75 +2)&15]^W[75&15],1);W[75&15]=bbb;e+=(b^c^d)+bbb+0xCA62C1D6+rotlFixed(a,5);b=rotlFixed(b,30);
			bbb = rotlFixed(W[(76 +13)&15]^W[(76 +8)&15]^W[(76 +2)&15]^W[76&15],1);W[76&15]=bbb;d+=(a^b^c)+bbb+0xCA62C1D6+rotlFixed(e,5);a=rotlFixed(a,30);; bbb = rotlFixed(W[(77 +13)&15]^W[(77 +8)&15]^W[(77 +2)&15]^W[77&15],1);W[77&15]=bbb;c+=(e^a^b)+bbb+0xCA62C1D6+rotlFixed(d,5);e=rotlFixed(e,30);; bbb = rotlFixed(W[(78 +13)&15]^W[(78 +8)&15]^W[(78 +2)&15]^W[78&15],1);W[78&15]=bbb;b+=(d^e^a)+bbb+0xCA62C1D6+rotlFixed(c,5);d=rotlFixed(d,30);; bbb = rotlFixed(W[(79 +13)&15]^W[(79 +8)&15]^W[(79 +2)&15]^W[79&15],1);W[79&15]=bbb;a+=(c^d^e)+bbb+0xCA62C1D6+rotlFixed(b,5);c=rotlFixed(c,30);
			state[0] += a;
			state[1] += b;
			state[2] += c;
			state[3] += d;
			state[4] += e;
		a=int[5]
		a[0] = 0x67452301
		a[1] = 0xEFCDAB89
		a[2] = 0x98BADCFE
		a[3] = 0x10325476
		a[4] = 0xC3D2E1F0
		n0=i64(n)*8LL
		d8=data
		while n>=64:
			SHA_Transform_512bit(a,d8)
			d8+=64L
			n-=64L
		buf=u8[128]
		if n:__basic_api.memcpy(__pointer(buf.d),__pointer(d8),iptr(n))
		if (n > 55)
			buf[n++] = 0x80;
			while(n < 64)
				buf[n++] = 0;
			SHA_Transform_512bit(a,d8)
			d8+=64;n-=64;
			while(n < 56)
				buf[n++] = 0;
		else
			buf[n++] = 0x80;
			while(n < 56)
				buf[n++] = 0;
		n0high=i32(n0>>32)
		n0low=i32(n0)
		buf[56] = (n0high >> 24) & 0xFF;
		buf[57] = (n0high >> 16) & 0xFF;
		buf[58] = (n0high >> 8) & 0xFF;
		buf[59] = (n0high) & 0xFF;
		buf[60] = (n0low >> 24) & 0xFF;
		buf[61] = (n0low >> 16) & 0xFF;
		buf[62] = (n0low >> 8) & 0xFF;
		buf[63] = (n0low) & 0xFF;
		SHA_Transform_512bit(a,buf.d)
		//the endianness stuff
		ret=u8[a.n*4]
		for i in crange(5)
			for j in crange(4)
				ret[i*4+j]=u8(a[i]>>(24-j*8))
		return ret
	//>end_private
	//! \brief Computes the 160-bit SHA1 hash of a variable, packed in MSB order
	inline SHA1(a)
		T=typeof(a)
		if readOptionalMember(a,"IS_ARRAY",0):
			if readOptionalMember(a,"NEED_RC",0):
				__error("managed array type '@1' can't be hashed",T)
			return __SHA1(a.d,a.n*sizeof(a.T))
		else if __is_type("class",T):
			__error("managed type '@1' can't be hashed",T)
		else if __is_type("struct",T):
			return __SHA1(a,sizeof(T))
		else
			b=a
			return __SHA1(iptr(&b),sizeof(b))
	//! \brief Computes the 160-bit SHA1 hash of a variable as a hexadecimal string
	inline SHA1Digest(a)
		b=SHA1(a)
		ret=char[40]
		hexstr="0123456789abcdef"
		for i in range(20)
			ret[i*2]=hexstr[int(u32(b[i])>>4)]
			ret[i*2+1]=hexstr[int(u32(b[i])&15u)]
		return ret
	////>begin_private
	//large int power for RSA
	//use n+1 length: keep mod's high word as 0
	//use 2-by-1 and 3 subs
	//use LSB
	auto RSA_mad(u32[] tar,u32[] a,u32 b)
		//overwrites tar
		cf=0u
		for i=0:a.n-1
			mm=u64(a[i])*u64(b)+u64(tar[i])+cf
			tar[i]=u32(mm)
			cf=u32(mm>>32)
		assert(!cf)
	auto RSA_cmpsub(u32[] a,u32[] mod)
		assert(a.n==mod.n)
		for i=a.n-1:-1:0
			if a[i]<mod[i]:return 0
			if a[i]>mod[i]:break
		cf=0
		for i=0:a.n-1
			cf2=(a[i]<mod[i])
			ai2=a[i]-mod[i]-u32(cf)
			cf=(cf2|(ai2==0xffffffffu))
			a[i]=ai2
		return 1
	auto RSA_mod1(u32[] a,u32[] mod)
		//overwrites a
		try0=((u64(a[a.n-1])<<32)+u64(a[a.n-2]))/(u64(mod[mod.n-2])+1LLu)
		assert(try0<(1LLu<<32))
		try0i=u32(try0)
		if try0i:
			//mul and sub
			z=u32[mod.n]
			RSA_mad(z,mod,try0i)
			ret=RSA_cmpsub(a,z)
			assert(ret)
		//2~3 remaining passes
		while RSA_cmpsub(a,mod):
			//pass
	auto RSA_mul_mod(u32[] a,u32[] b,u32[] mod)
		//overwrites a
		assert(!a[a.n-1])
		assert(!mod[mod.n-1])
		ret=u32[a.n]
		for i=0:b.n-1
			RSA_mad(ret,a,b[i])
			RSA_mod1(ret,mod)
			for j=a.n-2:-1:0
				a[j+1]=a[j]
			a[0]=0u
			RSA_mod1(a,mod)
		copy(a,ret)
	//u32[] RSA_power_mod(u32[] s,u32 e,u32[] mod)
	//	n=mod.n
	//	if s.n>n:return NULL
	//	ret=new u32[n]
	//	ret[0]=1u
	//	started=0
	//	for i=31:-1:0
	//		if started:
	//			RSA_mul_mod(ret,new(ret),mod)
	//		if e&(1u<<i):
	//			RSA_mul_mod(ret,s,mod)
	//			started=1
	//	return ret
	//u32[] RSA_bigint_from_bytes(char[] dat)
	//	n=dat.n>>2
	//	usign=new u32[n]
	//	for i=0:n-1
	//		usign[n-1-i]=(int(u8(dat[i*4+0]))<<24)+(int(u8(dat[i*4+1]))<<16)+(int(u8(dat[i*4+2]))<<8)+int(u8(dat[i*4+3]))
	//	usign.push(0u)
	//	return usign
	//char[] RSA_bytes_from_bigint(u32[] usign)
	//	ret=new char[usign.n*4]
	//	foreach d,I in usign
	//		For j=0:3
	//			ret[(usign.n-1-I)*4+j]=char(d>>(24-j*8))
	//	return ret
	////>end_private
	///**
	// * \brief Decrypt an RSA signature
	// *
	// * @param sign is the RSA signature.
	// * @param key_e is the exponent in the public key
	// * @param key_mod is the modulo in the public key
	// * @return The decrypted payload string for comparison in a later step, padding is included
	//*/
	//char[] DecryptRSASignature(char[] sign, u32 key_e,char[] key_mod)
	//	if sign.n!=key_mod.n:return NULL
	//	if sign.n&3:return NULL
	//	//MSB to LSB
	//	umod=RSA_bigint_from_bytes(key_mod)
	//	usign=RSA_bigint_from_bytes(sign)
	//	if RSA_cmpsub(usign,umod):return NULL//sign must be < mod
	//	ucontent=RSA_power_mod(usign, key_e,umod)
	//	ucontent.pop()//remove the top 0
	//	return RSA_bytes_from_bigint(ucontent)
	///**
	// * \brief Verify an RSA signature of a raw SHA1 hash with PKCS #1 v1.5 padding, returns the decrypted signature string for comparison in a later step
	// *
	// * @param data is the signed file
	// * @param sign is the RSA signature of its SHA1 hash
	// * @param e is the RSA exponent
	// * @param spubkey is the RSA public key
	// * @return A non-zero value if the signature is valid, zero if it is not.
	//*/
	//int VerifySignature_SHA1_PKCS_RSA(char[] data,char[] sign, int e,char[] spubkey)
	//	mod=spubkey
	//	///
	//	shash=SHA1(data).ConvertToAsBinary(char)
	//	if sign.n<shash.n+4:return 0
	//	szpad=sign.n-shash.n
	//	spayload=[char(255) for i=0:szpad-1]+shash
	//	spayload[0]=0
	//	spayload[1]=1
	//	spayload[spayload.n-shash.n-1]=0
	//	spayload_alleged=DecryptRSASignature(sign,(u32)e,mod)
	//	return spayload_alleged==spayload
	//! \brief Converts a Unicode string to UTF-8
	auto UnicodeToUtf8(i16[] s0)
		ret=new string
		surrogate_high=0
		foreach ch in s0
			chi=int(u16(ch))
			if u32(chi-0xd800)<0x400u:
				//surrogate pair - 1st
				surrogate_high=(ch&0x3ff)
				continue
			else if u32(chi-0xdc00)<0x400u:
				//surrogate pair - 2nd
				chi=(surrogate_high<<10)+(ch&0x3ff)+0x10000
				surrogate_high=0
				ret.push(char(((chi>>18)&0xf)+0xf0))
				ret.push(char(0x80+((chi>>12)&63)))
				ret.push(char(0x80+((chi>>6)&63)))
				ret.push(char(0x80+(chi&63)))
				continue
			if chi>=2048:
				ret.push(char(((chi>>12)&0xf)+0xe0))
				ret.push(char(0x80+((chi>>6)&63)))
				ret.push(char(0x80+(chi&63)))
			else if chi>=128:
				ret.push(char((chi>>6)+0xc0))
				ret.push(char(0x80+(chi&63)))
			else
				ret.push(char(chi))
		return ret
	//! \brief Converts a 32-bit Unicode string to UTF-8
	auto Unicode32ToUtf8(i32[] s0)
		ret=new string
		foreach chi in s0
			if chi>=65536:
				//surrogate pair - 2nd
				ret.push(char(((chi>>18)&0xf)+0xf0))
				ret.push(char(0x80+((chi>>12)&63)))
				ret.push(char(0x80+((chi>>6)&63)))
				ret.push(char(0x80+(chi&63)))
				continue
			else if chi>=2048:
				ret.push(char(((chi>>12)&0xf)+0xe0))
				ret.push(char(0x80+((chi>>6)&63)))
				ret.push(char(0x80+(chi&63)))
			else if chi>=128:
				ret.push(char((chi>>6)+0xc0))
				ret.push(char(0x80+(chi&63)))
			else
				ret.push(char(chi))
		return ret
	//! \brief Converts a UTF-8 string to Unicode
	auto Utf8ToUnicode(string s0)
		ret=i16[0]
		ch0=0;nnxt=0
		for chc,I in s0
			ch=int(u8(chc))
			if ch>=128:
				if ch&0x40:
					ch0=(ch&0x1f)
					nnxt=1
					if ch&0x20:
						nnxt++
						if ch&0x10:
							nnxt++
							ch0&=7
				else
					ch0=(ch0<<6)+(ch&63)
					nnxt--
				if nnxt:continue
				ch=ch0
				if ch>=0x10000:
					//surrogate pair
					ch-=0x10000
					ret.push(i16(0xd800+((ch>>10)&0x3ff)))
					ch&=0x3ff
					ch+=0xdc00
			ret.push(i16(ch))
		return ret
	//! \brief Converts a UTF-8 string to 32-bit Unicode
	auto Utf8ToUnicode32(string s0)
		ret=new i32[]
		ch0=0;nnxt=0
		foreach chc,I in s0
			ch=int(u8(chc))
			if ch>=128:
				if ch&0x40:
					ch0=(ch&0x1f)
					nnxt=1
					if ch&0x20:
						nnxt++
						if ch&0x10:
							nnxt++
							ch0&=7
				else
					ch0=(ch0<<6)+(ch&63)
					nnxt--
				if nnxt:continue
				ch=ch0
			ret.push(ch)
		return ret
module Console
	import System.OS_API.*
	import System.detail.*
	if Platform.IS_WINDOWS:
		g_is_console_utf8=0
	auto _write_string(string str)
		if Platform.IS_MOBILE:
			strz=clone(str)
			strz.push(char(0))
			osal_WriteLog(__pointer(strz.d))
		else if Platform.IS_WINDOWS:
			if !g_is_console_utf8:
				g_is_console_utf8=1
				SetConsoleCP(CP_UTF8)
			u=Algorithm.Utf8ToUnicode(str)
			na=WideCharToMultiByte(CP_ACP,0,u,u.n,NULL,0, NULL,NULL)
			s=char[na+1]
			na=WideCharToMultiByte(CP_ACP,0,u,u.n,s,s.n, NULL,NULL)
			//printf("%s",s)
			fwrite(s,1,na,__C(__pointer,"stdout"))
		else
			fwrite(str,1,str.n,__C(__pointer,"stdout"))
	auto __format_to_string(string s,auto a)
		T=typeof(a)
		if T==__pointer:
			s.push(formatNumber(uptr(iptr(a)),{align:sizeof(iptr)*2,base:16}))
		else if __is_type("builtin",T):
			s.push(string(a))
		else if T==string:
			if !a:
				s.push('string.NULL')
			else
				s.push(a)
		else if readOptionalMember(a,"IS_ARRAY",0):
			if !a:
				s.push('NULL')
			else
				s.push('[')
				for d,I in a
					if I:s.push(',')
					__format_to_string(s,d)
				s.push(']')
		else if __is_type("struct",T)||__is_type("class",T):
			if __is_type("class",T):
				if !a:
					s.push('NULL')
					return
			s.push('{')
			members=__member_list(a)
			for i in crange(members.length):
				id_name=members[i]
				__is_variable(__dot(a,id_name),{
					if i:s.push(',')
					id_name_var=id_name
					s.push(id_name_var)
					s.push(':')
					__format_to_string(s,__dot(a,id_name))
				})
			s.push('}')
		else
			__error("I don't know how to format type '@1'",T)
	inline SWrite(s)
		arguments0=arguments
		for i in crange(arguments0.length)
			if i>0:
				a=arguments0[i]
				__format_to_string(s,a)
		return s
	inline FormatAsText()
		arguments0=arguments
		s=string()
		for i in crange(arguments0.length)
			auto a=arguments0[i]
			__format_to_string(s,a)
		return s
	inline Write()
		s=FormatAsText.call(arguments)
		_write_string(s)
	inline Writeln()
		s=FormatAsText.call(arguments)
		s.push('\n')
		_write_string(s)
	auto GetCommandLine()
		if Platform.IS_MOBILE:
			return [new string]
		else
			argv=NULL
			argc=osal_GetCommandLine(&argv)
			ret=new string[argc]
			for i=0:argc-1
				ret[i]=pcharToString(__memory(__pointer,iptr(argv)+sizeof(iptr)*i))
			return ret

//! \brief %XML functions and classes
module XML
	import System.detail.*
	//! \brief An %XML attribute
	struct XMLAttr
		//! The attribute name
		name=string.NULL
		//! The attribute value
		value=string.NULL
	//! \brief An %XML node
	class Node
		//! The node name
		name=string.NULL
		//! A list of all attributes
		attrs=new XMLAttr[]
		//! A list of all children
		children=new Node[]
		//inline allAttr(string s)
		//	return {
		//		forEach:inline(fbody){
		//			foreach nd2 in .attrs
		//				if nd2.name==s:
		//					fbody(nd2)
		//		}
		//	}
		///////
		auto ToString()
			f=new string
			foreach ch in children
				writeXmlNode(0,f,ch)
			return f
		auto FirstChild(string s)
			foreach nd in children
				if nd.name==s:return nd
			return Node.NULL
		inline Children(string s)
			return {
				forEach:inline(fbody){
					foreach nd2 in children
						if nd2.name==s:
							fbody(nd2)
				}
			}
		auto set_Attr(string s,string val)
			foreach pattr,I in attrs
				if pattr.name==s:
					attrs[I].value=val
					return
			assert(!!val)
			a=XMLAttr(){name:s,value:val}
			attrs.push(a)
		auto get_Attr(string s,string dflt)
			foreach pattr,I in attrs
				if pattr.name==s:
					return attrs[I].value
			return dflt
		inline Attr(string s)
			if arguments.length>1:
				dflt=arguments[1]
			else
				dflt=""
			return get_Attr(s,dflt)
		auto Add(string s)
			ret=new Node
			ret.name=s
			children.push(ret)
			return ret
		//////////
		auto __clone__()
			nd2=new Node
			nd2.name=name
			nd2.attrs=new XMLAttr[attrs.n]
			foreach a,I in attrs
				nd2.attrs[I]=new(a)
			nd2.children=new Node[]
			foreach ch in children
				nd2.children.push(new(ch))
			return nd2
	auto Parse(string xml_text)
		if !xml_text:return Node.NULL
		inline onerr(iptr a,iptr b,string s)
			if Platform.BUILD=="debug"
				l=1;c=1
				for i=0:a-1
					if xml_text[i]=='\n':
						l++
						c=1
					else
						c++
				s2=new char[b-a]
				for i=a:b-1
					s2[i-a]=xml_text[i]
				Console.Writeln('line ',l,',',c,': ',s,': "',s2,'"')
		inline skipTo(feed,feed_end,cset)
			for(;;)
				if feed!=feed_end:
					ch=int(__memory(u8,feed))
					if has(cset,ch):break
					feed++
				else
					ch=0
					break
			return feed
		inline skipStrTo(feed,feed_end,pool,chq_nonspace,IS_UNQUOTED)
			pool.n=0L
			//make this non-destructive - dup from a temp pool
			if IS_UNQUOTED:
				if feed!=feed_end:
					ch=int(__memory(u8,feed));feed++
				else
					ch=0
			else
				if feed!=feed_end:
					ch=int(__memory(u8,feed))
				else
					ch=0
				feed++
			for(;;)
				if IS_UNQUOTED:
					if has(chq_nonspace,ch):break
				else
					if ch==chq_nonspace||!ch:break
				if ch=='&':
					if __basic_api.memcmp(__pointer(feed),"lt;",3)==0:
						pool.push('<');feed+=3
					else if __basic_api.memcmp(__pointer(feed),"gt;",3)==0:
						pool.push('>');feed+=3
					else if __basic_api.memcmp(__pointer(feed),"amp;",4)==0:
						pool.push('&');feed+=4
					else if __basic_api.memcmp(__pointer(feed),"quot;",5)==0:
						pool.push('"');feed+=5
					else if __basic_api.memcmp(__pointer(feed),"apos;",5)==0:
						pool.push('\'');feed+=5
					else
						pool.push('&')
				else
					pool.push(char(ch))
				if IS_UNQUOTED:
					if feed!=feed_end:
						ch=int(__memory(u8,feed));feed++
					else
						ch=0
				else
					if feed!=feed_end:
						ch=int(__memory(u8,feed))
					else
						ch=0
					feed++
			if IS_UNQUOTED:
				feed--
			return (feed,pool.d,pool.n)
		spaces=charset(" \t\r\n")
		spaces_slashgt=charset(" \t\r\n/>");spaces_slashgt[0]|=1u
		nonspace=charset("^ \t\r\n")
		lt=charset("<");lt[0]|=1u
		gt=charset(">");gt[0]|=1u
		minus=charset("-");minus[0]|=1u
		slashgt=charset("/>");slashgt[0]|=1u
		eqslashgt=charset("=/>");eqslashgt[0]|=1u
		rbra=charset("]");rbra[0]|=1u
		nds=new Node[]
		ret=new Node
		curnode=ret
		//feed=xml_text.c_str()
		feed=xml_text.d
		feed_end=feed+xml_text.n
		name_hash=new string[16]
		nnames=0
		sempty=new string
		strpool=new char[256]
		//empty_attr=new Attr[]
		//empty_children=new Node[]
		inline GetNameString(feed,lg)
			if !lg:return sempty
			auto ret=__ptrToString(feed,lg)
			auto hh=ret.__hash__()
			auto hi=iptr(hh)&(name_hash.n-1)
			if name_hash[hi]==ret:
				return name_hash[hi]
			nnames++
			if nnames>name_hash.n:
				hi=iptr(hh)&(name_hash.n-1)
				name_hash.resize(name_hash.n*2)
			name_hash[hi]=ret
			return ret
		for(;;)
			if feed==feed_end:break
			ch=int(__memory(u8,feed));feed++
			if has(spaces,ch):continue
			if ch!='<':
				feed0=feed-1
				feed=skipTo(feed,feed_end,lt)
				if feed!=feed_end:
					lg=feed-feed0
					feed++
				else
					continue
				if curnode:
					//content
					attr=XMLAttr(){name:sempty,value:__ptrToString(feed0,lg)}
					curnode.attrs.push(attr)
			if feed!=feed_end:
				chpeek=int(__memory(u8,feed))
			else
				chpeek=0
			if chpeek=='/':
				//end tag
				feed0=feed
				ch=int(__memory(u8,feed));feed++
				feed=skipTo(feed,feed_end,gt)
				if feed!=feed_end:feed++
				if !nds.n:
					onerr(feed0-xml_text.d,feed-xml_text.d,string("this end tag doesn't have a corresponding begin tag"))
				else
					curnode=nds.pop()
				continue
			if chpeek=='!':
				//comment
				if __basic_api.memcmp(__pointer(feed),"![CDATA[",8)==0:
					//<![CDATA[, onerr -> 2ndary return
					feed+=8
					feed0=feed
					for(;;)
						feed=skipTo(feed,feed_end,rbra)
						if feed==feed_end:
							onerr(feed-1,feed,string("the XML document terminated prematurely inside a comment"))
							return ret
						ch=int(__memory(u8,feed));feed++
						assert(ch==']')
						if feed_end-feed>=2&&__basic_api.memcmp(__pointer(feed),"]>",2)!=0:
							//nothing
						else
							break
					lg=feed-feed0-1
					feed+=2
					//cdata is a value
					attr=XMLAttr(){name:sempty,value:__ptrToString(feed0,lg)}
					curnode.attrs.push(attr)
					continue
				for(;;)
					feed=skipTo(feed,feed_end,minus)
					if feed==feed_end:
						onerr(feed-1,feed,string("the XML document terminated prematurely inside a comment"))
						return ret
					ch=int(__memory(u8,feed));feed++
					assert(ch=='-')
					if feed_end-feed>=2&&__basic_api.memcmp(__pointer(feed),"->",2)!=0:
						//nothing
					else
						break
				feed+=2
				continue
			//attrs
			feed0=feed
			feed=skipTo(feed,feed_end,spaces_slashgt)
			if feed==feed_end:
				ch=0
			else
				ch=int(__memory(u8,feed))
			lg=feed-feed0;feed++
			nd2=Node(){name:GetNameString(feed0,lg)}
			//translate attrs first
			while !has(slashgt,ch):
				feed=skipTo(feed,feed_end,nonspace)
				ch=int(__memory(u8,feed))
				if has(slashgt,ch):
					feed++
					break
				//name
				feed0=feed
				feed=skipTo(feed,feed_end,eqslashgt)
				if feed==feed_end:
					ch=0
				else
					ch=int(__memory(u8,feed))
				lg=feed-feed0;feed++
				if ch!=int('='):
					onerr(feed-xml_text.d-1,feed-xml_text.d,
						string("'=' is expected for XML attribute but '")+string(char(ch))+string("' is found"))
					continue
				attr=XMLAttr(){name:GetNameString(feed0,lg),value:string.NULL}
				//value
				if feed==feed_end:
					ch=0
					break
				else
					ch=int(__memory(u8,feed))
				lg=feed-feed0;feed++
				chq=ch
				//string skiping, &xxx;
				if chq=='\''||chq=='"':
					//feed0=feed
					//quoted attr
					(feed,feed0,lg)=skipStrTo(feed,feed_end, strpool,chq,0)
				else
					//unquoted attr
					//feed0=feed-1
					//feed0[0]=chq
					(feed,feed0,lg)=skipStrTo(feed,feed_end, strpool,spaces_slashgt,1)
				if feed==feed_end:
					ch=0
				else
					ch=int(__memory(u8,feed));feed++
				attr.value=__ptrToString(feed0,lg)
				//Console.Writeln('  ',attr.name,'="',attr.value,'"',)
				nd2.attrs.push(attr)
			noadd=0
			if ch==int('/'):
				noadd=1
				if feed==feed_end:
					ch=0
				else
					ch=int(__memory(u8,feed));feed++
				//if !nd2.attrs.n:
				//	nd2.attrs=empty_attr
				//nd2.children=empty_children
			if ch!=int('>'):
				onerr(feed-xml_text.d-1,feed-xml_text.d,string("'>' is expected"))
			curnode.children.push(nd2)
			if ch==0:
				onerr(feed-xml_text.d-1,feed-xml_text.d,string("the XML document terminated prematurely"))
				break
			if !noadd:
				nds.push(curnode)
				curnode=nd2
		nds.discard()
		return ret
	//>begin_private
	auto writeValue(string f,string value)
		foreach ch in value
			switch ch{
			default:
				f.push(ch)
				break;
			case '\'':
				f.push('&apos;')
				break;
			case '&':
				f.push('&amp;')
				break;
			case '"':
				f.push('&quot;')
				break;
			case '<':
				f.push('&lt;')
				break;
			case '>':
				f.push('&gt;')
				break;
			}
	auto writeXmlNode(int ind,string f,Node nd)
		for j=0:ind-1{f.push('\t')}
		f.push('<')
		f.push(nd.name)
		sinner=string.NULL
		foreach pa in nd.attrs
			//=="" doesn't work, why? char*?
			if !pa.name.n:
				sinner=pa.value
				continue
			f.push(' ')
			f.push(pa.name)
			f.push('=');f.push('"')
			writeValue(f,pa.value)
			f.push('"')
		if nd.children&&nd.children.n:
			f.push('>')
			f.push('\n')
			foreach ch in nd.children
				writeXmlNode(ind+1,f,ch)
			for j=0:ind-1{f.push('\t')}
			if sinner:f.push(sinner)
			f.push('<')
			f.push('/')
			f.push(nd.name)
			f.push('>')
		else
			if sinner:
				f.push('>')
				writeValue(f,sinner)
				f.push('<')
				f.push('/')
				f.push(nd.name)
				f.push('>')
			else
				f.push('/')
				f.push('>')
		f.push('\n')
	//>end_private
	auto New()
		return Node(){name:""}

module Env
	import System.OS_API.*
	import System.detail.*
	auto ExpandEnvironmentStrings(string a)
		if Platform.IS_UNIX:
			//${} and getenv
			ret=new string
			aa=a
			for(;;)
				pexpand=aa.IndexOf(string('${'))
				if pexpand>=0:
					ret.push(aa[:pexpand-1])
					aa=aa[pexpand+2:]
					pexpand=aa.IndexOf(string("}"))
					if pexpand>=0:
						envz=new(aa[:pexpand-1])
						envz.push(char(0))
						penv=iptr(getenv(envz))
						if penv:
							ret.push(pcharToString(__pointer(penv)))
						envz.discard()
						aa=aa[pexpand+1:]
					else
						ret.push(aa)
						break
				else
					ret.push(aa)
					break
			return ret
		else
			au=Algorithm.Utf8ToUnicode(a);au.push(i16(0))
			dum=new i16[4]
			lg=ExpandEnvironmentStringsW(au,dum,2)
			b=new i16[lg+1]
			lg=ExpandEnvironmentStringsW(au,b,int(b.n))
			b.resize(lg)
			if lg&&b[lg-1]==i16(0):b.resize(lg-1)
			return Algorithm.UnicodeToUtf8(b)
	auto SetEnvironmentString(string a,string b)
		au=toNativeString(a);
		bu=toNativeString(b);
		if Platform.IS_UNIX:
			return setenv(au,bu,1)==0
		else
			return SetEnvironmentVariableW(au,bu)
	auto _Win_GetExecutableName()
		hm=GetModuleHandleW(NULL);
		ret=new i16[]
		lg=0
		while lg>=ret.n-1:
			ret.resize(max(ret.n*2,256L))
			lg=GetModuleFileNameW(hm,ret,int(ret.n));
		ret.resize(lg)
		if lg&&ret[lg-1]==0:ret.resize(lg-1)
		return Algorithm.UnicodeToUtf8(ret)
	auto GetExecutableName()
		if Platform.IS_UNIX:
			return Console.GetCommandLine()[0]
		else
			return _Win_GetExecutableName().Replace(["\\","/"])
	auto GetExecutablePath()
		if Platform.IS_UNIX:
			retptr=__C(__pointer,"(char*)@1",SDL_GetBasePath())
			if !retptr:
				ret=new string("/")
			else
				ret=pcharToString(retptr)+string("/")
				SDL_free(retptr)
			return ret
		else
			ename=_Win_GetExecutableName()
			idx=ename.LastIndexOf('\\')
			if idx<0:idx=ename.LastIndexOf('/')
			ename.resize(idx+1)
			return ename.Replace(["\\","/"])
	auto GetStoragePath()
		if Platform.IS_MOBILE:
			if Platform.ARCH=="android":
				__generate_json("c_files","stdpath_android.c")
			else if Platform.IS_APPLE:
				__generate_json("objc_files","stdpath_ios.m")
			return pcharToString(osal_getStoragePath())
		else
			if Platform.IS_WINDOWS:
				s_userdir=ExpandEnvironmentStrings(string("%USERPROFILE%"))
				if !s_userdir.n||s_userdir[0]=='%':
					s_userdir=ExpandEnvironmentStrings(string("%SystemDrive%%HOMEPATH%"))
				ename=_Win_GetExecutableName().Replace(["\\","/"])
			else
				s_userdir=ExpandEnvironmentStrings(string("${HOME}"))
				ename=Console.GetCommandLine()[0]
			idx=ename.LastIndexOf('/')
			ename=ename[idx+1:]
			pdot=ename.LastIndexOf('.')
			if pdot>=0:ename=ename[:pdot-1]
			if Platform.BUILD=="debug":
				ename=ename+"_debug"
			sret=s_userdir+string("/.")+ename
			if !System.IO.DirExists(sret):System.IO.CreateDirectory(sret)
			return sret
	auto NormalizeFileName(string fn)
		if !fn:return string.NULL
		if !fn.n:return new string
		fnn=toNativeString(fn)
		if Platform.IS_UNIX:
			prealpath=new char[osal_GetUnixPathMax()+4]
			srealpath=realpath(fnn,prealpath)
			if !srealpath||!prealpath[0]:
				return fn
			pzero=prealpath.IndexOf('\0')
			if pzero>=0:
				return new(prealpath[:pzero-1])
			else
				return prealpath
		else
			ret=new i16[MAX_PATH+4]
			fnw=toNativeString(fn.Replace(["/","\\"]))
			sfn=NULL
			succ=GetFullPathNameW(fnn,MAX_PATH,ret,__C(__pointer,"(short**)@1",&sfn))
			if !succ:return fn
			for lg=0:ret.n-1
				if !ret[lg]:
					ret.n=lg
					break
			return Algorithm.UnicodeToUtf8(ret).Replace(["\\","/"]).ToLower()
	auto GetTempFileName(string sext)
		if Platform.IS_WINDOWS:
			bpath=new i16[MAX_PATH+4]
			GetTempPathW(MAX_PATH,bpath)
			spath=Algorithm.UnicodeToUtf8(pwcharToString(__pointer(bpath.d),MAX_PATH)).Replace(["\\","/"])
		else
			spath="/tmp"
		tick=System.Time.tick64()
		for(;;)
			idrand=(Algorithm.Random(u64)^u64(tick))
			sfile=spath+string("/s7tmp")+string(idrand)+"."+sext
			if !IO.FileExists(sfile):return sfile

module Time
	import System.OS_API.*
	import System.detail.*
	g_inited=0
	g_tick=0LL
	g_freq=0LL
	auto tick64()
		if Platform.IS_UNIX:
			return SDL_GetPerformanceCounter()
		else
			ret=0LL
			QueryPerformanceCounter(__C(__pointer,"(LARGE_INTEGER*)@1",&ret))
			return ret
	auto __LazyInit()
		if !g_inited:
			g_inited=1
			if Platform.IS_UNIX:
				g_tick=SDL_GetPerformanceCounter()
				g_freq=SDL_GetPerformanceFrequency()
			else
				g_tick=0LL
				g_freq=1LL
				QueryPerformanceCounter(__C(__pointer,"(LARGE_INTEGER*)@1",&g_tick))
				QueryPerformanceFrequency(__C(__pointer,"(LARGE_INTEGER*)@1",&g_freq))
	inline t()
		__LazyInit()
		tick=tick64()
		return TicksToSeconds(tick-g_tick)
	auto SecondsToTicks(f64 sec)
		__LazyInit()
		return i64(f64(g_freq)*sec)
	auto TicksToSeconds(i64 tick)
		__LazyInit()
		return f64(tick)/f64(g_freq)
	auto WallClockTime()
		return i64(time(0))
	auto ToLocalTime(i64 t0)
		auto t=__C(i64,"(time_t)@1",t0)
		p_localtime=localtime(&t)
		if !p_localtime:return int[].NULL
		return [__C(int,"((struct tm*)@1)->tm_year",p_localtime)+1900,
			__C(int,"((struct tm*)@1)->tm_mon",p_localtime),
			__C(int,"((struct tm*)@1)->tm_mday",p_localtime)-1,
			__C(int,"((struct tm*)@1)->tm_hour",p_localtime),
			__C(int,"((struct tm*)@1)->tm_min",p_localtime),
			__C(int,"((struct tm*)@1)->tm_sec",p_localtime),
			__C(int,"((struct tm*)@1)->tm_wday",p_localtime)]
	auto Sleep(int ms)
		sleep(ms)

//! \brief %Math functions
module Math
	//! \brief Return the absolute value of a numerical value
	inline abs(a)
		T=typeof(a)
		return a<T(0)?-a:a
	//! \brief Return the square of a numerical value
	inline sqr(a)
		T=typeof(a)
		if __has_member(a,"__is_vector"):
			return dot(a,a)
		else
			return a*a
	inline dot(a,b)
		T=typeof(a)
		Tb=typeof(b)
		if T!=Tb:
			__error("type mismatch in dot(@1,@2)",T,Tb)
		else
			ret=a.x*b.x+a.y*b.y
			if __has_member(a,"z"):ret+=a.z*b.z
			if __has_member(a,"w"):ret+=a.w*b.w
			return ret
	inline length(a){return sqrt(sqr(a))}
	inline normalize(a){return a*rsqrt(sqr(a))}
	inline __make_math_import(fname)
		return (inline(double a){return __c_function(double,fname,"math.h")(a)}|inline(float a){return __c_function(float,fname+"f","math.h")(a)})
	inline __make_math_import2(fname)
		return (inline(double a,double b){return __c_function(double,fname,"math.h")(a,b)}|inline(float a,float b){return __c_function(float,fname+"f","math.h")(a,b)})
	floord=__c_function(double,"floor","math.h");floorf=__c_function(float,"floorf","math.h");floor=(inline(double a){return floord(a)}|inline(float a){return floorf(a)});//floor=__make_math_import("floor")
	ceild=__c_function(double,"ceil","math.h");ceilf=__c_function(float,"ceilf","math.h");ceil=(inline(double a){return ceild(a)}|inline(float a){return ceilf(a)});//ceil=__make_math_import("ceil")
	sqrtd=__c_function(double,"sqrt","math.h");sqrtf=__c_function(float,"sqrtf","math.h");sqrt=(inline(double a){return sqrtd(a)}|inline(float a){return sqrtf(a)});//sqrt=__make_math_import("sqrt")
	sind=__c_function(double,"sin","math.h");sinf=__c_function(float,"sinf","math.h");sin=(inline(double a){return sind(a)}|inline(float a){return sinf(a)});//sin=__make_math_import("sin")
	cosd=__c_function(double,"cos","math.h");cosf=__c_function(float,"cosf","math.h");cos=(inline(double a){return cosd(a)}|inline(float a){return cosf(a)});//cos=__make_math_import("cos")
	asind=__c_function(double,"asin","math.h");asinf=__c_function(float,"asinf","math.h");asin=(inline(double a){return asind(a)}|inline(float a){return asinf(a)});//asin=__make_math_import("asin")
	acosd=__c_function(double,"acos","math.h");acosf=__c_function(float,"acosf","math.h");acos=(inline(double a){return acosd(a)}|inline(float a){return acosf(a)});//acos=__make_math_import("acos")
	tand=__c_function(double,"tan","math.h");tanf=__c_function(float,"tanf","math.h");tan=(inline(double a){return tand(a)}|inline(float a){return tanf(a)});//tan=__make_math_import("tan")
	logd=__c_function(double,"log","math.h");logf=__c_function(float,"logf","math.h");log=(inline(double a){return logd(a)}|inline(float a){return logf(a)});//log=__make_math_import("log")
	expd=__c_function(double,"exp","math.h");expf=__c_function(float,"expf","math.h");exp=(inline(double a){return expd(a)}|inline(float a){return expf(a)});//exp=__make_math_import("exp")
	powd=__c_function(double,"pow","math.h");powf=__c_function(float,"powf","math.h");pow=(inline(double a,double b){return powd(a,b)}|inline(float a,float b){return powf(a,b)});//pow=__make_math_import2("pow")
	atan2d=__c_function(double,"atan2","math.h");atan2f=__c_function(float,"atan2f","math.h");atan2=(inline(double a,double b){return atan2d(a,b)}|inline(float a,float b){return atan2f(a,b)});//atan2=__make_math_import2("atan2")
	//////
	__fflag(floord)=__basic_api.__FFLAG_PURE;__fflag(floorf)=__basic_api.__FFLAG_PURE
	__fflag(ceild)=__basic_api.__FFLAG_PURE;__fflag(ceilf)=__basic_api.__FFLAG_PURE
	__fflag(sqrtd)=__basic_api.__FFLAG_PURE;__fflag(sqrtf)=__basic_api.__FFLAG_PURE
	__fflag(sind)=__basic_api.__FFLAG_PURE;__fflag(sinf)=__basic_api.__FFLAG_PURE
	__fflag(cosd)=__basic_api.__FFLAG_PURE;__fflag(cosf)=__basic_api.__FFLAG_PURE
	__fflag(asind)=__basic_api.__FFLAG_PURE;__fflag(asinf)=__basic_api.__FFLAG_PURE
	__fflag(acosd)=__basic_api.__FFLAG_PURE;__fflag(acosf)=__basic_api.__FFLAG_PURE
	__fflag(tand)=__basic_api.__FFLAG_PURE;__fflag(tanf)=__basic_api.__FFLAG_PURE
	__fflag(logd)=__basic_api.__FFLAG_PURE;__fflag(logf)=__basic_api.__FFLAG_PURE
	__fflag(expd)=__basic_api.__FFLAG_PURE;__fflag(expf)=__basic_api.__FFLAG_PURE
	__fflag(powd)=__basic_api.__FFLAG_PURE;__fflag(powf)=__basic_api.__FFLAG_PURE
	__fflag(atan2d)=__basic_api.__FFLAG_PURE;__fflag(atan2f)=__basic_api.__FFLAG_PURE
	inline rsqrt(a){return typeof(a)(1.0)/sqrt(a)}
	PI=3.1415926535897932384626434
	crossd=inline(double3 a,double3 b){
		return double3(a.y*b.z-a.z*b.y, a.z*b.x-a.x*b.z, a.x*b.y-a.y*b.x)
	};
	crossf=inline(float3 a,float3 b){
		return float3(a.y*b.z-a.z*b.y, a.z*b.x-a.x*b.z, a.x*b.y-a.y*b.x)
	};
	cross=(crossf|crossd)

module Processes
	import System.OS_API.*
	if Platform.IS_WINDOWS:
		//W32F_NORMAL=0
		//W32F_PIPE=1
		//W32F_STDIO=2
		HANDLE=__pointer
		/**
		 * \brief A class for Win32 HANDLE-based files
		 *
		*/
		class Win32File
			HANDLE hf
			auto __done__()
				Close()
			auto Read(iptr n)
				a=new char[n]
				ret=0
				ReadFile(hf,__pointer(a.d),int(a.n),&ret,NULL)
				a.resize(ret)
				return a
			auto Write(char[] a)
				if !hf:return 0
				ret=0
				WriteFile(hf,__pointer(a.d),int(a.n),&ret,NULL)
				return iptr(ret)
			auto WouldBlock()
				if !hf:return 0
				//if what==W32F_PIPE:
				avail=0
				succ=PeekNamedPipe(hf,NULL,0,NULL,&avail,NULL)
				return succ&&avail==0
			auto Flush()
				if !hf:return 0
				return FlushFileBuffers(hf)
			auto Close()
				if !hf:return 0
				CloseHandle(hf)
				hf=NULL
				return 1
			//auto Eof()
			//	if !hf:return 1
			//	ret=0
			//	return !ReadFile(hf,&0,0,&ret,NULL)
			auto __init__(HANDLE handle)
				if handle==INVALID_HANDLE_VALUE:
					hf=NULL
				else
					hf=handle
		STILL_ACTIVE=259
		class CProcess
			Win32File pipe
			Win32File pipe_2nd
			HANDLE hjob
			HANDLE hProcess
			int pid,tid
			int auto_terminate
			auto exit_code()
				val=0
				succ=GetExitCodeProcess(hProcess,&val)
				if !succ:
					return -1//STILL_ACTIVE
				else
					return val
			auto isRunning()
				return exit_code()==STILL_ACTIVE
			auto Wait(int t)
				return WaitForSingleObject(hProcess,t)!=WAIT_TIMEOUT
			auto WaitForever()
				return WaitForSingleObject(hProcess,INFINITE)!=WAIT_TIMEOUT
			auto Terminate()
				if hjob:
					return TerminateJobObject(hjob,1)
				else
					return TerminateProcess(hProcess,1)
			//int CtrlBreak()
			//	return GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT,.pid)
			auto __done__()
				if auto_terminate&&isRunning():
					Terminate()
				if hjob:
					CloseHandle(hjob)
					hjob=NULL
				if hProcess:
					CloseHandle(hProcess)
					hProcess=NULL
		//auto OpenProcess(int id)
		//	hproc=OpenProcess(PROCESS_ALL_ACCESS,0,id)
		//	if !hproc:return NULL
		//	return new CProcess(){hProcess:hproc,pid:id}
		//>begin_private
		auto __dup_handle(HANDLE a)
			pipe2=NULL
			ret=DuplicateHandle(GetCurrentProcess(),
				a,
				GetCurrentProcess(),
				&pipe2,
				0,
				1,
				DUPLICATE_SAME_ACCESS)
			if !ret:
				return NULL
			else
				return pipe2
		//>begin_private
		__idpipe=0
		//>end_private
		auto CreatePipe()
			/*HANDLE a,b
			CreatePipe(&a,&b,NULL,0)*/
			__idpipe++
			name=detail.toNativeString("\\\\.\\Pipe\\AnonymousPipe."+\
				string(GetCurrentProcessId())+"."+string(__idpipe));
			a=CreateNamedPipeW(name,
				PIPE_ACCESS_INBOUND,
				PIPE_TYPE_BYTE | PIPE_WAIT,
				1,4096,4096,0,
				NULL);
			if !a:return Win32File[].NULL
			b=CreateFileW(
				name,GENERIC_WRITE,
				0,NULL,OPEN_EXISTING,
				FILE_ATTRIBUTE_NORMAL,NULL);
			//gcKeepHere(name)
			if b==INVALID_HANDLE_VALUE:
				CloseHandle(a)
			//a is read, b is write
			if a:fa=new Win32File(a);else fa=Win32File.NULL
			if b:fb=new Win32File(b);else fb=Win32File.NULL
			return [fa,fb]
		auto _RunPiped(const IS_PIPED,string cmd,string path,int show,string mode)
			sinfo=__C(__pointer,"@decl:STARTUPINFOW @1={0}")
			__C(int,"((STARTUPINFOW*)@1)->cb=sizeof(STARTUPINFOW)",sinfo)
			__C(int,"((STARTUPINFOW*)@1)->dwFlags=@2",sinfo,STARTF_USESHOWWINDOW|STARTF_USESTDHANDLES)
			GetStartupInfoW(sinfo)
			__C(int,"((STARTUPINFOW*)@1)->dwFlags=@2",sinfo,STARTF_USESHOWWINDOW|STARTF_USESTDHANDLES)
			__C(int,"((STARTUPINFOW*)@1)->wShowWindow=@2",sinfo,show?SW_SHOWNORMAL:SW_HIDE)
			flags=0
			new_job=0
			inherit_handles=0
			if IS_PIPED:
				bind_pipe_input=0
				bind_pipe_error=0
				bind_pipe_output=0
			foreach smode in mode.Tokenize(string(","))
				ssmode=smode
				if ssmode=="new_job":
					new_job=1
				else if ssmode=="suspended":
					flags|=CREATE_SUSPENDED
				else if ssmode=="force_off_feedback":
					__C(int,"((STARTUPINFOW*)@1)->dwFlags|=@2",sinfo,STARTF_FORCEOFFFEEDBACK)
				else if ssmode=="inherit_handles":
					inherit_handles=1
				if !IS_PIPED:
					if ssmode=="new_console":
						flags|=CREATE_NEW_CONSOLE
				else
					if ssmode=="input":
						bind_pipe_input=1
					else if ssmode=="output":
						bind_pipe_output=1
					else if ssmode=="error":
						bind_pipe_error=1
				//gcKeepHere(smode)
			if !IS_PIPED:
				if inherit_handles:
					flags|=CREATE_NEW_PROCESS_GROUP
					__C(int,"((STARTUPINFOW*)@1)->hStdInput=@2",sinfo,__dup_handle(__C(__pointer,"((STARTUPINFOW*)@1)->hStdInput",sinfo)))
					__C(int,"((STARTUPINFOW*)@1)->hStdOutput=@2",sinfo,__dup_handle(__C(__pointer,"((STARTUPINFOW*)@1)->hStdOutput",sinfo)))
					__C(int,"((STARTUPINFOW*)@1)->hStdError=@2",sinfo,__dup_handle(__C(__pointer,"((STARTUPINFOW*)@1)->hStdError",sinfo)))
				else
					__C(int,"((STARTUPINFOW*)@1)->dwFlags&=@2",sinfo,~STARTF_USESTDHANDLES)
			else
				flags|=CREATE_NEW_PROCESS_GROUP
				//setup the pipe
				pipes=CreatePipe()
				isout=!bind_pipe_input
				pipe2=__dup_handle(pipes[isout].hf)
				if !pipe2:return CProcess.NULL
				pipe_out=Win32File.NULL
				hpipe_out=NULL
				if bind_pipe_input:
					__C(int,"((STARTUPINFOW*)@1)->hStdInput=@2",sinfo,pipe2)
					if bind_pipe_error||bind_pipe_output:
						pipes_out=CreatePipe()
						hpipe_out=__dup_handle(pipes_out[1].hf)
						pipes_out[1].Close()
						if bind_pipe_error:
							__C(int,"((STARTUPINFOW*)@1)->hStdError=@2",sinfo,hpipe_out)
						if bind_pipe_output:
							__C(int,"((STARTUPINFOW*)@1)->hStdOutput=@2",sinfo,hpipe_out)
						pipe_out=pipes_out[0]
					else
						__C(int,"((STARTUPINFOW*)@1)->hStdError=@2",sinfo,__dup_handle(GetStdHandle(STD_OUTPUT_HANDLE)))
						__C(int,"((STARTUPINFOW*)@1)->hStdOutput=@2",sinfo,__dup_handle(GetStdHandle(STD_ERROR_HANDLE)))
				else
					__C(int,"((STARTUPINFOW*)@1)->hStdInput=@2",sinfo,__dup_handle(GetStdHandle(STD_INPUT_HANDLE)))
					if bind_pipe_error:
						__C(int,"((STARTUPINFOW*)@1)->hStdError=@2",sinfo,pipe2)
					if bind_pipe_output:
						__C(int,"((STARTUPINFOW*)@1)->hStdOutput=@2",sinfo,pipe2)
				pipes[isout].Close()
			//call the process
			if path:
				pathu=detail.toNativeString(path)
			pinfo=__C(__pointer,"@decl:PROCESS_INFORMATION @1={0}")
			if new_job:
				flags|=CREATE_SUSPENDED|CREATE_BREAKAWAY_FROM_JOB
			cmdu=detail.toNativeString(cmd)
			ret=CreateProcessW(NULL,cmdu,NULL,NULL,IS_PIPED||inherit_handles,flags,NULL,pathu?__pointer(pathu.d):NULL,sinfo,pinfo)
			if ret&&new_job:
				hjob=CreateJobObjectW(NULL,NULL)
				AssignProcessToJobObject(hjob,__C(__pointer,"((PROCESS_INFORMATION*)@1)->hProcess",pinfo))
				ResumeThread(__C(__pointer,"((PROCESS_INFORMATION*)@1)->hThread",pinfo))
			//gcKeepHere(cmdu)
			//gcKeepHere(pathu)
			CloseHandle(__C(__pointer,"((PROCESS_INFORMATION*)@1)->hThread",pinfo))
			if !IS_PIPED:
				if !ret:return CProcess.NULL
				return new CProcess(){
					hjob:hjob,
					pipe:Win32File.NULL,
					hProcess:__C(__pointer,"((PROCESS_INFORMATION*)@1)->hProcess",pinfo),
					pid:__C(int,"((PROCESS_INFORMATION*)@1)->dwProcessId",pinfo),
					tid:__C(int,"((PROCESS_INFORMATION*)@1)->dwThreadId",pinfo),
				}
			else
				CloseHandle(pipe2)
				if hpipe_out:CloseHandle(hpipe_out)
				if !ret:return CProcess.NULL
				//Console.Writeln(pipes[!isout],' ',pipe_out)
				return new CProcess(){
					hjob:hjob,
					pipe:pipes[!isout],
					pipe_2nd:pipe_out?pipe_out:Win32File.NULL,
					hProcess:__C(__pointer,"((PROCESS_INFORMATION*)@1)->hProcess",pinfo),
					pid:__C(int,"((PROCESS_INFORMATION*)@1)->dwProcessId",pinfo),
					tid:__C(int,"((PROCESS_INFORMATION*)@1)->dwThreadId",pinfo),
				}
		auto _make_commandline(string[] shell_args)
			auto genString(string s0)
				s=new string
				foreach ch0 in s0
					ch=int(u8(ch0))
					if ch>=0:
						if ch=='"':
							s.push('\\')
							s.push('"')
						else if ch>=32&&ch<127:
							s.push(char(ch))
				return s
			//properly quote the args
			n=shell_args.n
			scmd=new string
			for i=0:n-1
				s_args_i=shell_args[i]
				if Platform.IS_WINDOWS:
					if !i:s_args_i=s_args_i.Replace(["/","\\"])
				if s_args_i.IndexOf(' ')>=0:
					s_args_i="\""+genString(s_args_i)+"\""
				if i:scmd.push(' ')
				scmd.push(s_args_i)
			return scmd
		//>end_private
		auto Run(string[] cmd,string path,int show,string mode)
			return _RunPiped(0,_make_commandline(cmd),path,show,mode)
		auto RunPiped(string[] cmd,string path,int show,string mode)
			return _RunPiped(1,_make_commandline(cmd),path,show,mode)
	else
		//unix version using pipe(), popen is not general enough and calls shell
		class CUnixFile
			hf=-1
			auto __done__()
				Close()
			auto Read(iptr n)
				a=new char[n]
				ret=read(hf,a.d,a.n)
				if ret<0L:ret=0L
				a.resize(ret)
				return a
			auto Write(char[] a)
				if hf<0:return 0
				ret=write(hf,a.d,a.n)
				if ret<0L:ret=0L
				return iptr(ret)
			auto WouldBlock()
				if hf<0:return 0
				return !osal_PollPipe(hf)
			auto Flush()
				return 1
			auto Close()
				if hf<0:return 0
				close(hf)
				hf=-1
				return 1
			inline __init__(int fd)
				hf=fd
		class CProcess
			CUnixFile pipe
			CUnixFile pipe_2nd
			int pid
			int auto_terminate
			auto exit_code()
				val=osal_GetExitCodeProcess(pid)
				return val
			auto isRunning()
				return exit_code()==-1
			auto Terminate()
				return osal_TerminateProcess(pid,1)
			//int CtrlBreak()
			//	return GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT,.pid)
			auto __done__()
				if auto_terminate&&isRunning():
					Terminate()
		auto _RunPiped(const IS_PIPED,string[] args,string path,string mode)
			pipe_flags=0
			foreach smode in mode.Tokenize(string(","))
				ssmode=smode
				if IS_PIPED:
					if ssmode=="input":
						pipe_flags|=1
					else if ssmode=="output":
						pipe_flags|=2
					else if ssmode=="error":
						pipe_flags|=4
				//gcKeepHere(smode)
			zargv=new iptr[args.n+1]
			pool=new string
			foreach s,I in args
				zargv[I]=pool.n
				pool.push(s)
				pool.push(i8(0))
			zargv[args.n]=pool.n
			pool.push(i8(0))
			for i=0:zargv.n-1
				zargv[i]+=pool.d
			ret=new int[3]
			scwd=IO.CurrentDirectory()
			IO.SetCurrentDirectory(path)
			succ=osal_CreateProcess(ret, __pointer(zargv.d),pipe_flags);
			IO.SetCurrentDirectory(scwd)
			if !succ:
				pret=CProcess.NULL
			else
				if !IS_PIPED:
					pret=new CProcess(){
						pid:ret[0],
					}
				else
					pret=new CProcess(){
						pid:ret[0],
						pipe:ret[2]<0?CUnixFile.NULL:new CUnixFile(ret[2]),
						pipe_2nd:ret[1]<0?CUnixFile.NULL:new CUnixFile(ret[1]),
					}
			return pret
		auto Run(string[] cmd,string path,int show,string mode)
			return _RunPiped(0,cmd,path,mode)
		auto RunPiped(string[] cmd,string path,int show,string mode)
			return _RunPiped(1,cmd,path,mode)
		
//////////
