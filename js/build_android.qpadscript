function onlydir(sdir,serr)
	files=ls(sdir)
	if !len(files):
		Write("error: can't find "+serr,'\n')
		exit(1)
	else
		ret=NormalizeFileName(files[0])
		//Write(serr,"=",ret,'\n')
	return ret

ANDROID=[]
ANDROID.Detect=function()
	ANDROID.ndk=onlydir(root+"/osslib/android/*-ndk-*","ndk")
	ANDROID.adt=onlydir(root+"/osslib/android/adt-*","adt")
	ANDROID.jdk=onlydir(root+"/osslib/android/jdk*","jdk")
	ANDROID.ant_home=onlydir(ANDROID.adt+"/eclipse/plugins/org.apache.ant*","ant")
	ANDROID.skeleton=onlydir(root+"/osslib/android/skeleton_project","skeleton_project")
	ANDROID.adt_platform=onlydir(ANDROID.adt+"/sdk/platforms/android-*","adt_platform")
	ANDROID.java_file_list=""
	ANDROID.c_file_list=""
	ANDROID.adb_exe=NormalizeFileName("%ProgramFiles%/Genymobile/Genymotion/tools/adb.exe")
	if !FileExists(ANDROID.adb_exe):
		ANDROID.adb_exe=NormalizeFileName(ANDROID.adt+"/sdk/platform-tools/adb.exe")

function CopyJavaFile(fn0)
	fn=NormalizeFileName(fn0)
	stext=ReadFile(fn)
	ppackage=IndexOf(stext,'package ')
	if ppackage<0:
		Write("error: I don't know what package the file '",fn,"' is supposed to be in")
		exit(1)
	psemic=IndexOf(mid(stext,ppackage),';')
	if psemic<0:
		Write("error: I don't recognize the package statement syntax in '",fn,"'")
		exit(1)
	package_url=mid(stext,ppackage+8,psemic-(ppackage+8))
	package_url=MatchRegex("[ \t]*(.*)[ \t]*",package_url)[1]
	package_url=StringReplace(package_url,[".","/"])
	spackage_dir=PRJ.work+"/src/"+package_url
	mkdir(spackage_dir)
	pslash=LastIndexOf(fn,'\\')
	star=spackage_dir+"/"+mid(fn,pslash+1)
	UpdateTo(star,fn)
	StringAppend(ANDROID.java_file_list,' "'+star+'"')

function CopyCFile(fn0)
	fn=NormalizeFileName(fn0)
	spackage_dir=PRJ.work+"/jni"
	mkdir(spackage_dir)
	pslash=LastIndexOf(fn,'\\')
	star=spackage_dir+"/"+mid(fn,pslash+1)
	UpdateTo(star,fn)
	StringAppend(ANDROID.c_file_list,' '+mid(fn,pslash+1))

function CopySkeletonFile(dir_tar,fn,dir_src0)
	dir_src=dir_src0
	if !dir_src:
		dir_src=dir_tar
	mkdir(PRJ.work+dir_tar)
	//Write(']]] ',PRJ.work+dir_tar+"/"+fn,' <- ',ANDROID.skeleton+dir_src+"/"+fn,'\n')
	UpdateTo(PRJ.work+dir_tar+"/"+fn,ANDROID.skeleton+dir_src+"/"+fn)

PRJ.Build=function(){
	if !(PRJ.target=="android"||PRJ.target=="android-release"):
		return 0
	ANDROID.Detect()
	ANDROID.is_release=PRJ.is_release
	//////////////////////////////////////
	//unzip pass: the skeleton project and the .so libs should work this way
	cd(PRJ.work)
	mkdir(PRJ.work+"/touch")
	for(i=0;i<len(libs);i++)
		fn=libs[i]
		pslash=LastIndexOf(fn,'\\')
		if MatchRegex(".*\\.zip",StringToLower(fn)):
			fntouch=PRJ.work+"/touch"+mid(fn,pslash)+"._touch"
			if IsNewer(fntouch,fn)
				//.zip in libs, just extract there
				RunProgram('"'+root+'/bin/7z.exe" x "'+fn+'"')
				CreateFile(fntouch,fn)
	//////////////////////////////////////
	//build the project in the work dir
	//icon: ic_launcher.png resampling
	if FileExists(PRJ.root+"/ic_launcher.png"):
		fntouch=PRJ.work+"/touch/ic_launcher.png._touch"
		if IsNewer(fntouch,PRJ.root+"/ic_launcher.png")
			//sexe_resample_png=NormalizeFileName(root+"/osslib/android/misc_tools/resample_png.exe")
			sexe_resample_png=NormalizeFileName(root+"/wrapper_java/resample_png/bin/win32-release/resample_png.exe")
			mkdir(PRJ.work+'/res/drawable-xxhdpi/')
			mkdir(PRJ.work+'/res/drawable-xhdpi/')
			mkdir(PRJ.work+'/res/drawable-hdpi/')
			mkdir(PRJ.work+'/res/drawable-mdpi/')
			RunProgram('"'+sexe_resample_png+'" "'+PRJ.root+'/ic_launcher.png" "'+PRJ.work+'/res/drawable-xxhdpi/ic_launcher.png" 144 144')
			RunProgram('"'+sexe_resample_png+'" "'+PRJ.root+'/ic_launcher.png" "'+PRJ.work+'/res/drawable-xhdpi/ic_launcher.png" 96 96')
			RunProgram('"'+sexe_resample_png+'" "'+PRJ.root+'/ic_launcher.png" "'+PRJ.work+'/res/drawable-hdpi/ic_launcher.png" 72 72')
			RunProgram('"'+sexe_resample_png+'" "'+PRJ.root+'/ic_launcher.png" "'+PRJ.work+'/res/drawable-mdpi/ic_launcher.png" 48 48')
			CreateFile(fntouch,PRJ.root+"/ic_launcher.png")
	//copy Java wrappers
	for(i=0;i<len(wrapper_files);i++)
		fn=wrapper_files[i]
		if MatchRegex(".*\\.java",StringToLower(fn)):
			//.java wrappers, copy and preserve path
			CopyJavaFile(fn)
	//when we have both jni and its java component, consider the java file as a lib
	for(i=0;i<len(libs);i++)
		fn=libs[i]
		if MatchRegex(".*\\.java",StringToLower(fn)):
			//.java wrappers, copy and preserve path
			CopyJavaFile(fn)
	//copy-in the main sources
	java_files=ls(PRJ.root+"/*.java")
	for(i=0;i<len(java_files);i++)
		CopyJavaFile(java_files[i])
	//copy C wrappers
	//copy in the wrappers
	for(i=0;i<len(wrapper_files);i++)
		fn=wrapper_files[i]
		if MatchRegex(".*\\.(c|cpp)",StringToLower(fn)):
			CopyCFile(fn)
	//copy in the libs
	for(i=0;i<len(libs);i++)
		fn=libs[i]
		if MatchRegex(".*\\.(c|cpp)",StringToLower(fn)):
			CopyCFile(fn)
	//copy-in the main sources
	//c_files=ls(PRJ.root+"/*.c")
	//for(i=0;i<len(c_files);i++)
	//	CopyCFile(c_files[i])
	//c_files=ls(PRJ.root+"/*.cpp")
	//for(i=0;i<len(c_files);i++)
	//	CopyCFile(c_files[i])
	//generate the SPAP c file
	mkdir(PRJ.work+"/jni")
	if PRJ.has_spap:
		SPAP.is_release=ANDROID.is_release
		SPAP.is_nonwin=1
		SPAP.is64=0
		SPAP.Detect()
		SPAP.options=" -g --C --outputC -Dnodllmess -Ddumb_temp_names -Dcpp.entrypoint=SDL_main -Denabled.platform.android=1 -Denabled.platform.unix=1 "
		//s_C_output=NormalizeFileName(PRJ.work+"/jni/spap_main.c")
		s_C_output=NormalizeFileName(PRJ.work+"/jni/spap_main_c.txt")
		//if IsNewer(s_C_output,PRJ.root+"/main.spap"):
		ret=SPAP.CompileMain(s_C_output)
		if !ret:
			Write('error> SPAP compiler failed\n')
			exit(1)
		CreateIfDifferent(PRJ.work+"/jni/spap_main.c",ReadFile(s_C_output))
	//SDL_android_main.c
	//System.loadLibrary("SDL2_image");
	mkdir(PRJ.work+"/src/org/libsdl/app")
	s_load_other_libs=""
	for(j=0;android_libname[j];j++)
		StringAppend(s_load_other_libs,'System.loadLibrary("'+android_libname[j]+'");')
	s_sdl_activity=StringReplace(ReadFile(ANDROID.skeleton+"/src/org/libsdl/app/SDLActivity.java"),['//System.loadLibrary("SDL2_image");',s_load_other_libs])
	CreateIfDifferent(PRJ.work+"/src/org/libsdl/app/SDLActivity.java",s_sdl_activity)
	//hack case for the idiotic javac
	mv(PRJ.work+"/src/org/libsdl/app/SDLActivity.java",PRJ.work+"/src/org/libsdl/app/_SDLActivity.java")
	mv(PRJ.work+"/src/org/libsdl/app/_SDLActivity.java",PRJ.work+"/src/org/libsdl/app/SDLActivity.java")
	if ANDROID.is_release:
		abis=['armeabi','armeabi-v7a','x86']
	else
		abis=['armeabi-v7a','x86']
	CopySkeletonFile("/jni/src/main/android","SDL_android_main.c")
	CopySkeletonFile("/jni/src","SDL_internal.h")
	for(i=0;i<len(abis);i++)
		abi_i=abis[i]
		CopySkeletonFile("/jni/"+abi_i,"libSDL2.so","/libs/"+abi_i)
	for(j=0;android_so[j];j++)
		for(i=0;i<len(abis);i++)
			abi_i=abis[i]
			ssrc=root+"/osslib/"+android_so[j]+"/"+abi_i
			star=PRJ.work+"/jni/"+abi_i+"/"
			files=ls(ssrc+"/*")
			if len(files)<1:
				Write("error> can't find '"+ssrc+"/*'\n")
				return
			for(k=0;k<len(files);k++)
				UpdateTo(star+GetMainFileNameWithDot(files[k]),files[k])
	mkdir(PRJ.work+"/trash")
	//generate ndk makefiles
	s_android_mk=""
	StringAppend(s_android_mk,'LOCAL_PATH := $(call my-dir)\n')
	//////////////////////////
	StringAppend(s_android_mk,'include $(CLEAR_VARS)\n')
	StringAppend(s_android_mk,'LOCAL_MODULE := SDL2\n')
	StringAppend(s_android_mk,'LOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/libSDL2.so\n')
	StringAppend(s_android_mk,'LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/../trash\n')
	StringAppend(s_android_mk,'include $(PREBUILT_SHARED_LIBRARY)\n')
	//////////////////////////
	//libs
	for(j=0;android_libname[j];j++)
		libname=android_libname[j]
		StringAppend(s_android_mk,'include $(CLEAR_VARS)\n')
		StringAppend(s_android_mk,'LOCAL_MODULE := '+libname+'\n')
		StringAppend(s_android_mk,'LOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib'+libname+'.so\n')
		StringAppend(s_android_mk,'LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/../trash\n')
		StringAppend(s_android_mk,'include $(PREBUILT_SHARED_LIBRARY)\n')
	//////////////////////////
	//StringAppend(s_android_mk,'SDL_PATH := ../SDL\n')
	StringAppend(s_android_mk,'include $(CLEAR_VARS)\n')
	StringAppend(s_android_mk,'LOCAL_MODULE := main\n')
	StringAppend(s_android_mk,'LOCAL_C_INCLUDES := "'+
		NormalizeFileName(ANDROID.skeleton+"/jni/include")+'" "'+
		NormalizeFileName(ANDROID.skeleton+"/jni/src")+'" "'+
		NormalizeFileName(root+"/osslib/include")+'"\n')
	//+'" "'+NormalizeFileName(root+"/wrapper")
	if PRJ.has_spap:
		if !ANDROID.is_release:
			StringAppend(s_android_mk,'FILE_LIST:=$(wildcard $(LOCAL_PATH)/__spaptemp__/*.c)\n')
			StringAppend(ANDROID.c_file_list,' $(FILE_LIST:$(LOCAL_PATH)/%=%)')
		StringAppend(ANDROID.c_file_list,' spap_main.c')
	StringAppend(s_android_mk,'LOCAL_SRC_FILES := src/main/android/SDL_android_main.c '+ANDROID.c_file_list)
	StringAppend(s_android_mk,'\n')
	if ANDROID.is_release:
		//StringAppend(s_android_mk,'ifeq ($(TARGET_ARCH_ABI), x86)\n\tLOCAL_CFLAGS += -O3 -ffast-math -mtune=atom -msse3 -mfpmath=sse\nelse\n\tLOCAL_CFLAGS += -O3 -ffast-math\nendif\n')
		StringAppend(s_android_mk,'\n\
			ifeq ($(TARGET_ARCH_ABI),x86)\n\
				LOCAL_CFLAGS += -ffast-math -mtune=atom -msse2 -mfpmath=sse -DHAS_SSE\n\
			else \n\
				ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)\n\
					LOCAL_CFLAGS += -ffast-math -mfloat-abi=softfp -mfpu=neon -DHAS_NEON\n\
				else\n\
					LOCAL_CFLAGS += -ffast-math\n\
				endif\n\
			endif\n')
		StringAppend(s_android_mk,'LOCAL_CFLAGS += -O3 -fno-var-tracking-assignments -ffast-math -DPM_RELEASE\n')
	else
		StringAppend(s_android_mk,'LOCAL_CFLAGS += -O0 -fno-var-tracking-assignments -ffast-math\n')
	StringAppend(s_android_mk,'LOCAL_SHARED_LIBRARIES := SDL2')
	for(j=0;android_libname[j];j++)
		StringAppend(s_android_mk,' '+android_libname[j])
	StringAppend(s_android_mk,'\n')
	StringAppend(s_android_mk,'LOCAL_LDLIBS := -lGLESv2 -llog')
	for(j=0;android_system_libname[j];j++)
		StringAppend(s_android_mk,' -l'+android_system_libname[j])
	StringAppend(s_android_mk,'\n')
	StringAppend(s_android_mk,'include $(BUILD_SHARED_LIBRARY)\n')
	CreateIfDifferent(PRJ.work+"/jni/Android.mk",s_android_mk)
	s_application_mk="APP_ABI :="
	for(i=0;i<len(abis);i++)
		abi_i=abis[i]
		StringAppend(s_application_mk," "+abi_i)
	StringAppend(s_application_mk,"\nAPP_PLATFORM := android-9\n")
	//if !ANDROID.is_release:
	//	StringAppend(s_application_mk,"APP_OPTIM := debug\n")
	CreateIfDifferent(PRJ.work+"/jni/Application.mk",s_application_mk)
	//fill strings.xml, AndroidManifest.xml, build.xml, add the main java file
	//////////
	splatform=GetMainFileName(ANDROID.adt_platform)	
	CreateIfDifferent(PRJ.work+"/ant.properties",'java.compilerargs=-J-Duser.language=en\nndk.dir='+StringReplace(NormalizeFileName(ANDROID.ndk),["\\","/"])+'\n')
	CreateIfDifferent(PRJ.work+"/project.properties",'target='+splatform+'\n')
	CreateIfDifferent(PRJ.work+"/local.properties",'sdk.dir='+StringReplace(NormalizeFileName(ANDROID.adt+'/sdk'),["\\","/"])+'\n')
	//////////
	xml=ParseXML(ReadFile(ANDROID.skeleton+"/AndroidManifest.xml"))
	//Write(XML_GetNodeChildren(xml),' ',XML_Child(xml,"manifest"),'\n')
	XML_SetNodeAttrValue(XML_Child(xml,"manifest"),"package","com.spap."+PRJ.name)
	xml_activity=XML_Child(XML_Child(XML_Child(xml,"manifest"),"application"),"activity")
	XML_SetNodeAttrValue(xml_activity,"android:name","spap_main")
	match=MatchRegex("android-(.+)",splatform)
	XML_SetNodeAttrValue(XML_Child(XML_Child(xml,"manifest"),"uses-sdk"),"android:targetSdkVersion",match[1])
	xml_manifest=XML_Child(xml,"manifest")
	for(i=0;android_permissions[i];i++)
		xml_perm=XML_AddChild(xml_manifest,"uses-permission")
		XML_SetNodeAttrValue(xml_perm,"android:name",android_permissions[i])
	for(i=0;android_features[i];i++)
		xml_perm=XML_AddChild(xml_manifest,"uses-feature")
		XML_SetNodeAttrValue(xml_perm,"android:name",android_features[i])
	for(i=0;android_optional_features[i];i++)
		xml_perm=XML_AddChild(xml_manifest,"uses-feature")
		XML_SetNodeAttrValue(xml_perm,"android:name",android_optional_features[i])
		XML_SetNodeAttrValue(xml_perm,"android:required","false")
	if VAR.android_force_orientation:
		XML_SetNodeAttrValue(xml_activity,"android:screenOrientation",VAR.android_force_orientation)
		XML_SetNodeAttrValue(xml_activity,"android:configChanges","keyboardHidden")
	CreateIfDifferent(PRJ.work+"/AndroidManifest.xml",XML_ToString(xml))
	//////////
	xml=ParseXML(ReadFile(ANDROID.skeleton+"/build.xml"))
	XML_SetNodeAttrValue(XML_Child(xml,"project"),"name",PRJ.name)
	CreateIfDifferent(PRJ.work+"/build.xml",XML_ToString(xml))
	//////////
	mkdir(PRJ.work+"/res/values")
	xml=ParseXML(ReadFile(ANDROID.skeleton+"/res/values/strings.xml"))
	XML_SetNodeAttrValue(XML_Child(XML_Child(xml,"resources"),"string"),"",PRJ.name)
	CreateIfDifferent(PRJ.work+"/res/values/strings.xml",XML_ToString(xml))
	//////////
	mkdir(PRJ.work+"/src/com/spap/"+PRJ.name)
	CreateIfDifferent(PRJ.work+"/src/com/spap/"+PRJ.name+"/spap_main.java","package com.spap."+PRJ.name+";\nimport org.libsdl.app.SDLActivity;\npublic class spap_main extends SDLActivity{}\n")
	////////////////////////////////////////////
	//ndk make step
	sexe_ndk_build=NormalizeFileName(ANDROID.ndk+'/ndk-build.cmd')
	ndk_build_cmdlink='"'+sexe_ndk_build+'"'
	cd(PRJ.work+"/jni")
	if VAR.verbose:
		Write(ndk_build_cmdlink,'\n')
	//ret=RunProgram(ndk_build_cmdlink+' NDK_TOOLCHAIN_VERSION=clang3.2')
	ret=RunProgram(ndk_build_cmdlink)
	cd(PRJ.work)
	if ret!=0:
		//NDK failed
		Write('error> NDK failed')
		return
	////////////////////////////////////////////
	//call ant
	s_ant_bat='@echo off\nset PATH=%PATH%;'+NormalizeFileName(ANDROID.jdk)+'\nset JAVA_HOME='+NormalizeFileName(ANDROID.jdk)+'\n'
	StringAppend(s_ant_bat,'call "'+NormalizeFileName(ANDROID.ant_home+"/bin/ant.bat")+'" ')
	if ANDROID.is_release:
		StringAppend(s_ant_bat,"release\n")
	else
		StringAppend(s_ant_bat,"debug\n")
	//todo: move out the final apk, genymotion integration in qpad or here...
	//todo: it's just the adb calls
	CreateFile(PRJ.work+"/build.bat",s_ant_bat)
	RunProgram('"%comspec%" /c "'+NormalizeFileName(PRJ.work+"/build.bat")+'"')
	if ANDROID.is_release:
		fnapk=PRJ.work+"/bin/"+PRJ.name+"-release-unsigned.apk"
	else
		fnapk=PRJ.work+"/bin/"+PRJ.name+"-debug.apk"
	if !FileExists(fnapk):
		Write('error> ant failed')
		return 0
	if ANDROID.is_release:
		//generate key
		fnkeytool=NormalizeFileName(ANDROID.jdk+"/bin/keytool.exe")
		fnks=NormalizeFileName(PRJ.root+"/spap_release.keystore")
		if !FileExists(fnks)
			scmd_keytool='"'+fnkeytool+'" -J-Duser.language=en -v -keysize 2048 -keystore "'+fnks+'" -alias spapkey -keyalg RSA -validity 10000 -genkey -storepass "spapkey" -keypass "spapkey" -dname "CN=SPAP Release,OU=SPAP,O=SPAP,L=SPAP,ST=SPAP,C=US"'
			RunProgram(scmd_keytool)
		fnjarsigner=NormalizeFileName(ANDROID.jdk+"/bin/jarsigner.exe")
		scmd_jarsigner='"'+fnjarsigner+'" -J-Duser.language=en -sigalg SHA1withRSA -digestalg SHA1 -keystore "'+fnks+'" -storepass "spapkey" -keypass "spapkey" "'+fnapk+'" spapkey'
		RunProgram(scmd_jarsigner)
		fnzipalign=NormalizeFileName(ANDROID.adt+"/sdk/tools/zipalign.exe")
		if FileExists(PRJ.bin+"/"+PRJ.name+".apk"):
			RunProgram('"%comspec%" /c del "'+NormalizeFileName(PRJ.bin+"/"+PRJ.name+'.apk')+'"')
		scmd_zipalign='"'+fnzipalign+'" 16 "'+fnapk+'" "'+PRJ.bin+"/"+PRJ.name+".apk"+'"'
		RunProgram(scmd_zipalign)
	else
		mv(fnapk,PRJ.bin+"/"+PRJ.name+".apk")
		fnapk=PRJ.bin+"/"+PRJ.name+".apk"
		if !FileExists(fnapk):
			Write("error> somehow, the package hasn't been built")
			return 0
	return 1
}

PRJ.Deploy=function(sdir_target){
	//todo
}

PRJ.Run=function(sdir_target){
	if !(PRJ.target=="android"||PRJ.target=="android-release"):
		return 0
	ANDROID.Detect()
	ANDROID.is_release=PRJ.is_release
	//coulddo: Genymotion settings automation
	//HKEY_CURRENT_USER\Software\Genymobile\VMTools-Abstract\configuration_android_sdk_path
	//HKEY_CURRENT_USER\Software\Genymobile\VMTools-Abstract\configuration_connect_adb
	fnapk=PRJ.bin+"/"+PRJ.name+".apk"
	if !FileExists(fnapk):
		Write("error> the package hasn't been built")
		return 0
	fntouch=PRJ.work+"/"+PRJ.name+"_apk_installed._touch"
	if IsNewer(fntouch,fnapk):
		CreateFile(fntouch,fnapk)
		//ret=RunProgram('"%comspec%" /c ""'+ANDROID.adb_exe+'" uninstall com.spap.'+PRJ.name+' "')
		//ret=RunProgram('"%comspec%" /c ""'+ANDROID.adb_exe+'" install -r "'+NormalizeFileName(fnapk)+'" "')
		ret=RunProgram('"%comspec%" /c ""'+ANDROID.adb_exe+'" uninstall com.spap.'+PRJ.name+' >nul 2>nul"')
		ret=RunProgram('"%comspec%" /c ""'+ANDROID.adb_exe+'" install -r "'+NormalizeFileName(fnapk)+'" >nul 2>nul"')
		if ret!=0:
			Write('error> failed to install the package')
			return 0
	RunProgram('"'+ANDROID.adb_exe+'" logcat -c')
	RunProgram('"'+ANDROID.adb_exe+'" shell am start -n com.spap.'+PRJ.name+'/com.spap.'+PRJ.name+'.spap_main')
	RunProgram('"'+ANDROID.adb_exe+'" logcat -v raw -s "STDOUT"')
}
