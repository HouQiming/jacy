import System.Console.*
import System.Algorithm.*
import System.Math.*
import Javascript.*

c_system=__c_function(int,"system","stdlib.h")
exit=__c_function(int,"exit","stdlib.h")

auto genString(string s0)
	s=new string
	hex="0123456789ABCDEF"
	foreach ch0 in s0
		ch=int(u8(ch0))
		if ch>=0:
			if ch=='"':
				s.push('\\')
				s.push('"')
			else if ch>=32&&ch<127:
				s.push(char(ch))
			else
				s.push('\\')
				s.push('x')
				s.push(hex[(ch>>4)&15])
				s.push(hex[ch&15])
	return s

stbi_load_from_memory=__c_function(__pointer,"stbi_load_from_memory","stb_image.h", "c_files","stb_image.c")
stbi_write_png_to_mem=__c_function(__pointer,"stbi_write_png_to_mem","stb_image_write.h", "c_files","stb_image_write.c")
stbi_free_image_write=__c_function(__pointer,"stbi_free_image_write","stb_image_write.h")

ALIGNMENT=32

crc32_tab=[
	0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
	0xe963a535, 0x9e6495a3,	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
	0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
	0xf3b97148, 0x84be41de,	0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
	0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,	0x14015c4f, 0x63066cd9,
	0xfa0f3d63, 0x8d080df5,	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
	0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,	0x35b5a8fa, 0x42b2986c,
	0xdbbbc9d6, 0xacbcf940,	0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
	0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
	0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
	0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,	0x76dc4190, 0x01db7106,
	0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
	0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
	0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
	0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
	0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
	0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
	0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
	0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
	0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
	0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
	0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
	0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
	0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
	0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
	0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
	0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
	0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
	0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
	0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
	0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
	0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
	0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
	0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
	0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
	0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
	0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
	0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
	0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
	0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]

auto crc32(string buf)
	crc=0
	crc = crc ^ -1;
	foreach c in buf
		crc = crc32_tab[(crc ^ int(u8(c))) & 0xFF] ^ int(u32(crc) >> 8);
	return crc ^ -1;

auto add_raw_zip(JSContext JS)
	args_1=JS.Param(0).as(string)
	spattern=JS.Param(1).as(string)
	if !args_1:return JS.ReturnError("need a zip file name")
	if !spattern:return JS.ReturnError("need a to-add pattern")
	fzip=System.IO.OpenFile(args_1,System.IO.OPEN_READ|System.IO.OPEN_WRITE)
	if !fzip:return JS.ReturnError("failed to open the zip file")
	s_central=new string
	///////////////////////////////////
	//parsing the existing zip and copy the central directory
	///////////////////////////////////
	ReadTyped=inline(T,n){
		auto a=sio.Read(sizeof(T)*n)
		if a.n!=sizeof(T)*n:
			return new T[n]
		else
			return a.ConvertToAsBinary(T)
	}
	MAX_COMMENT=65535
	fzip.SeekFromEnd(0L)
	szzip=fzip.Position()
	if szzip<22:
		return JS.ReturnError("zip file too small")
	sio=fzip
	ptail=-1L
	for j=0:MAX_COMMENT
		if szzip<22+j:break
		sio.Seek(szzip-22-j)
		if sio.Read(4)=="PK\005\006":
			ptail=szzip-22-j
			break
	if ptail<0L:
		return JS.ReturnError("bad zip tail")
	sio.Seek(ptail+10)
	nfiles=iptr(ReadTyped(u16,1)[0])
	sio.Seek(ptail+16)
	ofs=iptr(ReadTyped(u32,1)[0])
	if uptr(ofs)>=uptr(szzip):
		return JS.ReturnError("bad central directory offset")
	//central directory
	sio.Seek(ofs)
	//Writeln(nfiles,' files ')
	for i=0:nfiles-1
		pos0=sio.Position()
		if uptr(pos0+46L)>=uptr(szzip):
			return JS.ReturnError("bad central directory entry")
		sio.Seek(pos0+28L)
		nmk=ReadTyped(u16,3)
		szcrap=iptr(nmk[0])+iptr(nmk[1])+iptr(nmk[2])
		//Writeln(i,' ',pos0,' ',s_central.n,' ',szcrap,' ',nmk)
		sio.Seek(pos0+42L)
		if uptr(pos0+46L+szcrap)>=uptr(szzip):
			return JS.ReturnError("bad central directory entry")
		sio.Seek(pos0)
		s_central.push(sio.Read(46L+szcrap))
		//sio.Seek(pos0+46L+szcrap)
	//append the content
	fzip.SeekFromEnd(0L)
	//spath=System.Env.NormalizeFileName(".")
	foreach fn0 in System.IO.EnumFiles(spattern+"/*",System.IO.ENUM_FILE|System.IO.ENUM_RECURSIVE)
		//fn=System.Env.NormalizeFileName(fn0)
		fn=fn0
		fdata=System.IO.ReadAll(fn)
		crc=crc32(fdata)
		s_local=new("PK\x03\x04\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
		//CRC-32, size, size, namelen, paddinglen, name, padding
		//fn_zip=fn[spath.n+1:].ToLower()
		fn_zip="assets"+fn[spattern.n:].ToLower()
		s_local.push([crc,int(fdata.n),int(fdata.n),int(fn_zip.n)].ConvertToAsBinary(char))
		ppaddings=s_local.n-2
		s_local.push(fn_zip)
		lg_padding=(-(fzip.Position()+s_local.n))&(ALIGNMENT-1)
		s_local[ppaddings]=lg_padding
		if lg_padding:
			s_local.resize(s_local.n+lg_padding)
		plocal=fzip.Position()
		fzip.Write(s_local)
		fzip.Write(fdata)
		//add its central directory
		s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
		s_central.push([crc,int(fdata.n),int(fdata.n),int(fn_zip.n),0,0].ConvertToAsBinary(char))
		s_central.push('\0')
		s_central.push('\0')
		s_central.push([int(plocal)].ConvertToAsBinary(char))
		s_central.push(fn_zip)
		nfiles++
		fdata.discard()
	//write the new directory
	p_central=fzip.Position()
	s_central.push("PK\x05\x06\x00\x00\x00\x00")
	s_central.push([int(nfiles)*0x00010001,int(s_central.n),int(p_central)].ConvertToAsBinary(char))
	s_central.push("\x00\x00")
	fzip.Write(s_central)
	return 0

auto resample(int[] img,int w0,int h0,int w,int h)
	w_invscale=float(w0)/float(w)
	h_invscale=float(h0)/float(h)
	img_out=new int[]
	for y=0:h-1
		y0=float(y)*h_invscale
		y1=float(y+1)*h_invscale
		for x=0:w-1
			x0=float(x)*w_invscale
			x1=float(x+1)*w_invscale
			C=float4(0.f,0.f,0.f,0.f)
			Atot=0.f
			for sy=int(floor(y0)):min(int(floor(y1-1.f/65536.f)),h0-1)
				hcell=(min(float(sy+1),y1)-max(float(sy),y0))
				abase=sy*w0
				for sx=int(floor(x0)):min(int(floor(x1-1.f/65536.f)),w0-1)
					wcell=(min(float(sx+1),x1)-max(float(sx),x0))
					A=wcell*hcell
					C4=img[abase+sx]
					for j in crange(4)
						C_xy_j=float((C4>>(j*8))&255)*(1.f/255.f)
						if j<3:
							C_xy_j=pow(C_xy_j,2.2f)
						C[j]+=A*C_xy_j
					Atot+=A
			C/=Atot
			C4=0
			for j in crange(4)
				if j<3:
					C_j=pow(C[j],1.f/2.2f)
				else
					C_j=C[j]
				C4|=max(min(int(C_j*255.f),255),0)<<(j*8)
			img_out.push(C4)
	return img_out

auto writeico(auto f,int[] img0,int w,int h)
	sz=w*h*4+max(w>>3,4)*h
	header=[0x28,w,h*2,0x200001,0,sz]
	f.Write(header.ConvertToAsBinary(char))
	f.Write("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	img=new int[w*h]
	for i=0:h-1
		for j=0:w-1
			aa=img0[i*w+j]
			img[(h-1-i)*w+j]=(aa&0xff00ff00)+((aa>>16)&0xff)+((aa&0xff)<<16)
	f.Write(img.ConvertToAsBinary(char))
	binmask=new int[]
	for i=0:h-1
		for j=0:32:w-1
			mk=0
			for k=0:min(31,int(w-1-j))
				mk|=1<<k
			binmask.push(mk)
	f.Write(binmask.ConvertToAsBinary(char))

stbi_zlib_compress=__c_function(__pointer,"stbi_zlib_compress","stb_image_write.h", "c_files","stb_image_write.c")
stbiw__crc32=__c_function(u32,"stbiw__crc32","stb_image_write.h", "c_files","stb_image_write.c")

auto zip(string s)
	out_len=0
	s_ret=stbi_zlib_compress(s,s.n,&out_len,8)
	if !s_ret:return string.NULL
	ret=new string
	ret.d=iptr(s_ret)
	ret.n=iptr(out_len)
	ret.sz=ret.n
	return ret[2:]//strip the header

//zfiles: an array of objects: name, data, enable_compression
auto jszip(JSContext JS)
	fn_archive=JS.Param(0).as(string)
	if !fn_archive:return JS.ReturnError("invalid file name")
	zfiles=JS.Param(1).as(JSObject)
	if !zfiles:return JS.ReturnError("invalid array")
	fzip=System.IO.CreateFile(fn_archive)
	sz_written=0L
	sz_data=0L
	inline writeZip(string s)
		sz_data+=s.n
		sz_written+=fzip.Write(s)
		if sz_written<sz_data:
			return 0
		else
			return 1
	s_central=new string
	nfiles=zfiles.length()
	for id_obj=0:nfiles-1
		file_i=zfiles[id_obj].as(JSObject)
		if !file_i:
			return JS.ReturnError(FormatAsText('error saving object ',id_obj))
		fn_zip=file_i["name"].as(string)
		s_save=file_i["data"].as(string)
		if !s_save:
			return JS.ReturnError(FormatAsText('error saving object ',id_obj>>1))
		sz_original=s_save.n
		//the compression doesn't work yet
		enable_compression=file_i["enable_compression"].or(1)
		crc=int(crc32(s_save))
		if enable_compression:
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
			fdata=zip(s_save)
		else
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
			fdata=s_save
		//CRC-32, size, size, namelen, paddinglen, name, padding
		s_local.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n)].ConvertToAsBinary(char))
		s_local.push(fn_zip)
		plocal=fzip.Position()
		if !writeZip(s_local):return JS.ReturnError("file write failed")
		if !writeZip(fdata):return JS.ReturnError("file write failed")
		//add its central directory
		if enable_compression:
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
		else
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
		s_central.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n),0,0].ConvertToAsBinary(char))
		s_central.push('\0')
		s_central.push('\0')
		s_central.push([int(plocal)].ConvertToAsBinary(char))
		s_central.push(fn_zip)
		fdata.discard()
	//write the new directory
	p_central=fzip.Position()
	s_central.push("PK\x05\x06\x00\x00\x00\x00")
	s_central.push([int(nfiles)*0x00010001,int(s_central.n),int(p_central)].ConvertToAsBinary(char))
	s_central.push("\x00\x00")
	if !writeZip(s_central):return JS.ReturnError("file write failed")
	return 0

(function(){
	JS=new JSContext
	args=GetCommandLine()
	if args.n<2:
		Writeln('usage: pmjs <action> <something.json>')
		return
	//////////////
	//setup the API and run the default script
	global=JS.GetGlobal()
	global["ReadFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		ret=System.IO.ReadAll(fn)
		if !ret:
			return 0
		else
			return JS.Return(ret)
	}
	global["CreateFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		data=JS.Param(1).or(new string)
		f=System.IO.CreateFile(fn)
		if f:
			lg=f.Write(data)
			f.Close()
			return JS.Return(lg)
		else
			return 0
	}
	global["FileExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.FileExists(fn))
	}
	global["DirExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.DirExists(fn))
	}
	global["IsNewerThan"]=function(JSContext JS){
		fn_new=JS.Param(0).or(new string)
		fn_old=JS.Param(1).or(new string)
		auto MyGetFileTime(string fname)
			foreach fn,fi in System.IO.EnumFiles(fname,0)
				return fi.latest_time()
			return 0LLu
		if !System.IO.FileExists(fn_new):return JS.Return(0)
		return JS.Return(i64(MyGetFileTime(fn_new)-MyGetFileTime(fn_old))>i64(0)||!System.IO.FileExists(fn_old))
	}
	global["find"]=function(JSContext JS){
		fn0=JS.Param(0).or("*")
		if Platform.IS_WINDOWS:
			fn0=fn0.Replace(["/","\\"])
		return JS.Return([fn.Replace(["\\","/"]) foreach fn in System.IO.EnumFiles(fn0,System.IO.ENUM_FILE|System.IO.ENUM_RECURSIVE)])
	}
	global["ls"]=function(JSContext JS){
		fn0=JS.Param(0).or("*")
		if Platform.IS_WINDOWS:
			fn0=fn0.Replace(["/","\\"])
		return JS.Return([fn.Replace(["\\","/"]) foreach fn in System.IO.EnumFiles(fn0,System.IO.ENUM_FILE|System.IO.ENUM_DIR)])
	}
	auto shellcmd(auto shell_args,int do_system)
		if !shell_args:
			return JS.ReturnError("invalid shell arguments - it must be an object")
		//properly quote the args
		n=shell_args.length()
		if !(n>0):
			return JS.ReturnError("invalid shell arguments - it must be an array object of positive length")
		scmd=new string
		for i=0:n-1
			s_args_i=shell_args[i].as(string)
			if Platform.IS_WINDOWS:
				if !i:s_args_i=s_args_i.Replace(["/","\\"])
			if s_args_i.IndexOf(' ')>=0:
				s_args_i="\""+genString(s_args_i)+"\""
			if i:scmd.push(' ')
			scmd.push(s_args_i)
		if do_system:
			scmd.push(char(0))
			return JS.Return(c_system(scmd))
		else
			return JS.Return(scmd)
	global["shell"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,1)
	}
	global["shellcmd"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,0)
	}
	global["ExpandEnvironmentStrings"]=function(JSContext JS){
		return JS.Return(System.Env.ExpandEnvironmentStrings(JS.Param(0).or("")))
	}
	//global["ChopLastDir"]=function(JSContext JS){
	//	sname=JS.Param(0).or("")
	//	pt=max(sname.LastIndexOf('/'),sname.LastIndexOf('\\'))
	//	if pt<0:
	//		return 0
	//	return JS.Return(sname[0:pt-1])
	//}
	g_c_id_allowed=[
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//0
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//1
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//2
		u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//3
		u8(0),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),//4
		u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(1),//5
		u8(0),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),//6
		u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1),u8(1), u8(1),u8(1),u8(1),u8(0),u8(0),u8(0),u8(0),u8(0),//7
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//8
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//9
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//10
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//11
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//12
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//13
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),//14
		u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0), u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0),u8(0)
	];
	global["SanitizeString"]=function(JSContext JS){
		s=JS.Param(0).or("")
		g_code_buffer=new string
		foreach ch,I in s
			if !g_c_id_allowed[int(u8(ch))]:
				g_code_buffer.push('_')
			else
				g_code_buffer.push(ch)
		return JS.Return(g_code_buffer)
	}
	global["ResampleImage"]=function(JSContext JS){
		fname=JS.Param(0).or("")
		fnout=JS.Param(1).or("")
		w_goal=JS.Param(2).or(0)
		h_goal=JS.Param(3).or(0)
		data=System.IO.ReadAll(fname)
		if !data:return 0
		w=0
		h=0
		comp=0
		surf=stbi_load_from_memory(__pointer(data.d),int(data.n),&w,&h,&comp,4)
		if !surf:return 0
		img=new int[]
		img.d=iptr(surf)
		img.n=iptr(w*h)
		img.sz=img.n
		w0=w
		h0=h
		f=System.IO.CreateFile(fnout)
		if !f:return 0
		if !w_goal:
			//ico
			//\x10\x10\x00\x00\x00\x00 \x00h\x04\x00\x006\x00\x00\x00  \x00\x00\x00\x00 \x00\xA8\x10\x00\x00\x9E\x04\x00\x0000\x00\x00\x00\x00 \x00\xA8%\x00\x00F\x15\x00\x00
			sizes=[16,20,32,48]
			ico_header=new("\x00\x00\x01\x00\x05\x00")
			ofsimg=6+sizes.n*16
			foreach sz in sizes
				ico_header.push(char(sz))
				ico_header.push(char(sz))
				ico_header.push('\x00\x00\x00\x00 \x00')
				szimg=40+(sz*sz+sz*((sz+31)>>5))*4
				ico_header.push([szimg,ofsimg].ConvertToAsBinary(char))
				ofsimg+=szimg
			f.Write(ico_header)
			foreach sz in sizes
				img_out=resample(img,w0,h0,sz,sz)
				writeico(f,img_out,sz,sz)
		else
			//just create a png
			w=w_goal
			h=h_goal
			img_out=resample(img,w0,h0,w,h)
			len=0
			spng=stbi_write_png_to_mem(img_out,w*4,w,h,4,&len)
			if !spng:return 0
			spng_str=__ptrToString(spng,len)
			f.Write(spng_str)
			stbi_free_image_write(spng)
		return JS.Return(1)
	}
	global["SHA1"]=function(JSContext JS){
		auto s=JS.Param(0).or("")
		auto lg=JS.Param(1).or(8)
		auto ret=SHA1Digest(s)
		if lg<0||lg>ret.n:
			return JS.ReturnError("invalid SHA1 length @1".Replace(["@1",string(lg)]))
		return JS.Return(ret[:lg-1])
	}
	global["cd"]=function(JSContext JS){
		auto s=JS.Param(0).or("")
		return JS.Return(System.IO.SetCurrentDirectory(s))
	}
	global["pwd"]=function(JSContext JS){
		return JS.Return(System.IO.CurrentDirectory())
	}
	//////////////
	global["ParseXML"]=function(JSContext JS){
		auto sraw=JS.Param(0).as(string)
		if !sraw:return 0
		if sraw.StartsWith('<?'):
			preal_start=sraw.IndexOf('?>')
			if preal_start>=0:
				sraw=sraw[preal_start+2:]
		return JS.Return(System.XML.Parse(sraw))
	}
	global["XML_ToString"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		if !ndxml:return 0
		return JS.Return('<?xml version="1.0" encoding="utf-8"?>\n'+ndxml.ToString())
	}
	global["XML_GetNodeName"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		if !ndxml:return 0
		return JS.Return(ndxml.name)
	}
	global["XML_GetNodeAttrValue"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		sattrname=JS.Param(1).as(string)
		if !ndxml||!sattrname:return 0
		return JS.Return(ndxml.Attr(sattrname,""))
	}
	global["XML_Child"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		sname=JS.Param(1).as(string)
		if !ndxml||!sname:return 0
		return JS.Return(ndxml.FirstChild(sname))
	}
	global["XML_SetNodeAttrValue"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		sattrname=JS.Param(1).as(string)
		svalue=JS.Param(2).as(string)
		if !ndxml||!sattrname||!svalue:return 0
		ndxml.Attr(sattrname)=svalue
		return 0
	}
	global["XML_AddChild"]=function(JSContext JS){
		ndxml=JS.Param(0).as(System.XML.Node)
		sndname=JS.Param(1).as(string)
		svalue=JS.Param(2).as(string)
		if !ndxml||!sndname:return 0
		ndnew=ndxml.Add(sndname)
		if svalue&&svalue.n:ndnew.Attr("")=svalue
		return JS.Return(ndnew)
	}
	//////////////
	global["debugEval"]=function(JSContext JS){
		scode=JS.Param(0).as(string)
		sfile=JS.Param(1).as(string)
		if !scode||!sfile:return 0
		return JS.Return(JS.debugEval(scode,sfile))
	}
	global["zip"]=jszip
	global["rawzip"]=add_raw_zip
	//////////////
	//default js
	global["g_action"]=args[1]
	global["g_json_file"]=(args.n<3?"":args[2])
	js_args=JS.NewArray()
	for i=2:args.n-1
		js_args[string(i-2)]=args[i]
	global["g_cli_args"]=js_args
	s_arch=Platform.ARCH
	global["g_current_arch"]=s_arch
	//if Platform.BUILD=="debug":
	//	if Platform.IS_UNIX:
	//		global["g_root"]="."
	//	else
	//		global["g_root"]="c:/tp/kara/pure"
	//else
	global["g_root"]=System.Env.GetExecutablePath()+"../.."
	exit(!JS.debugRunFile(global["g_root"].as(string)+"/js/main.js"))
})()
