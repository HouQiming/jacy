import System.Console.*
import System.Algorithm.*

auto makeCaseTable(int2[] src)
	s=new string
	cur_delta=0
	cur_chars=new int[]
	auto flush()
		if cur_chars.n:
			SWrite(s,cur_delta,' ',cur_chars,'\n')
	foreach pp in src
		delta=pp.y-pp.x
		if delta!=cur_delta:
			flush()
			cur_delta=delta
			cur_chars=new int[]
		cur_chars.push(pp.x)
	flush()
	return s
	
(function(){
	wanted=['Ll','Lu','Lt','Lo','Lm','Nd','Pc']
	is_wanted=new int[string]
	foreach s in wanted
		is_wanted[s]=1
	//////
	r0=-2;r1=-2
	//sret=new int[]
	coderet=new string
	auto flush(int r0,int r1)
		//sret.push(r0)
		//sret.push(r1)
		coderet.push(string(r0))
		coderet.push(',')
		coderet.push(string(r1+1))
		coderet.push(',')
	auto goodChar(int ch)
		if r0<0:r0=ch
		r1=ch
	auto badChar(int ch)
		if r1>=0:
			flush(r0,r1)
		r0=-1;r1=-1
	//////
	arabic_table=new int[0x100*4]
	for i=0:arabic_table.n-1
		arabic_table[i]=0x600+(i>>2)
	opening_brackets=new int[]
	closing_brackets=new int[]
	generic_symbols=new int[]
	no_breaks=new int[]
	spaces=new int[]
	to_upper=new int2[]
	to_lower=new int2[]
	sdata=System.IO.ReadAll("c:\\tp\\osslib\\unicodedata.txt")
	c0=0
	s_ligatures=new("[")
	foreach sline,I in sdata.Tokenize("\r\n")
		swords=new string[]
		foreach sword in sline.TokenizeEx(";",1)
			swords.push(sword)
		ch=swords[0].asHex(int)
		s_lower_case=swords[swords.n-2]
		s_upper_case=swords[swords.n-1]
		if s_lower_case.n:
			to_lower.push(int2(ch,s_lower_case.asHex(int)))
		if s_upper_case.n:
			to_upper.push(int2(ch,s_upper_case.asHex(int)))
		sdesc=swords[1]
		scategory=swords[2]
		if sdesc.EndsWith("First>"):
			c0=ch
		else if sdesc.EndsWith("Last>"):
			if is_wanted[scategory]:
				//for chi=c0:ch
				goodChar(c0)
				goodChar(ch)
			else
				badChar(c0)
				badChar(ch)
		else
			if scategory=="Ps"||scategory=="Pi":
				opening_brackets.push(ch)
			if scategory=="Pe"||scategory=="Pf":
				closing_brackets.push(ch)
			if scategory=="Po":
				generic_symbols.push(ch)
			if is_wanted[scategory]:
				goodChar(ch)
			else
				badChar(ch)
		/////////
		if sdesc.IndexOf('LIGATURE')>=0&&swords[5].StartsWith("<compat>"):
			SWrite(s_ligatures,'"',Unicode32ToUtf8([scode.asHex(int) foreach scode,I in swords[5].Tokenize(" ") if I>1]),'","',Unicode32ToUtf8([ch]),'", ')
		if swords[5].StartsWith("<noBreak>"):
			no_breaks.push(ch)
		if scategory=="Zs"||ch==9:
			spaces.push(ch)
		if swords[5].StartsWith("<isolated>"):
			if [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J].n==1:
				foreach c0 in [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J]
					arabic_table[c0*4+0]=ch
		else if swords[5].StartsWith("<initial>"):
			if [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J].n==1:
				foreach c0 in [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J]
					arabic_table[c0*4+1]=ch
		else if swords[5].StartsWith("<final>"):
			if [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J].n==1:
				foreach c0 in [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J]
					arabic_table[c0*4+2]=ch
		else if swords[5].StartsWith("<medial>"):
			if [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J].n==1:
				foreach c0 in [s.asHex(int)-0x600 foreach s,J in swords[5].Tokenize(" ") if J]
					arabic_table[c0*4+3]=ch
	s_ligatures.push(']')
	flush(r0,r1)
	//System.IO.CreateFile("test/wordchars.txt").Write(Unicode32ToUtf8(sret))
	//Writeln(to_lower)
	//Writeln(to_upper)
	System.IO.CreateFile("to_upper.txt").Write(makeCaseTable(to_upper))
	System.IO.CreateFile("to_lower.txt").Write(makeCaseTable(to_lower))
	System.IO.CreateFile("wordchars.txt").Write(coderet)
	System.IO.CreateFile("misc_chars.txt").Write(FormatAsText(opening_brackets,'\n',closing_brackets,'\n',no_breaks,'\n',spaces,'\n',arabic_table,'n',generic_symbols))
	System.IO.CreateFile("ligatures.txt").Write(s_ligatures)
	//charflag.bin
	FLAG_HYPHENATE_AFTER=0x40000000//can also appear in the intermediate "words"
	FLAG_BAD_BOL=0x20000000
	FLAG_BAD_EOL=0x02000000
	FLAG_IS_SPACE=0x80000000
	FLAG_CAN_PAD_AFTER=0x10000000
	FLAG_CAN_PAD_AFTER_WEAK=0x08000000
	FLAG_RUBBER=0x04000000
	ret=new int[65536]
	foreach ch in spaces
		ret[ch]=FLAG_BAD_BOL
	foreach ch in generic_symbols
		if ch<65536:
			ret[ch]=FLAG_BAD_BOL
	//opening parenthesis / quotation
	foreach ch in opening_brackets
		ret[ch]=FLAG_BAD_EOL
	//closing parenthesis / quotation
	foreach ch in closing_brackets
		ret[ch]=FLAG_BAD_BOL
	//non-breaking stuff and non-paired quotation masks
	foreach ch in no_breaks
		//just bad as both BOL and EOL
		ret[ch]=(FLAG_BAD_BOL|FLAG_BAD_EOL)
	//spaces
	foreach ch in spaces
		ret[ch]=FLAG_IS_SPACE|FLAG_CAN_PAD_AFTER
	System.IO.CreateFile("charflag.bin").Write(ret[0:].ConvertToAsBinary(char))
})()
