printf=__c_function(int,"printf","stdio.h")
powf=__c_function(float,"powf","math.h")
_deriv_operator+ =__function(__ccnv_inline,auto,"a",auto,"b",auto,"fid",auto,"name",{return=_deriv(a,fid,name)+_deriv(b,fid,name)})
_deriv_operator- =__function(__ccnv_inline,auto,"a",auto,"b",auto,"fid",auto,"name",{return=_deriv(a,fid,name)-_deriv(b,fid,name)})
_deriv_operator* =__function(__ccnv_inline,auto,"a",auto,"b",auto,"fid",auto,"name",{return=a*_deriv(b,fid,name)+b*_deriv(a,fid,name)})
_deriv_operator/ =__function(__ccnv_inline,auto,"a",auto,"b",auto,"fid",auto,"name",{return=(a*_deriv(b,fid,name)/b-_deriv(a,fid,name))/b})
_deriv_powf =__function(__ccnv_inline,auto,"a",auto,"c",auto,"fid",auto,"name",{return=c*powf(a,c-1.f)*_deriv(a,fid,name)})
_declare_deriv(operator+,_deriv_operator+)
_declare_deriv(operator-,_deriv_operator-)
_declare_deriv(operator*,_deriv_operator*,3)
_declare_deriv(operator/,_deriv_operator/,3)
_declare_deriv(powf,_deriv_powf,1)
//ftest=__function(0,float,"x",{return=powf(x,3.f)+x*x+2*x+1})
ftest=__function(0,float,"x",{return=(2*x+1)*(3*powf(x,3.f)-x)})
//ftest=__function(0,float,"x",{return=2*x+1})
ftest_deriv=symbolicDerivative(ftest,"x")
//cns_1_plus_1=1+1
//printf("%f %f\n",ftest(1.f),ftest_derif(1.f))
f=ftest_deriv(1.f)
df=__get_extra_return(ftest_deriv,0)
printf("f(x)=%f, f'(x)=%f\n",f,df)
